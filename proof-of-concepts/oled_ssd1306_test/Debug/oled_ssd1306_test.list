
oled_ssd1306_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a34  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056b0  08006c14  08006c14  00016c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2c4  0800c2c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2c4  0800c2c4  0001c2c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2cc  0800c2cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2cc  0800c2cc  0001c2cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2d0  0800c2d0  0001c2d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  0800c2d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000065c  2000005c  0800c330  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  0800c330  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001118e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002654  00000000  00000000  0003125d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e00  00000000  00000000  000338b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000acc  00000000  00000000  000346b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025764  00000000  00000000  00035184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e30  00000000  00000000  0005a8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ed567  00000000  00000000  0006d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004144  00000000  00000000  0015ac80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  0015edc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006bfc 	.word	0x08006bfc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08006bfc 	.word	0x08006bfc

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2iz>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d215      	bcs.n	8000a92 <__aeabi_d2iz+0x36>
 8000a66:	d511      	bpl.n	8000a8c <__aeabi_d2iz+0x30>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d912      	bls.n	8000a98 <__aeabi_d2iz+0x3c>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	bf18      	it	ne
 8000a88:	4240      	negne	r0, r0
 8000a8a:	4770      	bx	lr
 8000a8c:	f04f 0000 	mov.w	r0, #0
 8000a90:	4770      	bx	lr
 8000a92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a96:	d105      	bne.n	8000aa4 <__aeabi_d2iz+0x48>
 8000a98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	bf08      	it	eq
 8000a9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dac:	f000 facd 	bl	800134a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000db0:	f000 f809 	bl	8000dc6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db4:	f000 f8dc 	bl	8000f70 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000db8:	f000 f890 	bl	8000edc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000dbc:	f000 f84e 	bl	8000e5c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //ssd1306_Init();
  ssd1306_TestAll();
 8000dc0:	f004 fc88 	bl	80056d4 <ssd1306_TestAll>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <main+0x1c>

08000dc6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b094      	sub	sp, #80	; 0x50
 8000dca:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dcc:	f107 0318 	add.w	r3, r7, #24
 8000dd0:	2238      	movs	r2, #56	; 0x38
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f004 fd29 	bl	800582c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f001 fac3 	bl	8002374 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dee:	2302      	movs	r3, #2
 8000df0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df8:	2340      	movs	r3, #64	; 0x40
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e00:	2302      	movs	r3, #2
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e04:	2304      	movs	r3, #4
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e08:	2355      	movs	r3, #85	; 0x55
 8000e0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e14:	2302      	movs	r3, #2
 8000e16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f001 fb5d 	bl	80024dc <HAL_RCC_OscConfig>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e28:	f000 f910 	bl	800104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e30:	2303      	movs	r3, #3
 8000e32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2104      	movs	r1, #4
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fe5b 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e50:	f000 f8fc 	bl	800104c <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	; 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e60:	4b1b      	ldr	r3, [pc, #108]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <MX_I2C1_Init+0x78>)
 8000e64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000e66:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e68:	4a1b      	ldr	r2, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x7c>)
 8000e6a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e6c:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e96:	480e      	ldr	r0, [pc, #56]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000e98:	f000 fdb7 	bl	8001a0a <HAL_I2C_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ea2:	f000 f8d3 	bl	800104c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4809      	ldr	r0, [pc, #36]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000eaa:	f001 f9cb 	bl	8002244 <HAL_I2CEx_ConfigAnalogFilter>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000eb4:	f000 f8ca 	bl	800104c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_I2C1_Init+0x74>)
 8000ebc:	f001 fa0d 	bl	80022da <HAL_I2CEx_ConfigDigitalFilter>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ec6:	f000 f8c1 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000078 	.word	0x20000078
 8000ed4:	40005400 	.word	0x40005400
 8000ed8:	30a0a7fb 	.word	0x30a0a7fb

08000edc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ee0:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000ee2:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_LPUART1_UART_Init+0x90>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000ee6:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000ee8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000eec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f02:	220c      	movs	r2, #12
 8000f04:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f0c:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000f1e:	4812      	ldr	r0, [pc, #72]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f20:	f002 fa58 	bl	80033d4 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f2a:	f000 f88f 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f32:	f002 fff3 	bl	8003f1c <HAL_UARTEx_SetTxFifoThreshold>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000f3c:	f000 f886 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4809      	ldr	r0, [pc, #36]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f44:	f003 f828 	bl	8003f98 <HAL_UARTEx_SetRxFifoThreshold>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f4e:	f000 f87d 	bl	800104c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000f52:	4805      	ldr	r0, [pc, #20]	; (8000f68 <MX_LPUART1_UART_Init+0x8c>)
 8000f54:	f002 ffa9 	bl	8003eaa <HAL_UARTEx_DisableFifoMode>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000f5e:	f000 f875 	bl	800104c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000cc 	.word	0x200000cc
 8000f6c:	40008000 	.word	0x40008000

08000f70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
 8000f84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000f8c:	f043 0304 	orr.w	r3, r3, #4
 8000f90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9e:	4b29      	ldr	r3, [pc, #164]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a28      	ldr	r2, [pc, #160]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b26      	ldr	r3, [pc, #152]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	4b23      	ldr	r3, [pc, #140]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fba:	4a22      	ldr	r2, [pc, #136]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc2:	4b20      	ldr	r3, [pc, #128]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fda:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <MX_GPIO_Init+0xd4>)
 8000fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	607b      	str	r3, [r7, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2120      	movs	r1, #32
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f000 fcd1 	bl	8001994 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	480f      	ldr	r0, [pc, #60]	; (8001048 <MX_GPIO_Init+0xd8>)
 800100a:	f000 fb41 	bl	8001690 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800100e:	2320      	movs	r3, #32
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001012:	2301      	movs	r3, #1
 8001014:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f000 fb32 	bl	8001690 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f000 faf8 	bl	8001626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001036:	2028      	movs	r0, #40	; 0x28
 8001038:	f000 fb0f 	bl	800165a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	; 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000
 8001048:	48000800 	.word	0x48000800

0800104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001050:	b672      	cpsid	i
}
 8001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001054:	e7fe      	b.n	8001054 <Error_Handler+0x8>
	...

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <HAL_MspInit+0x44>)
 8001060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <HAL_MspInit+0x44>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6613      	str	r3, [r2, #96]	; 0x60
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_MspInit+0x44>)
 800106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_MspInit+0x44>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_MspInit+0x44>)
 800107c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001080:	6593      	str	r3, [r2, #88]	; 0x58
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_MspInit+0x44>)
 8001084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108a:	603b      	str	r3, [r7, #0]
 800108c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800108e:	f001 fa15 	bl	80024bc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09e      	sub	sp, #120	; 0x78
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010b8:	f107 0310 	add.w	r3, r7, #16
 80010bc:	2254      	movs	r2, #84	; 0x54
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f004 fbb3 	bl	800582c <memset>
  if(hi2c->Instance==I2C1)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <HAL_I2C_MspInit+0xa8>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d136      	bne.n	800113e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80010d0:	2340      	movs	r3, #64	; 0x40
 80010d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010d8:	f107 0310 	add.w	r3, r7, #16
 80010dc:	4618      	mov	r0, r3
 80010de:	f001 ff2b 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80010e8:	f7ff ffb0 	bl	800104c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_I2C_MspInit+0xac>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_I2C_MspInit+0xac>)
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_I2C_MspInit+0xac>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0302 	and.w	r3, r3, #2
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001104:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110a:	2312      	movs	r3, #18
 800110c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001116:	2304      	movs	r3, #4
 8001118:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800111e:	4619      	mov	r1, r3
 8001120:	480b      	ldr	r0, [pc, #44]	; (8001150 <HAL_I2C_MspInit+0xb0>)
 8001122:	f000 fab5 	bl	8001690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_I2C_MspInit+0xac>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_I2C_MspInit+0xac>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	6593      	str	r3, [r2, #88]	; 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_I2C_MspInit+0xac>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3778      	adds	r7, #120	; 0x78
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40005400 	.word	0x40005400
 800114c:	40021000 	.word	0x40021000
 8001150:	48000400 	.word	0x48000400

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09e      	sub	sp, #120	; 0x78
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	2254      	movs	r2, #84	; 0x54
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f004 fb59 	bl	800582c <memset>
  if(huart->Instance==LPUART1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <HAL_UART_MspInit+0xa8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d136      	bne.n	80011f2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001184:	2320      	movs	r3, #32
 8001186:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118c:	f107 0310 	add.w	r3, r7, #16
 8001190:	4618      	mov	r0, r3
 8001192:	f001 fed1 	bl	8002f38 <HAL_RCCEx_PeriphCLKConfig>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800119c:	f7ff ff56 	bl	800104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	4a16      	ldr	r2, [pc, #88]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b0:	f003 0301 	and.w	r3, r3, #1
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011bc:	4a10      	ldr	r2, [pc, #64]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_UART_MspInit+0xac>)
 80011c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011d0:	230c      	movs	r3, #12
 80011d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011e0:	230c      	movs	r3, #12
 80011e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ee:	f000 fa4f 	bl	8001690 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80011f2:	bf00      	nop
 80011f4:	3778      	adds	r7, #120	; 0x78
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40008000 	.word	0x40008000
 8001200:	40021000 	.word	0x40021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	e7fe      	b.n	8001208 <NMI_Handler+0x4>

0800120a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120e:	e7fe      	b.n	800120e <HardFault_Handler+0x4>

08001210 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <MemManage_Handler+0x4>

08001216 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <BusFault_Handler+0x4>

0800121c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <UsageFault_Handler+0x4>

08001222 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f8ce 	bl	80013f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800125c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001260:	f000 fbb0 	bl	80019c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f004 fad0 	bl	800583c <__errno>
 800129c:	4603      	mov	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	4a05      	ldr	r2, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3718      	adds	r7, #24
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20020000 	.word	0x20020000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	20000160 	.word	0x20000160
 80012d0:	200006b8 	.word	0x200006b8

080012d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <SystemInit+0x20>)
 80012da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012de:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <SystemInit+0x20>)
 80012e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012f8:	480d      	ldr	r0, [pc, #52]	; (8001330 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012fc:	f7ff ffea 	bl	80012d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <LoopForever+0x6>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	; (8001338 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	; (800133c <LoopForever+0xe>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	; (8001344 <LoopForever+0x16>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f004 fa8f 	bl	8005848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800132a:	f7ff fd3d 	bl	8000da8 <main>

0800132e <LoopForever>:

LoopForever:
    b LoopForever
 800132e:	e7fe      	b.n	800132e <LoopForever>
  ldr   r0, =_estack
 8001330:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800133c:	0800c2d4 	.word	0x0800c2d4
  ldr r2, =_sbss
 8001340:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001344:	200006b8 	.word	0x200006b8

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>

0800134a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f000 f95b 	bl	8001610 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800135a:	2000      	movs	r0, #0
 800135c:	f000 f80e 	bl	800137c <HAL_InitTick>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	e001      	b.n	8001370 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800136c:	f7ff fe74 	bl	8001058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001370:	79fb      	ldrb	r3, [r7, #7]

}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001384:	2300      	movs	r3, #0
 8001386:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_InitTick+0x68>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d022      	beq.n	80013d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_InitTick+0x6c>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_InitTick+0x68>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800139c:	fbb1 f3f3 	udiv	r3, r1, r3
 80013a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 f966 	bl	8001676 <HAL_SYSTICK_Config>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10f      	bne.n	80013d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d809      	bhi.n	80013ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013b6:	2200      	movs	r2, #0
 80013b8:	6879      	ldr	r1, [r7, #4]
 80013ba:	f04f 30ff 	mov.w	r0, #4294967295
 80013be:	f000 f932 	bl	8001626 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <HAL_InitTick+0x70>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e007      	b.n	80013da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	73fb      	strb	r3, [r7, #15]
 80013ce:	e004      	b.n	80013da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	73fb      	strb	r3, [r7, #15]
 80013d4:	e001      	b.n	80013da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000008 	.word	0x20000008
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004

080013f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f4:	4b05      	ldr	r3, [pc, #20]	; (800140c <HAL_IncTick+0x1c>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x20>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a03      	ldr	r2, [pc, #12]	; (800140c <HAL_IncTick+0x1c>)
 8001400:	6013      	str	r3, [r2, #0]
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	20000164 	.word	0x20000164
 8001410:	20000008 	.word	0x20000008

08001414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return uwTick;
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_GetTick+0x14>)
 800141a:	681b      	ldr	r3, [r3, #0]
}
 800141c:	4618      	mov	r0, r3
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	20000164 	.word	0x20000164

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff ffee 	bl	8001414 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d004      	beq.n	8001450 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_Delay+0x40>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	4413      	add	r3, r2
 800144e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001450:	bf00      	nop
 8001452:	f7ff ffdf 	bl	8001414 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	68fa      	ldr	r2, [r7, #12]
 800145e:	429a      	cmp	r2, r3
 8001460:	d8f7      	bhi.n	8001452 <HAL_Delay+0x26>
  {
  }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	3710      	adds	r7, #16
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000008 	.word	0x20000008

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0c      	ldr	r3, [pc, #48]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800149c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014a2:	4a04      	ldr	r2, [pc, #16]	; (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	60d3      	str	r3, [r2, #12]
}
 80014a8:	bf00      	nop
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db0b      	blt.n	80014fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	f003 021f 	and.w	r2, r3, #31
 80014ec:	4907      	ldr	r1, [pc, #28]	; (800150c <__NVIC_EnableIRQ+0x38>)
 80014ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f2:	095b      	lsrs	r3, r3, #5
 80014f4:	2001      	movs	r0, #1
 80014f6:	fa00 f202 	lsl.w	r2, r0, r2
 80014fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000e100 	.word	0xe000e100

08001510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800151c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db0a      	blt.n	800153a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b2da      	uxtb	r2, r3
 8001528:	490c      	ldr	r1, [pc, #48]	; (800155c <__NVIC_SetPriority+0x4c>)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	0112      	lsls	r2, r2, #4
 8001530:	b2d2      	uxtb	r2, r2
 8001532:	440b      	add	r3, r1
 8001534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001538:	e00a      	b.n	8001550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	b2da      	uxtb	r2, r3
 800153e:	4908      	ldr	r1, [pc, #32]	; (8001560 <__NVIC_SetPriority+0x50>)
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	3b04      	subs	r3, #4
 8001548:	0112      	lsls	r2, r2, #4
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	440b      	add	r3, r1
 800154e:	761a      	strb	r2, [r3, #24]
}
 8001550:	bf00      	nop
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000e100 	.word	0xe000e100
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	; 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f003 0307 	and.w	r3, r3, #7
 8001576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f1c3 0307 	rsb	r3, r3, #7
 800157e:	2b04      	cmp	r3, #4
 8001580:	bf28      	it	cs
 8001582:	2304      	movcs	r3, #4
 8001584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3304      	adds	r3, #4
 800158a:	2b06      	cmp	r3, #6
 800158c:	d902      	bls.n	8001594 <NVIC_EncodePriority+0x30>
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3b03      	subs	r3, #3
 8001592:	e000      	b.n	8001596 <NVIC_EncodePriority+0x32>
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001598:	f04f 32ff 	mov.w	r2, #4294967295
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	43da      	mvns	r2, r3
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	401a      	ands	r2, r3
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa01 f303 	lsl.w	r3, r1, r3
 80015b6:	43d9      	mvns	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	4313      	orrs	r3, r2
         );
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3724      	adds	r7, #36	; 0x24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015dc:	d301      	bcc.n	80015e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015de:	2301      	movs	r3, #1
 80015e0:	e00f      	b.n	8001602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e2:	4a0a      	ldr	r2, [pc, #40]	; (800160c <SysTick_Config+0x40>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ea:	210f      	movs	r1, #15
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f7ff ff8e 	bl	8001510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f4:	4b05      	ldr	r3, [pc, #20]	; (800160c <SysTick_Config+0x40>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	4b04      	ldr	r3, [pc, #16]	; (800160c <SysTick_Config+0x40>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	e000e010 	.word	0xe000e010

08001610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ff29 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b086      	sub	sp, #24
 800162a:	af00      	add	r7, sp, #0
 800162c:	4603      	mov	r3, r0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001634:	f7ff ff40 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 8001638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff ff90 	bl	8001564 <NVIC_EncodePriority>
 8001644:	4602      	mov	r2, r0
 8001646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff ff5f 	bl	8001510 <__NVIC_SetPriority>
}
 8001652:	bf00      	nop
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	4603      	mov	r3, r0
 8001662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff33 	bl	80014d4 <__NVIC_EnableIRQ>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffa4 	bl	80015cc <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b087      	sub	sp, #28
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800169e:	e15a      	b.n	8001956 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	2101      	movs	r1, #1
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ac:	4013      	ands	r3, r2
 80016ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 814c 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d005      	beq.n	80016d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d130      	bne.n	8001732 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4013      	ands	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	693a      	ldr	r2, [r7, #16]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001706:	2201      	movs	r2, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43db      	mvns	r3, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4013      	ands	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	091b      	lsrs	r3, r3, #4
 800171c:	f003 0201 	and.w	r2, r3, #1
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4313      	orrs	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b03      	cmp	r3, #3
 800173c:	d017      	beq.n	800176e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	2203      	movs	r2, #3
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d123      	bne.n	80017c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	08da      	lsrs	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3208      	adds	r2, #8
 8001782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	220f      	movs	r2, #15
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	4013      	ands	r3, r2
 800179c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691a      	ldr	r2, [r3, #16]
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	f003 0307 	and.w	r3, r3, #7
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	08da      	lsrs	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3208      	adds	r2, #8
 80017bc:	6939      	ldr	r1, [r7, #16]
 80017be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4013      	ands	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0203 	and.w	r2, r3, #3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f000 80a6 	beq.w	8001950 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001804:	4b5b      	ldr	r3, [pc, #364]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6613      	str	r3, [r2, #96]	; 0x60
 8001810:	4b58      	ldr	r3, [pc, #352]	; (8001974 <HAL_GPIO_Init+0x2e4>)
 8001812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181c:	4a56      	ldr	r2, [pc, #344]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	220f      	movs	r2, #15
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001846:	d01f      	beq.n	8001888 <HAL_GPIO_Init+0x1f8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a4c      	ldr	r2, [pc, #304]	; (800197c <HAL_GPIO_Init+0x2ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d019      	beq.n	8001884 <HAL_GPIO_Init+0x1f4>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <HAL_GPIO_Init+0x2f0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d013      	beq.n	8001880 <HAL_GPIO_Init+0x1f0>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a4a      	ldr	r2, [pc, #296]	; (8001984 <HAL_GPIO_Init+0x2f4>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d00d      	beq.n	800187c <HAL_GPIO_Init+0x1ec>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	4a49      	ldr	r2, [pc, #292]	; (8001988 <HAL_GPIO_Init+0x2f8>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d007      	beq.n	8001878 <HAL_GPIO_Init+0x1e8>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a48      	ldr	r2, [pc, #288]	; (800198c <HAL_GPIO_Init+0x2fc>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d101      	bne.n	8001874 <HAL_GPIO_Init+0x1e4>
 8001870:	2305      	movs	r3, #5
 8001872:	e00a      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001874:	2306      	movs	r3, #6
 8001876:	e008      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001878:	2304      	movs	r3, #4
 800187a:	e006      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 800187c:	2303      	movs	r3, #3
 800187e:	e004      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001880:	2302      	movs	r3, #2
 8001882:	e002      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001884:	2301      	movs	r3, #1
 8001886:	e000      	b.n	800188a <HAL_GPIO_Init+0x1fa>
 8001888:	2300      	movs	r3, #0
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	f002 0203 	and.w	r2, r2, #3
 8001890:	0092      	lsls	r2, r2, #2
 8001892:	4093      	lsls	r3, r2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4313      	orrs	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <HAL_GPIO_Init+0x2e8>)
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	089b      	lsrs	r3, r3, #2
 80018a0:	3302      	adds	r3, #2
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018a8:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	4013      	ands	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018cc:	4a30      	ldr	r2, [pc, #192]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018d2:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	43db      	mvns	r3, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4013      	ands	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_GPIO_Init+0x300>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001920:	4a1b      	ldr	r2, [pc, #108]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001926:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_GPIO_Init+0x300>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43db      	mvns	r3, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_GPIO_Init+0x300>)
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa22 f303 	lsr.w	r3, r2, r3
 8001960:	2b00      	cmp	r3, #0
 8001962:	f47f ae9d 	bne.w	80016a0 <HAL_GPIO_Init+0x10>
  }
}
 8001966:	bf00      	nop
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000
 8001978:	40010000 	.word	0x40010000
 800197c:	48000400 	.word	0x48000400
 8001980:	48000800 	.word	0x48000800
 8001984:	48000c00 	.word	0x48000c00
 8001988:	48001000 	.word	0x48001000
 800198c:	48001400 	.word	0x48001400
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	460b      	mov	r3, r1
 800199e:	807b      	strh	r3, [r7, #2]
 80019a0:	4613      	mov	r3, r2
 80019a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a4:	787b      	ldrb	r3, [r7, #1]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019aa:	887a      	ldrh	r2, [r7, #2]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019b2:	887a      	ldrh	r2, [r7, #2]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019da:	4a05      	ldr	r2, [pc, #20]	; (80019f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019dc:	88fb      	ldrh	r3, [r7, #6]
 80019de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 f806 	bl	80019f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80019e8:	bf00      	nop
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e08d      	b.n	8001b38 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d106      	bne.n	8001a36 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff fb35 	bl	80010a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2224      	movs	r2, #36	; 0x24
 8001a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f022 0201 	bic.w	r2, r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a5a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689a      	ldr	r2, [r3, #8]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	e006      	b.n	8001a92 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a90:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d108      	bne.n	8001aac <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	e007      	b.n	8001abc <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685a      	ldr	r2, [r3, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6812      	ldr	r2, [r2, #0]
 8001ac6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ade:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69d9      	ldr	r1, [r3, #28]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a1a      	ldr	r2, [r3, #32]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0201 	orr.w	r2, r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3708      	adds	r7, #8
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b088      	sub	sp, #32
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	4608      	mov	r0, r1
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4603      	mov	r3, r0
 8001b50:	817b      	strh	r3, [r7, #10]
 8001b52:	460b      	mov	r3, r1
 8001b54:	813b      	strh	r3, [r7, #8]
 8001b56:	4613      	mov	r3, r2
 8001b58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b20      	cmp	r3, #32
 8001b64:	f040 80f9 	bne.w	8001d5a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b68:	6a3b      	ldr	r3, [r7, #32]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d002      	beq.n	8001b74 <HAL_I2C_Mem_Write+0x34>
 8001b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e0ed      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_I2C_Mem_Write+0x4e>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e0e6      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b96:	f7ff fc3d 	bl	8001414 <HAL_GetTick>
 8001b9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2319      	movs	r3, #25
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f955 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e0d1      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2221      	movs	r2, #33	; 0x21
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2240      	movs	r2, #64	; 0x40
 8001bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6a3a      	ldr	r2, [r7, #32]
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001be0:	88f8      	ldrh	r0, [r7, #6]
 8001be2:	893a      	ldrh	r2, [r7, #8]
 8001be4:	8979      	ldrh	r1, [r7, #10]
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	f000 f8b9 	bl	8001d68 <I2C_RequestMemoryWrite>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e0a9      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	2bff      	cmp	r3, #255	; 0xff
 8001c10:	d90e      	bls.n	8001c30 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	8979      	ldrh	r1, [r7, #10]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f000 fad9 	bl	80021e0 <I2C_TransferConfig>
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	b2da      	uxtb	r2, r3
 8001c40:	8979      	ldrh	r1, [r7, #10]
 8001c42:	2300      	movs	r3, #0
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f000 fac8 	bl	80021e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f958 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e07b      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	781a      	ldrb	r2, [r3, #0]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c98:	b29b      	uxth	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d034      	beq.n	8001d08 <HAL_I2C_Mem_Write+0x1c8>
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d130      	bne.n	8001d08 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cac:	2200      	movs	r2, #0
 8001cae:	2180      	movs	r1, #128	; 0x80
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f8d1 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e04d      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	2bff      	cmp	r3, #255	; 0xff
 8001cc8:	d90e      	bls.n	8001ce8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	22ff      	movs	r2, #255	; 0xff
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	8979      	ldrh	r1, [r7, #10]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fa7d 	bl	80021e0 <I2C_TransferConfig>
 8001ce6:	e00f      	b.n	8001d08 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fa6c 	bl	80021e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d19e      	bne.n	8001c50 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f000 f93e 	bl	8001f98 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e01a      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6859      	ldr	r1, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <HAL_I2C_Mem_Write+0x224>)
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	fe00e800 	.word	0xfe00e800

08001d68 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	4608      	mov	r0, r1
 8001d72:	4611      	mov	r1, r2
 8001d74:	461a      	mov	r2, r3
 8001d76:	4603      	mov	r3, r0
 8001d78:	817b      	strh	r3, [r7, #10]
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	813b      	strh	r3, [r7, #8]
 8001d7e:	4613      	mov	r3, r2
 8001d80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	8979      	ldrh	r1, [r7, #10]
 8001d88:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <I2C_RequestMemoryWrite+0xa4>)
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f000 fa25 	bl	80021e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	69b9      	ldr	r1, [r7, #24]
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 f8b5 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e02c      	b.n	8001e04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d105      	bne.n	8001dbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db0:	893b      	ldrh	r3, [r7, #8]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	629a      	str	r2, [r3, #40]	; 0x28
 8001dba:	e015      	b.n	8001de8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dbc:	893b      	ldrh	r3, [r7, #8]
 8001dbe:	0a1b      	lsrs	r3, r3, #8
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f89b 	bl	8001f0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e012      	b.n	8001e04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dde:	893b      	ldrh	r3, [r7, #8]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2200      	movs	r2, #0
 8001df0:	2180      	movs	r1, #128	; 0x80
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f000 f830 	bl	8001e58 <I2C_WaitOnFlagUntilTimeout>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	80002000 	.word	0x80002000

08001e10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d103      	bne.n	8001e2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d007      	beq.n	8001e4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	699a      	ldr	r2, [r3, #24]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	619a      	str	r2, [r3, #24]
  }
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e68:	e03b      	b.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f8d6 	bl	8002020 <I2C_IsErrorOccurred>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e041      	b.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e84:	d02d      	beq.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e86:	f7ff fac5 	bl	8001414 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d302      	bcc.n	8001e9c <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d122      	bne.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	699a      	ldr	r2, [r3, #24]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	68ba      	ldr	r2, [r7, #8]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	bf0c      	ite	eq
 8001eac:	2301      	moveq	r3, #1
 8001eae:	2300      	movne	r3, #0
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d113      	bne.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	f043 0220 	orr.w	r2, r3, #32
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e00f      	b.n	8001f02 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	4013      	ands	r3, r2
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	bf0c      	ite	eq
 8001ef2:	2301      	moveq	r3, #1
 8001ef4:	2300      	movne	r3, #0
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d0b4      	beq.n	8001e6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b084      	sub	sp, #16
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f16:	e033      	b.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f000 f87f 	bl	8002020 <I2C_IsErrorOccurred>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e031      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f32:	d025      	beq.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f34:	f7ff fa6e 	bl	8001414 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d302      	bcc.n	8001f4a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d11a      	bne.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d013      	beq.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5c:	f043 0220 	orr.w	r2, r3, #32
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2220      	movs	r2, #32
 8001f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e007      	b.n	8001f90 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d1c4      	bne.n	8001f18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fa4:	e02f      	b.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 f838 	bl	8002020 <I2C_IsErrorOccurred>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e02d      	b.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fba:	f7ff fa2b 	bl	8001414 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11a      	bne.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0320 	and.w	r3, r3, #32
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d013      	beq.n	8002006 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f043 0220 	orr.w	r2, r3, #32
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e007      	b.n	8002016 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b20      	cmp	r3, #32
 8002012:	d1c8      	bne.n	8001fa6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3710      	adds	r7, #16
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800203a:	2300      	movs	r3, #0
 800203c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	f003 0310 	and.w	r3, r3, #16
 8002048:	2b00      	cmp	r3, #0
 800204a:	d068      	beq.n	800211e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2210      	movs	r2, #16
 8002052:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002054:	e049      	b.n	80020ea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205c:	d045      	beq.n	80020ea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f9d9 	bl	8001414 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_IsErrorOccurred+0x54>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d13a      	bne.n	80020ea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002086:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002092:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002096:	d121      	bne.n	80020dc <I2C_IsErrorOccurred+0xbc>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800209e:	d01d      	beq.n	80020dc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	d01a      	beq.n	80020dc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020b4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80020b6:	f7ff f9ad 	bl	8001414 <HAL_GetTick>
 80020ba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020bc:	e00e      	b.n	80020dc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80020be:	f7ff f9a9 	bl	8001414 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b19      	cmp	r3, #25
 80020ca:	d907      	bls.n	80020dc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80020da:	e006      	b.n	80020ea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	f003 0320 	and.w	r3, r3, #32
 80020e6:	2b20      	cmp	r3, #32
 80020e8:	d1e9      	bne.n	80020be <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b20      	cmp	r3, #32
 80020f6:	d003      	beq.n	8002100 <I2C_IsErrorOccurred+0xe0>
 80020f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0aa      	beq.n	8002056 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002104:	2b00      	cmp	r3, #0
 8002106:	d103      	bne.n	8002110 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2220      	movs	r2, #32
 800210e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	f043 0304 	orr.w	r3, r3, #4
 8002116:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002140:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00b      	beq.n	800216a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002152:	6a3b      	ldr	r3, [r7, #32]
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002162:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	f043 0302 	orr.w	r3, r3, #2
 800217a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002184:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800218c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01c      	beq.n	80021ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fe3b 	bl	8001e10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	4b0d      	ldr	r3, [pc, #52]	; (80021dc <I2C_IsErrorOccurred+0x1bc>)
 80021a6:	400b      	ands	r3, r1
 80021a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2220      	movs	r2, #32
 80021ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80021ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3728      	adds	r7, #40	; 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	fe00e800 	.word	0xfe00e800

080021e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	817b      	strh	r3, [r7, #10]
 80021ee:	4613      	mov	r3, r2
 80021f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021f2:	897b      	ldrh	r3, [r7, #10]
 80021f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021f8:	7a7b      	ldrb	r3, [r7, #9]
 80021fa:	041b      	lsls	r3, r3, #16
 80021fc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002200:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002206:	6a3b      	ldr	r3, [r7, #32]
 8002208:	4313      	orrs	r3, r2
 800220a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	685a      	ldr	r2, [r3, #4]
 8002216:	6a3b      	ldr	r3, [r7, #32]
 8002218:	0d5b      	lsrs	r3, r3, #21
 800221a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <I2C_TransferConfig+0x60>)
 8002220:	430b      	orrs	r3, r1
 8002222:	43db      	mvns	r3, r3
 8002224:	ea02 0103 	and.w	r1, r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002232:	bf00      	nop
 8002234:	371c      	adds	r7, #28
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	03ff63ff 	.word	0x03ff63ff

08002244 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b20      	cmp	r3, #32
 8002258:	d138      	bne.n	80022cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002260:	2b01      	cmp	r3, #1
 8002262:	d101      	bne.n	8002268 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002264:	2302      	movs	r3, #2
 8002266:	e032      	b.n	80022ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2224      	movs	r2, #36	; 0x24
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f022 0201 	bic.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002296:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	683a      	ldr	r2, [r7, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022da:	b480      	push	{r7}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
 80022e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d139      	bne.n	8002364 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e033      	b.n	8002366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2224      	movs	r2, #36	; 0x24
 800230a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0201 	bic.w	r2, r2, #1
 800231c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800232c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	021b      	lsls	r3, r3, #8
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	4313      	orrs	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68fa      	ldr	r2, [r7, #12]
 800233e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	e000      	b.n	8002366 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002364:	2302      	movs	r3, #2
  }
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d141      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d131      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2232      	movs	r2, #50	; 0x32
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	e002      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d102      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f2      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d158      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e057      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	4a2d      	ldr	r2, [pc, #180]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002404:	e04d      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d141      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d131      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2232      	movs	r2, #50	; 0x32
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002452:	e002      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d102      	bne.n	800246e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d112      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e011      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002490:	e007      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40007000 	.word	0x40007000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	431bde83 	.word	0x431bde83

080024bc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024c0:	4b05      	ldr	r3, [pc, #20]	; (80024d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	6093      	str	r3, [r2, #8]
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40007000 	.word	0x40007000

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b088      	sub	sp, #32
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e2fe      	b.n	8002aec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fa:	4b97      	ldr	r3, [pc, #604]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002504:	4b94      	ldr	r3, [pc, #592]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	f003 0303 	and.w	r3, r3, #3
 800250c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d102      	bne.n	800251a <HAL_RCC_OscConfig+0x3e>
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d002      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b08      	cmp	r3, #8
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b8d      	ldr	r3, [pc, #564]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e2d9      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b85      	ldr	r3, [pc, #532]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a84      	ldr	r2, [pc, #528]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a7b      	ldr	r2, [pc, #492]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b78      	ldr	r3, [pc, #480]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a77      	ldr	r2, [pc, #476]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b75      	ldr	r3, [pc, #468]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a74      	ldr	r2, [pc, #464]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	f7fe ff3e 	bl	8001414 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7fe ff3a 	bl	8001414 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e29e      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025bc:	f7fe ff2a 	bl	8001414 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe ff26 	bl	8001414 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e28a      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	4b60      	ldr	r3, [pc, #384]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d075      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b59      	ldr	r3, [pc, #356]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b56      	ldr	r3, [pc, #344]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b0c      	cmp	r3, #12
 800260a:	d102      	bne.n	8002612 <HAL_RCC_OscConfig+0x136>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d002      	beq.n	8002618 <HAL_RCC_OscConfig+0x13c>
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b04      	cmp	r3, #4
 8002616:	d11f      	bne.n	8002658 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b4f      	ldr	r3, [pc, #316]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002620:	2b00      	cmp	r3, #0
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x154>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e25d      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b49      	ldr	r3, [pc, #292]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	061b      	lsls	r3, r3, #24
 800263e:	4946      	ldr	r1, [pc, #280]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002640:	4313      	orrs	r3, r2
 8002642:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002644:	4b45      	ldr	r3, [pc, #276]	; (800275c <HAL_RCC_OscConfig+0x280>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fe fe97 	bl	800137c <HAL_InitTick>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d043      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e249      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d023      	beq.n	80026a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002660:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a3c      	ldr	r2, [pc, #240]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800266a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fed2 	bl	8001414 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002674:	f7fe fece 	bl	8001414 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e232      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002686:	4b34      	ldr	r3, [pc, #208]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002692:	4b31      	ldr	r3, [pc, #196]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	061b      	lsls	r3, r3, #24
 80026a0:	492d      	ldr	r1, [pc, #180]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	604b      	str	r3, [r1, #4]
 80026a6:	e01a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a8:	4b2b      	ldr	r3, [pc, #172]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a2a      	ldr	r2, [pc, #168]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe feae 	bl	8001414 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026bc:	f7fe feaa 	bl	8001414 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e20e      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCC_OscConfig+0x1e0>
 80026da:	e000      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d041      	beq.n	800276e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d01c      	beq.n	800272c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b19      	ldr	r3, [pc, #100]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002702:	f7fe fe87 	bl	8001414 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002708:	e008      	b.n	800271c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7fe fe83 	bl	8001414 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e1e7      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800271c:	4b0e      	ldr	r3, [pc, #56]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0ef      	beq.n	800270a <HAL_RCC_OscConfig+0x22e>
 800272a:	e020      	b.n	800276e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800272c:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 800272e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002732:	4a09      	ldr	r2, [pc, #36]	; (8002758 <HAL_RCC_OscConfig+0x27c>)
 8002734:	f023 0301 	bic.w	r3, r3, #1
 8002738:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7fe fe6a 	bl	8001414 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002742:	e00d      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002744:	f7fe fe66 	bl	8001414 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d906      	bls.n	8002760 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e1ca      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
 800275c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002762:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1ea      	bne.n	8002744 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 80a6 	beq.w	80028c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800277c:	2300      	movs	r3, #0
 800277e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002780:	4b84      	ldr	r3, [pc, #528]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x2b4>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <HAL_RCC_OscConfig+0x2b6>
 8002790:	2300      	movs	r3, #0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002796:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279a:	4a7e      	ldr	r2, [pc, #504]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800279c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
 80027a2:	4b7c      	ldr	r3, [pc, #496]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027ae:	2301      	movs	r3, #1
 80027b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b2:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_RCC_OscConfig+0x4bc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d118      	bne.n	80027f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x4bc>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a75      	ldr	r2, [pc, #468]	; (8002998 <HAL_RCC_OscConfig+0x4bc>)
 80027c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fe23 	bl	8001414 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d2:	f7fe fe1f 	bl	8001414 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e183      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e4:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x4bc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0f0      	beq.n	80027d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d108      	bne.n	800280a <HAL_RCC_OscConfig+0x32e>
 80027f8:	4b66      	ldr	r3, [pc, #408]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	4a65      	ldr	r2, [pc, #404]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002808:	e024      	b.n	8002854 <HAL_RCC_OscConfig+0x378>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b05      	cmp	r3, #5
 8002810:	d110      	bne.n	8002834 <HAL_RCC_OscConfig+0x358>
 8002812:	4b60      	ldr	r3, [pc, #384]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	4a5e      	ldr	r2, [pc, #376]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002822:	4b5c      	ldr	r3, [pc, #368]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002828:	4a5a      	ldr	r2, [pc, #360]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002832:	e00f      	b.n	8002854 <HAL_RCC_OscConfig+0x378>
 8002834:	4b57      	ldr	r3, [pc, #348]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a56      	ldr	r2, [pc, #344]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800283c:	f023 0301 	bic.w	r3, r3, #1
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a52      	ldr	r2, [pc, #328]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800284c:	f023 0304 	bic.w	r3, r3, #4
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d016      	beq.n	800288a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285c:	f7fe fdda 	bl	8001414 <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002862:	e00a      	b.n	800287a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002864:	f7fe fdd6 	bl	8001414 <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002872:	4293      	cmp	r3, r2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e138      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800287a:	4b46      	ldr	r3, [pc, #280]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800287c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ed      	beq.n	8002864 <HAL_RCC_OscConfig+0x388>
 8002888:	e015      	b.n	80028b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288a:	f7fe fdc3 	bl	8001414 <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002890:	e00a      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002892:	f7fe fdbf 	bl	8001414 <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e121      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80028aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1ed      	bne.n	8002892 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028b6:	7ffb      	ldrb	r3, [r7, #31]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80028c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0320 	and.w	r3, r3, #32
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d03c      	beq.n	800294e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01c      	beq.n	8002916 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028dc:	4b2d      	ldr	r3, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80028de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80028e2:	4a2c      	ldr	r2, [pc, #176]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ec:	f7fe fd92 	bl	8001414 <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028f2:	e008      	b.n	8002906 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028f4:	f7fe fd8e 	bl	8001414 <HAL_GetTick>
 80028f8:	4602      	mov	r2, r0
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	1ad3      	subs	r3, r2, r3
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e0f2      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002906:	4b23      	ldr	r3, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002908:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0ef      	beq.n	80028f4 <HAL_RCC_OscConfig+0x418>
 8002914:	e01b      	b.n	800294e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002916:	4b1f      	ldr	r3, [pc, #124]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002918:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800291c:	4a1d      	ldr	r2, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800291e:	f023 0301 	bic.w	r3, r3, #1
 8002922:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002926:	f7fe fd75 	bl	8001414 <HAL_GetTick>
 800292a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800292e:	f7fe fd71 	bl	8001414 <HAL_GetTick>
 8002932:	4602      	mov	r2, r0
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e0d5      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002940:	4b14      	ldr	r3, [pc, #80]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002942:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ef      	bne.n	800292e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80c9 	beq.w	8002aea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002958:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
 8002960:	2b0c      	cmp	r3, #12
 8002962:	f000 8083 	beq.w	8002a6c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d15e      	bne.n	8002a2c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x4b8>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7fe fd4b 	bl	8001414 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	e00c      	b.n	800299c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7fe fd47 	bl	8001414 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d905      	bls.n	800299c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0ab      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
 8002994:	40021000 	.word	0x40021000
 8002998:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b55      	ldr	r3, [pc, #340]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ec      	bne.n	8002982 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4b52      	ldr	r3, [pc, #328]	; (8002af8 <HAL_RCC_OscConfig+0x61c>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6a11      	ldr	r1, [r2, #32]
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80029c2:	0212      	lsls	r2, r2, #8
 80029c4:	4311      	orrs	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80029ca:	0852      	lsrs	r2, r2, #1
 80029cc:	3a01      	subs	r2, #1
 80029ce:	0552      	lsls	r2, r2, #21
 80029d0:	4311      	orrs	r1, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029d6:	0852      	lsrs	r2, r2, #1
 80029d8:	3a01      	subs	r2, #1
 80029da:	0652      	lsls	r2, r2, #25
 80029dc:	4311      	orrs	r1, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80029e2:	06d2      	lsls	r2, r2, #27
 80029e4:	430a      	orrs	r2, r1
 80029e6:	4943      	ldr	r1, [pc, #268]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f8:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a3d      	ldr	r2, [pc, #244]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 80029fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a04:	f7fe fd06 	bl	8001414 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe fd02 	bl	8001414 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e066      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a1e:	4b35      	ldr	r3, [pc, #212]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x530>
 8002a2a:	e05e      	b.n	8002aea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a30      	ldr	r2, [pc, #192]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fcec 	bl	8001414 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fce8 	bl	8001414 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e04c      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a52:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a5e:	4b25      	ldr	r3, [pc, #148]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	4924      	ldr	r1, [pc, #144]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_OscConfig+0x620>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	60cb      	str	r3, [r1, #12]
 8002a6a:	e03e      	b.n	8002aea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	69db      	ldr	r3, [r3, #28]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d101      	bne.n	8002a78 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e039      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a78:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_OscConfig+0x618>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d12c      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	3b01      	subs	r3, #1
 8002a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d123      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11b      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d113      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	3b01      	subs	r3, #1
 8002acc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d001      	beq.n	8002aea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3720      	adds	r7, #32
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40021000 	.word	0x40021000
 8002af8:	019f800c 	.word	0x019f800c
 8002afc:	feeefffc 	.word	0xfeeefffc

08002b00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e11e      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b91      	ldr	r3, [pc, #580]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 030f 	and.w	r3, r3, #15
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b8e      	ldr	r3, [pc, #568]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 020f 	bic.w	r2, r3, #15
 8002b2e:	498c      	ldr	r1, [pc, #560]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b8a      	ldr	r3, [pc, #552]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 030f 	and.w	r3, r3, #15
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e106      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d073      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d129      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5c:	4b81      	ldr	r3, [pc, #516]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0f4      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b6c:	f000 f99e 	bl	8002eac <RCC_GetSysClockFreqFromPLLSource>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	4a7c      	ldr	r2, [pc, #496]	; (8002d68 <HAL_RCC_ClockConfig+0x268>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d93f      	bls.n	8002bfa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b7a:	4b7a      	ldr	r3, [pc, #488]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d009      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d033      	beq.n	8002bfa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d12f      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b9a:	4b72      	ldr	r3, [pc, #456]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ba2:	4a70      	ldr	r2, [pc, #448]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	617b      	str	r3, [r7, #20]
 8002bae:	e024      	b.n	8002bfa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d107      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb8:	4b6a      	ldr	r3, [pc, #424]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0c6      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc8:	4b66      	ldr	r3, [pc, #408]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0be      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002bd8:	f000 f8ce 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	4a61      	ldr	r2, [pc, #388]	; (8002d68 <HAL_RCC_ClockConfig+0x268>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d909      	bls.n	8002bfa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002be6:	4b5f      	ldr	r3, [pc, #380]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bee:	4a5d      	ldr	r2, [pc, #372]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bf4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002bf6:	2380      	movs	r3, #128	; 0x80
 8002bf8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b5a      	ldr	r3, [pc, #360]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4957      	ldr	r1, [pc, #348]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c0c:	f7fe fc02 	bl	8001414 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7fe fbfe 	bl	8001414 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e095      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b4e      	ldr	r3, [pc, #312]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d023      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b43      	ldr	r3, [pc, #268]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c6c:	4b3d      	ldr	r3, [pc, #244]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002c74:	4a3b      	ldr	r2, [pc, #236]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c7c:	4b39      	ldr	r3, [pc, #228]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	4936      	ldr	r1, [pc, #216]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	608b      	str	r3, [r1, #8]
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b80      	cmp	r3, #128	; 0x80
 8002c94:	d105      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c96:	4b33      	ldr	r3, [pc, #204]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002c9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ca0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ca2:	4b2f      	ldr	r3, [pc, #188]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 030f 	and.w	r3, r3, #15
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d21d      	bcs.n	8002cec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb0:	4b2b      	ldr	r3, [pc, #172]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f023 020f 	bic.w	r2, r3, #15
 8002cb8:	4929      	ldr	r1, [pc, #164]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fba8 	bl	8001414 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe fba4 	bl	8001414 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e03b      	b.n	8002d56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b20      	ldr	r3, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1ed      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4917      	ldr	r1, [pc, #92]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d16:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	490f      	ldr	r1, [pc, #60]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d2a:	f000 f825 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	4b0c      	ldr	r3, [pc, #48]	; (8002d64 <HAL_RCC_ClockConfig+0x264>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	091b      	lsrs	r3, r3, #4
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	490c      	ldr	r1, [pc, #48]	; (8002d6c <HAL_RCC_ClockConfig+0x26c>)
 8002d3c:	5ccb      	ldrb	r3, [r1, r3]
 8002d3e:	f003 031f 	and.w	r3, r3, #31
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x270>)
 8002d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d4a:	4b0a      	ldr	r3, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x274>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fe fb14 	bl	800137c <HAL_InitTick>
 8002d54:	4603      	mov	r3, r0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3718      	adds	r7, #24
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40022000 	.word	0x40022000
 8002d64:	40021000 	.word	0x40021000
 8002d68:	04c4b400 	.word	0x04c4b400
 8002d6c:	08006cdc 	.word	0x08006cdc
 8002d70:	20000000 	.word	0x20000000
 8002d74:	20000004 	.word	0x20000004

08002d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d7e:	4b2c      	ldr	r3, [pc, #176]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d8a:	4b2a      	ldr	r3, [pc, #168]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	e047      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d90:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d102      	bne.n	8002da2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d9c:	4b26      	ldr	r3, [pc, #152]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	e03e      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002da2:	4b23      	ldr	r3, [pc, #140]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b0c      	cmp	r3, #12
 8002dac:	d136      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dae:	4b20      	ldr	r3, [pc, #128]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	091b      	lsrs	r3, r3, #4
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d10c      	bne.n	8002de6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dcc:	4a1a      	ldr	r2, [pc, #104]	; (8002e38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd4:	4a16      	ldr	r2, [pc, #88]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd6:	68d2      	ldr	r2, [r2, #12]
 8002dd8:	0a12      	lsrs	r2, r2, #8
 8002dda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	617b      	str	r3, [r7, #20]
      break;
 8002de4:	e00c      	b.n	8002e00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4a10      	ldr	r2, [pc, #64]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	0a12      	lsrs	r2, r2, #8
 8002df4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002df8:	fb02 f303 	mul.w	r3, r2, r3
 8002dfc:	617b      	str	r3, [r7, #20]
      break;
 8002dfe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e00:	4b0b      	ldr	r3, [pc, #44]	; (8002e30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	0e5b      	lsrs	r3, r3, #25
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	e001      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e20:	693b      	ldr	r3, [r7, #16]
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	371c      	adds	r7, #28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	00f42400 	.word	0x00f42400
 8002e38:	016e3600 	.word	0x016e3600

08002e3c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000000 	.word	0x20000000

08002e54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e58:	f7ff fff0 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	0a1b      	lsrs	r3, r3, #8
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	4904      	ldr	r1, [pc, #16]	; (8002e7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e6a:	5ccb      	ldrb	r3, [r1, r3]
 8002e6c:	f003 031f 	and.w	r3, r3, #31
 8002e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	08006cec 	.word	0x08006cec

08002e80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e84:	f7ff ffda 	bl	8002e3c <HAL_RCC_GetHCLKFreq>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0adb      	lsrs	r3, r3, #11
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	4904      	ldr	r1, [pc, #16]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e96:	5ccb      	ldrb	r3, [r1, r3]
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	08006cec 	.word	0x08006cec

08002eac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eb2:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	091b      	lsrs	r3, r3, #4
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d10c      	bne.n	8002eea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ed0:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed8:	4a14      	ldr	r2, [pc, #80]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eda:	68d2      	ldr	r2, [r2, #12]
 8002edc:	0a12      	lsrs	r2, r2, #8
 8002ede:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ee2:	fb02 f303 	mul.w	r3, r2, r3
 8002ee6:	617b      	str	r3, [r7, #20]
    break;
 8002ee8:	e00c      	b.n	8002f04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eea:	4a12      	ldr	r2, [pc, #72]	; (8002f34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ef4:	68d2      	ldr	r2, [r2, #12]
 8002ef6:	0a12      	lsrs	r2, r2, #8
 8002ef8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002efc:	fb02 f303 	mul.w	r3, r2, r3
 8002f00:	617b      	str	r3, [r7, #20]
    break;
 8002f02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f04:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	0e5b      	lsrs	r3, r3, #25
 8002f0a:	f003 0303 	and.w	r3, r3, #3
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f1e:	687b      	ldr	r3, [r7, #4]
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	016e3600 	.word	0x016e3600
 8002f34:	00f42400 	.word	0x00f42400

08002f38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b086      	sub	sp, #24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f40:	2300      	movs	r3, #0
 8002f42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f44:	2300      	movs	r3, #0
 8002f46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8098 	beq.w	8003086 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b43      	ldr	r3, [pc, #268]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10d      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	4b40      	ldr	r3, [pc, #256]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6a:	4a3f      	ldr	r2, [pc, #252]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f70:	6593      	str	r3, [r2, #88]	; 0x58
 8002f72:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f82:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a39      	ldr	r2, [pc, #228]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe fa41 	bl	8001414 <HAL_GetTick>
 8002f92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f94:	e009      	b.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f96:	f7fe fa3d 	bl	8001414 <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d902      	bls.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa8:	e005      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002faa:	4b30      	ldr	r3, [pc, #192]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d0ef      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fb6:	7cfb      	ldrb	r3, [r7, #19]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d159      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fbc:	4b2a      	ldr	r3, [pc, #168]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d01e      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d019      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd8:	4b23      	ldr	r3, [pc, #140]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe4:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fea:	4a1f      	ldr	r2, [pc, #124]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff4:	4b1c      	ldr	r3, [pc, #112]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ffc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003004:	4a18      	ldr	r2, [pc, #96]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003016:	f7fe f9fd 	bl	8001414 <HAL_GetTick>
 800301a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800301c:	e00b      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301e:	f7fe f9f9 	bl	8001414 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	f241 3288 	movw	r2, #5000	; 0x1388
 800302c:	4293      	cmp	r3, r2
 800302e:	d902      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	74fb      	strb	r3, [r7, #19]
            break;
 8003034:	e006      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d0ec      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003044:	7cfb      	ldrb	r3, [r7, #19]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304a:	4b07      	ldr	r3, [pc, #28]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800304c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800305a:	4313      	orrs	r3, r2
 800305c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003060:	e008      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003062:	7cfb      	ldrb	r3, [r7, #19]
 8003064:	74bb      	strb	r3, [r7, #18]
 8003066:	e005      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003068:	40021000 	.word	0x40021000
 800306c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003070:	7cfb      	ldrb	r3, [r7, #19]
 8003072:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003074:	7c7b      	ldrb	r3, [r7, #17]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d105      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800307a:	4ba7      	ldr	r3, [pc, #668]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800307c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307e:	4aa6      	ldr	r2, [pc, #664]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003080:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003084:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00a      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003092:	4ba1      	ldr	r3, [pc, #644]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003098:	f023 0203 	bic.w	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	499d      	ldr	r1, [pc, #628]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030b4:	4b98      	ldr	r3, [pc, #608]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ba:	f023 020c 	bic.w	r2, r3, #12
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	4995      	ldr	r1, [pc, #596]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0304 	and.w	r3, r3, #4
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00a      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030d6:	4b90      	ldr	r3, [pc, #576]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	498c      	ldr	r1, [pc, #560]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f8:	4b87      	ldr	r3, [pc, #540]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	4984      	ldr	r1, [pc, #528]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00a      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800311a:	4b7f      	ldr	r3, [pc, #508]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003120:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	497b      	ldr	r1, [pc, #492]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800313c:	4b76      	ldr	r3, [pc, #472]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003142:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	4973      	ldr	r1, [pc, #460]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800314c:	4313      	orrs	r3, r2
 800314e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00a      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315e:	4b6e      	ldr	r3, [pc, #440]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003164:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	496a      	ldr	r1, [pc, #424]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800316e:	4313      	orrs	r3, r2
 8003170:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003180:	4b65      	ldr	r3, [pc, #404]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003186:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4962      	ldr	r1, [pc, #392]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003190:	4313      	orrs	r3, r2
 8003192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031a2:	4b5d      	ldr	r3, [pc, #372]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	4959      	ldr	r1, [pc, #356]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d00a      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031c4:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031ca:	f023 0203 	bic.w	r2, r3, #3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4951      	ldr	r1, [pc, #324]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031e6:	4b4c      	ldr	r3, [pc, #304]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	4948      	ldr	r1, [pc, #288]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003204:	2b00      	cmp	r3, #0
 8003206:	d015      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003208:	4b43      	ldr	r3, [pc, #268]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4940      	ldr	r1, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003218:	4313      	orrs	r3, r2
 800321a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003226:	d105      	bne.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003228:	4b3b      	ldr	r3, [pc, #236]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	4a3a      	ldr	r2, [pc, #232]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800322e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003232:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003240:	4b35      	ldr	r3, [pc, #212]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	4932      	ldr	r1, [pc, #200]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800325e:	d105      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003260:	4b2d      	ldr	r3, [pc, #180]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003262:	68db      	ldr	r3, [r3, #12]
 8003264:	4a2c      	ldr	r2, [pc, #176]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003266:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800326a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d015      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003278:	4b27      	ldr	r3, [pc, #156]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	4924      	ldr	r1, [pc, #144]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003292:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003296:	d105      	bne.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003298:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a1e      	ldr	r2, [pc, #120]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800329e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032b0:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	4916      	ldr	r1, [pc, #88]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ce:	d105      	bne.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d0:	4b11      	ldr	r3, [pc, #68]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	4a10      	ldr	r2, [pc, #64]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d019      	beq.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4908      	ldr	r1, [pc, #32]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f8:	4313      	orrs	r3, r2
 80032fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003306:	d109      	bne.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a02      	ldr	r2, [pc, #8]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800330e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003312:	60d3      	str	r3, [r2, #12]
 8003314:	e002      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003316:	bf00      	nop
 8003318:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003328:	4b29      	ldr	r3, [pc, #164]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800332a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800332e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4926      	ldr	r1, [pc, #152]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003338:	4313      	orrs	r3, r2
 800333a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003346:	d105      	bne.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	4a20      	ldr	r2, [pc, #128]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800334e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003352:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d015      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003360:	4b1b      	ldr	r3, [pc, #108]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800336e:	4918      	ldr	r1, [pc, #96]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800337a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337e:	d105      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003380:	4b13      	ldr	r3, [pc, #76]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	4a12      	ldr	r2, [pc, #72]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800338a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003398:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800339a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800339e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a6:	490a      	ldr	r1, [pc, #40]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033b6:	d105      	bne.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e042      	b.n	800346c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d106      	bne.n	80033fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7fd feab 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2224      	movs	r2, #36	; 0x24
 8003402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800341a:	2b00      	cmp	r3, #0
 800341c:	d002      	beq.n	8003424 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 fb24 	bl	8003a6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f825 	bl	8003474 <UART_SetConfig>
 800342a:	4603      	mov	r3, r0
 800342c:	2b01      	cmp	r3, #1
 800342e:	d101      	bne.n	8003434 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e01b      	b.n	800346c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 fba3 	bl	8003bb0 <UART_CheckIdleState>
 800346a:	4603      	mov	r3, r0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b08c      	sub	sp, #48	; 0x30
 800347a:	af00      	add	r7, sp, #0
 800347c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	431a      	orrs	r2, r3
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	695b      	ldr	r3, [r3, #20]
 8003492:	431a      	orrs	r2, r3
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	4313      	orrs	r3, r2
 800349a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	4baa      	ldr	r3, [pc, #680]	; (800374c <UART_SetConfig+0x2d8>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6812      	ldr	r2, [r2, #0]
 80034aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034ac:	430b      	orrs	r3, r1
 80034ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a9f      	ldr	r2, [pc, #636]	; (8003750 <UART_SetConfig+0x2dc>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d004      	beq.n	80034e0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034dc:	4313      	orrs	r3, r2
 80034de:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80034ea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f4:	430b      	orrs	r3, r1
 80034f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fe:	f023 010f 	bic.w	r1, r3, #15
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a90      	ldr	r2, [pc, #576]	; (8003754 <UART_SetConfig+0x2e0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d125      	bne.n	8003564 <UART_SetConfig+0xf0>
 8003518:	4b8f      	ldr	r3, [pc, #572]	; (8003758 <UART_SetConfig+0x2e4>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	2b03      	cmp	r3, #3
 8003524:	d81a      	bhi.n	800355c <UART_SetConfig+0xe8>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <UART_SetConfig+0xb8>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800353d 	.word	0x0800353d
 8003530:	0800354d 	.word	0x0800354d
 8003534:	08003545 	.word	0x08003545
 8003538:	08003555 	.word	0x08003555
 800353c:	2301      	movs	r3, #1
 800353e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003542:	e116      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003544:	2302      	movs	r3, #2
 8003546:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354a:	e112      	b.n	8003772 <UART_SetConfig+0x2fe>
 800354c:	2304      	movs	r3, #4
 800354e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003552:	e10e      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003554:	2308      	movs	r3, #8
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355a:	e10a      	b.n	8003772 <UART_SetConfig+0x2fe>
 800355c:	2310      	movs	r3, #16
 800355e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003562:	e106      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a7c      	ldr	r2, [pc, #496]	; (800375c <UART_SetConfig+0x2e8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d138      	bne.n	80035e0 <UART_SetConfig+0x16c>
 800356e:	4b7a      	ldr	r3, [pc, #488]	; (8003758 <UART_SetConfig+0x2e4>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f003 030c 	and.w	r3, r3, #12
 8003578:	2b0c      	cmp	r3, #12
 800357a:	d82d      	bhi.n	80035d8 <UART_SetConfig+0x164>
 800357c:	a201      	add	r2, pc, #4	; (adr r2, 8003584 <UART_SetConfig+0x110>)
 800357e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003582:	bf00      	nop
 8003584:	080035b9 	.word	0x080035b9
 8003588:	080035d9 	.word	0x080035d9
 800358c:	080035d9 	.word	0x080035d9
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035c9 	.word	0x080035c9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035d9 	.word	0x080035d9
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035c1 	.word	0x080035c1
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035d9 	.word	0x080035d9
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d1 	.word	0x080035d1
 80035b8:	2300      	movs	r3, #0
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035be:	e0d8      	b.n	8003772 <UART_SetConfig+0x2fe>
 80035c0:	2302      	movs	r3, #2
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c6:	e0d4      	b.n	8003772 <UART_SetConfig+0x2fe>
 80035c8:	2304      	movs	r3, #4
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e0d0      	b.n	8003772 <UART_SetConfig+0x2fe>
 80035d0:	2308      	movs	r3, #8
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e0cc      	b.n	8003772 <UART_SetConfig+0x2fe>
 80035d8:	2310      	movs	r3, #16
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e0c8      	b.n	8003772 <UART_SetConfig+0x2fe>
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5e      	ldr	r2, [pc, #376]	; (8003760 <UART_SetConfig+0x2ec>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d125      	bne.n	8003636 <UART_SetConfig+0x1c2>
 80035ea:	4b5b      	ldr	r3, [pc, #364]	; (8003758 <UART_SetConfig+0x2e4>)
 80035ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035f4:	2b30      	cmp	r3, #48	; 0x30
 80035f6:	d016      	beq.n	8003626 <UART_SetConfig+0x1b2>
 80035f8:	2b30      	cmp	r3, #48	; 0x30
 80035fa:	d818      	bhi.n	800362e <UART_SetConfig+0x1ba>
 80035fc:	2b20      	cmp	r3, #32
 80035fe:	d00a      	beq.n	8003616 <UART_SetConfig+0x1a2>
 8003600:	2b20      	cmp	r3, #32
 8003602:	d814      	bhi.n	800362e <UART_SetConfig+0x1ba>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d002      	beq.n	800360e <UART_SetConfig+0x19a>
 8003608:	2b10      	cmp	r3, #16
 800360a:	d008      	beq.n	800361e <UART_SetConfig+0x1aa>
 800360c:	e00f      	b.n	800362e <UART_SetConfig+0x1ba>
 800360e:	2300      	movs	r3, #0
 8003610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003614:	e0ad      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003616:	2302      	movs	r3, #2
 8003618:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361c:	e0a9      	b.n	8003772 <UART_SetConfig+0x2fe>
 800361e:	2304      	movs	r3, #4
 8003620:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003624:	e0a5      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003626:	2308      	movs	r3, #8
 8003628:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362c:	e0a1      	b.n	8003772 <UART_SetConfig+0x2fe>
 800362e:	2310      	movs	r3, #16
 8003630:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003634:	e09d      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a4a      	ldr	r2, [pc, #296]	; (8003764 <UART_SetConfig+0x2f0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d125      	bne.n	800368c <UART_SetConfig+0x218>
 8003640:	4b45      	ldr	r3, [pc, #276]	; (8003758 <UART_SetConfig+0x2e4>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800364a:	2bc0      	cmp	r3, #192	; 0xc0
 800364c:	d016      	beq.n	800367c <UART_SetConfig+0x208>
 800364e:	2bc0      	cmp	r3, #192	; 0xc0
 8003650:	d818      	bhi.n	8003684 <UART_SetConfig+0x210>
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d00a      	beq.n	800366c <UART_SetConfig+0x1f8>
 8003656:	2b80      	cmp	r3, #128	; 0x80
 8003658:	d814      	bhi.n	8003684 <UART_SetConfig+0x210>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <UART_SetConfig+0x1f0>
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d008      	beq.n	8003674 <UART_SetConfig+0x200>
 8003662:	e00f      	b.n	8003684 <UART_SetConfig+0x210>
 8003664:	2300      	movs	r3, #0
 8003666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800366a:	e082      	b.n	8003772 <UART_SetConfig+0x2fe>
 800366c:	2302      	movs	r3, #2
 800366e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003672:	e07e      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003674:	2304      	movs	r3, #4
 8003676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800367a:	e07a      	b.n	8003772 <UART_SetConfig+0x2fe>
 800367c:	2308      	movs	r3, #8
 800367e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003682:	e076      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003684:	2310      	movs	r3, #16
 8003686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368a:	e072      	b.n	8003772 <UART_SetConfig+0x2fe>
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a35      	ldr	r2, [pc, #212]	; (8003768 <UART_SetConfig+0x2f4>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d12a      	bne.n	80036ec <UART_SetConfig+0x278>
 8003696:	4b30      	ldr	r3, [pc, #192]	; (8003758 <UART_SetConfig+0x2e4>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036a4:	d01a      	beq.n	80036dc <UART_SetConfig+0x268>
 80036a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036aa:	d81b      	bhi.n	80036e4 <UART_SetConfig+0x270>
 80036ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b0:	d00c      	beq.n	80036cc <UART_SetConfig+0x258>
 80036b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036b6:	d815      	bhi.n	80036e4 <UART_SetConfig+0x270>
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d003      	beq.n	80036c4 <UART_SetConfig+0x250>
 80036bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036c0:	d008      	beq.n	80036d4 <UART_SetConfig+0x260>
 80036c2:	e00f      	b.n	80036e4 <UART_SetConfig+0x270>
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ca:	e052      	b.n	8003772 <UART_SetConfig+0x2fe>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036d2:	e04e      	b.n	8003772 <UART_SetConfig+0x2fe>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036da:	e04a      	b.n	8003772 <UART_SetConfig+0x2fe>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e2:	e046      	b.n	8003772 <UART_SetConfig+0x2fe>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ea:	e042      	b.n	8003772 <UART_SetConfig+0x2fe>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a17      	ldr	r2, [pc, #92]	; (8003750 <UART_SetConfig+0x2dc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d13a      	bne.n	800376c <UART_SetConfig+0x2f8>
 80036f6:	4b18      	ldr	r3, [pc, #96]	; (8003758 <UART_SetConfig+0x2e4>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003700:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003704:	d01a      	beq.n	800373c <UART_SetConfig+0x2c8>
 8003706:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800370a:	d81b      	bhi.n	8003744 <UART_SetConfig+0x2d0>
 800370c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003710:	d00c      	beq.n	800372c <UART_SetConfig+0x2b8>
 8003712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003716:	d815      	bhi.n	8003744 <UART_SetConfig+0x2d0>
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <UART_SetConfig+0x2b0>
 800371c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003720:	d008      	beq.n	8003734 <UART_SetConfig+0x2c0>
 8003722:	e00f      	b.n	8003744 <UART_SetConfig+0x2d0>
 8003724:	2300      	movs	r3, #0
 8003726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800372a:	e022      	b.n	8003772 <UART_SetConfig+0x2fe>
 800372c:	2302      	movs	r3, #2
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e01e      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003734:	2304      	movs	r3, #4
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e01a      	b.n	8003772 <UART_SetConfig+0x2fe>
 800373c:	2308      	movs	r3, #8
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e016      	b.n	8003772 <UART_SetConfig+0x2fe>
 8003744:	2310      	movs	r3, #16
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e012      	b.n	8003772 <UART_SetConfig+0x2fe>
 800374c:	cfff69f3 	.word	0xcfff69f3
 8003750:	40008000 	.word	0x40008000
 8003754:	40013800 	.word	0x40013800
 8003758:	40021000 	.word	0x40021000
 800375c:	40004400 	.word	0x40004400
 8003760:	40004800 	.word	0x40004800
 8003764:	40004c00 	.word	0x40004c00
 8003768:	40005000 	.word	0x40005000
 800376c:	2310      	movs	r3, #16
 800376e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4aae      	ldr	r2, [pc, #696]	; (8003a30 <UART_SetConfig+0x5bc>)
 8003778:	4293      	cmp	r3, r2
 800377a:	f040 8097 	bne.w	80038ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800377e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003782:	2b08      	cmp	r3, #8
 8003784:	d823      	bhi.n	80037ce <UART_SetConfig+0x35a>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <UART_SetConfig+0x318>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	080037b1 	.word	0x080037b1
 8003790:	080037cf 	.word	0x080037cf
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037cf 	.word	0x080037cf
 800379c:	080037bf 	.word	0x080037bf
 80037a0:	080037cf 	.word	0x080037cf
 80037a4:	080037cf 	.word	0x080037cf
 80037a8:	080037cf 	.word	0x080037cf
 80037ac:	080037c7 	.word	0x080037c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b0:	f7ff fb50 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 80037b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037b6:	e010      	b.n	80037da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037b8:	4b9e      	ldr	r3, [pc, #632]	; (8003a34 <UART_SetConfig+0x5c0>)
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037bc:	e00d      	b.n	80037da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037be:	f7ff fadb 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80037c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037c4:	e009      	b.n	80037da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037cc:	e005      	b.n	80037da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	f000 8130 	beq.w	8003a42 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e6:	4a94      	ldr	r2, [pc, #592]	; (8003a38 <UART_SetConfig+0x5c4>)
 80037e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ec:	461a      	mov	r2, r3
 80037ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	4413      	add	r3, r2
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	429a      	cmp	r2, r3
 8003804:	d305      	bcc.n	8003812 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800380c:	69ba      	ldr	r2, [r7, #24]
 800380e:	429a      	cmp	r2, r3
 8003810:	d903      	bls.n	800381a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003818:	e113      	b.n	8003a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	2200      	movs	r2, #0
 800381e:	60bb      	str	r3, [r7, #8]
 8003820:	60fa      	str	r2, [r7, #12]
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	4a84      	ldr	r2, [pc, #528]	; (8003a38 <UART_SetConfig+0x5c4>)
 8003828:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800382c:	b29b      	uxth	r3, r3
 800382e:	2200      	movs	r2, #0
 8003830:	603b      	str	r3, [r7, #0]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003838:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800383c:	f7fd f936 	bl	8000aac <__aeabi_uldivmod>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	020b      	lsls	r3, r1, #8
 8003852:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003856:	0202      	lsls	r2, r0, #8
 8003858:	6979      	ldr	r1, [r7, #20]
 800385a:	6849      	ldr	r1, [r1, #4]
 800385c:	0849      	lsrs	r1, r1, #1
 800385e:	2000      	movs	r0, #0
 8003860:	460c      	mov	r4, r1
 8003862:	4605      	mov	r5, r0
 8003864:	eb12 0804 	adds.w	r8, r2, r4
 8003868:	eb43 0905 	adc.w	r9, r3, r5
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	469a      	mov	sl, r3
 8003874:	4693      	mov	fp, r2
 8003876:	4652      	mov	r2, sl
 8003878:	465b      	mov	r3, fp
 800387a:	4640      	mov	r0, r8
 800387c:	4649      	mov	r1, r9
 800387e:	f7fd f915 	bl	8000aac <__aeabi_uldivmod>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4613      	mov	r3, r2
 8003888:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003890:	d308      	bcc.n	80038a4 <UART_SetConfig+0x430>
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003898:	d204      	bcs.n	80038a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	e0ce      	b.n	8003a42 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038aa:	e0ca      	b.n	8003a42 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	69db      	ldr	r3, [r3, #28]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d166      	bne.n	8003984 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80038b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d827      	bhi.n	800390e <UART_SetConfig+0x49a>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <UART_SetConfig+0x450>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038e9 	.word	0x080038e9
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	080038f9 	.word	0x080038f9
 80038d0:	0800390f 	.word	0x0800390f
 80038d4:	080038ff 	.word	0x080038ff
 80038d8:	0800390f 	.word	0x0800390f
 80038dc:	0800390f 	.word	0x0800390f
 80038e0:	0800390f 	.word	0x0800390f
 80038e4:	08003907 	.word	0x08003907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038e8:	f7ff fab4 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 80038ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038ee:	e014      	b.n	800391a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038f0:	f7ff fac6 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80038f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80038f6:	e010      	b.n	800391a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038f8:	4b4e      	ldr	r3, [pc, #312]	; (8003a34 <UART_SetConfig+0x5c0>)
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038fc:	e00d      	b.n	800391a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038fe:	f7ff fa3b 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 8003902:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003904:	e009      	b.n	800391a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800390c:	e005      	b.n	800391a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800390e:	2300      	movs	r3, #0
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003918:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8090 	beq.w	8003a42 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003926:	4a44      	ldr	r2, [pc, #272]	; (8003a38 <UART_SetConfig+0x5c4>)
 8003928:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800392c:	461a      	mov	r2, r3
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	fbb3 f3f2 	udiv	r3, r3, r2
 8003934:	005a      	lsls	r2, r3, #1
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	085b      	lsrs	r3, r3, #1
 800393c:	441a      	add	r2, r3
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	fbb2 f3f3 	udiv	r3, r2, r3
 8003946:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	2b0f      	cmp	r3, #15
 800394c:	d916      	bls.n	800397c <UART_SetConfig+0x508>
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003954:	d212      	bcs.n	800397c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	b29b      	uxth	r3, r3
 800395a:	f023 030f 	bic.w	r3, r3, #15
 800395e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	b29b      	uxth	r3, r3
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	b29a      	uxth	r2, r3
 800396c:	8bfb      	ldrh	r3, [r7, #30]
 800396e:	4313      	orrs	r3, r2
 8003970:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	8bfa      	ldrh	r2, [r7, #30]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	e062      	b.n	8003a42 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003982:	e05e      	b.n	8003a42 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003984:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003988:	2b08      	cmp	r3, #8
 800398a:	d828      	bhi.n	80039de <UART_SetConfig+0x56a>
 800398c:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <UART_SetConfig+0x520>)
 800398e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003992:	bf00      	nop
 8003994:	080039b9 	.word	0x080039b9
 8003998:	080039c1 	.word	0x080039c1
 800399c:	080039c9 	.word	0x080039c9
 80039a0:	080039df 	.word	0x080039df
 80039a4:	080039cf 	.word	0x080039cf
 80039a8:	080039df 	.word	0x080039df
 80039ac:	080039df 	.word	0x080039df
 80039b0:	080039df 	.word	0x080039df
 80039b4:	080039d7 	.word	0x080039d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b8:	f7ff fa4c 	bl	8002e54 <HAL_RCC_GetPCLK1Freq>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039be:	e014      	b.n	80039ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c0:	f7ff fa5e 	bl	8002e80 <HAL_RCC_GetPCLK2Freq>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039c6:	e010      	b.n	80039ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039c8:	4b1a      	ldr	r3, [pc, #104]	; (8003a34 <UART_SetConfig+0x5c0>)
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039cc:	e00d      	b.n	80039ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ce:	f7ff f9d3 	bl	8002d78 <HAL_RCC_GetSysClockFreq>
 80039d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039d4:	e009      	b.n	80039ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039dc:	e005      	b.n	80039ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039e8:	bf00      	nop
    }

    if (pclk != 0U)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d028      	beq.n	8003a42 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f4:	4a10      	ldr	r2, [pc, #64]	; (8003a38 <UART_SetConfig+0x5c4>)
 80039f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039fa:	461a      	mov	r2, r3
 80039fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	441a      	add	r2, r3
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	2b0f      	cmp	r3, #15
 8003a18:	d910      	bls.n	8003a3c <UART_SetConfig+0x5c8>
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a20:	d20c      	bcs.n	8003a3c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a22:	6a3b      	ldr	r3, [r7, #32]
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60da      	str	r2, [r3, #12]
 8003a2c:	e009      	b.n	8003a42 <UART_SetConfig+0x5ce>
 8003a2e:	bf00      	nop
 8003a30:	40008000 	.word	0x40008000
 8003a34:	00f42400 	.word	0x00f42400
 8003a38:	08006cf4 	.word	0x08006cf4
      }
      else
      {
        ret = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	2200      	movs	r2, #0
 8003a56:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003a5e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3730      	adds	r7, #48	; 0x30
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003a6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f003 0308 	and.w	r3, r3, #8
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00a      	beq.n	8003a96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00a      	beq.n	8003ab8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b00:	f003 0310 	and.w	r3, r3, #16
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00a      	beq.n	8003b1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00a      	beq.n	8003b40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d01a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6a:	d10a      	bne.n	8003b82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b098      	sub	sp, #96	; 0x60
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bc0:	f7fd fc28 	bl	8001414 <HAL_GetTick>
 8003bc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0308 	and.w	r3, r3, #8
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d12f      	bne.n	8003c34 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f88e 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d022      	beq.n	8003c34 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf6:	e853 3f00 	ldrex	r3, [r3]
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c02:	653b      	str	r3, [r7, #80]	; 0x50
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	461a      	mov	r2, r3
 8003c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c14:	e841 2300 	strex	r3, r2, [r1]
 8003c18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1e6      	bne.n	8003bee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e063      	b.n	8003cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0304 	and.w	r3, r3, #4
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d149      	bne.n	8003cd6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f857 	bl	8003d04 <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d03c      	beq.n	8003cd6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	623b      	str	r3, [r7, #32]
   return(result);
 8003c6a:	6a3b      	ldr	r3, [r7, #32]
 8003c6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8003c7c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e6      	bne.n	8003c5c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3308      	adds	r3, #8
 8003c94:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f023 0301 	bic.w	r3, r3, #1
 8003ca4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	3308      	adds	r3, #8
 8003cac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cae:	61fa      	str	r2, [r7, #28]
 8003cb0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb2:	69b9      	ldr	r1, [r7, #24]
 8003cb4:	69fa      	ldr	r2, [r7, #28]
 8003cb6:	e841 2300 	strex	r3, r2, [r1]
 8003cba:	617b      	str	r3, [r7, #20]
   return(result);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1e5      	bne.n	8003c8e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e012      	b.n	8003cfc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2220      	movs	r2, #32
 8003cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3758      	adds	r7, #88	; 0x58
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}

08003d04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d14:	e04f      	b.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1c:	d04b      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fd fb79 	bl	8001414 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e04e      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0304 	and.w	r3, r3, #4
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d037      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b80      	cmp	r3, #128	; 0x80
 8003d4a:	d034      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d031      	beq.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	69db      	ldr	r3, [r3, #28]
 8003d58:	f003 0308 	and.w	r3, r3, #8
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	d110      	bne.n	8003d82 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2208      	movs	r2, #8
 8003d66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f000 f838 	bl	8003dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2208      	movs	r2, #8
 8003d72:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e029      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d90:	d111      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f81e 	bl	8003dde <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e00f      	b.n	8003dd6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	bf0c      	ite	eq
 8003dc6:	2301      	moveq	r3, #1
 8003dc8:	2300      	movne	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	79fb      	ldrb	r3, [r7, #7]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d0a0      	beq.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b095      	sub	sp, #84	; 0x54
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e04:	643b      	str	r3, [r7, #64]	; 0x40
 8003e06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e6      	bne.n	8003de6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6a3b      	ldr	r3, [r7, #32]
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e44:	e841 2300 	strex	r3, r2, [r1]
 8003e48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1e3      	bne.n	8003e18 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d118      	bne.n	8003e8a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	e853 3f00 	ldrex	r3, [r3]
 8003e64:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f023 0310 	bic.w	r3, r3, #16
 8003e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e76:	61bb      	str	r3, [r7, #24]
 8003e78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	6979      	ldr	r1, [r7, #20]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	e841 2300 	strex	r3, r2, [r1]
 8003e82:	613b      	str	r3, [r7, #16]
   return(result);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1e6      	bne.n	8003e58 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2220      	movs	r2, #32
 8003e8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e9e:	bf00      	nop
 8003ea0:	3754      	adds	r7, #84	; 0x54
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr

08003eaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e027      	b.n	8003f10 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	; 0x24
 8003ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 0201 	bic.w	r2, r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003eee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e02d      	b.n	8003f90 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2224      	movs	r2, #36	; 0x24
 8003f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	430a      	orrs	r2, r1
 8003f6e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f84f 	bl	8004014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2220      	movs	r2, #32
 8003f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d101      	bne.n	8003fb0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003fac:	2302      	movs	r3, #2
 8003fae:	e02d      	b.n	800400c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	; 0x24
 8003fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f811 	bl	8004014 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2220      	movs	r2, #32
 8003ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004014:	b480      	push	{r7}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004034:	e031      	b.n	800409a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004036:	2308      	movs	r3, #8
 8004038:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800403a:	2308      	movs	r3, #8
 800403c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	0e5b      	lsrs	r3, r3, #25
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 0307 	and.w	r3, r3, #7
 800404c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	0f5b      	lsrs	r3, r3, #29
 8004056:	b2db      	uxtb	r3, r3
 8004058:	f003 0307 	and.w	r3, r3, #7
 800405c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800405e:	7bbb      	ldrb	r3, [r7, #14]
 8004060:	7b3a      	ldrb	r2, [r7, #12]
 8004062:	4911      	ldr	r1, [pc, #68]	; (80040a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004064:	5c8a      	ldrb	r2, [r1, r2]
 8004066:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800406a:	7b3a      	ldrb	r2, [r7, #12]
 800406c:	490f      	ldr	r1, [pc, #60]	; (80040ac <UARTEx_SetNbDataToProcess+0x98>)
 800406e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004070:	fb93 f3f2 	sdiv	r3, r3, r2
 8004074:	b29a      	uxth	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	7b7a      	ldrb	r2, [r7, #13]
 8004080:	4909      	ldr	r1, [pc, #36]	; (80040a8 <UARTEx_SetNbDataToProcess+0x94>)
 8004082:	5c8a      	ldrb	r2, [r1, r2]
 8004084:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004088:	7b7a      	ldrb	r2, [r7, #13]
 800408a:	4908      	ldr	r1, [pc, #32]	; (80040ac <UARTEx_SetNbDataToProcess+0x98>)
 800408c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800408e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004092:	b29a      	uxth	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800409a:	bf00      	nop
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	08006d0c 	.word	0x08006d0c
 80040ac:	08006d14 	.word	0x08006d14

080040b0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80040b4:	bf00      	nop
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
	...

080040c0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af04      	add	r7, sp, #16
 80040c6:	4603      	mov	r3, r0
 80040c8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80040ca:	f04f 33ff 	mov.w	r3, #4294967295
 80040ce:	9302      	str	r3, [sp, #8]
 80040d0:	2301      	movs	r3, #1
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	1dfb      	adds	r3, r7, #7
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2301      	movs	r3, #1
 80040da:	2200      	movs	r2, #0
 80040dc:	2178      	movs	r1, #120	; 0x78
 80040de:	4803      	ldr	r0, [pc, #12]	; (80040ec <ssd1306_WriteCommand+0x2c>)
 80040e0:	f7fd fd2e 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	20000078 	.word	0x20000078

080040f0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af04      	add	r7, sp, #16
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	9202      	str	r2, [sp, #8]
 8004104:	9301      	str	r3, [sp, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	2301      	movs	r3, #1
 800410c:	2240      	movs	r2, #64	; 0x40
 800410e:	2178      	movs	r1, #120	; 0x78
 8004110:	4803      	ldr	r0, [pc, #12]	; (8004120 <ssd1306_WriteData+0x30>)
 8004112:	f7fd fd15 	bl	8001b40 <HAL_I2C_Mem_Write>
}
 8004116:	bf00      	nop
 8004118:	3708      	adds	r7, #8
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	20000078 	.word	0x20000078

08004124 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004128:	f7ff ffc2 	bl	80040b0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800412c:	2064      	movs	r0, #100	; 0x64
 800412e:	f7fd f97d 	bl	800142c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004132:	2000      	movs	r0, #0
 8004134:	f000 ff7a 	bl	800502c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004138:	2020      	movs	r0, #32
 800413a:	f7ff ffc1 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800413e:	2000      	movs	r0, #0
 8004140:	f7ff ffbe 	bl	80040c0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004144:	20b0      	movs	r0, #176	; 0xb0
 8004146:	f7ff ffbb 	bl	80040c0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800414a:	20c8      	movs	r0, #200	; 0xc8
 800414c:	f7ff ffb8 	bl	80040c0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004150:	2000      	movs	r0, #0
 8004152:	f7ff ffb5 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004156:	2010      	movs	r0, #16
 8004158:	f7ff ffb2 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800415c:	2040      	movs	r0, #64	; 0x40
 800415e:	f7ff ffaf 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004162:	20ff      	movs	r0, #255	; 0xff
 8004164:	f000 ff4f 	bl	8005006 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004168:	20a1      	movs	r0, #161	; 0xa1
 800416a:	f7ff ffa9 	bl	80040c0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800416e:	20a6      	movs	r0, #166	; 0xa6
 8004170:	f7ff ffa6 	bl	80040c0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8004174:	20a8      	movs	r0, #168	; 0xa8
 8004176:	f7ff ffa3 	bl	80040c0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800417a:	203f      	movs	r0, #63	; 0x3f
 800417c:	f7ff ffa0 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004180:	20a4      	movs	r0, #164	; 0xa4
 8004182:	f7ff ff9d 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8004186:	20d3      	movs	r0, #211	; 0xd3
 8004188:	f7ff ff9a 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800418c:	2000      	movs	r0, #0
 800418e:	f7ff ff97 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8004192:	20d5      	movs	r0, #213	; 0xd5
 8004194:	f7ff ff94 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004198:	20f0      	movs	r0, #240	; 0xf0
 800419a:	f7ff ff91 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800419e:	20d9      	movs	r0, #217	; 0xd9
 80041a0:	f7ff ff8e 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80041a4:	2022      	movs	r0, #34	; 0x22
 80041a6:	f7ff ff8b 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80041aa:	20da      	movs	r0, #218	; 0xda
 80041ac:	f7ff ff88 	bl	80040c0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80041b0:	2012      	movs	r0, #18
 80041b2:	f7ff ff85 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80041b6:	20db      	movs	r0, #219	; 0xdb
 80041b8:	f7ff ff82 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80041bc:	2020      	movs	r0, #32
 80041be:	f7ff ff7f 	bl	80040c0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80041c2:	208d      	movs	r0, #141	; 0x8d
 80041c4:	f7ff ff7c 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80041c8:	2014      	movs	r0, #20
 80041ca:	f7ff ff79 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80041ce:	2001      	movs	r0, #1
 80041d0:	f000 ff2c 	bl	800502c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80041d4:	2000      	movs	r0, #0
 80041d6:	f000 f80f 	bl	80041f8 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80041da:	f000 f825 	bl	8004228 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80041de:	4b05      	ldr	r3, [pc, #20]	; (80041f4 <ssd1306_Init+0xd0>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80041e4:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <ssd1306_Init+0xd0>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80041ea:	4b02      	ldr	r3, [pc, #8]	; (80041f4 <ssd1306_Init+0xd0>)
 80041ec:	2201      	movs	r2, #1
 80041ee:	711a      	strb	r2, [r3, #4]
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20000568 	.word	0x20000568

080041f8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8004202:	79fb      	ldrb	r3, [r7, #7]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <ssd1306_Fill+0x14>
 8004208:	2300      	movs	r3, #0
 800420a:	e000      	b.n	800420e <ssd1306_Fill+0x16>
 800420c:	23ff      	movs	r3, #255	; 0xff
 800420e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004212:	4619      	mov	r1, r3
 8004214:	4803      	ldr	r0, [pc, #12]	; (8004224 <ssd1306_Fill+0x2c>)
 8004216:	f001 fb09 	bl	800582c <memset>
}
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000168 	.word	0x20000168

08004228 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800422e:	2300      	movs	r3, #0
 8004230:	71fb      	strb	r3, [r7, #7]
 8004232:	e016      	b.n	8004262 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004234:	79fb      	ldrb	r3, [r7, #7]
 8004236:	3b50      	subs	r3, #80	; 0x50
 8004238:	b2db      	uxtb	r3, r3
 800423a:	4618      	mov	r0, r3
 800423c:	f7ff ff40 	bl	80040c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004240:	2000      	movs	r0, #0
 8004242:	f7ff ff3d 	bl	80040c0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004246:	2010      	movs	r0, #16
 8004248:	f7ff ff3a 	bl	80040c0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800424c:	79fb      	ldrb	r3, [r7, #7]
 800424e:	01db      	lsls	r3, r3, #7
 8004250:	4a08      	ldr	r2, [pc, #32]	; (8004274 <ssd1306_UpdateScreen+0x4c>)
 8004252:	4413      	add	r3, r2
 8004254:	2180      	movs	r1, #128	; 0x80
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff ff4a 	bl	80040f0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800425c:	79fb      	ldrb	r3, [r7, #7]
 800425e:	3301      	adds	r3, #1
 8004260:	71fb      	strb	r3, [r7, #7]
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	2b07      	cmp	r3, #7
 8004266:	d9e5      	bls.n	8004234 <ssd1306_UpdateScreen+0xc>
    }
}
 8004268:	bf00      	nop
 800426a:	bf00      	nop
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000168 	.word	0x20000168

08004278 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
 8004282:	460b      	mov	r3, r1
 8004284:	71bb      	strb	r3, [r7, #6]
 8004286:	4613      	mov	r3, r2
 8004288:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	2b00      	cmp	r3, #0
 8004290:	db3d      	blt.n	800430e <ssd1306_DrawPixel+0x96>
 8004292:	79bb      	ldrb	r3, [r7, #6]
 8004294:	2b3f      	cmp	r3, #63	; 0x3f
 8004296:	d83a      	bhi.n	800430e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004298:	797b      	ldrb	r3, [r7, #5]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d11a      	bne.n	80042d4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800429e:	79fa      	ldrb	r2, [r7, #7]
 80042a0:	79bb      	ldrb	r3, [r7, #6]
 80042a2:	08db      	lsrs	r3, r3, #3
 80042a4:	b2d8      	uxtb	r0, r3
 80042a6:	4603      	mov	r3, r0
 80042a8:	01db      	lsls	r3, r3, #7
 80042aa:	4413      	add	r3, r2
 80042ac:	4a1b      	ldr	r2, [pc, #108]	; (800431c <ssd1306_DrawPixel+0xa4>)
 80042ae:	5cd3      	ldrb	r3, [r2, r3]
 80042b0:	b25a      	sxtb	r2, r3
 80042b2:	79bb      	ldrb	r3, [r7, #6]
 80042b4:	f003 0307 	and.w	r3, r3, #7
 80042b8:	2101      	movs	r1, #1
 80042ba:	fa01 f303 	lsl.w	r3, r1, r3
 80042be:	b25b      	sxtb	r3, r3
 80042c0:	4313      	orrs	r3, r2
 80042c2:	b259      	sxtb	r1, r3
 80042c4:	79fa      	ldrb	r2, [r7, #7]
 80042c6:	4603      	mov	r3, r0
 80042c8:	01db      	lsls	r3, r3, #7
 80042ca:	4413      	add	r3, r2
 80042cc:	b2c9      	uxtb	r1, r1
 80042ce:	4a13      	ldr	r2, [pc, #76]	; (800431c <ssd1306_DrawPixel+0xa4>)
 80042d0:	54d1      	strb	r1, [r2, r3]
 80042d2:	e01d      	b.n	8004310 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80042d4:	79fa      	ldrb	r2, [r7, #7]
 80042d6:	79bb      	ldrb	r3, [r7, #6]
 80042d8:	08db      	lsrs	r3, r3, #3
 80042da:	b2d8      	uxtb	r0, r3
 80042dc:	4603      	mov	r3, r0
 80042de:	01db      	lsls	r3, r3, #7
 80042e0:	4413      	add	r3, r2
 80042e2:	4a0e      	ldr	r2, [pc, #56]	; (800431c <ssd1306_DrawPixel+0xa4>)
 80042e4:	5cd3      	ldrb	r3, [r2, r3]
 80042e6:	b25a      	sxtb	r2, r3
 80042e8:	79bb      	ldrb	r3, [r7, #6]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	2101      	movs	r1, #1
 80042f0:	fa01 f303 	lsl.w	r3, r1, r3
 80042f4:	b25b      	sxtb	r3, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	4013      	ands	r3, r2
 80042fc:	b259      	sxtb	r1, r3
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	4603      	mov	r3, r0
 8004302:	01db      	lsls	r3, r3, #7
 8004304:	4413      	add	r3, r2
 8004306:	b2c9      	uxtb	r1, r1
 8004308:	4a04      	ldr	r2, [pc, #16]	; (800431c <ssd1306_DrawPixel+0xa4>)
 800430a:	54d1      	strb	r1, [r2, r3]
 800430c:	e000      	b.n	8004310 <ssd1306_DrawPixel+0x98>
        return;
 800430e:	bf00      	nop
    }
}
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	20000168 	.word	0x20000168

08004320 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b089      	sub	sp, #36	; 0x24
 8004324:	af00      	add	r7, sp, #0
 8004326:	4604      	mov	r4, r0
 8004328:	4638      	mov	r0, r7
 800432a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800432e:	4623      	mov	r3, r4
 8004330:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b1f      	cmp	r3, #31
 8004336:	d902      	bls.n	800433e <ssd1306_WriteChar+0x1e>
 8004338:	7bfb      	ldrb	r3, [r7, #15]
 800433a:	2b7e      	cmp	r3, #126	; 0x7e
 800433c:	d901      	bls.n	8004342 <ssd1306_WriteChar+0x22>
        return 0;
 800433e:	2300      	movs	r3, #0
 8004340:	e079      	b.n	8004436 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <ssd1306_WriteChar+0x120>)
 8004344:	881b      	ldrh	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	783b      	ldrb	r3, [r7, #0]
 800434a:	4413      	add	r3, r2
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	dc06      	bgt.n	800435e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004350:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <ssd1306_WriteChar+0x120>)
 8004352:	885b      	ldrh	r3, [r3, #2]
 8004354:	461a      	mov	r2, r3
 8004356:	787b      	ldrb	r3, [r7, #1]
 8004358:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800435a:	2b40      	cmp	r3, #64	; 0x40
 800435c:	dd01      	ble.n	8004362 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800435e:	2300      	movs	r3, #0
 8004360:	e069      	b.n	8004436 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004362:	2300      	movs	r3, #0
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	e04e      	b.n	8004406 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	3b20      	subs	r3, #32
 800436e:	7879      	ldrb	r1, [r7, #1]
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4619      	mov	r1, r3
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	440b      	add	r3, r1
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
 8004386:	e036      	b.n	80043f6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8004388:	697a      	ldr	r2, [r7, #20]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004394:	2b00      	cmp	r3, #0
 8004396:	d013      	beq.n	80043c0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004398:	4b29      	ldr	r3, [pc, #164]	; (8004440 <ssd1306_WriteChar+0x120>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	b2da      	uxtb	r2, r3
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	b2d8      	uxtb	r0, r3
 80043a6:	4b26      	ldr	r3, [pc, #152]	; (8004440 <ssd1306_WriteChar+0x120>)
 80043a8:	885b      	ldrh	r3, [r3, #2]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	4413      	add	r3, r2
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80043b8:	4619      	mov	r1, r3
 80043ba:	f7ff ff5d 	bl	8004278 <ssd1306_DrawPixel>
 80043be:	e017      	b.n	80043f0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <ssd1306_WriteChar+0x120>)
 80043c2:	881b      	ldrh	r3, [r3, #0]
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	b2d8      	uxtb	r0, r3
 80043ce:	4b1c      	ldr	r3, [pc, #112]	; (8004440 <ssd1306_WriteChar+0x120>)
 80043d0:	885b      	ldrh	r3, [r3, #2]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	4413      	add	r3, r2
 80043da:	b2d9      	uxtb	r1, r3
 80043dc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf0c      	ite	eq
 80043e4:	2301      	moveq	r3, #1
 80043e6:	2300      	movne	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7ff ff44 	bl	8004278 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	3301      	adds	r3, #1
 80043f4:	61bb      	str	r3, [r7, #24]
 80043f6:	783b      	ldrb	r3, [r7, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d3c3      	bcc.n	8004388 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	3301      	adds	r3, #1
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	787b      	ldrb	r3, [r7, #1]
 8004408:	461a      	mov	r2, r3
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	4293      	cmp	r3, r2
 800440e:	d3ab      	bcc.n	8004368 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <ssd1306_WriteChar+0x120>)
 8004412:	881a      	ldrh	r2, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <ssd1306_WriteChar+0x108>
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	3b20      	subs	r3, #32
 8004420:	440b      	add	r3, r1
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	e001      	b.n	800442c <ssd1306_WriteChar+0x10c>
 8004428:	783b      	ldrb	r3, [r7, #0]
 800442a:	b29b      	uxth	r3, r3
 800442c:	4413      	add	r3, r2
 800442e:	b29a      	uxth	r2, r3
 8004430:	4b03      	ldr	r3, [pc, #12]	; (8004440 <ssd1306_WriteChar+0x120>)
 8004432:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004434:	7bfb      	ldrb	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3724      	adds	r7, #36	; 0x24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd90      	pop	{r4, r7, pc}
 800443e:	bf00      	nop
 8004440:	20000568 	.word	0x20000568

08004444 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	4638      	mov	r0, r7
 800444e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004452:	e013      	b.n	800447c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	7818      	ldrb	r0, [r3, #0]
 8004458:	7e3b      	ldrb	r3, [r7, #24]
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	463b      	mov	r3, r7
 800445e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004460:	f7ff ff5e 	bl	8004320 <ssd1306_WriteChar>
 8004464:	4603      	mov	r3, r0
 8004466:	461a      	mov	r2, r3
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d002      	beq.n	8004476 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	e008      	b.n	8004488 <ssd1306_WriteString+0x44>
        }
        str++;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3301      	adds	r3, #1
 800447a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1e7      	bne.n	8004454 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	781b      	ldrb	r3, [r3, #0]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3710      	adds	r7, #16
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	4603      	mov	r3, r0
 8004498:	460a      	mov	r2, r1
 800449a:	71fb      	strb	r3, [r7, #7]
 800449c:	4613      	mov	r3, r2
 800449e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <ssd1306_SetCursor+0x2c>)
 80044a6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80044a8:	79bb      	ldrb	r3, [r7, #6]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <ssd1306_SetCursor+0x2c>)
 80044ae:	805a      	strh	r2, [r3, #2]
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000568 	.word	0x20000568

080044c0 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80044c0:	b590      	push	{r4, r7, lr}
 80044c2:	b089      	sub	sp, #36	; 0x24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	4604      	mov	r4, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	71fb      	strb	r3, [r7, #7]
 80044d2:	4603      	mov	r3, r0
 80044d4:	71bb      	strb	r3, [r7, #6]
 80044d6:	460b      	mov	r3, r1
 80044d8:	717b      	strb	r3, [r7, #5]
 80044da:	4613      	mov	r3, r2
 80044dc:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80044de:	797a      	ldrb	r2, [r7, #5]
 80044e0:	79fb      	ldrb	r3, [r7, #7]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	bfb8      	it	lt
 80044e8:	425b      	neglt	r3, r3
 80044ea:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80044ec:	793a      	ldrb	r2, [r7, #4]
 80044ee:	79bb      	ldrb	r3, [r7, #6]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	bfb8      	it	lt
 80044f6:	425b      	neglt	r3, r3
 80044f8:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80044fa:	79fa      	ldrb	r2, [r7, #7]
 80044fc:	797b      	ldrb	r3, [r7, #5]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d201      	bcs.n	8004506 <ssd1306_Line+0x46>
 8004502:	2301      	movs	r3, #1
 8004504:	e001      	b.n	800450a <ssd1306_Line+0x4a>
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 800450c:	79ba      	ldrb	r2, [r7, #6]
 800450e:	793b      	ldrb	r3, [r7, #4]
 8004510:	429a      	cmp	r2, r3
 8004512:	d201      	bcs.n	8004518 <ssd1306_Line+0x58>
 8004514:	2301      	movs	r3, #1
 8004516:	e001      	b.n	800451c <ssd1306_Line+0x5c>
 8004518:	f04f 33ff 	mov.w	r3, #4294967295
 800451c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8004526:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800452a:	7939      	ldrb	r1, [r7, #4]
 800452c:	797b      	ldrb	r3, [r7, #5]
 800452e:	4618      	mov	r0, r3
 8004530:	f7ff fea2 	bl	8004278 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8004534:	e024      	b.n	8004580 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8004536:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800453a:	79b9      	ldrb	r1, [r7, #6]
 800453c:	79fb      	ldrb	r3, [r7, #7]
 800453e:	4618      	mov	r0, r3
 8004540:	f7ff fe9a 	bl	8004278 <ssd1306_DrawPixel>
        error2 = error * 2;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	425b      	negs	r3, r3
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	dd08      	ble.n	8004566 <ssd1306_Line+0xa6>
            error -= deltaY;
 8004554:	69fa      	ldr	r2, [r7, #28]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	4413      	add	r3, r2
 8004564:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8004566:	68ba      	ldr	r2, [r7, #8]
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	429a      	cmp	r2, r3
 800456c:	da08      	bge.n	8004580 <ssd1306_Line+0xc0>
            error += deltaX;
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	4413      	add	r3, r2
 8004574:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	b2da      	uxtb	r2, r3
 800457a:	79bb      	ldrb	r3, [r7, #6]
 800457c:	4413      	add	r3, r2
 800457e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8004580:	79fa      	ldrb	r2, [r7, #7]
 8004582:	797b      	ldrb	r3, [r7, #5]
 8004584:	429a      	cmp	r2, r3
 8004586:	d1d6      	bne.n	8004536 <ssd1306_Line+0x76>
 8004588:	79ba      	ldrb	r2, [r7, #6]
 800458a:	793b      	ldrb	r3, [r7, #4]
 800458c:	429a      	cmp	r2, r3
 800458e:	d1d2      	bne.n	8004536 <ssd1306_Line+0x76>
        }
    }
    return;
 8004590:	bf00      	nop
}
 8004592:	3724      	adds	r7, #36	; 0x24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd90      	pop	{r4, r7, pc}

08004598 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8004598:	b590      	push	{r4, r7, lr}
 800459a:	b087      	sub	sp, #28
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	807b      	strh	r3, [r7, #2]
 80045a4:	4613      	mov	r3, r2
 80045a6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d02a      	beq.n	8004604 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 80045ae:	2301      	movs	r3, #1
 80045b0:	81fb      	strh	r3, [r7, #14]
 80045b2:	e022      	b.n	80045fa <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 80045b4:	89fb      	ldrh	r3, [r7, #14]
 80045b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80045ba:	3b01      	subs	r3, #1
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	4413      	add	r3, r2
 80045c2:	7818      	ldrb	r0, [r3, #0]
 80045c4:	89fb      	ldrh	r3, [r7, #14]
 80045c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80045ca:	3b01      	subs	r3, #1
 80045cc:	005b      	lsls	r3, r3, #1
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	4413      	add	r3, r2
 80045d2:	7859      	ldrb	r1, [r3, #1]
 80045d4:	89fb      	ldrh	r3, [r7, #14]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	4413      	add	r3, r2
 80045dc:	781c      	ldrb	r4, [r3, #0]
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	4413      	add	r3, r2
 80045e6:	785a      	ldrb	r2, [r3, #1]
 80045e8:	787b      	ldrb	r3, [r7, #1]
 80045ea:	9300      	str	r3, [sp, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	4622      	mov	r2, r4
 80045f0:	f7ff ff66 	bl	80044c0 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 80045f4:	89fb      	ldrh	r3, [r7, #14]
 80045f6:	3301      	adds	r3, #1
 80045f8:	81fb      	strh	r3, [r7, #14]
 80045fa:	89fa      	ldrh	r2, [r7, #14]
 80045fc:	887b      	ldrh	r3, [r7, #2]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d3d8      	bcc.n	80045b4 <ssd1306_Polyline+0x1c>
    }

    return;
 8004602:	e000      	b.n	8004606 <ssd1306_Polyline+0x6e>
        return;
 8004604:	bf00      	nop
}
 8004606:	3714      	adds	r7, #20
 8004608:	46bd      	mov	sp, r7
 800460a:	bd90      	pop	{r4, r7, pc}

0800460c <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 8004616:	edd7 7a01 	vldr	s15, [r7, #4]
 800461a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004630 <ssd1306_DegToRad+0x24>
 800461e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8004622:	eeb0 0a67 	vmov.f32	s0, s15
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	3c8ee7a7 	.word	0x3c8ee7a7

08004634 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 800463e:	88fb      	ldrh	r3, [r7, #6]
 8004640:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8004644:	d802      	bhi.n	800464c <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 8004646:	88fb      	ldrh	r3, [r7, #6]
 8004648:	81fb      	strh	r3, [r7, #14]
 800464a:	e013      	b.n	8004674 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 800464c:	88fb      	ldrh	r3, [r7, #6]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	490c      	ldr	r1, [pc, #48]	; (8004684 <ssd1306_NormalizeTo0_360+0x50>)
 8004652:	fba1 1202 	umull	r1, r2, r1, r2
 8004656:	0892      	lsrs	r2, r2, #2
 8004658:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800465c:	fb01 f202 	mul.w	r2, r1, r2
 8004660:	1a9b      	subs	r3, r3, r2
 8004662:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8004664:	89fb      	ldrh	r3, [r7, #14]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <ssd1306_NormalizeTo0_360+0x3a>
 800466a:	89fb      	ldrh	r3, [r7, #14]
 800466c:	e001      	b.n	8004672 <ssd1306_NormalizeTo0_360+0x3e>
 800466e:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8004672:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8004674:	89fb      	ldrh	r3, [r7, #14]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3714      	adds	r7, #20
 800467a:	46bd      	mov	sp, r7
 800467c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004680:	4770      	bx	lr
 8004682:	bf00      	nop
 8004684:	16c16c17 	.word	0x16c16c17

08004688 <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8004688:	b590      	push	{r4, r7, lr}
 800468a:	b08d      	sub	sp, #52	; 0x34
 800468c:	af02      	add	r7, sp, #8
 800468e:	4604      	mov	r4, r0
 8004690:	4608      	mov	r0, r1
 8004692:	4611      	mov	r1, r2
 8004694:	461a      	mov	r2, r3
 8004696:	4623      	mov	r3, r4
 8004698:	73fb      	strb	r3, [r7, #15]
 800469a:	4603      	mov	r3, r0
 800469c:	73bb      	strb	r3, [r7, #14]
 800469e:	460b      	mov	r3, r1
 80046a0:	737b      	strb	r3, [r7, #13]
 80046a2:	4613      	mov	r3, r2
 80046a4:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80046a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7ff ffc3 	bl	8004634 <ssd1306_NormalizeTo0_360>
 80046ae:	4603      	mov	r3, r0
 80046b0:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80046b2:	897b      	ldrh	r3, [r7, #10]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7ff ffbd 	bl	8004634 <ssd1306_NormalizeTo0_360>
 80046ba:	4603      	mov	r3, r0
 80046bc:	461a      	mov	r2, r3
 80046be:	4b63      	ldr	r3, [pc, #396]	; (800484c <ssd1306_DrawArc+0x1c4>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	fb02 f303 	mul.w	r3, r2, r3
 80046c6:	4a62      	ldr	r2, [pc, #392]	; (8004850 <ssd1306_DrawArc+0x1c8>)
 80046c8:	fb82 1203 	smull	r1, r2, r2, r3
 80046cc:	441a      	add	r2, r3
 80046ce:	1212      	asrs	r2, r2, #8
 80046d0:	17db      	asrs	r3, r3, #31
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	627b      	str	r3, [r7, #36]	; 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80046d6:	4b5d      	ldr	r3, [pc, #372]	; (800484c <ssd1306_DrawArc+0x1c4>)
 80046d8:	781b      	ldrb	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	08db      	lsrs	r3, r3, #3
 80046e4:	4a5b      	ldr	r2, [pc, #364]	; (8004854 <ssd1306_DrawArc+0x1cc>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	089b      	lsrs	r3, r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	ee07 3a90 	vmov	s15, r3
 80046f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004702:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004706:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800470a:	e096      	b.n	800483a <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	ee07 3a90 	vmov	s15, r3
 8004712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004716:	edd7 7a05 	vldr	s15, [r7, #20]
 800471a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471e:	eeb0 0a67 	vmov.f32	s0, s15
 8004722:	f7ff ff73 	bl	800460c <ssd1306_DegToRad>
 8004726:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800472a:	ed97 0a08 	vldr	s0, [r7, #32]
 800472e:	f001 fd2b 	bl	8006188 <sinf>
 8004732:	eeb0 7a40 	vmov.f32	s14, s0
 8004736:	7b7b      	ldrb	r3, [r7, #13]
 8004738:	ee07 3a90 	vmov	s15, r3
 800473c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004740:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004744:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004748:	edc7 7a01 	vstr	s15, [r7, #4]
 800474c:	793b      	ldrb	r3, [r7, #4]
 800474e:	b25b      	sxtb	r3, r3
 8004750:	b2da      	uxtb	r2, r3
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	4413      	add	r3, r2
 8004756:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 8004758:	ed97 0a08 	vldr	s0, [r7, #32]
 800475c:	f001 fcd0 	bl	8006100 <cosf>
 8004760:	eeb0 7a40 	vmov.f32	s14, s0
 8004764:	7b7b      	ldrb	r3, [r7, #13]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800476e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004772:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004776:	edc7 7a01 	vstr	s15, [r7, #4]
 800477a:	793b      	ldrb	r3, [r7, #4]
 800477c:	b25b      	sxtb	r3, r3
 800477e:	b2da      	uxtb	r2, r3
 8004780:	7bbb      	ldrb	r3, [r7, #14]
 8004782:	4413      	add	r3, r2
 8004784:	74bb      	strb	r3, [r7, #18]
        count++;
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	3301      	adds	r3, #1
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
        if(count != approx_segments) {
 800478c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	429a      	cmp	r2, r3
 8004792:	d00f      	beq.n	80047b4 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800479e:	edd7 7a05 	vldr	s15, [r7, #20]
 80047a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	f7ff ff2f 	bl	800460c <ssd1306_DegToRad>
 80047ae:	ed87 0a08 	vstr	s0, [r7, #32]
 80047b2:	e00a      	b.n	80047ca <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	ee07 3a90 	vmov	s15, r3
 80047ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047be:	eeb0 0a67 	vmov.f32	s0, s15
 80047c2:	f7ff ff23 	bl	800460c <ssd1306_DegToRad>
 80047c6:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80047ca:	ed97 0a08 	vldr	s0, [r7, #32]
 80047ce:	f001 fcdb 	bl	8006188 <sinf>
 80047d2:	eeb0 7a40 	vmov.f32	s14, s0
 80047d6:	7b7b      	ldrb	r3, [r7, #13]
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047e8:	edc7 7a01 	vstr	s15, [r7, #4]
 80047ec:	793b      	ldrb	r3, [r7, #4]
 80047ee:	b25b      	sxtb	r3, r3
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
 80047f4:	4413      	add	r3, r2
 80047f6:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 80047f8:	ed97 0a08 	vldr	s0, [r7, #32]
 80047fc:	f001 fc80 	bl	8006100 <cosf>
 8004800:	eeb0 7a40 	vmov.f32	s14, s0
 8004804:	7b7b      	ldrb	r3, [r7, #13]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004816:	edc7 7a01 	vstr	s15, [r7, #4]
 800481a:	793b      	ldrb	r3, [r7, #4]
 800481c:	b25b      	sxtb	r3, r3
 800481e:	b2da      	uxtb	r2, r3
 8004820:	7bbb      	ldrb	r3, [r7, #14]
 8004822:	4413      	add	r3, r2
 8004824:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8004826:	7c3c      	ldrb	r4, [r7, #16]
 8004828:	7c7a      	ldrb	r2, [r7, #17]
 800482a:	7cb9      	ldrb	r1, [r7, #18]
 800482c:	7cf8      	ldrb	r0, [r7, #19]
 800482e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	4623      	mov	r3, r4
 8004836:	f7ff fe43 	bl	80044c0 <ssd1306_Line>
    while(count < approx_segments)
 800483a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	429a      	cmp	r2, r3
 8004840:	f4ff af64 	bcc.w	800470c <ssd1306_DrawArc+0x84>
    }
    
    return;
 8004844:	bf00      	nop
}
 8004846:	372c      	adds	r7, #44	; 0x2c
 8004848:	46bd      	mov	sp, r7
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	08006d1c 	.word	0x08006d1c
 8004850:	b60b60b7 	.word	0xb60b60b7
 8004854:	16c16c17 	.word	0x16c16c17

08004858 <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 8004858:	b590      	push	{r4, r7, lr}
 800485a:	b08f      	sub	sp, #60	; 0x3c
 800485c:	af02      	add	r7, sp, #8
 800485e:	4604      	mov	r4, r0
 8004860:	4608      	mov	r0, r1
 8004862:	4611      	mov	r1, r2
 8004864:	461a      	mov	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	73fb      	strb	r3, [r7, #15]
 800486a:	4603      	mov	r3, r0
 800486c:	73bb      	strb	r3, [r7, #14]
 800486e:	460b      	mov	r3, r1
 8004870:	737b      	strb	r3, [r7, #13]
 8004872:	4613      	mov	r3, r2
 8004874:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 8004876:	2324      	movs	r3, #36	; 0x24
 8004878:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8004880:	2300      	movs	r3, #0
 8004882:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 8004886:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fed2 	bl	8004634 <ssd1306_NormalizeTo0_360>
 8004890:	4603      	mov	r3, r0
 8004892:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8004894:	897b      	ldrh	r3, [r7, #10]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fecc 	bl	8004634 <ssd1306_NormalizeTo0_360>
 800489c:	4603      	mov	r3, r0
 800489e:	461a      	mov	r2, r3
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	08db      	lsrs	r3, r3, #3
 80048a8:	4a8a      	ldr	r2, [pc, #552]	; (8004ad4 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	089b      	lsrs	r3, r3, #2
 80048b0:	62bb      	str	r3, [r7, #40]	; 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	fb02 f303 	mul.w	r3, r2, r3
 80048ba:	08db      	lsrs	r3, r3, #3
 80048bc:	4a85      	ldr	r2, [pc, #532]	; (8004ad4 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80048be:	fba2 2303 	umull	r2, r3, r2, r3
 80048c2:	089b      	lsrs	r3, r3, #2
 80048c4:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	ee07 3a90 	vmov	s15, r3
 80048cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048de:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 80048e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e4:	ee07 3a90 	vmov	s15, r3
 80048e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80048f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f4:	eeb0 0a67 	vmov.f32	s0, s15
 80048f8:	f7ff fe88 	bl	800460c <ssd1306_DegToRad>
 80048fc:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8004900:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004904:	f001 fc40 	bl	8006188 <sinf>
 8004908:	eeb0 7a40 	vmov.f32	s14, s0
 800490c:	7b7b      	ldrb	r3, [r7, #13]
 800490e:	ee07 3a90 	vmov	s15, r3
 8004912:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800491a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800491e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004922:	793b      	ldrb	r3, [r7, #4]
 8004924:	b25b      	sxtb	r3, r3
 8004926:	b2da      	uxtb	r2, r3
 8004928:	7bfb      	ldrb	r3, [r7, #15]
 800492a:	4413      	add	r3, r2
 800492c:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 800492e:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004932:	f001 fbe5 	bl	8006100 <cosf>
 8004936:	eeb0 7a40 	vmov.f32	s14, s0
 800493a:	7b7b      	ldrb	r3, [r7, #13]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004944:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004948:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800494c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004950:	793b      	ldrb	r3, [r7, #4]
 8004952:	b25b      	sxtb	r3, r3
 8004954:	b2da      	uxtb	r2, r3
 8004956:	7bbb      	ldrb	r3, [r7, #14]
 8004958:	4413      	add	r3, r2
 800495a:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 800495c:	e09a      	b.n	8004a94 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	ee07 3a90 	vmov	s15, r3
 8004964:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004968:	edd7 7a05 	vldr	s15, [r7, #20]
 800496c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004970:	eeb0 0a67 	vmov.f32	s0, s15
 8004974:	f7ff fe4a 	bl	800460c <ssd1306_DegToRad>
 8004978:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800497c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004980:	f001 fc02 	bl	8006188 <sinf>
 8004984:	eeb0 7a40 	vmov.f32	s14, s0
 8004988:	7b7b      	ldrb	r3, [r7, #13]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800499a:	edc7 7a01 	vstr	s15, [r7, #4]
 800499e:	793b      	ldrb	r3, [r7, #4]
 80049a0:	b25b      	sxtb	r3, r3
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
 80049a6:	4413      	add	r3, r2
 80049a8:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80049aa:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80049ae:	f001 fba7 	bl	8006100 <cosf>
 80049b2:	eeb0 7a40 	vmov.f32	s14, s0
 80049b6:	7b7b      	ldrb	r3, [r7, #13]
 80049b8:	ee07 3a90 	vmov	s15, r3
 80049bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049c8:	edc7 7a01 	vstr	s15, [r7, #4]
 80049cc:	793b      	ldrb	r3, [r7, #4]
 80049ce:	b25b      	sxtb	r3, r3
 80049d0:	b2da      	uxtb	r2, r3
 80049d2:	7bbb      	ldrb	r3, [r7, #14]
 80049d4:	4413      	add	r3, r2
 80049d6:	743b      	strb	r3, [r7, #16]
        count++;
 80049d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049da:	3301      	adds	r3, #1
 80049dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if (count != approx_segments) {
 80049de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d00f      	beq.n	8004a06 <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	ee07 3a90 	vmov	s15, r3
 80049ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	eeb0 0a67 	vmov.f32	s0, s15
 80049fc:	f7ff fe06 	bl	800460c <ssd1306_DegToRad>
 8004a00:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
 8004a04:	e00a      	b.n	8004a1c <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eeb0 0a67 	vmov.f32	s0, s15
 8004a14:	f7ff fdfa 	bl	800460c <ssd1306_DegToRad>
 8004a18:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8004a1c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004a20:	f001 fbb2 	bl	8006188 <sinf>
 8004a24:	eeb0 7a40 	vmov.f32	s14, s0
 8004a28:	7b7b      	ldrb	r3, [r7, #13]
 8004a2a:	ee07 3a90 	vmov	s15, r3
 8004a2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a3a:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a3e:	793b      	ldrb	r3, [r7, #4]
 8004a40:	b25b      	sxtb	r3, r3
 8004a42:	b2da      	uxtb	r2, r3
 8004a44:	7bfb      	ldrb	r3, [r7, #15]
 8004a46:	4413      	add	r3, r2
 8004a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8004a4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8004a50:	f001 fb56 	bl	8006100 <cosf>
 8004a54:	eeb0 7a40 	vmov.f32	s14, s0
 8004a58:	7b7b      	ldrb	r3, [r7, #13]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a6a:	edc7 7a01 	vstr	s15, [r7, #4]
 8004a6e:	793b      	ldrb	r3, [r7, #4]
 8004a70:	b25b      	sxtb	r3, r3
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	7bbb      	ldrb	r3, [r7, #14]
 8004a76:	4413      	add	r3, r2
 8004a78:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8004a7c:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8004a80:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004a84:	7c39      	ldrb	r1, [r7, #16]
 8004a86:	7c78      	ldrb	r0, [r7, #17]
 8004a88:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	4623      	mov	r3, r4
 8004a90:	f7ff fd16 	bl	80044c0 <ssd1306_Line>
    while (count < approx_segments) {
 8004a94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f4ff af60 	bcc.w	800495e <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 8004a9e:	7cbc      	ldrb	r4, [r7, #18]
 8004aa0:	7cfa      	ldrb	r2, [r7, #19]
 8004aa2:	7bb9      	ldrb	r1, [r7, #14]
 8004aa4:	7bf8      	ldrb	r0, [r7, #15]
 8004aa6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	4623      	mov	r3, r4
 8004aae:	f7ff fd07 	bl	80044c0 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 8004ab2:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8004ab6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8004aba:	7bb9      	ldrb	r1, [r7, #14]
 8004abc:	7bf8      	ldrb	r0, [r7, #15]
 8004abe:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	4623      	mov	r3, r4
 8004ac6:	f7ff fcfb 	bl	80044c0 <ssd1306_Line>
    return;
 8004aca:	bf00      	nop
}
 8004acc:	3734      	adds	r7, #52	; 0x34
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	16c16c17 	.word	0x16c16c17

08004ad8 <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004ad8:	b590      	push	{r4, r7, lr}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4604      	mov	r4, r0
 8004ae0:	4608      	mov	r0, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	461a      	mov	r2, r3
 8004ae6:	4623      	mov	r3, r4
 8004ae8:	71fb      	strb	r3, [r7, #7]
 8004aea:	4603      	mov	r3, r0
 8004aec:	71bb      	strb	r3, [r7, #6]
 8004aee:	460b      	mov	r3, r1
 8004af0:	717b      	strb	r3, [r7, #5]
 8004af2:	4613      	mov	r3, r2
 8004af4:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004af6:	797b      	ldrb	r3, [r7, #5]
 8004af8:	425b      	negs	r3, r3
 8004afa:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8004afc:	2300      	movs	r3, #0
 8004afe:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8004b00:	797b      	ldrb	r3, [r7, #5]
 8004b02:	f1c3 0301 	rsb	r3, r3, #1
 8004b06:	005b      	lsls	r3, r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8004b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	db65      	blt.n	8004bde <ssd1306_DrawCircle+0x106>
 8004b12:	79bb      	ldrb	r3, [r7, #6]
 8004b14:	2b3f      	cmp	r3, #63	; 0x3f
 8004b16:	d862      	bhi.n	8004bde <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	79fa      	ldrb	r2, [r7, #7]
 8004b1e:	1ad3      	subs	r3, r2, r3
 8004b20:	b2d8      	uxtb	r0, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	b2da      	uxtb	r2, r3
 8004b26:	79bb      	ldrb	r3, [r7, #6]
 8004b28:	4413      	add	r3, r2
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	793a      	ldrb	r2, [r7, #4]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	f7ff fba2 	bl	8004278 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	b2d8      	uxtb	r0, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	79bb      	ldrb	r3, [r7, #6]
 8004b44:	4413      	add	r3, r2
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	793a      	ldrb	r2, [r7, #4]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f7ff fb94 	bl	8004278 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	b2da      	uxtb	r2, r3
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	4413      	add	r3, r2
 8004b58:	b2d8      	uxtb	r0, r3
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	79ba      	ldrb	r2, [r7, #6]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	793a      	ldrb	r2, [r7, #4]
 8004b66:	4619      	mov	r1, r3
 8004b68:	f7ff fb86 	bl	8004278 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	79fa      	ldrb	r2, [r7, #7]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	b2d8      	uxtb	r0, r3
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	79ba      	ldrb	r2, [r7, #6]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	793a      	ldrb	r2, [r7, #4]
 8004b82:	4619      	mov	r1, r3
 8004b84:	f7ff fb78 	bl	8004278 <ssd1306_DrawPixel>
        e2 = err;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8004b8c:	68ba      	ldr	r2, [r7, #8]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	dc13      	bgt.n	8004bbc <ssd1306_DrawCircle+0xe4>
            y++;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	3301      	adds	r3, #1
 8004b98:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	425b      	negs	r3, r3
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d105      	bne.n	8004bbc <ssd1306_DrawCircle+0xe4>
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	dc01      	bgt.n	8004bbc <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	dd08      	ble.n	8004bd6 <ssd1306_DrawCircle+0xfe>
            x++;
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	3301      	adds	r3, #1
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	dd9d      	ble.n	8004b18 <ssd1306_DrawCircle+0x40>

    return;
 8004bdc:	e000      	b.n	8004be0 <ssd1306_DrawCircle+0x108>
        return;
 8004bde:	bf00      	nop
}
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}

08004be6 <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8004be6:	b590      	push	{r4, r7, lr}
 8004be8:	b089      	sub	sp, #36	; 0x24
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	4604      	mov	r4, r0
 8004bee:	4608      	mov	r0, r1
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	4623      	mov	r3, r4
 8004bf6:	71fb      	strb	r3, [r7, #7]
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	71bb      	strb	r3, [r7, #6]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	717b      	strb	r3, [r7, #5]
 8004c00:	4613      	mov	r3, r2
 8004c02:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8004c04:	797b      	ldrb	r3, [r7, #5]
 8004c06:	425b      	negs	r3, r3
 8004c08:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8004c0e:	797b      	ldrb	r3, [r7, #5]
 8004c10:	f1c3 0301 	rsb	r3, r3, #1
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db51      	blt.n	8004cc4 <ssd1306_FillCircle+0xde>
 8004c20:	79bb      	ldrb	r3, [r7, #6]
 8004c22:	2b3f      	cmp	r3, #63	; 0x3f
 8004c24:	d84e      	bhi.n	8004cc4 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	79bb      	ldrb	r3, [r7, #6]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	73fb      	strb	r3, [r7, #15]
 8004c30:	e017      	b.n	8004c62 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	79fa      	ldrb	r2, [r7, #7]
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	73bb      	strb	r3, [r7, #14]
 8004c3c:	e008      	b.n	8004c50 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8004c3e:	793a      	ldrb	r2, [r7, #4]
 8004c40:	7bf9      	ldrb	r1, [r7, #15]
 8004c42:	7bbb      	ldrb	r3, [r7, #14]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff fb17 	bl	8004278 <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8004c4a:	7bbb      	ldrb	r3, [r7, #14]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	73bb      	strb	r3, [r7, #14]
 8004c50:	7bba      	ldrb	r2, [r7, #14]
 8004c52:	79f9      	ldrb	r1, [r7, #7]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	440b      	add	r3, r1
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	daf0      	bge.n	8004c3e <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
 8004c62:	7bfa      	ldrb	r2, [r7, #15]
 8004c64:	79b9      	ldrb	r1, [r7, #6]
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	1acb      	subs	r3, r1, r3
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	dae1      	bge.n	8004c32 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	dc13      	bgt.n	8004ca2 <ssd1306_FillCircle+0xbc>
            y++;
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	3301      	adds	r3, #1
 8004c86:	697a      	ldr	r2, [r7, #20]
 8004c88:	4413      	add	r3, r2
 8004c8a:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	425b      	negs	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d105      	bne.n	8004ca2 <ssd1306_FillCircle+0xbc>
 8004c96:	693a      	ldr	r2, [r7, #16]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	dc01      	bgt.n	8004ca2 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	dd08      	ble.n	8004cbc <ssd1306_FillCircle+0xd6>
            x++;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3301      	adds	r3, #1
 8004cae:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	697a      	ldr	r2, [r7, #20]
 8004cb8:	4413      	add	r3, r2
 8004cba:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	ddb1      	ble.n	8004c26 <ssd1306_FillCircle+0x40>

    return;
 8004cc2:	e000      	b.n	8004cc6 <ssd1306_FillCircle+0xe0>
        return;
 8004cc4:	bf00      	nop
}
 8004cc6:	3724      	adds	r7, #36	; 0x24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd90      	pop	{r4, r7, pc}

08004ccc <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004ccc:	b590      	push	{r4, r7, lr}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af02      	add	r7, sp, #8
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4608      	mov	r0, r1
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	4623      	mov	r3, r4
 8004cdc:	71fb      	strb	r3, [r7, #7]
 8004cde:	4603      	mov	r3, r0
 8004ce0:	71bb      	strb	r3, [r7, #6]
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	717b      	strb	r3, [r7, #5]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8004cea:	79bc      	ldrb	r4, [r7, #6]
 8004cec:	797a      	ldrb	r2, [r7, #5]
 8004cee:	79b9      	ldrb	r1, [r7, #6]
 8004cf0:	79f8      	ldrb	r0, [r7, #7]
 8004cf2:	7e3b      	ldrb	r3, [r7, #24]
 8004cf4:	9300      	str	r3, [sp, #0]
 8004cf6:	4623      	mov	r3, r4
 8004cf8:	f7ff fbe2 	bl	80044c0 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8004cfc:	793c      	ldrb	r4, [r7, #4]
 8004cfe:	797a      	ldrb	r2, [r7, #5]
 8004d00:	79b9      	ldrb	r1, [r7, #6]
 8004d02:	7978      	ldrb	r0, [r7, #5]
 8004d04:	7e3b      	ldrb	r3, [r7, #24]
 8004d06:	9300      	str	r3, [sp, #0]
 8004d08:	4623      	mov	r3, r4
 8004d0a:	f7ff fbd9 	bl	80044c0 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8004d0e:	793c      	ldrb	r4, [r7, #4]
 8004d10:	79fa      	ldrb	r2, [r7, #7]
 8004d12:	7939      	ldrb	r1, [r7, #4]
 8004d14:	7978      	ldrb	r0, [r7, #5]
 8004d16:	7e3b      	ldrb	r3, [r7, #24]
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	4623      	mov	r3, r4
 8004d1c:	f7ff fbd0 	bl	80044c0 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8004d20:	79bc      	ldrb	r4, [r7, #6]
 8004d22:	79fa      	ldrb	r2, [r7, #7]
 8004d24:	7939      	ldrb	r1, [r7, #4]
 8004d26:	79f8      	ldrb	r0, [r7, #7]
 8004d28:	7e3b      	ldrb	r3, [r7, #24]
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	4623      	mov	r3, r4
 8004d2e:	f7ff fbc7 	bl	80044c0 <ssd1306_Line>

    return;
 8004d32:	bf00      	nop
}
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd90      	pop	{r4, r7, pc}

08004d3a <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8004d3a:	b590      	push	{r4, r7, lr}
 8004d3c:	b085      	sub	sp, #20
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	4604      	mov	r4, r0
 8004d42:	4608      	mov	r0, r1
 8004d44:	4611      	mov	r1, r2
 8004d46:	461a      	mov	r2, r3
 8004d48:	4623      	mov	r3, r4
 8004d4a:	71fb      	strb	r3, [r7, #7]
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	71bb      	strb	r3, [r7, #6]
 8004d50:	460b      	mov	r3, r1
 8004d52:	717b      	strb	r3, [r7, #5]
 8004d54:	4613      	mov	r3, r2
 8004d56:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8004d58:	79fa      	ldrb	r2, [r7, #7]
 8004d5a:	797b      	ldrb	r3, [r7, #5]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bf28      	it	cs
 8004d60:	4613      	movcs	r3, r2
 8004d62:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004d64:	797a      	ldrb	r2, [r7, #5]
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	bf38      	it	cc
 8004d6c:	4613      	movcc	r3, r2
 8004d6e:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8004d70:	79ba      	ldrb	r2, [r7, #6]
 8004d72:	793b      	ldrb	r3, [r7, #4]
 8004d74:	4293      	cmp	r3, r2
 8004d76:	bf28      	it	cs
 8004d78:	4613      	movcs	r3, r2
 8004d7a:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8004d7c:	793a      	ldrb	r2, [r7, #4]
 8004d7e:	79bb      	ldrb	r3, [r7, #6]
 8004d80:	4293      	cmp	r3, r2
 8004d82:	bf38      	it	cc
 8004d84:	4613      	movcc	r3, r2
 8004d86:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004d88:	7afb      	ldrb	r3, [r7, #11]
 8004d8a:	73fb      	strb	r3, [r7, #15]
 8004d8c:	e017      	b.n	8004dbe <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004d8e:	7b7b      	ldrb	r3, [r7, #13]
 8004d90:	73bb      	strb	r3, [r7, #14]
 8004d92:	e009      	b.n	8004da8 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004d94:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004d98:	7bf9      	ldrb	r1, [r7, #15]
 8004d9a:	7bbb      	ldrb	r3, [r7, #14]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff fa6b 	bl	8004278 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004da2:	7bbb      	ldrb	r3, [r7, #14]
 8004da4:	3301      	adds	r3, #1
 8004da6:	73bb      	strb	r3, [r7, #14]
 8004da8:	7bba      	ldrb	r2, [r7, #14]
 8004daa:	7b3b      	ldrb	r3, [r7, #12]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d803      	bhi.n	8004db8 <ssd1306_FillRectangle+0x7e>
 8004db0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	daed      	bge.n	8004d94 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	73fb      	strb	r3, [r7, #15]
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	7abb      	ldrb	r3, [r7, #10]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d803      	bhi.n	8004dce <ssd1306_FillRectangle+0x94>
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b3f      	cmp	r3, #63	; 0x3f
 8004dca:	d9e0      	bls.n	8004d8e <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8004dcc:	bf00      	nop
 8004dce:	bf00      	nop
}
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}
	...

08004dd8 <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 8004dd8:	b490      	push	{r4, r7}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	4604      	mov	r4, r0
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4623      	mov	r3, r4
 8004de8:	71fb      	strb	r3, [r7, #7]
 8004dea:	4603      	mov	r3, r0
 8004dec:	71bb      	strb	r3, [r7, #6]
 8004dee:	460b      	mov	r3, r1
 8004df0:	717b      	strb	r3, [r7, #5]
 8004df2:	4613      	mov	r3, r2
 8004df4:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 8004df6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db02      	blt.n	8004e04 <ssd1306_InvertRectangle+0x2c>
 8004dfe:	793b      	ldrb	r3, [r7, #4]
 8004e00:	2b3f      	cmp	r3, #63	; 0x3f
 8004e02:	d901      	bls.n	8004e08 <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e09c      	b.n	8004f42 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 8004e08:	79fa      	ldrb	r2, [r7, #7]
 8004e0a:	797b      	ldrb	r3, [r7, #5]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d803      	bhi.n	8004e18 <ssd1306_InvertRectangle+0x40>
 8004e10:	79ba      	ldrb	r2, [r7, #6]
 8004e12:	793b      	ldrb	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d901      	bls.n	8004e1c <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e092      	b.n	8004f42 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8004e1c:	79bb      	ldrb	r3, [r7, #6]
 8004e1e:	08db      	lsrs	r3, r3, #3
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	793b      	ldrb	r3, [r7, #4]
 8004e24:	08db      	lsrs	r3, r3, #3
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d057      	beq.n	8004edc <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	e04f      	b.n	8004ed2 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8004e32:	79bb      	ldrb	r3, [r7, #6]
 8004e34:	08db      	lsrs	r3, r3, #3
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	01db      	lsls	r3, r3, #7
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	4413      	add	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8004e42:	4a42      	ldr	r2, [pc, #264]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	4413      	add	r3, r2
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	b25a      	sxtb	r2, r3
 8004e4c:	79bb      	ldrb	r3, [r7, #6]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	21ff      	movs	r1, #255	; 0xff
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	b25b      	sxtb	r3, r3
 8004e5a:	4053      	eors	r3, r2
 8004e5c:	b25b      	sxtb	r3, r3
 8004e5e:	b2d9      	uxtb	r1, r3
 8004e60:	4a3a      	ldr	r2, [pc, #232]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	4413      	add	r3, r2
 8004e66:	460a      	mov	r2, r1
 8004e68:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	3380      	adds	r3, #128	; 0x80
 8004e6e:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8004e70:	e00d      	b.n	8004e8e <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8004e72:	4a36      	ldr	r2, [pc, #216]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	4413      	add	r3, r2
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	b2d9      	uxtb	r1, r3
 8004e7e:	4a33      	ldr	r2, [pc, #204]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	460a      	mov	r2, r1
 8004e86:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	3380      	adds	r3, #128	; 0x80
 8004e8c:	617b      	str	r3, [r7, #20]
 8004e8e:	793b      	ldrb	r3, [r7, #4]
 8004e90:	08db      	lsrs	r3, r3, #3
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	01db      	lsls	r3, r3, #7
 8004e96:	461a      	mov	r2, r3
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d3e7      	bcc.n	8004e72 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 8004ea2:	4a2a      	ldr	r2, [pc, #168]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	b25a      	sxtb	r2, r3
 8004eac:	793b      	ldrb	r3, [r7, #4]
 8004eae:	43db      	mvns	r3, r3
 8004eb0:	f003 0307 	and.w	r3, r3, #7
 8004eb4:	21ff      	movs	r1, #255	; 0xff
 8004eb6:	fa41 f303 	asr.w	r3, r1, r3
 8004eba:	b25b      	sxtb	r3, r3
 8004ebc:	4053      	eors	r3, r2
 8004ebe:	b25b      	sxtb	r3, r3
 8004ec0:	b2d9      	uxtb	r1, r3
 8004ec2:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	460a      	mov	r2, r1
 8004eca:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	3301      	adds	r3, #1
 8004ed0:	613b      	str	r3, [r7, #16]
 8004ed2:	797b      	ldrb	r3, [r7, #5]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d9ab      	bls.n	8004e32 <ssd1306_InvertRectangle+0x5a>
 8004eda:	e031      	b.n	8004f40 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 8004edc:	79bb      	ldrb	r3, [r7, #6]
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	22ff      	movs	r2, #255	; 0xff
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	b25a      	sxtb	r2, r3
 8004eea:	793b      	ldrb	r3, [r7, #4]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	21ff      	movs	r1, #255	; 0xff
 8004ef4:	fa41 f303 	asr.w	r3, r1, r3
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	4013      	ands	r3, r2
 8004efc:	b25b      	sxtb	r3, r3
 8004efe:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8004f00:	79fa      	ldrb	r2, [r7, #7]
 8004f02:	79bb      	ldrb	r3, [r7, #6]
 8004f04:	08db      	lsrs	r3, r3, #3
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	01db      	lsls	r3, r3, #7
 8004f0a:	4413      	add	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	e00e      	b.n	8004f2e <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8004f10:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	4413      	add	r3, r2
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
 8004f1a:	4053      	eors	r3, r2
 8004f1c:	b2d9      	uxtb	r1, r3
 8004f1e:	4a0b      	ldr	r2, [pc, #44]	; (8004f4c <ssd1306_InvertRectangle+0x174>)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	4413      	add	r3, r2
 8004f24:	460a      	mov	r2, r1
 8004f26:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	617b      	str	r3, [r7, #20]
 8004f2e:	797b      	ldrb	r3, [r7, #5]
 8004f30:	793a      	ldrb	r2, [r7, #4]
 8004f32:	08d2      	lsrs	r2, r2, #3
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	01d2      	lsls	r2, r2, #7
 8004f38:	4413      	add	r3, r2
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d9e7      	bls.n	8004f10 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc90      	pop	{r4, r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	20000168 	.word	0x20000168

08004f50 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	603a      	str	r2, [r7, #0]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	71fb      	strb	r3, [r7, #7]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	71bb      	strb	r3, [r7, #6]
 8004f62:	4613      	mov	r3, r2
 8004f64:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8004f66:	797b      	ldrb	r3, [r7, #5]
 8004f68:	3307      	adds	r3, #7
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	da00      	bge.n	8004f70 <ssd1306_DrawBitmap+0x20>
 8004f6e:	3307      	adds	r3, #7
 8004f70:	10db      	asrs	r3, r3, #3
 8004f72:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	db3e      	blt.n	8004ffe <ssd1306_DrawBitmap+0xae>
 8004f80:	79bb      	ldrb	r3, [r7, #6]
 8004f82:	2b3f      	cmp	r3, #63	; 0x3f
 8004f84:	d83b      	bhi.n	8004ffe <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8004f86:	2300      	movs	r3, #0
 8004f88:	73bb      	strb	r3, [r7, #14]
 8004f8a:	e033      	b.n	8004ff4 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	737b      	strb	r3, [r7, #13]
 8004f90:	e026      	b.n	8004fe0 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8004f92:	7b7b      	ldrb	r3, [r7, #13]
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8004f9c:	7bfb      	ldrb	r3, [r7, #15]
 8004f9e:	005b      	lsls	r3, r3, #1
 8004fa0:	73fb      	strb	r3, [r7, #15]
 8004fa2:	e00d      	b.n	8004fc0 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8004fa4:	7bbb      	ldrb	r3, [r7, #14]
 8004fa6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004faa:	fb02 f303 	mul.w	r3, r2, r3
 8004fae:	7b7a      	ldrb	r2, [r7, #13]
 8004fb0:	08d2      	lsrs	r2, r2, #3
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	4413      	add	r3, r2
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8004fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	da08      	bge.n	8004fda <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8004fc8:	79fa      	ldrb	r2, [r7, #7]
 8004fca:	7b7b      	ldrb	r3, [r7, #13]
 8004fcc:	4413      	add	r3, r2
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	7f3a      	ldrb	r2, [r7, #28]
 8004fd2:	79b9      	ldrb	r1, [r7, #6]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff f94f 	bl	8004278 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8004fda:	7b7b      	ldrb	r3, [r7, #13]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	737b      	strb	r3, [r7, #13]
 8004fe0:	7b7a      	ldrb	r2, [r7, #13]
 8004fe2:	797b      	ldrb	r3, [r7, #5]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d3d4      	bcc.n	8004f92 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8004fe8:	7bbb      	ldrb	r3, [r7, #14]
 8004fea:	3301      	adds	r3, #1
 8004fec:	73bb      	strb	r3, [r7, #14]
 8004fee:	79bb      	ldrb	r3, [r7, #6]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	71bb      	strb	r3, [r7, #6]
 8004ff4:	7bba      	ldrb	r2, [r7, #14]
 8004ff6:	7e3b      	ldrb	r3, [r7, #24]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d3c7      	bcc.n	8004f8c <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004ffc:	e000      	b.n	8005000 <ssd1306_DrawBitmap+0xb0>
        return;
 8004ffe:	bf00      	nop
}
 8005000:	3710      	adds	r7, #16
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}

08005006 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8005006:	b580      	push	{r7, lr}
 8005008:	b084      	sub	sp, #16
 800500a:	af00      	add	r7, sp, #0
 800500c:	4603      	mov	r3, r0
 800500e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8005010:	2381      	movs	r3, #129	; 0x81
 8005012:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	4618      	mov	r0, r3
 8005018:	f7ff f852 	bl	80040c0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff f84e 	bl	80040c0 <ssd1306_WriteCommand>
}
 8005024:	bf00      	nop
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	4603      	mov	r3, r0
 8005034:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800503c:	23af      	movs	r3, #175	; 0xaf
 800503e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005040:	4b08      	ldr	r3, [pc, #32]	; (8005064 <ssd1306_SetDisplayOn+0x38>)
 8005042:	2201      	movs	r2, #1
 8005044:	715a      	strb	r2, [r3, #5]
 8005046:	e004      	b.n	8005052 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005048:	23ae      	movs	r3, #174	; 0xae
 800504a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800504c:	4b05      	ldr	r3, [pc, #20]	; (8005064 <ssd1306_SetDisplayOn+0x38>)
 800504e:	2200      	movs	r2, #0
 8005050:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff f833 	bl	80040c0 <ssd1306_WriteCommand>
}
 800505a:	bf00      	nop
 800505c:	3710      	adds	r7, #16
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000568 	.word	0x20000568

08005068 <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 800506e:	2000      	movs	r0, #0
 8005070:	f7ff f8c2 	bl	80041f8 <ssd1306_Fill>
   
    uint8_t x = 0;
 8005074:	2300      	movs	r3, #0
 8005076:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 800507c:	79b9      	ldrb	r1, [r7, #6]
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	2200      	movs	r2, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f7ff f8f8 	bl	8004278 <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8005088:	79bb      	ldrb	r3, [r7, #6]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <ssd1306_TestBorder+0x34>
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b7e      	cmp	r3, #126	; 0x7e
 8005092:	d803      	bhi.n	800509c <ssd1306_TestBorder+0x34>
            x++;
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	3301      	adds	r3, #1
 8005098:	71fb      	strb	r3, [r7, #7]
 800509a:	e016      	b.n	80050ca <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 800509c:	79fb      	ldrb	r3, [r7, #7]
 800509e:	2b7f      	cmp	r3, #127	; 0x7f
 80050a0:	d106      	bne.n	80050b0 <ssd1306_TestBorder+0x48>
 80050a2:	79bb      	ldrb	r3, [r7, #6]
 80050a4:	2b3e      	cmp	r3, #62	; 0x3e
 80050a6:	d803      	bhi.n	80050b0 <ssd1306_TestBorder+0x48>
            y++;
 80050a8:	79bb      	ldrb	r3, [r7, #6]
 80050aa:	3301      	adds	r3, #1
 80050ac:	71bb      	strb	r3, [r7, #6]
 80050ae:	e00c      	b.n	80050ca <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 80050b0:	79bb      	ldrb	r3, [r7, #6]
 80050b2:	2b3f      	cmp	r3, #63	; 0x3f
 80050b4:	d106      	bne.n	80050c4 <ssd1306_TestBorder+0x5c>
 80050b6:	79fb      	ldrb	r3, [r7, #7]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <ssd1306_TestBorder+0x5c>
            x--;
 80050bc:	79fb      	ldrb	r3, [r7, #7]
 80050be:	3b01      	subs	r3, #1
 80050c0:	71fb      	strb	r3, [r7, #7]
 80050c2:	e002      	b.n	80050ca <ssd1306_TestBorder+0x62>
        else
            y--;
 80050c4:	79bb      	ldrb	r3, [r7, #6]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 80050ca:	79b9      	ldrb	r1, [r7, #6]
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	2201      	movs	r2, #1
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff f8d1 	bl	8004278 <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 80050d6:	f7ff f8a7 	bl	8004228 <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 80050da:	2005      	movs	r0, #5
 80050dc:	f7fc f9a6 	bl	800142c <HAL_Delay>
    } while(x > 0 || y > 0);
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1ca      	bne.n	800507c <ssd1306_TestBorder+0x14>
 80050e6:	79bb      	ldrb	r3, [r7, #6]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1c7      	bne.n	800507c <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 80050ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80050f0:	f7fc f99c 	bl	800142c <HAL_Delay>
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8005102:	2300      	movs	r3, #0
 8005104:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8005106:	2000      	movs	r0, #0
 8005108:	f7ff f876 	bl	80041f8 <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	4619      	mov	r1, r3
 8005110:	2002      	movs	r0, #2
 8005112:	f7ff f9bd 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8005116:	4b1d      	ldr	r3, [pc, #116]	; (800518c <ssd1306_TestFonts1+0x90>)
 8005118:	2201      	movs	r2, #1
 800511a:	9200      	str	r2, [sp, #0]
 800511c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800511e:	481c      	ldr	r0, [pc, #112]	; (8005190 <ssd1306_TestFonts1+0x94>)
 8005120:	f7ff f990 	bl	8004444 <ssd1306_WriteString>
    y += 26;
 8005124:	79fb      	ldrb	r3, [r7, #7]
 8005126:	331a      	adds	r3, #26
 8005128:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4619      	mov	r1, r3
 800512e:	2002      	movs	r0, #2
 8005130:	f7ff f9ae 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8005134:	4b17      	ldr	r3, [pc, #92]	; (8005194 <ssd1306_TestFonts1+0x98>)
 8005136:	2201      	movs	r2, #1
 8005138:	9200      	str	r2, [sp, #0]
 800513a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800513c:	4816      	ldr	r0, [pc, #88]	; (8005198 <ssd1306_TestFonts1+0x9c>)
 800513e:	f7ff f981 	bl	8004444 <ssd1306_WriteString>
    y += 18;
 8005142:	79fb      	ldrb	r3, [r7, #7]
 8005144:	3312      	adds	r3, #18
 8005146:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	4619      	mov	r1, r3
 800514c:	2002      	movs	r0, #2
 800514e:	f7ff f99f 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <ssd1306_TestFonts1+0xa0>)
 8005154:	2201      	movs	r2, #1
 8005156:	9200      	str	r2, [sp, #0]
 8005158:	cb0e      	ldmia	r3, {r1, r2, r3}
 800515a:	4811      	ldr	r0, [pc, #68]	; (80051a0 <ssd1306_TestFonts1+0xa4>)
 800515c:	f7ff f972 	bl	8004444 <ssd1306_WriteString>
    y += 10;
 8005160:	79fb      	ldrb	r3, [r7, #7]
 8005162:	330a      	adds	r3, #10
 8005164:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	4619      	mov	r1, r3
 800516a:	2002      	movs	r0, #2
 800516c:	f7ff f990 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8005170:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <ssd1306_TestFonts1+0xa8>)
 8005172:	2201      	movs	r2, #1
 8005174:	9200      	str	r2, [sp, #0]
 8005176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005178:	480b      	ldr	r0, [pc, #44]	; (80051a8 <ssd1306_TestFonts1+0xac>)
 800517a:	f7ff f963 	bl	8004444 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 800517e:	f7ff f853 	bl	8004228 <ssd1306_UpdateScreen>
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	0800b89c 	.word	0x0800b89c
 8005190:	08006c14 	.word	0x08006c14
 8005194:	0800b890 	.word	0x0800b890
 8005198:	08006c20 	.word	0x08006c20
 800519c:	0800b884 	.word	0x0800b884
 80051a0:	08006c2c 	.word	0x08006c2c
 80051a4:	0800b878 	.word	0x0800b878
 80051a8:	08006c38 	.word	0x08006c38

080051ac <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 80051ac:	b590      	push	{r4, r7, lr}
 80051ae:	b085      	sub	sp, #20
 80051b0:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 80051b2:	2000      	movs	r0, #0
 80051b4:	f7ff f820 	bl	80041f8 <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 80051b8:	2104      	movs	r1, #4
 80051ba:	2000      	movs	r0, #0
 80051bc:	f7ff f968 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 80051c0:	4b14      	ldr	r3, [pc, #80]	; (8005214 <ssd1306_TestFonts2+0x68>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	9200      	str	r2, [sp, #0]
 80051c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051c8:	4813      	ldr	r0, [pc, #76]	; (8005218 <ssd1306_TestFonts2+0x6c>)
 80051ca:	f7ff f93b 	bl	8004444 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 80051ce:	2124      	movs	r1, #36	; 0x24
 80051d0:	2000      	movs	r0, #0
 80051d2:	f7ff f95d 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 80051d6:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <ssd1306_TestFonts2+0x68>)
 80051d8:	2201      	movs	r2, #1
 80051da:	9200      	str	r2, [sp, #0]
 80051dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051de:	480f      	ldr	r0, [pc, #60]	; (800521c <ssd1306_TestFonts2+0x70>)
 80051e0:	f7ff f930 	bl	8004444 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 80051e4:	2360      	movs	r3, #96	; 0x60
 80051e6:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 80051e8:	233c      	movs	r3, #60	; 0x3c
 80051ea:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 80051ec:	79fb      	ldrb	r3, [r7, #7]
 80051ee:	3310      	adds	r3, #16
 80051f0:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 80051f2:	79bb      	ldrb	r3, [r7, #6]
 80051f4:	3302      	adds	r3, #2
 80051f6:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 80051f8:	793b      	ldrb	r3, [r7, #4]
 80051fa:	797a      	ldrb	r2, [r7, #5]
 80051fc:	79b9      	ldrb	r1, [r7, #6]
 80051fe:	79f8      	ldrb	r0, [r7, #7]
 8005200:	2401      	movs	r4, #1
 8005202:	9400      	str	r4, [sp, #0]
 8005204:	f7ff fd99 	bl	8004d3a <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8005208:	f7ff f80e 	bl	8004228 <ssd1306_UpdateScreen>
#endif
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	bd90      	pop	{r4, r7, pc}
 8005214:	0800b8a8 	.word	0x0800b8a8
 8005218:	08006c44 	.word	0x08006c44
 800521c:	08006c50 	.word	0x08006c50

08005220 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8005226:	2000      	movs	r0, #0
 8005228:	f7fe ffe6 	bl	80041f8 <ssd1306_Fill>
#ifdef SSD1306_INCLUDE_FONT_16x15
    ssd1306_SetCursor(4, 4);
 800522c:	2104      	movs	r1, #4
 800522e:	2004      	movs	r0, #4
 8005230:	f7ff f92e 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Proportional", Font_16x15, White);
 8005234:	4b10      	ldr	r3, [pc, #64]	; (8005278 <ssd1306_TestFonts3+0x58>)
 8005236:	2201      	movs	r2, #1
 8005238:	9200      	str	r2, [sp, #0]
 800523a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800523c:	480f      	ldr	r0, [pc, #60]	; (800527c <ssd1306_TestFonts3+0x5c>)
 800523e:	f7ff f901 	bl	8004444 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8005242:	2118      	movs	r1, #24
 8005244:	2004      	movs	r0, #4
 8005246:	f7ff f923 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <ssd1306_TestFonts3+0x58>)
 800524c:	2201      	movs	r2, #1
 800524e:	9200      	str	r2, [sp, #0]
 8005250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005252:	480b      	ldr	r0, [pc, #44]	; (8005280 <ssd1306_TestFonts3+0x60>)
 8005254:	f7ff f8f6 	bl	8004444 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8005258:	212c      	movs	r1, #44	; 0x2c
 800525a:	2004      	movs	r0, #4
 800525c:	f7ff f918 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
 8005260:	4b05      	ldr	r3, [pc, #20]	; (8005278 <ssd1306_TestFonts3+0x58>)
 8005262:	2201      	movs	r2, #1
 8005264:	9200      	str	r2, [sp, #0]
 8005266:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005268:	4806      	ldr	r0, [pc, #24]	; (8005284 <ssd1306_TestFonts3+0x64>)
 800526a:	f7ff f8eb 	bl	8004444 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("Font not", Font_11x18, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("included!", Font_11x18, White);
#endif
    ssd1306_UpdateScreen();
 800526e:	f7fe ffdb 	bl	8004228 <ssd1306_UpdateScreen>
}
 8005272:	bf00      	nop
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}
 8005278:	0800b8b4 	.word	0x0800b8b4
 800527c:	08006c5c 	.word	0x08006c5c
 8005280:	08006c6c 	.word	0x08006c6c
 8005284:	08006c7c 	.word	0x08006c7c

08005288 <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8005288:	b5b0      	push	{r4, r5, r7, lr}
 800528a:	b09a      	sub	sp, #104	; 0x68
 800528c:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800528e:	2001      	movs	r0, #1
 8005290:	f7fe ffb2 	bl	80041f8 <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8005294:	f7fc f8be 	bl	8001414 <HAL_GetTick>
 8005298:	65b8      	str	r0, [r7, #88]	; 0x58
    uint32_t end = start;
 800529a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800529c:	657b      	str	r3, [r7, #84]	; 0x54
    int fps = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    char message[] = "ABCDEFGHIJK";
 80052a2:	4a45      	ldr	r2, [pc, #276]	; (80053b8 <ssd1306_TestFPS+0x130>)
 80052a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80052a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80052aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2002      	movs	r0, #2
 80052b2:	f7ff f8ed 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 80052b6:	4b41      	ldr	r3, [pc, #260]	; (80053bc <ssd1306_TestFPS+0x134>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	9200      	str	r2, [sp, #0]
 80052bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052be:	4840      	ldr	r0, [pc, #256]	; (80053c0 <ssd1306_TestFPS+0x138>)
 80052c0:	f7ff f8c0 	bl	8004444 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 80052c4:	2124      	movs	r1, #36	; 0x24
 80052c6:	2002      	movs	r0, #2
 80052c8:	f7ff f8e2 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 80052cc:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <ssd1306_TestFPS+0x134>)
 80052ce:	2200      	movs	r2, #0
 80052d0:	9200      	str	r2, [sp, #0]
 80052d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052d4:	483b      	ldr	r0, [pc, #236]	; (80053c4 <ssd1306_TestFPS+0x13c>)
 80052d6:	f7ff f8b5 	bl	8004444 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 80052da:	2112      	movs	r1, #18
 80052dc:	2002      	movs	r0, #2
 80052de:	f7ff f8d7 	bl	8004490 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 80052e2:	4b36      	ldr	r3, [pc, #216]	; (80053bc <ssd1306_TestFPS+0x134>)
 80052e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80052e8:	2200      	movs	r2, #0
 80052ea:	9200      	str	r2, [sp, #0]
 80052ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052ee:	f7ff f8a9 	bl	8004444 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 80052f2:	f7fe ff99 	bl	8004228 <ssd1306_UpdateScreen>
       
        char ch = message[0];
 80052f6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80052fa:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        memmove(message, message+1, sizeof(message)-2);
 80052fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005302:	3301      	adds	r3, #1
 8005304:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8005308:	220a      	movs	r2, #10
 800530a:	4619      	mov	r1, r3
 800530c:	f000 fa74 	bl	80057f8 <memmove>
        message[sizeof(message)-2] = ch;
 8005310:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005314:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

        fps++;
 8005318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800531a:	3301      	adds	r3, #1
 800531c:	65fb      	str	r3, [r7, #92]	; 0x5c
        end = HAL_GetTick();
 800531e:	f7fc f879 	bl	8001414 <HAL_GetTick>
 8005322:	6578      	str	r0, [r7, #84]	; 0x54
    } while((end - start) < 5000);
 8005324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	f241 3287 	movw	r2, #4999	; 0x1387
 800532e:	4293      	cmp	r3, r2
 8005330:	d9d3      	bls.n	80052da <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8005332:	f241 3088 	movw	r0, #5000	; 0x1388
 8005336:	f7fc f879 	bl	800142c <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 800533a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533c:	ee07 3a90 	vmov	s15, r3
 8005340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005344:	ee17 0a90 	vmov	r0, s15
 8005348:	f7fb f91e 	bl	8000588 <__aeabi_f2d>
 800534c:	4604      	mov	r4, r0
 800534e:	460d      	mov	r5, r1
 8005350:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005352:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	4618      	mov	r0, r3
 8005358:	f7fb f8f4 	bl	8000544 <__aeabi_ui2d>
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	4b19      	ldr	r3, [pc, #100]	; (80053c8 <ssd1306_TestFPS+0x140>)
 8005362:	f7fb fa93 	bl	800088c <__aeabi_ddiv>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4620      	mov	r0, r4
 800536c:	4629      	mov	r1, r5
 800536e:	f7fb fa8d 	bl	800088c <__aeabi_ddiv>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4610      	mov	r0, r2
 8005378:	4619      	mov	r1, r3
 800537a:	f7fb fb6f 	bl	8000a5c <__aeabi_d2iz>
 800537e:	4603      	mov	r3, r0
 8005380:	65fb      	str	r3, [r7, #92]	; 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8005382:	1d38      	adds	r0, r7, #4
 8005384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005386:	4a11      	ldr	r2, [pc, #68]	; (80053cc <ssd1306_TestFPS+0x144>)
 8005388:	2140      	movs	r1, #64	; 0x40
 800538a:	f000 fa01 	bl	8005790 <sniprintf>
   
    ssd1306_Fill(White);
 800538e:	2001      	movs	r0, #1
 8005390:	f7fe ff32 	bl	80041f8 <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8005394:	2102      	movs	r1, #2
 8005396:	2002      	movs	r0, #2
 8005398:	f7ff f87a 	bl	8004490 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 800539c:	4b07      	ldr	r3, [pc, #28]	; (80053bc <ssd1306_TestFPS+0x134>)
 800539e:	1d38      	adds	r0, r7, #4
 80053a0:	2200      	movs	r2, #0
 80053a2:	9200      	str	r2, [sp, #0]
 80053a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053a6:	f7ff f84d 	bl	8004444 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80053aa:	f7fe ff3d 	bl	8004228 <ssd1306_UpdateScreen>
}
 80053ae:	bf00      	nop
 80053b0:	3760      	adds	r7, #96	; 0x60
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bdb0      	pop	{r4, r5, r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08006cac 	.word	0x08006cac
 80053bc:	0800b890 	.word	0x0800b890
 80053c0:	08006c8c 	.word	0x08006c8c
 80053c4:	08006c98 	.word	0x08006c98
 80053c8:	408f4000 	.word	0x408f4000
 80053cc:	08006ca4 	.word	0x08006ca4

080053d0 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 80053d6:	2301      	movs	r3, #1
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	233f      	movs	r3, #63	; 0x3f
 80053dc:	227f      	movs	r2, #127	; 0x7f
 80053de:	2101      	movs	r1, #1
 80053e0:	2001      	movs	r0, #1
 80053e2:	f7ff f86d 	bl	80044c0 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 80053e6:	2301      	movs	r3, #1
 80053e8:	9300      	str	r3, [sp, #0]
 80053ea:	233f      	movs	r3, #63	; 0x3f
 80053ec:	2201      	movs	r2, #1
 80053ee:	2101      	movs	r1, #1
 80053f0:	207f      	movs	r0, #127	; 0x7f
 80053f2:	f7ff f865 	bl	80044c0 <ssd1306_Line>
  ssd1306_UpdateScreen();
 80053f6:	f7fe ff17 	bl	8004228 <ssd1306_UpdateScreen>
  return;
 80053fa:	bf00      	nop
}
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8005400:	b590      	push	{r4, r7, lr}
 8005402:	b085      	sub	sp, #20
 8005404:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8005406:	2300      	movs	r3, #0
 8005408:	607b      	str	r3, [r7, #4]
 800540a:	e028      	b.n	800545e <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	461a      	mov	r2, r3
 8005412:	0092      	lsls	r2, r2, #2
 8005414:	4413      	add	r3, r2
 8005416:	b2db      	uxtb	r3, r3
 8005418:	3301      	adds	r3, #1
 800541a:	b2d8      	uxtb	r0, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	461a      	mov	r2, r3
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	4413      	add	r3, r2
 8005426:	b2db      	uxtb	r3, r3
 8005428:	3301      	adds	r3, #1
 800542a:	b2d9      	uxtb	r1, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	0092      	lsls	r2, r2, #2
 8005434:	4413      	add	r3, r2
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800543c:	b2da      	uxtb	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	461c      	mov	r4, r3
 8005444:	00a4      	lsls	r4, r4, #2
 8005446:	4423      	add	r3, r4
 8005448:	b2db      	uxtb	r3, r3
 800544a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2401      	movs	r4, #1
 8005452:	9400      	str	r4, [sp, #0]
 8005454:	f7ff fc3a 	bl	8004ccc <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	3301      	adds	r3, #1
 800545c:	607b      	str	r3, [r7, #4]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2b04      	cmp	r3, #4
 8005462:	d9d3      	bls.n	800540c <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8005464:	f7fe fee0 	bl	8004228 <ssd1306_UpdateScreen>
  return;
 8005468:	bf00      	nop
}
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8005476:	2301      	movs	r3, #1
 8005478:	9300      	str	r3, [sp, #0]
 800547a:	2323      	movs	r3, #35	; 0x23
 800547c:	2241      	movs	r2, #65	; 0x41
 800547e:	2101      	movs	r1, #1
 8005480:	201f      	movs	r0, #31
 8005482:	f7ff fc5a 	bl	8004d3a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8005486:	2301      	movs	r3, #1
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	233c      	movs	r3, #60	; 0x3c
 800548c:	2246      	movs	r2, #70	; 0x46
 800548e:	212d      	movs	r1, #45	; 0x2d
 8005490:	200a      	movs	r0, #10
 8005492:	f7ff fc52 	bl	8004d3a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8005496:	2301      	movs	r3, #1
 8005498:	9300      	str	r3, [sp, #0]
 800549a:	232d      	movs	r3, #45	; 0x2d
 800549c:	2264      	movs	r2, #100	; 0x64
 800549e:	210a      	movs	r1, #10
 80054a0:	204b      	movs	r0, #75	; 0x4b
 80054a2:	f7ff fc4a 	bl	8004d3a <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 80054a6:	2300      	movs	r3, #0
 80054a8:	9300      	str	r3, [sp, #0]
 80054aa:	2337      	movs	r3, #55	; 0x37
 80054ac:	2250      	movs	r2, #80	; 0x50
 80054ae:	211e      	movs	r1, #30
 80054b0:	2037      	movs	r0, #55	; 0x37
 80054b2:	f7ff fc42 	bl	8004d3a <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 80054b6:	f7fe feb7 	bl	8004228 <ssd1306_UpdateScreen>
}
 80054ba:	bf00      	nop
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 80054c6:	2100      	movs	r1, #0
 80054c8:	2002      	movs	r0, #2
 80054ca:	f7fe ffe1 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 80054ce:	4b27      	ldr	r3, [pc, #156]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	9200      	str	r2, [sp, #0]
 80054d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054d6:	4826      	ldr	r0, [pc, #152]	; (8005570 <ssd1306_TestRectangleInvert+0xb0>)
 80054d8:	f7fe ffb4 	bl	8004444 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 80054dc:	2114      	movs	r1, #20
 80054de:	2002      	movs	r0, #2
 80054e0:	f7fe ffd6 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 80054e4:	4b21      	ldr	r3, [pc, #132]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 80054e6:	2201      	movs	r2, #1
 80054e8:	9200      	str	r2, [sp, #0]
 80054ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054ec:	4821      	ldr	r0, [pc, #132]	; (8005574 <ssd1306_TestRectangleInvert+0xb4>)
 80054ee:	f7fe ffa9 	bl	8004444 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 80054f2:	2128      	movs	r1, #40	; 0x28
 80054f4:	2002      	movs	r0, #2
 80054f6:	f7fe ffcb 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 80054fa:	4b1c      	ldr	r3, [pc, #112]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	9200      	str	r2, [sp, #0]
 8005500:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005502:	481d      	ldr	r0, [pc, #116]	; (8005578 <ssd1306_TestRectangleInvert+0xb8>)
 8005504:	f7fe ff9e 	bl	8004444 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8005508:	2100      	movs	r1, #0
 800550a:	2042      	movs	r0, #66	; 0x42
 800550c:	f7fe ffc0 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8005510:	4b16      	ldr	r3, [pc, #88]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 8005512:	2201      	movs	r2, #1
 8005514:	9200      	str	r2, [sp, #0]
 8005516:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005518:	4817      	ldr	r0, [pc, #92]	; (8005578 <ssd1306_TestRectangleInvert+0xb8>)
 800551a:	f7fe ff93 	bl	8004444 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 800551e:	2114      	movs	r1, #20
 8005520:	2042      	movs	r0, #66	; 0x42
 8005522:	f7fe ffb5 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8005526:	4b11      	ldr	r3, [pc, #68]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 8005528:	2201      	movs	r2, #1
 800552a:	9200      	str	r2, [sp, #0]
 800552c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800552e:	4811      	ldr	r0, [pc, #68]	; (8005574 <ssd1306_TestRectangleInvert+0xb4>)
 8005530:	f7fe ff88 	bl	8004444 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8005534:	2128      	movs	r1, #40	; 0x28
 8005536:	2042      	movs	r0, #66	; 0x42
 8005538:	f7fe ffaa 	bl	8004490 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <ssd1306_TestRectangleInvert+0xac>)
 800553e:	2201      	movs	r2, #1
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005544:	480a      	ldr	r0, [pc, #40]	; (8005570 <ssd1306_TestRectangleInvert+0xb0>)
 8005546:	f7fe ff7d 	bl	8004444 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 800554a:	233f      	movs	r3, #63	; 0x3f
 800554c:	223f      	movs	r2, #63	; 0x3f
 800554e:	2100      	movs	r1, #0
 8005550:	2000      	movs	r0, #0
 8005552:	f7ff fc41 	bl	8004dd8 <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8005556:	233c      	movs	r3, #60	; 0x3c
 8005558:	227d      	movs	r2, #125	; 0x7d
 800555a:	213a      	movs	r1, #58	; 0x3a
 800555c:	2002      	movs	r0, #2
 800555e:	f7ff fc3b 	bl	8004dd8 <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8005562:	f7fe fe61 	bl	8004228 <ssd1306_UpdateScreen>
}
 8005566:	bf00      	nop
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}
 800556c:	0800b890 	.word	0x0800b890
 8005570:	08006cb8 	.word	0x08006cb8
 8005574:	08006cc0 	.word	0x08006cc0
 8005578:	08006cc4 	.word	0x08006cc4

0800557c <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 800557c:	b580      	push	{r7, lr}
 800557e:	b082      	sub	sp, #8
 8005580:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8005582:	2300      	movs	r3, #0
 8005584:	607b      	str	r3, [r7, #4]
 8005586:	e010      	b.n	80055aa <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	0092      	lsls	r2, r2, #2
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	b2db      	uxtb	r3, r3
 8005596:	331e      	adds	r3, #30
 8005598:	b2d8      	uxtb	r0, r3
 800559a:	2301      	movs	r3, #1
 800559c:	220a      	movs	r2, #10
 800559e:	210f      	movs	r1, #15
 80055a0:	f7ff fa9a 	bl	8004ad8 <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	3301      	adds	r3, #1
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d9eb      	bls.n	8005588 <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 80055b0:	2300      	movs	r3, #0
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	e011      	b.n	80055da <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	0052      	lsls	r2, r2, #1
 80055be:	441a      	add	r2, r3
 80055c0:	00d2      	lsls	r2, r2, #3
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	330f      	adds	r3, #15
 80055c8:	b2d8      	uxtb	r0, r3
 80055ca:	2301      	movs	r3, #1
 80055cc:	220a      	movs	r2, #10
 80055ce:	2128      	movs	r1, #40	; 0x28
 80055d0:	f7ff fb09 	bl	8004be6 <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3301      	adds	r3, #1
 80055d8:	607b      	str	r3, [r7, #4]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d9ea      	bls.n	80055b6 <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 80055e0:	f7fe fe22 	bl	8004228 <ssd1306_UpdateScreen>
  return;
 80055e4:	bf00      	nop
}
 80055e6:	3708      	adds	r7, #8
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <ssd1306_TestArc>:

void ssd1306_TestArc() {
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 80055f2:	2301      	movs	r3, #1
 80055f4:	9301      	str	r3, [sp, #4]
 80055f6:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80055fa:	9300      	str	r3, [sp, #0]
 80055fc:	2314      	movs	r3, #20
 80055fe:	221e      	movs	r2, #30
 8005600:	211e      	movs	r1, #30
 8005602:	201e      	movs	r0, #30
 8005604:	f7ff f840 	bl	8004688 <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 8005608:	2301      	movs	r3, #1
 800560a:	9301      	str	r3, [sp, #4]
 800560c:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8005610:	9300      	str	r3, [sp, #0]
 8005612:	231e      	movs	r3, #30
 8005614:	220a      	movs	r2, #10
 8005616:	2137      	movs	r1, #55	; 0x37
 8005618:	2050      	movs	r0, #80	; 0x50
 800561a:	f7ff f91d 	bl	8004858 <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 800561e:	f7fe fe03 	bl	8004228 <ssd1306_UpdateScreen>
  return;
 8005622:	bf00      	nop
}
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 8005628:	b590      	push	{r4, r7, lr}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 800562e:	4b08      	ldr	r3, [pc, #32]	; (8005650 <ssd1306_TestPolyline+0x28>)
 8005630:	463c      	mov	r4, r7
 8005632:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005634:	c407      	stmia	r4!, {r0, r1, r2}
 8005636:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 8005638:	463b      	mov	r3, r7
 800563a:	2201      	movs	r2, #1
 800563c:	2107      	movs	r1, #7
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe ffaa 	bl	8004598 <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8005644:	f7fe fdf0 	bl	8004228 <ssd1306_UpdateScreen>
  return;
 8005648:	bf00      	nop
}
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	08006ccc 	.word	0x08006ccc

08005654 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800565a:	2001      	movs	r0, #1
 800565c:	f7fe fdcc 	bl	80041f8 <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8005660:	2300      	movs	r3, #0
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	2340      	movs	r3, #64	; 0x40
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	2380      	movs	r3, #128	; 0x80
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <ssd1306_TestDrawBitmap+0x78>)
 800566c:	2100      	movs	r1, #0
 800566e:	2000      	movs	r0, #0
 8005670:	f7ff fc6e 	bl	8004f50 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8005674:	f7fe fdd8 	bl	8004228 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 8005678:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800567c:	f7fb fed6 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 8005680:	2000      	movs	r0, #0
 8005682:	f7fe fdb9 	bl	80041f8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 8005686:	2301      	movs	r3, #1
 8005688:	9301      	str	r3, [sp, #4]
 800568a:	2340      	movs	r3, #64	; 0x40
 800568c:	9300      	str	r3, [sp, #0]
 800568e:	2340      	movs	r3, #64	; 0x40
 8005690:	4a0f      	ldr	r2, [pc, #60]	; (80056d0 <ssd1306_TestDrawBitmap+0x7c>)
 8005692:	2100      	movs	r1, #0
 8005694:	2020      	movs	r0, #32
 8005696:	f7ff fc5b 	bl	8004f50 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800569a:	f7fe fdc5 	bl	8004228 <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 800569e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80056a2:	f7fb fec3 	bl	800142c <HAL_Delay>
    ssd1306_Fill(White);
 80056a6:	2001      	movs	r0, #1
 80056a8:	f7fe fda6 	bl	80041f8 <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80056ac:	2300      	movs	r3, #0
 80056ae:	9301      	str	r3, [sp, #4]
 80056b0:	2340      	movs	r3, #64	; 0x40
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	4a06      	ldr	r2, [pc, #24]	; (80056d0 <ssd1306_TestDrawBitmap+0x7c>)
 80056b8:	2100      	movs	r1, #0
 80056ba:	2020      	movs	r0, #32
 80056bc:	f7ff fc48 	bl	8004f50 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80056c0:	f7fe fdb2 	bl	8004228 <ssd1306_UpdateScreen>
}
 80056c4:	bf00      	nop
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	0800b8c0 	.word	0x0800b8c0
 80056d0:	0800bcc0 	.word	0x0800bcc0

080056d4 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80056d8:	f7fe fd24 	bl	8004124 <ssd1306_Init>

    ssd1306_TestFPS();
 80056dc:	f7ff fdd4 	bl	8005288 <ssd1306_TestFPS>
    HAL_Delay(3000);
 80056e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80056e4:	f7fb fea2 	bl	800142c <HAL_Delay>
    ssd1306_TestBorder();
 80056e8:	f7ff fcbe 	bl	8005068 <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 80056ec:	f7ff fd06 	bl	80050fc <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80056f0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80056f4:	f7fb fe9a 	bl	800142c <HAL_Delay>
    ssd1306_TestFonts2();
 80056f8:	f7ff fd58 	bl	80051ac <ssd1306_TestFonts2>
    HAL_Delay(3000);
 80056fc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005700:	f7fb fe94 	bl	800142c <HAL_Delay>
    ssd1306_TestFonts3();
 8005704:	f7ff fd8c 	bl	8005220 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 8005708:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800570c:	f7fb fe8e 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 8005710:	2000      	movs	r0, #0
 8005712:	f7fe fd71 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestRectangle();
 8005716:	f7ff fe73 	bl	8005400 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800571a:	f7ff fe59 	bl	80053d0 <ssd1306_TestLine>
    HAL_Delay(3000);
 800571e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005722:	f7fb fe83 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 8005726:	2000      	movs	r0, #0
 8005728:	f7fe fd66 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 800572c:	f7ff fea0 	bl	8005470 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8005730:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005734:	f7fb fe7a 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 8005738:	2000      	movs	r0, #0
 800573a:	f7fe fd5d 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 800573e:	f7ff febf 	bl	80054c0 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8005742:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005746:	f7fb fe71 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 800574a:	2000      	movs	r0, #0
 800574c:	f7fe fd54 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestPolyline();
 8005750:	f7ff ff6a 	bl	8005628 <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8005754:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005758:	f7fb fe68 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 800575c:	2000      	movs	r0, #0
 800575e:	f7fe fd4b 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestArc();
 8005762:	f7ff ff43 	bl	80055ec <ssd1306_TestArc>
    HAL_Delay(3000);
 8005766:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800576a:	f7fb fe5f 	bl	800142c <HAL_Delay>
    ssd1306_Fill(Black);
 800576e:	2000      	movs	r0, #0
 8005770:	f7fe fd42 	bl	80041f8 <ssd1306_Fill>
    ssd1306_TestCircle();
 8005774:	f7ff ff02 	bl	800557c <ssd1306_TestCircle>
    HAL_Delay(3000);
 8005778:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800577c:	f7fb fe56 	bl	800142c <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8005780:	f7ff ff68 	bl	8005654 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8005784:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005788:	f7fb fe50 	bl	800142c <HAL_Delay>
}
 800578c:	bf00      	nop
 800578e:	bd80      	pop	{r7, pc}

08005790 <sniprintf>:
 8005790:	b40c      	push	{r2, r3}
 8005792:	b530      	push	{r4, r5, lr}
 8005794:	4b17      	ldr	r3, [pc, #92]	; (80057f4 <sniprintf+0x64>)
 8005796:	1e0c      	subs	r4, r1, #0
 8005798:	681d      	ldr	r5, [r3, #0]
 800579a:	b09d      	sub	sp, #116	; 0x74
 800579c:	da08      	bge.n	80057b0 <sniprintf+0x20>
 800579e:	238b      	movs	r3, #139	; 0x8b
 80057a0:	602b      	str	r3, [r5, #0]
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	b01d      	add	sp, #116	; 0x74
 80057a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057ac:	b002      	add	sp, #8
 80057ae:	4770      	bx	lr
 80057b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80057b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057b8:	bf14      	ite	ne
 80057ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057be:	4623      	moveq	r3, r4
 80057c0:	9304      	str	r3, [sp, #16]
 80057c2:	9307      	str	r3, [sp, #28]
 80057c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80057c8:	9002      	str	r0, [sp, #8]
 80057ca:	9006      	str	r0, [sp, #24]
 80057cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80057d2:	ab21      	add	r3, sp, #132	; 0x84
 80057d4:	a902      	add	r1, sp, #8
 80057d6:	4628      	mov	r0, r5
 80057d8:	9301      	str	r3, [sp, #4]
 80057da:	f000 f9bb 	bl	8005b54 <_svfiprintf_r>
 80057de:	1c43      	adds	r3, r0, #1
 80057e0:	bfbc      	itt	lt
 80057e2:	238b      	movlt	r3, #139	; 0x8b
 80057e4:	602b      	strlt	r3, [r5, #0]
 80057e6:	2c00      	cmp	r4, #0
 80057e8:	d0dd      	beq.n	80057a6 <sniprintf+0x16>
 80057ea:	9b02      	ldr	r3, [sp, #8]
 80057ec:	2200      	movs	r2, #0
 80057ee:	701a      	strb	r2, [r3, #0]
 80057f0:	e7d9      	b.n	80057a6 <sniprintf+0x16>
 80057f2:	bf00      	nop
 80057f4:	20000058 	.word	0x20000058

080057f8 <memmove>:
 80057f8:	4288      	cmp	r0, r1
 80057fa:	b510      	push	{r4, lr}
 80057fc:	eb01 0402 	add.w	r4, r1, r2
 8005800:	d902      	bls.n	8005808 <memmove+0x10>
 8005802:	4284      	cmp	r4, r0
 8005804:	4623      	mov	r3, r4
 8005806:	d807      	bhi.n	8005818 <memmove+0x20>
 8005808:	1e43      	subs	r3, r0, #1
 800580a:	42a1      	cmp	r1, r4
 800580c:	d008      	beq.n	8005820 <memmove+0x28>
 800580e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005816:	e7f8      	b.n	800580a <memmove+0x12>
 8005818:	4402      	add	r2, r0
 800581a:	4601      	mov	r1, r0
 800581c:	428a      	cmp	r2, r1
 800581e:	d100      	bne.n	8005822 <memmove+0x2a>
 8005820:	bd10      	pop	{r4, pc}
 8005822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800582a:	e7f7      	b.n	800581c <memmove+0x24>

0800582c <memset>:
 800582c:	4402      	add	r2, r0
 800582e:	4603      	mov	r3, r0
 8005830:	4293      	cmp	r3, r2
 8005832:	d100      	bne.n	8005836 <memset+0xa>
 8005834:	4770      	bx	lr
 8005836:	f803 1b01 	strb.w	r1, [r3], #1
 800583a:	e7f9      	b.n	8005830 <memset+0x4>

0800583c <__errno>:
 800583c:	4b01      	ldr	r3, [pc, #4]	; (8005844 <__errno+0x8>)
 800583e:	6818      	ldr	r0, [r3, #0]
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000058 	.word	0x20000058

08005848 <__libc_init_array>:
 8005848:	b570      	push	{r4, r5, r6, lr}
 800584a:	4d0d      	ldr	r5, [pc, #52]	; (8005880 <__libc_init_array+0x38>)
 800584c:	4c0d      	ldr	r4, [pc, #52]	; (8005884 <__libc_init_array+0x3c>)
 800584e:	1b64      	subs	r4, r4, r5
 8005850:	10a4      	asrs	r4, r4, #2
 8005852:	2600      	movs	r6, #0
 8005854:	42a6      	cmp	r6, r4
 8005856:	d109      	bne.n	800586c <__libc_init_array+0x24>
 8005858:	4d0b      	ldr	r5, [pc, #44]	; (8005888 <__libc_init_array+0x40>)
 800585a:	4c0c      	ldr	r4, [pc, #48]	; (800588c <__libc_init_array+0x44>)
 800585c:	f001 f9ce 	bl	8006bfc <_init>
 8005860:	1b64      	subs	r4, r4, r5
 8005862:	10a4      	asrs	r4, r4, #2
 8005864:	2600      	movs	r6, #0
 8005866:	42a6      	cmp	r6, r4
 8005868:	d105      	bne.n	8005876 <__libc_init_array+0x2e>
 800586a:	bd70      	pop	{r4, r5, r6, pc}
 800586c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005870:	4798      	blx	r3
 8005872:	3601      	adds	r6, #1
 8005874:	e7ee      	b.n	8005854 <__libc_init_array+0xc>
 8005876:	f855 3b04 	ldr.w	r3, [r5], #4
 800587a:	4798      	blx	r3
 800587c:	3601      	adds	r6, #1
 800587e:	e7f2      	b.n	8005866 <__libc_init_array+0x1e>
 8005880:	0800c2cc 	.word	0x0800c2cc
 8005884:	0800c2cc 	.word	0x0800c2cc
 8005888:	0800c2cc 	.word	0x0800c2cc
 800588c:	0800c2d0 	.word	0x0800c2d0

08005890 <__retarget_lock_acquire_recursive>:
 8005890:	4770      	bx	lr

08005892 <__retarget_lock_release_recursive>:
 8005892:	4770      	bx	lr

08005894 <memcpy>:
 8005894:	440a      	add	r2, r1
 8005896:	4291      	cmp	r1, r2
 8005898:	f100 33ff 	add.w	r3, r0, #4294967295
 800589c:	d100      	bne.n	80058a0 <memcpy+0xc>
 800589e:	4770      	bx	lr
 80058a0:	b510      	push	{r4, lr}
 80058a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058aa:	4291      	cmp	r1, r2
 80058ac:	d1f9      	bne.n	80058a2 <memcpy+0xe>
 80058ae:	bd10      	pop	{r4, pc}

080058b0 <_free_r>:
 80058b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	d044      	beq.n	8005940 <_free_r+0x90>
 80058b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ba:	9001      	str	r0, [sp, #4]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f1a1 0404 	sub.w	r4, r1, #4
 80058c2:	bfb8      	it	lt
 80058c4:	18e4      	addlt	r4, r4, r3
 80058c6:	f000 f8df 	bl	8005a88 <__malloc_lock>
 80058ca:	4a1e      	ldr	r2, [pc, #120]	; (8005944 <_free_r+0x94>)
 80058cc:	9801      	ldr	r0, [sp, #4]
 80058ce:	6813      	ldr	r3, [r2, #0]
 80058d0:	b933      	cbnz	r3, 80058e0 <_free_r+0x30>
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	6014      	str	r4, [r2, #0]
 80058d6:	b003      	add	sp, #12
 80058d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058dc:	f000 b8da 	b.w	8005a94 <__malloc_unlock>
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d908      	bls.n	80058f6 <_free_r+0x46>
 80058e4:	6825      	ldr	r5, [r4, #0]
 80058e6:	1961      	adds	r1, r4, r5
 80058e8:	428b      	cmp	r3, r1
 80058ea:	bf01      	itttt	eq
 80058ec:	6819      	ldreq	r1, [r3, #0]
 80058ee:	685b      	ldreq	r3, [r3, #4]
 80058f0:	1949      	addeq	r1, r1, r5
 80058f2:	6021      	streq	r1, [r4, #0]
 80058f4:	e7ed      	b.n	80058d2 <_free_r+0x22>
 80058f6:	461a      	mov	r2, r3
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	b10b      	cbz	r3, 8005900 <_free_r+0x50>
 80058fc:	42a3      	cmp	r3, r4
 80058fe:	d9fa      	bls.n	80058f6 <_free_r+0x46>
 8005900:	6811      	ldr	r1, [r2, #0]
 8005902:	1855      	adds	r5, r2, r1
 8005904:	42a5      	cmp	r5, r4
 8005906:	d10b      	bne.n	8005920 <_free_r+0x70>
 8005908:	6824      	ldr	r4, [r4, #0]
 800590a:	4421      	add	r1, r4
 800590c:	1854      	adds	r4, r2, r1
 800590e:	42a3      	cmp	r3, r4
 8005910:	6011      	str	r1, [r2, #0]
 8005912:	d1e0      	bne.n	80058d6 <_free_r+0x26>
 8005914:	681c      	ldr	r4, [r3, #0]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	6053      	str	r3, [r2, #4]
 800591a:	440c      	add	r4, r1
 800591c:	6014      	str	r4, [r2, #0]
 800591e:	e7da      	b.n	80058d6 <_free_r+0x26>
 8005920:	d902      	bls.n	8005928 <_free_r+0x78>
 8005922:	230c      	movs	r3, #12
 8005924:	6003      	str	r3, [r0, #0]
 8005926:	e7d6      	b.n	80058d6 <_free_r+0x26>
 8005928:	6825      	ldr	r5, [r4, #0]
 800592a:	1961      	adds	r1, r4, r5
 800592c:	428b      	cmp	r3, r1
 800592e:	bf04      	itt	eq
 8005930:	6819      	ldreq	r1, [r3, #0]
 8005932:	685b      	ldreq	r3, [r3, #4]
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	bf04      	itt	eq
 8005938:	1949      	addeq	r1, r1, r5
 800593a:	6021      	streq	r1, [r4, #0]
 800593c:	6054      	str	r4, [r2, #4]
 800593e:	e7ca      	b.n	80058d6 <_free_r+0x26>
 8005940:	b003      	add	sp, #12
 8005942:	bd30      	pop	{r4, r5, pc}
 8005944:	200006b0 	.word	0x200006b0

08005948 <sbrk_aligned>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	4e0e      	ldr	r6, [pc, #56]	; (8005984 <sbrk_aligned+0x3c>)
 800594c:	460c      	mov	r4, r1
 800594e:	6831      	ldr	r1, [r6, #0]
 8005950:	4605      	mov	r5, r0
 8005952:	b911      	cbnz	r1, 800595a <sbrk_aligned+0x12>
 8005954:	f000 fb8c 	bl	8006070 <_sbrk_r>
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 fb87 	bl	8006070 <_sbrk_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d00a      	beq.n	800597c <sbrk_aligned+0x34>
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d007      	beq.n	8005980 <sbrk_aligned+0x38>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fb7c 	bl	8006070 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d101      	bne.n	8005980 <sbrk_aligned+0x38>
 800597c:	f04f 34ff 	mov.w	r4, #4294967295
 8005980:	4620      	mov	r0, r4
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	200006b4 	.word	0x200006b4

08005988 <_malloc_r>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	1ccd      	adds	r5, r1, #3
 800598e:	f025 0503 	bic.w	r5, r5, #3
 8005992:	3508      	adds	r5, #8
 8005994:	2d0c      	cmp	r5, #12
 8005996:	bf38      	it	cc
 8005998:	250c      	movcc	r5, #12
 800599a:	2d00      	cmp	r5, #0
 800599c:	4607      	mov	r7, r0
 800599e:	db01      	blt.n	80059a4 <_malloc_r+0x1c>
 80059a0:	42a9      	cmp	r1, r5
 80059a2:	d905      	bls.n	80059b0 <_malloc_r+0x28>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	2600      	movs	r6, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a84 <_malloc_r+0xfc>
 80059b4:	f000 f868 	bl	8005a88 <__malloc_lock>
 80059b8:	f8d8 3000 	ldr.w	r3, [r8]
 80059bc:	461c      	mov	r4, r3
 80059be:	bb5c      	cbnz	r4, 8005a18 <_malloc_r+0x90>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4638      	mov	r0, r7
 80059c4:	f7ff ffc0 	bl	8005948 <sbrk_aligned>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	4604      	mov	r4, r0
 80059cc:	d155      	bne.n	8005a7a <_malloc_r+0xf2>
 80059ce:	f8d8 4000 	ldr.w	r4, [r8]
 80059d2:	4626      	mov	r6, r4
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d145      	bne.n	8005a64 <_malloc_r+0xdc>
 80059d8:	2c00      	cmp	r4, #0
 80059da:	d048      	beq.n	8005a6e <_malloc_r+0xe6>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	4631      	mov	r1, r6
 80059e0:	4638      	mov	r0, r7
 80059e2:	eb04 0903 	add.w	r9, r4, r3
 80059e6:	f000 fb43 	bl	8006070 <_sbrk_r>
 80059ea:	4581      	cmp	r9, r0
 80059ec:	d13f      	bne.n	8005a6e <_malloc_r+0xe6>
 80059ee:	6821      	ldr	r1, [r4, #0]
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	4629      	mov	r1, r5
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ffa7 	bl	8005948 <sbrk_aligned>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d037      	beq.n	8005a6e <_malloc_r+0xe6>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	442b      	add	r3, r5
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	f8d8 3000 	ldr.w	r3, [r8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d038      	beq.n	8005a7e <_malloc_r+0xf6>
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	42a2      	cmp	r2, r4
 8005a10:	d12b      	bne.n	8005a6a <_malloc_r+0xe2>
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e00f      	b.n	8005a38 <_malloc_r+0xb0>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	1b52      	subs	r2, r2, r5
 8005a1c:	d41f      	bmi.n	8005a5e <_malloc_r+0xd6>
 8005a1e:	2a0b      	cmp	r2, #11
 8005a20:	d917      	bls.n	8005a52 <_malloc_r+0xca>
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	6059      	strne	r1, [r3, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	bf08      	it	eq
 8005a30:	f8c8 1000 	streq.w	r1, [r8]
 8005a34:	5162      	str	r2, [r4, r5]
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f104 060b 	add.w	r6, r4, #11
 8005a3e:	f000 f829 	bl	8005a94 <__malloc_unlock>
 8005a42:	f026 0607 	bic.w	r6, r6, #7
 8005a46:	1d23      	adds	r3, r4, #4
 8005a48:	1af2      	subs	r2, r6, r3
 8005a4a:	d0ae      	beq.n	80059aa <_malloc_r+0x22>
 8005a4c:	1b9b      	subs	r3, r3, r6
 8005a4e:	50a3      	str	r3, [r4, r2]
 8005a50:	e7ab      	b.n	80059aa <_malloc_r+0x22>
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	d1dd      	bne.n	8005a14 <_malloc_r+0x8c>
 8005a58:	f8c8 2000 	str.w	r2, [r8]
 8005a5c:	e7ec      	b.n	8005a38 <_malloc_r+0xb0>
 8005a5e:	4623      	mov	r3, r4
 8005a60:	6864      	ldr	r4, [r4, #4]
 8005a62:	e7ac      	b.n	80059be <_malloc_r+0x36>
 8005a64:	4634      	mov	r4, r6
 8005a66:	6876      	ldr	r6, [r6, #4]
 8005a68:	e7b4      	b.n	80059d4 <_malloc_r+0x4c>
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	e7cc      	b.n	8005a08 <_malloc_r+0x80>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4638      	mov	r0, r7
 8005a74:	f000 f80e 	bl	8005a94 <__malloc_unlock>
 8005a78:	e797      	b.n	80059aa <_malloc_r+0x22>
 8005a7a:	6025      	str	r5, [r4, #0]
 8005a7c:	e7dc      	b.n	8005a38 <_malloc_r+0xb0>
 8005a7e:	605b      	str	r3, [r3, #4]
 8005a80:	deff      	udf	#255	; 0xff
 8005a82:	bf00      	nop
 8005a84:	200006b0 	.word	0x200006b0

08005a88 <__malloc_lock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__malloc_lock+0x8>)
 8005a8a:	f7ff bf01 	b.w	8005890 <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	200006ac 	.word	0x200006ac

08005a94 <__malloc_unlock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__malloc_unlock+0x8>)
 8005a96:	f7ff befc 	b.w	8005892 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	200006ac 	.word	0x200006ac

08005aa0 <__ssputs_r>:
 8005aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aa4:	688e      	ldr	r6, [r1, #8]
 8005aa6:	461f      	mov	r7, r3
 8005aa8:	42be      	cmp	r6, r7
 8005aaa:	680b      	ldr	r3, [r1, #0]
 8005aac:	4682      	mov	sl, r0
 8005aae:	460c      	mov	r4, r1
 8005ab0:	4690      	mov	r8, r2
 8005ab2:	d82c      	bhi.n	8005b0e <__ssputs_r+0x6e>
 8005ab4:	898a      	ldrh	r2, [r1, #12]
 8005ab6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005aba:	d026      	beq.n	8005b0a <__ssputs_r+0x6a>
 8005abc:	6965      	ldr	r5, [r4, #20]
 8005abe:	6909      	ldr	r1, [r1, #16]
 8005ac0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ac4:	eba3 0901 	sub.w	r9, r3, r1
 8005ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005acc:	1c7b      	adds	r3, r7, #1
 8005ace:	444b      	add	r3, r9
 8005ad0:	106d      	asrs	r5, r5, #1
 8005ad2:	429d      	cmp	r5, r3
 8005ad4:	bf38      	it	cc
 8005ad6:	461d      	movcc	r5, r3
 8005ad8:	0553      	lsls	r3, r2, #21
 8005ada:	d527      	bpl.n	8005b2c <__ssputs_r+0x8c>
 8005adc:	4629      	mov	r1, r5
 8005ade:	f7ff ff53 	bl	8005988 <_malloc_r>
 8005ae2:	4606      	mov	r6, r0
 8005ae4:	b360      	cbz	r0, 8005b40 <__ssputs_r+0xa0>
 8005ae6:	6921      	ldr	r1, [r4, #16]
 8005ae8:	464a      	mov	r2, r9
 8005aea:	f7ff fed3 	bl	8005894 <memcpy>
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af8:	81a3      	strh	r3, [r4, #12]
 8005afa:	6126      	str	r6, [r4, #16]
 8005afc:	6165      	str	r5, [r4, #20]
 8005afe:	444e      	add	r6, r9
 8005b00:	eba5 0509 	sub.w	r5, r5, r9
 8005b04:	6026      	str	r6, [r4, #0]
 8005b06:	60a5      	str	r5, [r4, #8]
 8005b08:	463e      	mov	r6, r7
 8005b0a:	42be      	cmp	r6, r7
 8005b0c:	d900      	bls.n	8005b10 <__ssputs_r+0x70>
 8005b0e:	463e      	mov	r6, r7
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	4632      	mov	r2, r6
 8005b14:	4641      	mov	r1, r8
 8005b16:	f7ff fe6f 	bl	80057f8 <memmove>
 8005b1a:	68a3      	ldr	r3, [r4, #8]
 8005b1c:	1b9b      	subs	r3, r3, r6
 8005b1e:	60a3      	str	r3, [r4, #8]
 8005b20:	6823      	ldr	r3, [r4, #0]
 8005b22:	4433      	add	r3, r6
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	2000      	movs	r0, #0
 8005b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b2c:	462a      	mov	r2, r5
 8005b2e:	f000 faaf 	bl	8006090 <_realloc_r>
 8005b32:	4606      	mov	r6, r0
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d1e0      	bne.n	8005afa <__ssputs_r+0x5a>
 8005b38:	6921      	ldr	r1, [r4, #16]
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	f7ff feb8 	bl	80058b0 <_free_r>
 8005b40:	230c      	movs	r3, #12
 8005b42:	f8ca 3000 	str.w	r3, [sl]
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b4c:	81a3      	strh	r3, [r4, #12]
 8005b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b52:	e7e9      	b.n	8005b28 <__ssputs_r+0x88>

08005b54 <_svfiprintf_r>:
 8005b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b58:	4698      	mov	r8, r3
 8005b5a:	898b      	ldrh	r3, [r1, #12]
 8005b5c:	061b      	lsls	r3, r3, #24
 8005b5e:	b09d      	sub	sp, #116	; 0x74
 8005b60:	4607      	mov	r7, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	4614      	mov	r4, r2
 8005b66:	d50e      	bpl.n	8005b86 <_svfiprintf_r+0x32>
 8005b68:	690b      	ldr	r3, [r1, #16]
 8005b6a:	b963      	cbnz	r3, 8005b86 <_svfiprintf_r+0x32>
 8005b6c:	2140      	movs	r1, #64	; 0x40
 8005b6e:	f7ff ff0b 	bl	8005988 <_malloc_r>
 8005b72:	6028      	str	r0, [r5, #0]
 8005b74:	6128      	str	r0, [r5, #16]
 8005b76:	b920      	cbnz	r0, 8005b82 <_svfiprintf_r+0x2e>
 8005b78:	230c      	movs	r3, #12
 8005b7a:	603b      	str	r3, [r7, #0]
 8005b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b80:	e0d0      	b.n	8005d24 <_svfiprintf_r+0x1d0>
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	616b      	str	r3, [r5, #20]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b90:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b94:	2330      	movs	r3, #48	; 0x30
 8005b96:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d3c <_svfiprintf_r+0x1e8>
 8005b9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b9e:	f04f 0901 	mov.w	r9, #1
 8005ba2:	4623      	mov	r3, r4
 8005ba4:	469a      	mov	sl, r3
 8005ba6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005baa:	b10a      	cbz	r2, 8005bb0 <_svfiprintf_r+0x5c>
 8005bac:	2a25      	cmp	r2, #37	; 0x25
 8005bae:	d1f9      	bne.n	8005ba4 <_svfiprintf_r+0x50>
 8005bb0:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb4:	d00b      	beq.n	8005bce <_svfiprintf_r+0x7a>
 8005bb6:	465b      	mov	r3, fp
 8005bb8:	4622      	mov	r2, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	4638      	mov	r0, r7
 8005bbe:	f7ff ff6f 	bl	8005aa0 <__ssputs_r>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	f000 80a9 	beq.w	8005d1a <_svfiprintf_r+0x1c6>
 8005bc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bca:	445a      	add	r2, fp
 8005bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8005bce:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f000 80a1 	beq.w	8005d1a <_svfiprintf_r+0x1c6>
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f04f 32ff 	mov.w	r2, #4294967295
 8005bde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be2:	f10a 0a01 	add.w	sl, sl, #1
 8005be6:	9304      	str	r3, [sp, #16]
 8005be8:	9307      	str	r3, [sp, #28]
 8005bea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bee:	931a      	str	r3, [sp, #104]	; 0x68
 8005bf0:	4654      	mov	r4, sl
 8005bf2:	2205      	movs	r2, #5
 8005bf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bf8:	4850      	ldr	r0, [pc, #320]	; (8005d3c <_svfiprintf_r+0x1e8>)
 8005bfa:	f7fa fb11 	bl	8000220 <memchr>
 8005bfe:	9a04      	ldr	r2, [sp, #16]
 8005c00:	b9d8      	cbnz	r0, 8005c3a <_svfiprintf_r+0xe6>
 8005c02:	06d0      	lsls	r0, r2, #27
 8005c04:	bf44      	itt	mi
 8005c06:	2320      	movmi	r3, #32
 8005c08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c0c:	0711      	lsls	r1, r2, #28
 8005c0e:	bf44      	itt	mi
 8005c10:	232b      	movmi	r3, #43	; 0x2b
 8005c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c16:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1c:	d015      	beq.n	8005c4a <_svfiprintf_r+0xf6>
 8005c1e:	9a07      	ldr	r2, [sp, #28]
 8005c20:	4654      	mov	r4, sl
 8005c22:	2000      	movs	r0, #0
 8005c24:	f04f 0c0a 	mov.w	ip, #10
 8005c28:	4621      	mov	r1, r4
 8005c2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c2e:	3b30      	subs	r3, #48	; 0x30
 8005c30:	2b09      	cmp	r3, #9
 8005c32:	d94d      	bls.n	8005cd0 <_svfiprintf_r+0x17c>
 8005c34:	b1b0      	cbz	r0, 8005c64 <_svfiprintf_r+0x110>
 8005c36:	9207      	str	r2, [sp, #28]
 8005c38:	e014      	b.n	8005c64 <_svfiprintf_r+0x110>
 8005c3a:	eba0 0308 	sub.w	r3, r0, r8
 8005c3e:	fa09 f303 	lsl.w	r3, r9, r3
 8005c42:	4313      	orrs	r3, r2
 8005c44:	9304      	str	r3, [sp, #16]
 8005c46:	46a2      	mov	sl, r4
 8005c48:	e7d2      	b.n	8005bf0 <_svfiprintf_r+0x9c>
 8005c4a:	9b03      	ldr	r3, [sp, #12]
 8005c4c:	1d19      	adds	r1, r3, #4
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	9103      	str	r1, [sp, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bfbb      	ittet	lt
 8005c56:	425b      	neglt	r3, r3
 8005c58:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5c:	9307      	strge	r3, [sp, #28]
 8005c5e:	9307      	strlt	r3, [sp, #28]
 8005c60:	bfb8      	it	lt
 8005c62:	9204      	strlt	r2, [sp, #16]
 8005c64:	7823      	ldrb	r3, [r4, #0]
 8005c66:	2b2e      	cmp	r3, #46	; 0x2e
 8005c68:	d10c      	bne.n	8005c84 <_svfiprintf_r+0x130>
 8005c6a:	7863      	ldrb	r3, [r4, #1]
 8005c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c6e:	d134      	bne.n	8005cda <_svfiprintf_r+0x186>
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	1d1a      	adds	r2, r3, #4
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	9203      	str	r2, [sp, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	bfb8      	it	lt
 8005c7c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c80:	3402      	adds	r4, #2
 8005c82:	9305      	str	r3, [sp, #20]
 8005c84:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005d4c <_svfiprintf_r+0x1f8>
 8005c88:	7821      	ldrb	r1, [r4, #0]
 8005c8a:	2203      	movs	r2, #3
 8005c8c:	4650      	mov	r0, sl
 8005c8e:	f7fa fac7 	bl	8000220 <memchr>
 8005c92:	b138      	cbz	r0, 8005ca4 <_svfiprintf_r+0x150>
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	eba0 000a 	sub.w	r0, r0, sl
 8005c9a:	2240      	movs	r2, #64	; 0x40
 8005c9c:	4082      	lsls	r2, r0
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	3401      	adds	r4, #1
 8005ca2:	9304      	str	r3, [sp, #16]
 8005ca4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca8:	4825      	ldr	r0, [pc, #148]	; (8005d40 <_svfiprintf_r+0x1ec>)
 8005caa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cae:	2206      	movs	r2, #6
 8005cb0:	f7fa fab6 	bl	8000220 <memchr>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	d038      	beq.n	8005d2a <_svfiprintf_r+0x1d6>
 8005cb8:	4b22      	ldr	r3, [pc, #136]	; (8005d44 <_svfiprintf_r+0x1f0>)
 8005cba:	bb1b      	cbnz	r3, 8005d04 <_svfiprintf_r+0x1b0>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	3307      	adds	r3, #7
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cca:	4433      	add	r3, r6
 8005ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8005cce:	e768      	b.n	8005ba2 <_svfiprintf_r+0x4e>
 8005cd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd4:	460c      	mov	r4, r1
 8005cd6:	2001      	movs	r0, #1
 8005cd8:	e7a6      	b.n	8005c28 <_svfiprintf_r+0xd4>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	3401      	adds	r4, #1
 8005cde:	9305      	str	r3, [sp, #20]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0c0a 	mov.w	ip, #10
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cec:	3a30      	subs	r2, #48	; 0x30
 8005cee:	2a09      	cmp	r2, #9
 8005cf0:	d903      	bls.n	8005cfa <_svfiprintf_r+0x1a6>
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0c6      	beq.n	8005c84 <_svfiprintf_r+0x130>
 8005cf6:	9105      	str	r1, [sp, #20]
 8005cf8:	e7c4      	b.n	8005c84 <_svfiprintf_r+0x130>
 8005cfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2301      	movs	r3, #1
 8005d02:	e7f0      	b.n	8005ce6 <_svfiprintf_r+0x192>
 8005d04:	ab03      	add	r3, sp, #12
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	462a      	mov	r2, r5
 8005d0a:	4b0f      	ldr	r3, [pc, #60]	; (8005d48 <_svfiprintf_r+0x1f4>)
 8005d0c:	a904      	add	r1, sp, #16
 8005d0e:	4638      	mov	r0, r7
 8005d10:	f3af 8000 	nop.w
 8005d14:	1c42      	adds	r2, r0, #1
 8005d16:	4606      	mov	r6, r0
 8005d18:	d1d6      	bne.n	8005cc8 <_svfiprintf_r+0x174>
 8005d1a:	89ab      	ldrh	r3, [r5, #12]
 8005d1c:	065b      	lsls	r3, r3, #25
 8005d1e:	f53f af2d 	bmi.w	8005b7c <_svfiprintf_r+0x28>
 8005d22:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d24:	b01d      	add	sp, #116	; 0x74
 8005d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d2a:	ab03      	add	r3, sp, #12
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	462a      	mov	r2, r5
 8005d30:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <_svfiprintf_r+0x1f4>)
 8005d32:	a904      	add	r1, sp, #16
 8005d34:	4638      	mov	r0, r7
 8005d36:	f000 f879 	bl	8005e2c <_printf_i>
 8005d3a:	e7eb      	b.n	8005d14 <_svfiprintf_r+0x1c0>
 8005d3c:	0800bec0 	.word	0x0800bec0
 8005d40:	0800beca 	.word	0x0800beca
 8005d44:	00000000 	.word	0x00000000
 8005d48:	08005aa1 	.word	0x08005aa1
 8005d4c:	0800bec6 	.word	0x0800bec6

08005d50 <_printf_common>:
 8005d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d54:	4616      	mov	r6, r2
 8005d56:	4699      	mov	r9, r3
 8005d58:	688a      	ldr	r2, [r1, #8]
 8005d5a:	690b      	ldr	r3, [r1, #16]
 8005d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d60:	4293      	cmp	r3, r2
 8005d62:	bfb8      	it	lt
 8005d64:	4613      	movlt	r3, r2
 8005d66:	6033      	str	r3, [r6, #0]
 8005d68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d6c:	4607      	mov	r7, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b10a      	cbz	r2, 8005d76 <_printf_common+0x26>
 8005d72:	3301      	adds	r3, #1
 8005d74:	6033      	str	r3, [r6, #0]
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	0699      	lsls	r1, r3, #26
 8005d7a:	bf42      	ittt	mi
 8005d7c:	6833      	ldrmi	r3, [r6, #0]
 8005d7e:	3302      	addmi	r3, #2
 8005d80:	6033      	strmi	r3, [r6, #0]
 8005d82:	6825      	ldr	r5, [r4, #0]
 8005d84:	f015 0506 	ands.w	r5, r5, #6
 8005d88:	d106      	bne.n	8005d98 <_printf_common+0x48>
 8005d8a:	f104 0a19 	add.w	sl, r4, #25
 8005d8e:	68e3      	ldr	r3, [r4, #12]
 8005d90:	6832      	ldr	r2, [r6, #0]
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	42ab      	cmp	r3, r5
 8005d96:	dc26      	bgt.n	8005de6 <_printf_common+0x96>
 8005d98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d9c:	1e13      	subs	r3, r2, #0
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	bf18      	it	ne
 8005da2:	2301      	movne	r3, #1
 8005da4:	0692      	lsls	r2, r2, #26
 8005da6:	d42b      	bmi.n	8005e00 <_printf_common+0xb0>
 8005da8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dac:	4649      	mov	r1, r9
 8005dae:	4638      	mov	r0, r7
 8005db0:	47c0      	blx	r8
 8005db2:	3001      	adds	r0, #1
 8005db4:	d01e      	beq.n	8005df4 <_printf_common+0xa4>
 8005db6:	6823      	ldr	r3, [r4, #0]
 8005db8:	6922      	ldr	r2, [r4, #16]
 8005dba:	f003 0306 	and.w	r3, r3, #6
 8005dbe:	2b04      	cmp	r3, #4
 8005dc0:	bf02      	ittt	eq
 8005dc2:	68e5      	ldreq	r5, [r4, #12]
 8005dc4:	6833      	ldreq	r3, [r6, #0]
 8005dc6:	1aed      	subeq	r5, r5, r3
 8005dc8:	68a3      	ldr	r3, [r4, #8]
 8005dca:	bf0c      	ite	eq
 8005dcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dd0:	2500      	movne	r5, #0
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	bfc4      	itt	gt
 8005dd6:	1a9b      	subgt	r3, r3, r2
 8005dd8:	18ed      	addgt	r5, r5, r3
 8005dda:	2600      	movs	r6, #0
 8005ddc:	341a      	adds	r4, #26
 8005dde:	42b5      	cmp	r5, r6
 8005de0:	d11a      	bne.n	8005e18 <_printf_common+0xc8>
 8005de2:	2000      	movs	r0, #0
 8005de4:	e008      	b.n	8005df8 <_printf_common+0xa8>
 8005de6:	2301      	movs	r3, #1
 8005de8:	4652      	mov	r2, sl
 8005dea:	4649      	mov	r1, r9
 8005dec:	4638      	mov	r0, r7
 8005dee:	47c0      	blx	r8
 8005df0:	3001      	adds	r0, #1
 8005df2:	d103      	bne.n	8005dfc <_printf_common+0xac>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dfc:	3501      	adds	r5, #1
 8005dfe:	e7c6      	b.n	8005d8e <_printf_common+0x3e>
 8005e00:	18e1      	adds	r1, r4, r3
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	2030      	movs	r0, #48	; 0x30
 8005e06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e0a:	4422      	add	r2, r4
 8005e0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e14:	3302      	adds	r3, #2
 8005e16:	e7c7      	b.n	8005da8 <_printf_common+0x58>
 8005e18:	2301      	movs	r3, #1
 8005e1a:	4622      	mov	r2, r4
 8005e1c:	4649      	mov	r1, r9
 8005e1e:	4638      	mov	r0, r7
 8005e20:	47c0      	blx	r8
 8005e22:	3001      	adds	r0, #1
 8005e24:	d0e6      	beq.n	8005df4 <_printf_common+0xa4>
 8005e26:	3601      	adds	r6, #1
 8005e28:	e7d9      	b.n	8005dde <_printf_common+0x8e>
	...

08005e2c <_printf_i>:
 8005e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e30:	7e0f      	ldrb	r7, [r1, #24]
 8005e32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e34:	2f78      	cmp	r7, #120	; 0x78
 8005e36:	4691      	mov	r9, r2
 8005e38:	4680      	mov	r8, r0
 8005e3a:	460c      	mov	r4, r1
 8005e3c:	469a      	mov	sl, r3
 8005e3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e42:	d807      	bhi.n	8005e54 <_printf_i+0x28>
 8005e44:	2f62      	cmp	r7, #98	; 0x62
 8005e46:	d80a      	bhi.n	8005e5e <_printf_i+0x32>
 8005e48:	2f00      	cmp	r7, #0
 8005e4a:	f000 80d4 	beq.w	8005ff6 <_printf_i+0x1ca>
 8005e4e:	2f58      	cmp	r7, #88	; 0x58
 8005e50:	f000 80c0 	beq.w	8005fd4 <_printf_i+0x1a8>
 8005e54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e5c:	e03a      	b.n	8005ed4 <_printf_i+0xa8>
 8005e5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e62:	2b15      	cmp	r3, #21
 8005e64:	d8f6      	bhi.n	8005e54 <_printf_i+0x28>
 8005e66:	a101      	add	r1, pc, #4	; (adr r1, 8005e6c <_printf_i+0x40>)
 8005e68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e6c:	08005ec5 	.word	0x08005ec5
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005e55 	.word	0x08005e55
 8005e78:	08005e55 	.word	0x08005e55
 8005e7c:	08005e55 	.word	0x08005e55
 8005e80:	08005e55 	.word	0x08005e55
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005e55 	.word	0x08005e55
 8005e8c:	08005e55 	.word	0x08005e55
 8005e90:	08005e55 	.word	0x08005e55
 8005e94:	08005e55 	.word	0x08005e55
 8005e98:	08005fdd 	.word	0x08005fdd
 8005e9c:	08005f05 	.word	0x08005f05
 8005ea0:	08005f97 	.word	0x08005f97
 8005ea4:	08005e55 	.word	0x08005e55
 8005ea8:	08005e55 	.word	0x08005e55
 8005eac:	08005fff 	.word	0x08005fff
 8005eb0:	08005e55 	.word	0x08005e55
 8005eb4:	08005f05 	.word	0x08005f05
 8005eb8:	08005e55 	.word	0x08005e55
 8005ebc:	08005e55 	.word	0x08005e55
 8005ec0:	08005f9f 	.word	0x08005f9f
 8005ec4:	682b      	ldr	r3, [r5, #0]
 8005ec6:	1d1a      	adds	r2, r3, #4
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	602a      	str	r2, [r5, #0]
 8005ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e09f      	b.n	8006018 <_printf_i+0x1ec>
 8005ed8:	6820      	ldr	r0, [r4, #0]
 8005eda:	682b      	ldr	r3, [r5, #0]
 8005edc:	0607      	lsls	r7, r0, #24
 8005ede:	f103 0104 	add.w	r1, r3, #4
 8005ee2:	6029      	str	r1, [r5, #0]
 8005ee4:	d501      	bpl.n	8005eea <_printf_i+0xbe>
 8005ee6:	681e      	ldr	r6, [r3, #0]
 8005ee8:	e003      	b.n	8005ef2 <_printf_i+0xc6>
 8005eea:	0646      	lsls	r6, r0, #25
 8005eec:	d5fb      	bpl.n	8005ee6 <_printf_i+0xba>
 8005eee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005ef2:	2e00      	cmp	r6, #0
 8005ef4:	da03      	bge.n	8005efe <_printf_i+0xd2>
 8005ef6:	232d      	movs	r3, #45	; 0x2d
 8005ef8:	4276      	negs	r6, r6
 8005efa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efe:	485a      	ldr	r0, [pc, #360]	; (8006068 <_printf_i+0x23c>)
 8005f00:	230a      	movs	r3, #10
 8005f02:	e012      	b.n	8005f2a <_printf_i+0xfe>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	6820      	ldr	r0, [r4, #0]
 8005f08:	1d19      	adds	r1, r3, #4
 8005f0a:	6029      	str	r1, [r5, #0]
 8005f0c:	0605      	lsls	r5, r0, #24
 8005f0e:	d501      	bpl.n	8005f14 <_printf_i+0xe8>
 8005f10:	681e      	ldr	r6, [r3, #0]
 8005f12:	e002      	b.n	8005f1a <_printf_i+0xee>
 8005f14:	0641      	lsls	r1, r0, #25
 8005f16:	d5fb      	bpl.n	8005f10 <_printf_i+0xe4>
 8005f18:	881e      	ldrh	r6, [r3, #0]
 8005f1a:	4853      	ldr	r0, [pc, #332]	; (8006068 <_printf_i+0x23c>)
 8005f1c:	2f6f      	cmp	r7, #111	; 0x6f
 8005f1e:	bf0c      	ite	eq
 8005f20:	2308      	moveq	r3, #8
 8005f22:	230a      	movne	r3, #10
 8005f24:	2100      	movs	r1, #0
 8005f26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f2a:	6865      	ldr	r5, [r4, #4]
 8005f2c:	60a5      	str	r5, [r4, #8]
 8005f2e:	2d00      	cmp	r5, #0
 8005f30:	bfa2      	ittt	ge
 8005f32:	6821      	ldrge	r1, [r4, #0]
 8005f34:	f021 0104 	bicge.w	r1, r1, #4
 8005f38:	6021      	strge	r1, [r4, #0]
 8005f3a:	b90e      	cbnz	r6, 8005f40 <_printf_i+0x114>
 8005f3c:	2d00      	cmp	r5, #0
 8005f3e:	d04b      	beq.n	8005fd8 <_printf_i+0x1ac>
 8005f40:	4615      	mov	r5, r2
 8005f42:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f46:	fb03 6711 	mls	r7, r3, r1, r6
 8005f4a:	5dc7      	ldrb	r7, [r0, r7]
 8005f4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f50:	4637      	mov	r7, r6
 8005f52:	42bb      	cmp	r3, r7
 8005f54:	460e      	mov	r6, r1
 8005f56:	d9f4      	bls.n	8005f42 <_printf_i+0x116>
 8005f58:	2b08      	cmp	r3, #8
 8005f5a:	d10b      	bne.n	8005f74 <_printf_i+0x148>
 8005f5c:	6823      	ldr	r3, [r4, #0]
 8005f5e:	07de      	lsls	r6, r3, #31
 8005f60:	d508      	bpl.n	8005f74 <_printf_i+0x148>
 8005f62:	6923      	ldr	r3, [r4, #16]
 8005f64:	6861      	ldr	r1, [r4, #4]
 8005f66:	4299      	cmp	r1, r3
 8005f68:	bfde      	ittt	le
 8005f6a:	2330      	movle	r3, #48	; 0x30
 8005f6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f74:	1b52      	subs	r2, r2, r5
 8005f76:	6122      	str	r2, [r4, #16]
 8005f78:	f8cd a000 	str.w	sl, [sp]
 8005f7c:	464b      	mov	r3, r9
 8005f7e:	aa03      	add	r2, sp, #12
 8005f80:	4621      	mov	r1, r4
 8005f82:	4640      	mov	r0, r8
 8005f84:	f7ff fee4 	bl	8005d50 <_printf_common>
 8005f88:	3001      	adds	r0, #1
 8005f8a:	d14a      	bne.n	8006022 <_printf_i+0x1f6>
 8005f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f90:	b004      	add	sp, #16
 8005f92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	f043 0320 	orr.w	r3, r3, #32
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	4833      	ldr	r0, [pc, #204]	; (800606c <_printf_i+0x240>)
 8005fa0:	2778      	movs	r7, #120	; 0x78
 8005fa2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fa6:	6823      	ldr	r3, [r4, #0]
 8005fa8:	6829      	ldr	r1, [r5, #0]
 8005faa:	061f      	lsls	r7, r3, #24
 8005fac:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb0:	d402      	bmi.n	8005fb8 <_printf_i+0x18c>
 8005fb2:	065f      	lsls	r7, r3, #25
 8005fb4:	bf48      	it	mi
 8005fb6:	b2b6      	uxthmi	r6, r6
 8005fb8:	07df      	lsls	r7, r3, #31
 8005fba:	bf48      	it	mi
 8005fbc:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc0:	6029      	str	r1, [r5, #0]
 8005fc2:	bf48      	it	mi
 8005fc4:	6023      	strmi	r3, [r4, #0]
 8005fc6:	b91e      	cbnz	r6, 8005fd0 <_printf_i+0x1a4>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	f023 0320 	bic.w	r3, r3, #32
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	2310      	movs	r3, #16
 8005fd2:	e7a7      	b.n	8005f24 <_printf_i+0xf8>
 8005fd4:	4824      	ldr	r0, [pc, #144]	; (8006068 <_printf_i+0x23c>)
 8005fd6:	e7e4      	b.n	8005fa2 <_printf_i+0x176>
 8005fd8:	4615      	mov	r5, r2
 8005fda:	e7bd      	b.n	8005f58 <_printf_i+0x12c>
 8005fdc:	682b      	ldr	r3, [r5, #0]
 8005fde:	6826      	ldr	r6, [r4, #0]
 8005fe0:	6961      	ldr	r1, [r4, #20]
 8005fe2:	1d18      	adds	r0, r3, #4
 8005fe4:	6028      	str	r0, [r5, #0]
 8005fe6:	0635      	lsls	r5, r6, #24
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	d501      	bpl.n	8005ff0 <_printf_i+0x1c4>
 8005fec:	6019      	str	r1, [r3, #0]
 8005fee:	e002      	b.n	8005ff6 <_printf_i+0x1ca>
 8005ff0:	0670      	lsls	r0, r6, #25
 8005ff2:	d5fb      	bpl.n	8005fec <_printf_i+0x1c0>
 8005ff4:	8019      	strh	r1, [r3, #0]
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	6123      	str	r3, [r4, #16]
 8005ffa:	4615      	mov	r5, r2
 8005ffc:	e7bc      	b.n	8005f78 <_printf_i+0x14c>
 8005ffe:	682b      	ldr	r3, [r5, #0]
 8006000:	1d1a      	adds	r2, r3, #4
 8006002:	602a      	str	r2, [r5, #0]
 8006004:	681d      	ldr	r5, [r3, #0]
 8006006:	6862      	ldr	r2, [r4, #4]
 8006008:	2100      	movs	r1, #0
 800600a:	4628      	mov	r0, r5
 800600c:	f7fa f908 	bl	8000220 <memchr>
 8006010:	b108      	cbz	r0, 8006016 <_printf_i+0x1ea>
 8006012:	1b40      	subs	r0, r0, r5
 8006014:	6060      	str	r0, [r4, #4]
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	6123      	str	r3, [r4, #16]
 800601a:	2300      	movs	r3, #0
 800601c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006020:	e7aa      	b.n	8005f78 <_printf_i+0x14c>
 8006022:	6923      	ldr	r3, [r4, #16]
 8006024:	462a      	mov	r2, r5
 8006026:	4649      	mov	r1, r9
 8006028:	4640      	mov	r0, r8
 800602a:	47d0      	blx	sl
 800602c:	3001      	adds	r0, #1
 800602e:	d0ad      	beq.n	8005f8c <_printf_i+0x160>
 8006030:	6823      	ldr	r3, [r4, #0]
 8006032:	079b      	lsls	r3, r3, #30
 8006034:	d413      	bmi.n	800605e <_printf_i+0x232>
 8006036:	68e0      	ldr	r0, [r4, #12]
 8006038:	9b03      	ldr	r3, [sp, #12]
 800603a:	4298      	cmp	r0, r3
 800603c:	bfb8      	it	lt
 800603e:	4618      	movlt	r0, r3
 8006040:	e7a6      	b.n	8005f90 <_printf_i+0x164>
 8006042:	2301      	movs	r3, #1
 8006044:	4632      	mov	r2, r6
 8006046:	4649      	mov	r1, r9
 8006048:	4640      	mov	r0, r8
 800604a:	47d0      	blx	sl
 800604c:	3001      	adds	r0, #1
 800604e:	d09d      	beq.n	8005f8c <_printf_i+0x160>
 8006050:	3501      	adds	r5, #1
 8006052:	68e3      	ldr	r3, [r4, #12]
 8006054:	9903      	ldr	r1, [sp, #12]
 8006056:	1a5b      	subs	r3, r3, r1
 8006058:	42ab      	cmp	r3, r5
 800605a:	dcf2      	bgt.n	8006042 <_printf_i+0x216>
 800605c:	e7eb      	b.n	8006036 <_printf_i+0x20a>
 800605e:	2500      	movs	r5, #0
 8006060:	f104 0619 	add.w	r6, r4, #25
 8006064:	e7f5      	b.n	8006052 <_printf_i+0x226>
 8006066:	bf00      	nop
 8006068:	0800bed1 	.word	0x0800bed1
 800606c:	0800bee2 	.word	0x0800bee2

08006070 <_sbrk_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d06      	ldr	r5, [pc, #24]	; (800608c <_sbrk_r+0x1c>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb f8f4 	bl	8001268 <_sbrk>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_sbrk_r+0x1a>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_sbrk_r+0x1a>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	200006a8 	.word	0x200006a8

08006090 <_realloc_r>:
 8006090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006094:	4680      	mov	r8, r0
 8006096:	4614      	mov	r4, r2
 8006098:	460e      	mov	r6, r1
 800609a:	b921      	cbnz	r1, 80060a6 <_realloc_r+0x16>
 800609c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060a0:	4611      	mov	r1, r2
 80060a2:	f7ff bc71 	b.w	8005988 <_malloc_r>
 80060a6:	b92a      	cbnz	r2, 80060b4 <_realloc_r+0x24>
 80060a8:	f7ff fc02 	bl	80058b0 <_free_r>
 80060ac:	4625      	mov	r5, r4
 80060ae:	4628      	mov	r0, r5
 80060b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060b4:	f000 f81b 	bl	80060ee <_malloc_usable_size_r>
 80060b8:	4284      	cmp	r4, r0
 80060ba:	4607      	mov	r7, r0
 80060bc:	d802      	bhi.n	80060c4 <_realloc_r+0x34>
 80060be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060c2:	d812      	bhi.n	80060ea <_realloc_r+0x5a>
 80060c4:	4621      	mov	r1, r4
 80060c6:	4640      	mov	r0, r8
 80060c8:	f7ff fc5e 	bl	8005988 <_malloc_r>
 80060cc:	4605      	mov	r5, r0
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d0ed      	beq.n	80060ae <_realloc_r+0x1e>
 80060d2:	42bc      	cmp	r4, r7
 80060d4:	4622      	mov	r2, r4
 80060d6:	4631      	mov	r1, r6
 80060d8:	bf28      	it	cs
 80060da:	463a      	movcs	r2, r7
 80060dc:	f7ff fbda 	bl	8005894 <memcpy>
 80060e0:	4631      	mov	r1, r6
 80060e2:	4640      	mov	r0, r8
 80060e4:	f7ff fbe4 	bl	80058b0 <_free_r>
 80060e8:	e7e1      	b.n	80060ae <_realloc_r+0x1e>
 80060ea:	4635      	mov	r5, r6
 80060ec:	e7df      	b.n	80060ae <_realloc_r+0x1e>

080060ee <_malloc_usable_size_r>:
 80060ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060f2:	1f18      	subs	r0, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	bfbc      	itt	lt
 80060f8:	580b      	ldrlt	r3, [r1, r0]
 80060fa:	18c0      	addlt	r0, r0, r3
 80060fc:	4770      	bx	lr
	...

08006100 <cosf>:
 8006100:	ee10 3a10 	vmov	r3, s0
 8006104:	b507      	push	{r0, r1, r2, lr}
 8006106:	4a1e      	ldr	r2, [pc, #120]	; (8006180 <cosf+0x80>)
 8006108:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800610c:	4293      	cmp	r3, r2
 800610e:	dc06      	bgt.n	800611e <cosf+0x1e>
 8006110:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8006184 <cosf+0x84>
 8006114:	b003      	add	sp, #12
 8006116:	f85d eb04 	ldr.w	lr, [sp], #4
 800611a:	f000 b87b 	b.w	8006214 <__kernel_cosf>
 800611e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006122:	db04      	blt.n	800612e <cosf+0x2e>
 8006124:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006128:	b003      	add	sp, #12
 800612a:	f85d fb04 	ldr.w	pc, [sp], #4
 800612e:	4668      	mov	r0, sp
 8006130:	f000 f916 	bl	8006360 <__ieee754_rem_pio2f>
 8006134:	f000 0003 	and.w	r0, r0, #3
 8006138:	2801      	cmp	r0, #1
 800613a:	d009      	beq.n	8006150 <cosf+0x50>
 800613c:	2802      	cmp	r0, #2
 800613e:	d010      	beq.n	8006162 <cosf+0x62>
 8006140:	b9b0      	cbnz	r0, 8006170 <cosf+0x70>
 8006142:	eddd 0a01 	vldr	s1, [sp, #4]
 8006146:	ed9d 0a00 	vldr	s0, [sp]
 800614a:	f000 f863 	bl	8006214 <__kernel_cosf>
 800614e:	e7eb      	b.n	8006128 <cosf+0x28>
 8006150:	eddd 0a01 	vldr	s1, [sp, #4]
 8006154:	ed9d 0a00 	vldr	s0, [sp]
 8006158:	f000 f8ba 	bl	80062d0 <__kernel_sinf>
 800615c:	eeb1 0a40 	vneg.f32	s0, s0
 8006160:	e7e2      	b.n	8006128 <cosf+0x28>
 8006162:	eddd 0a01 	vldr	s1, [sp, #4]
 8006166:	ed9d 0a00 	vldr	s0, [sp]
 800616a:	f000 f853 	bl	8006214 <__kernel_cosf>
 800616e:	e7f5      	b.n	800615c <cosf+0x5c>
 8006170:	eddd 0a01 	vldr	s1, [sp, #4]
 8006174:	ed9d 0a00 	vldr	s0, [sp]
 8006178:	2001      	movs	r0, #1
 800617a:	f000 f8a9 	bl	80062d0 <__kernel_sinf>
 800617e:	e7d3      	b.n	8006128 <cosf+0x28>
 8006180:	3f490fd8 	.word	0x3f490fd8
 8006184:	00000000 	.word	0x00000000

08006188 <sinf>:
 8006188:	ee10 3a10 	vmov	r3, s0
 800618c:	b507      	push	{r0, r1, r2, lr}
 800618e:	4a1f      	ldr	r2, [pc, #124]	; (800620c <sinf+0x84>)
 8006190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006194:	4293      	cmp	r3, r2
 8006196:	dc07      	bgt.n	80061a8 <sinf+0x20>
 8006198:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006210 <sinf+0x88>
 800619c:	2000      	movs	r0, #0
 800619e:	b003      	add	sp, #12
 80061a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80061a4:	f000 b894 	b.w	80062d0 <__kernel_sinf>
 80061a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80061ac:	db04      	blt.n	80061b8 <sinf+0x30>
 80061ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 80061b2:	b003      	add	sp, #12
 80061b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80061b8:	4668      	mov	r0, sp
 80061ba:	f000 f8d1 	bl	8006360 <__ieee754_rem_pio2f>
 80061be:	f000 0003 	and.w	r0, r0, #3
 80061c2:	2801      	cmp	r0, #1
 80061c4:	d00a      	beq.n	80061dc <sinf+0x54>
 80061c6:	2802      	cmp	r0, #2
 80061c8:	d00f      	beq.n	80061ea <sinf+0x62>
 80061ca:	b9c0      	cbnz	r0, 80061fe <sinf+0x76>
 80061cc:	eddd 0a01 	vldr	s1, [sp, #4]
 80061d0:	ed9d 0a00 	vldr	s0, [sp]
 80061d4:	2001      	movs	r0, #1
 80061d6:	f000 f87b 	bl	80062d0 <__kernel_sinf>
 80061da:	e7ea      	b.n	80061b2 <sinf+0x2a>
 80061dc:	eddd 0a01 	vldr	s1, [sp, #4]
 80061e0:	ed9d 0a00 	vldr	s0, [sp]
 80061e4:	f000 f816 	bl	8006214 <__kernel_cosf>
 80061e8:	e7e3      	b.n	80061b2 <sinf+0x2a>
 80061ea:	eddd 0a01 	vldr	s1, [sp, #4]
 80061ee:	ed9d 0a00 	vldr	s0, [sp]
 80061f2:	2001      	movs	r0, #1
 80061f4:	f000 f86c 	bl	80062d0 <__kernel_sinf>
 80061f8:	eeb1 0a40 	vneg.f32	s0, s0
 80061fc:	e7d9      	b.n	80061b2 <sinf+0x2a>
 80061fe:	eddd 0a01 	vldr	s1, [sp, #4]
 8006202:	ed9d 0a00 	vldr	s0, [sp]
 8006206:	f000 f805 	bl	8006214 <__kernel_cosf>
 800620a:	e7f5      	b.n	80061f8 <sinf+0x70>
 800620c:	3f490fd8 	.word	0x3f490fd8
 8006210:	00000000 	.word	0x00000000

08006214 <__kernel_cosf>:
 8006214:	ee10 3a10 	vmov	r3, s0
 8006218:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800621c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006224:	da05      	bge.n	8006232 <__kernel_cosf+0x1e>
 8006226:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800622a:	ee17 2a90 	vmov	r2, s15
 800622e:	2a00      	cmp	r2, #0
 8006230:	d03b      	beq.n	80062aa <__kernel_cosf+0x96>
 8006232:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006236:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80062b0 <__kernel_cosf+0x9c>
 800623a:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 80062b4 <__kernel_cosf+0xa0>
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <__kernel_cosf+0xa4>)
 8006240:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006244:	4293      	cmp	r3, r2
 8006246:	eddf 7a1d 	vldr	s15, [pc, #116]	; 80062bc <__kernel_cosf+0xa8>
 800624a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800624e:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 80062c0 <__kernel_cosf+0xac>
 8006252:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006256:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80062c4 <__kernel_cosf+0xb0>
 800625a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800625e:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 80062c8 <__kernel_cosf+0xb4>
 8006262:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006266:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800626a:	ee26 6a07 	vmul.f32	s12, s12, s14
 800626e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006272:	eee7 0a06 	vfma.f32	s1, s14, s12
 8006276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800627a:	dc04      	bgt.n	8006286 <__kernel_cosf+0x72>
 800627c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006280:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8006284:	4770      	bx	lr
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <__kernel_cosf+0xb8>)
 8006288:	4293      	cmp	r3, r2
 800628a:	bfda      	itte	le
 800628c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8006290:	ee07 3a10 	vmovle	s14, r3
 8006294:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8006298:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800629c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 80062a0:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80062a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80062a8:	4770      	bx	lr
 80062aa:	eeb0 0a66 	vmov.f32	s0, s13
 80062ae:	4770      	bx	lr
 80062b0:	ad47d74e 	.word	0xad47d74e
 80062b4:	310f74f6 	.word	0x310f74f6
 80062b8:	3e999999 	.word	0x3e999999
 80062bc:	b493f27c 	.word	0xb493f27c
 80062c0:	37d00d01 	.word	0x37d00d01
 80062c4:	bab60b61 	.word	0xbab60b61
 80062c8:	3d2aaaab 	.word	0x3d2aaaab
 80062cc:	3f480000 	.word	0x3f480000

080062d0 <__kernel_sinf>:
 80062d0:	ee10 3a10 	vmov	r3, s0
 80062d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80062dc:	da04      	bge.n	80062e8 <__kernel_sinf+0x18>
 80062de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80062e2:	ee17 3a90 	vmov	r3, s15
 80062e6:	b35b      	cbz	r3, 8006340 <__kernel_sinf+0x70>
 80062e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80062ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006344 <__kernel_sinf+0x74>
 80062f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006348 <__kernel_sinf+0x78>
 80062f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80062f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800634c <__kernel_sinf+0x7c>
 80062fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006300:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006350 <__kernel_sinf+0x80>
 8006304:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006308:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006354 <__kernel_sinf+0x84>
 800630c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006310:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006314:	b930      	cbnz	r0, 8006324 <__kernel_sinf+0x54>
 8006316:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006358 <__kernel_sinf+0x88>
 800631a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800631e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006322:	4770      	bx	lr
 8006324:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006328:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800632c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006330:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006334:	eddf 7a09 	vldr	s15, [pc, #36]	; 800635c <__kernel_sinf+0x8c>
 8006338:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800633c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	2f2ec9d3 	.word	0x2f2ec9d3
 8006348:	b2d72f34 	.word	0xb2d72f34
 800634c:	3638ef1b 	.word	0x3638ef1b
 8006350:	b9500d01 	.word	0xb9500d01
 8006354:	3c088889 	.word	0x3c088889
 8006358:	be2aaaab 	.word	0xbe2aaaab
 800635c:	3e2aaaab 	.word	0x3e2aaaab

08006360 <__ieee754_rem_pio2f>:
 8006360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006362:	ee10 6a10 	vmov	r6, s0
 8006366:	4b86      	ldr	r3, [pc, #536]	; (8006580 <__ieee754_rem_pio2f+0x220>)
 8006368:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800636c:	429d      	cmp	r5, r3
 800636e:	b087      	sub	sp, #28
 8006370:	4604      	mov	r4, r0
 8006372:	dc05      	bgt.n	8006380 <__ieee754_rem_pio2f+0x20>
 8006374:	2300      	movs	r3, #0
 8006376:	ed80 0a00 	vstr	s0, [r0]
 800637a:	6043      	str	r3, [r0, #4]
 800637c:	2000      	movs	r0, #0
 800637e:	e020      	b.n	80063c2 <__ieee754_rem_pio2f+0x62>
 8006380:	4b80      	ldr	r3, [pc, #512]	; (8006584 <__ieee754_rem_pio2f+0x224>)
 8006382:	429d      	cmp	r5, r3
 8006384:	dc38      	bgt.n	80063f8 <__ieee754_rem_pio2f+0x98>
 8006386:	2e00      	cmp	r6, #0
 8006388:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8006588 <__ieee754_rem_pio2f+0x228>
 800638c:	4b7f      	ldr	r3, [pc, #508]	; (800658c <__ieee754_rem_pio2f+0x22c>)
 800638e:	f025 050f 	bic.w	r5, r5, #15
 8006392:	dd18      	ble.n	80063c6 <__ieee754_rem_pio2f+0x66>
 8006394:	429d      	cmp	r5, r3
 8006396:	ee70 7a47 	vsub.f32	s15, s0, s14
 800639a:	bf09      	itett	eq
 800639c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8006590 <__ieee754_rem_pio2f+0x230>
 80063a0:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8006594 <__ieee754_rem_pio2f+0x234>
 80063a4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80063a8:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8006598 <__ieee754_rem_pio2f+0x238>
 80063ac:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80063b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063b4:	edc0 6a00 	vstr	s13, [r0]
 80063b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063bc:	edc0 7a01 	vstr	s15, [r0, #4]
 80063c0:	2001      	movs	r0, #1
 80063c2:	b007      	add	sp, #28
 80063c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063c6:	429d      	cmp	r5, r3
 80063c8:	ee70 7a07 	vadd.f32	s15, s0, s14
 80063cc:	bf09      	itett	eq
 80063ce:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8006590 <__ieee754_rem_pio2f+0x230>
 80063d2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8006594 <__ieee754_rem_pio2f+0x234>
 80063d6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80063da:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8006598 <__ieee754_rem_pio2f+0x238>
 80063de:	ee77 6a87 	vadd.f32	s13, s15, s14
 80063e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80063e6:	edc0 6a00 	vstr	s13, [r0]
 80063ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295
 80063f6:	e7e4      	b.n	80063c2 <__ieee754_rem_pio2f+0x62>
 80063f8:	4b68      	ldr	r3, [pc, #416]	; (800659c <__ieee754_rem_pio2f+0x23c>)
 80063fa:	429d      	cmp	r5, r3
 80063fc:	dc71      	bgt.n	80064e2 <__ieee754_rem_pio2f+0x182>
 80063fe:	f000 f8db 	bl	80065b8 <fabsf>
 8006402:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80065a0 <__ieee754_rem_pio2f+0x240>
 8006406:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800640a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800640e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006416:	ee17 0a90 	vmov	r0, s15
 800641a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006588 <__ieee754_rem_pio2f+0x228>
 800641e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006422:	281f      	cmp	r0, #31
 8006424:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006594 <__ieee754_rem_pio2f+0x234>
 8006428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642c:	eeb1 6a47 	vneg.f32	s12, s14
 8006430:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006434:	ee16 2a90 	vmov	r2, s13
 8006438:	dc1c      	bgt.n	8006474 <__ieee754_rem_pio2f+0x114>
 800643a:	495a      	ldr	r1, [pc, #360]	; (80065a4 <__ieee754_rem_pio2f+0x244>)
 800643c:	1e47      	subs	r7, r0, #1
 800643e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8006442:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8006446:	428b      	cmp	r3, r1
 8006448:	d014      	beq.n	8006474 <__ieee754_rem_pio2f+0x114>
 800644a:	6022      	str	r2, [r4, #0]
 800644c:	ed94 7a00 	vldr	s14, [r4]
 8006450:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006454:	2e00      	cmp	r6, #0
 8006456:	ee30 0a67 	vsub.f32	s0, s0, s15
 800645a:	ed84 0a01 	vstr	s0, [r4, #4]
 800645e:	dab0      	bge.n	80063c2 <__ieee754_rem_pio2f+0x62>
 8006460:	eeb1 7a47 	vneg.f32	s14, s14
 8006464:	eeb1 0a40 	vneg.f32	s0, s0
 8006468:	ed84 7a00 	vstr	s14, [r4]
 800646c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006470:	4240      	negs	r0, r0
 8006472:	e7a6      	b.n	80063c2 <__ieee754_rem_pio2f+0x62>
 8006474:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006478:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 800647c:	2908      	cmp	r1, #8
 800647e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006482:	dde2      	ble.n	800644a <__ieee754_rem_pio2f+0xea>
 8006484:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006590 <__ieee754_rem_pio2f+0x230>
 8006488:	eef0 6a40 	vmov.f32	s13, s0
 800648c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8006490:	ee70 7a66 	vsub.f32	s15, s0, s13
 8006494:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006498:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006598 <__ieee754_rem_pio2f+0x238>
 800649c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80064a0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80064a4:	ee15 2a90 	vmov	r2, s11
 80064a8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80064ac:	1a5b      	subs	r3, r3, r1
 80064ae:	2b19      	cmp	r3, #25
 80064b0:	dc04      	bgt.n	80064bc <__ieee754_rem_pio2f+0x15c>
 80064b2:	edc4 5a00 	vstr	s11, [r4]
 80064b6:	eeb0 0a66 	vmov.f32	s0, s13
 80064ba:	e7c7      	b.n	800644c <__ieee754_rem_pio2f+0xec>
 80064bc:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80065a8 <__ieee754_rem_pio2f+0x248>
 80064c0:	eeb0 0a66 	vmov.f32	s0, s13
 80064c4:	eea6 0a25 	vfma.f32	s0, s12, s11
 80064c8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80064cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 80065ac <__ieee754_rem_pio2f+0x24c>
 80064d0:	eee6 7a25 	vfma.f32	s15, s12, s11
 80064d4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80064d8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80064dc:	ed84 7a00 	vstr	s14, [r4]
 80064e0:	e7b4      	b.n	800644c <__ieee754_rem_pio2f+0xec>
 80064e2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80064e6:	db06      	blt.n	80064f6 <__ieee754_rem_pio2f+0x196>
 80064e8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80064ec:	edc0 7a01 	vstr	s15, [r0, #4]
 80064f0:	edc0 7a00 	vstr	s15, [r0]
 80064f4:	e742      	b.n	800637c <__ieee754_rem_pio2f+0x1c>
 80064f6:	15ea      	asrs	r2, r5, #23
 80064f8:	3a86      	subs	r2, #134	; 0x86
 80064fa:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006506:	eddf 6a2a 	vldr	s13, [pc, #168]	; 80065b0 <__ieee754_rem_pio2f+0x250>
 800650a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800650e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006512:	ed8d 7a03 	vstr	s14, [sp, #12]
 8006516:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800651a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800651e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006522:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006526:	ed8d 7a04 	vstr	s14, [sp, #16]
 800652a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800652e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006536:	edcd 7a05 	vstr	s15, [sp, #20]
 800653a:	d11e      	bne.n	800657a <__ieee754_rem_pio2f+0x21a>
 800653c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006544:	bf14      	ite	ne
 8006546:	2302      	movne	r3, #2
 8006548:	2301      	moveq	r3, #1
 800654a:	491a      	ldr	r1, [pc, #104]	; (80065b4 <__ieee754_rem_pio2f+0x254>)
 800654c:	9101      	str	r1, [sp, #4]
 800654e:	2102      	movs	r1, #2
 8006550:	9100      	str	r1, [sp, #0]
 8006552:	a803      	add	r0, sp, #12
 8006554:	4621      	mov	r1, r4
 8006556:	f000 f837 	bl	80065c8 <__kernel_rem_pio2f>
 800655a:	2e00      	cmp	r6, #0
 800655c:	f6bf af31 	bge.w	80063c2 <__ieee754_rem_pio2f+0x62>
 8006560:	edd4 7a00 	vldr	s15, [r4]
 8006564:	eef1 7a67 	vneg.f32	s15, s15
 8006568:	edc4 7a00 	vstr	s15, [r4]
 800656c:	edd4 7a01 	vldr	s15, [r4, #4]
 8006570:	eef1 7a67 	vneg.f32	s15, s15
 8006574:	edc4 7a01 	vstr	s15, [r4, #4]
 8006578:	e77a      	b.n	8006470 <__ieee754_rem_pio2f+0x110>
 800657a:	2303      	movs	r3, #3
 800657c:	e7e5      	b.n	800654a <__ieee754_rem_pio2f+0x1ea>
 800657e:	bf00      	nop
 8006580:	3f490fd8 	.word	0x3f490fd8
 8006584:	4016cbe3 	.word	0x4016cbe3
 8006588:	3fc90f80 	.word	0x3fc90f80
 800658c:	3fc90fd0 	.word	0x3fc90fd0
 8006590:	37354400 	.word	0x37354400
 8006594:	37354443 	.word	0x37354443
 8006598:	2e85a308 	.word	0x2e85a308
 800659c:	43490f80 	.word	0x43490f80
 80065a0:	3f22f984 	.word	0x3f22f984
 80065a4:	0800bef4 	.word	0x0800bef4
 80065a8:	2e85a300 	.word	0x2e85a300
 80065ac:	248d3132 	.word	0x248d3132
 80065b0:	43800000 	.word	0x43800000
 80065b4:	0800bf74 	.word	0x0800bf74

080065b8 <fabsf>:
 80065b8:	ee10 3a10 	vmov	r3, s0
 80065bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80065c0:	ee00 3a10 	vmov	s0, r3
 80065c4:	4770      	bx	lr
	...

080065c8 <__kernel_rem_pio2f>:
 80065c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065cc:	ed2d 8b04 	vpush	{d8-d9}
 80065d0:	b0d9      	sub	sp, #356	; 0x164
 80065d2:	4688      	mov	r8, r1
 80065d4:	9002      	str	r0, [sp, #8]
 80065d6:	49b8      	ldr	r1, [pc, #736]	; (80068b8 <__kernel_rem_pio2f+0x2f0>)
 80065d8:	9866      	ldr	r0, [sp, #408]	; 0x198
 80065da:	9301      	str	r3, [sp, #4]
 80065dc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80065e0:	9901      	ldr	r1, [sp, #4]
 80065e2:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 80065e4:	f101 3bff 	add.w	fp, r1, #4294967295
 80065e8:	1d11      	adds	r1, r2, #4
 80065ea:	db25      	blt.n	8006638 <__kernel_rem_pio2f+0x70>
 80065ec:	1ed0      	subs	r0, r2, #3
 80065ee:	bf48      	it	mi
 80065f0:	1d10      	addmi	r0, r2, #4
 80065f2:	10c0      	asrs	r0, r0, #3
 80065f4:	1c45      	adds	r5, r0, #1
 80065f6:	00e9      	lsls	r1, r5, #3
 80065f8:	eba0 070b 	sub.w	r7, r0, fp
 80065fc:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 80068c8 <__kernel_rem_pio2f+0x300>
 8006600:	9103      	str	r1, [sp, #12]
 8006602:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8006606:	eb0a 0c0b 	add.w	ip, sl, fp
 800660a:	ae1c      	add	r6, sp, #112	; 0x70
 800660c:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 8006610:	2400      	movs	r4, #0
 8006612:	4564      	cmp	r4, ip
 8006614:	dd12      	ble.n	800663c <__kernel_rem_pio2f+0x74>
 8006616:	9901      	ldr	r1, [sp, #4]
 8006618:	ac1c      	add	r4, sp, #112	; 0x70
 800661a:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 800661e:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 8006622:	f04f 0c00 	mov.w	ip, #0
 8006626:	45d4      	cmp	ip, sl
 8006628:	dc27      	bgt.n	800667a <__kernel_rem_pio2f+0xb2>
 800662a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800662e:	eddf 7aa6 	vldr	s15, [pc, #664]	; 80068c8 <__kernel_rem_pio2f+0x300>
 8006632:	4627      	mov	r7, r4
 8006634:	2600      	movs	r6, #0
 8006636:	e016      	b.n	8006666 <__kernel_rem_pio2f+0x9e>
 8006638:	2000      	movs	r0, #0
 800663a:	e7db      	b.n	80065f4 <__kernel_rem_pio2f+0x2c>
 800663c:	42e7      	cmn	r7, r4
 800663e:	bf5d      	ittte	pl
 8006640:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 8006644:	ee07 1a90 	vmovpl	s15, r1
 8006648:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800664c:	eef0 7a47 	vmovmi.f32	s15, s14
 8006650:	ece6 7a01 	vstmia	r6!, {s15}
 8006654:	3401      	adds	r4, #1
 8006656:	e7dc      	b.n	8006612 <__kernel_rem_pio2f+0x4a>
 8006658:	ecfe 6a01 	vldmia	lr!, {s13}
 800665c:	ed97 7a00 	vldr	s14, [r7]
 8006660:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006664:	3601      	adds	r6, #1
 8006666:	455e      	cmp	r6, fp
 8006668:	f1a7 0704 	sub.w	r7, r7, #4
 800666c:	ddf4      	ble.n	8006658 <__kernel_rem_pio2f+0x90>
 800666e:	ece9 7a01 	vstmia	r9!, {s15}
 8006672:	f10c 0c01 	add.w	ip, ip, #1
 8006676:	3404      	adds	r4, #4
 8006678:	e7d5      	b.n	8006626 <__kernel_rem_pio2f+0x5e>
 800667a:	a908      	add	r1, sp, #32
 800667c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006680:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006684:	eddf 8a8f 	vldr	s17, [pc, #572]	; 80068c4 <__kernel_rem_pio2f+0x2fc>
 8006688:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 80068c0 <__kernel_rem_pio2f+0x2f8>
 800668c:	9105      	str	r1, [sp, #20]
 800668e:	9304      	str	r3, [sp, #16]
 8006690:	4656      	mov	r6, sl
 8006692:	00b3      	lsls	r3, r6, #2
 8006694:	9306      	str	r3, [sp, #24]
 8006696:	ab58      	add	r3, sp, #352	; 0x160
 8006698:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800669c:	ac08      	add	r4, sp, #32
 800669e:	ab44      	add	r3, sp, #272	; 0x110
 80066a0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80066a4:	46a4      	mov	ip, r4
 80066a6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80066aa:	4637      	mov	r7, r6
 80066ac:	2f00      	cmp	r7, #0
 80066ae:	f1a0 0004 	sub.w	r0, r0, #4
 80066b2:	dc4a      	bgt.n	800674a <__kernel_rem_pio2f+0x182>
 80066b4:	4628      	mov	r0, r5
 80066b6:	9207      	str	r2, [sp, #28]
 80066b8:	f000 f9f8 	bl	8006aac <scalbnf>
 80066bc:	eeb0 8a40 	vmov.f32	s16, s0
 80066c0:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80066c4:	ee28 0a00 	vmul.f32	s0, s16, s0
 80066c8:	f000 fa56 	bl	8006b78 <floorf>
 80066cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80066d0:	eea0 8a67 	vfms.f32	s16, s0, s15
 80066d4:	2d00      	cmp	r5, #0
 80066d6:	9a07      	ldr	r2, [sp, #28]
 80066d8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80066dc:	ee17 9a90 	vmov	r9, s15
 80066e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066e4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80066e8:	dd41      	ble.n	800676e <__kernel_rem_pio2f+0x1a6>
 80066ea:	f106 3cff 	add.w	ip, r6, #4294967295
 80066ee:	ab08      	add	r3, sp, #32
 80066f0:	f1c5 0e08 	rsb	lr, r5, #8
 80066f4:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80066f8:	fa47 f00e 	asr.w	r0, r7, lr
 80066fc:	4481      	add	r9, r0
 80066fe:	fa00 f00e 	lsl.w	r0, r0, lr
 8006702:	1a3f      	subs	r7, r7, r0
 8006704:	f1c5 0007 	rsb	r0, r5, #7
 8006708:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800670c:	4107      	asrs	r7, r0
 800670e:	2f00      	cmp	r7, #0
 8006710:	dd3c      	ble.n	800678c <__kernel_rem_pio2f+0x1c4>
 8006712:	f04f 0e00 	mov.w	lr, #0
 8006716:	f109 0901 	add.w	r9, r9, #1
 800671a:	4671      	mov	r1, lr
 800671c:	4576      	cmp	r6, lr
 800671e:	dc67      	bgt.n	80067f0 <__kernel_rem_pio2f+0x228>
 8006720:	2d00      	cmp	r5, #0
 8006722:	dd03      	ble.n	800672c <__kernel_rem_pio2f+0x164>
 8006724:	2d01      	cmp	r5, #1
 8006726:	d074      	beq.n	8006812 <__kernel_rem_pio2f+0x24a>
 8006728:	2d02      	cmp	r5, #2
 800672a:	d07b      	beq.n	8006824 <__kernel_rem_pio2f+0x25c>
 800672c:	2f02      	cmp	r7, #2
 800672e:	d12d      	bne.n	800678c <__kernel_rem_pio2f+0x1c4>
 8006730:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006734:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006738:	b341      	cbz	r1, 800678c <__kernel_rem_pio2f+0x1c4>
 800673a:	4628      	mov	r0, r5
 800673c:	9207      	str	r2, [sp, #28]
 800673e:	f000 f9b5 	bl	8006aac <scalbnf>
 8006742:	9a07      	ldr	r2, [sp, #28]
 8006744:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006748:	e020      	b.n	800678c <__kernel_rem_pio2f+0x1c4>
 800674a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800674e:	3f01      	subs	r7, #1
 8006750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006754:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006758:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800675c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006760:	ecac 0a01 	vstmia	ip!, {s0}
 8006764:	ed90 0a00 	vldr	s0, [r0]
 8006768:	ee37 0a80 	vadd.f32	s0, s15, s0
 800676c:	e79e      	b.n	80066ac <__kernel_rem_pio2f+0xe4>
 800676e:	d105      	bne.n	800677c <__kernel_rem_pio2f+0x1b4>
 8006770:	1e70      	subs	r0, r6, #1
 8006772:	ab08      	add	r3, sp, #32
 8006774:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8006778:	11ff      	asrs	r7, r7, #7
 800677a:	e7c8      	b.n	800670e <__kernel_rem_pio2f+0x146>
 800677c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006780:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006788:	da30      	bge.n	80067ec <__kernel_rem_pio2f+0x224>
 800678a:	2700      	movs	r7, #0
 800678c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006794:	f040 809a 	bne.w	80068cc <__kernel_rem_pio2f+0x304>
 8006798:	1e74      	subs	r4, r6, #1
 800679a:	46a4      	mov	ip, r4
 800679c:	2100      	movs	r1, #0
 800679e:	45d4      	cmp	ip, sl
 80067a0:	da47      	bge.n	8006832 <__kernel_rem_pio2f+0x26a>
 80067a2:	2900      	cmp	r1, #0
 80067a4:	d063      	beq.n	800686e <__kernel_rem_pio2f+0x2a6>
 80067a6:	ab08      	add	r3, sp, #32
 80067a8:	3d08      	subs	r5, #8
 80067aa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d07f      	beq.n	80068b2 <__kernel_rem_pio2f+0x2ea>
 80067b2:	4628      	mov	r0, r5
 80067b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80067b8:	f000 f978 	bl	8006aac <scalbnf>
 80067bc:	1c63      	adds	r3, r4, #1
 80067be:	aa44      	add	r2, sp, #272	; 0x110
 80067c0:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80068c4 <__kernel_rem_pio2f+0x2fc>
 80067c4:	0099      	lsls	r1, r3, #2
 80067c6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80067ca:	4623      	mov	r3, r4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f280 80ad 	bge.w	800692c <__kernel_rem_pio2f+0x364>
 80067d2:	4623      	mov	r3, r4
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f2c0 80cb 	blt.w	8006970 <__kernel_rem_pio2f+0x3a8>
 80067da:	aa44      	add	r2, sp, #272	; 0x110
 80067dc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80067e0:	4e36      	ldr	r6, [pc, #216]	; (80068bc <__kernel_rem_pio2f+0x2f4>)
 80067e2:	eddf 7a39 	vldr	s15, [pc, #228]	; 80068c8 <__kernel_rem_pio2f+0x300>
 80067e6:	2000      	movs	r0, #0
 80067e8:	1ae2      	subs	r2, r4, r3
 80067ea:	e0b6      	b.n	800695a <__kernel_rem_pio2f+0x392>
 80067ec:	2702      	movs	r7, #2
 80067ee:	e790      	b.n	8006712 <__kernel_rem_pio2f+0x14a>
 80067f0:	6820      	ldr	r0, [r4, #0]
 80067f2:	b949      	cbnz	r1, 8006808 <__kernel_rem_pio2f+0x240>
 80067f4:	b118      	cbz	r0, 80067fe <__kernel_rem_pio2f+0x236>
 80067f6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80067fa:	6020      	str	r0, [r4, #0]
 80067fc:	2001      	movs	r0, #1
 80067fe:	f10e 0e01 	add.w	lr, lr, #1
 8006802:	3404      	adds	r4, #4
 8006804:	4601      	mov	r1, r0
 8006806:	e789      	b.n	800671c <__kernel_rem_pio2f+0x154>
 8006808:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800680c:	6020      	str	r0, [r4, #0]
 800680e:	4608      	mov	r0, r1
 8006810:	e7f5      	b.n	80067fe <__kernel_rem_pio2f+0x236>
 8006812:	1e74      	subs	r4, r6, #1
 8006814:	ab08      	add	r3, sp, #32
 8006816:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800681a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800681e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8006822:	e783      	b.n	800672c <__kernel_rem_pio2f+0x164>
 8006824:	1e74      	subs	r4, r6, #1
 8006826:	ab08      	add	r3, sp, #32
 8006828:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800682c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006830:	e7f5      	b.n	800681e <__kernel_rem_pio2f+0x256>
 8006832:	ab08      	add	r3, sp, #32
 8006834:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8006838:	f10c 3cff 	add.w	ip, ip, #4294967295
 800683c:	4301      	orrs	r1, r0
 800683e:	e7ae      	b.n	800679e <__kernel_rem_pio2f+0x1d6>
 8006840:	3001      	adds	r0, #1
 8006842:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8006846:	2f00      	cmp	r7, #0
 8006848:	d0fa      	beq.n	8006840 <__kernel_rem_pio2f+0x278>
 800684a:	9b06      	ldr	r3, [sp, #24]
 800684c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006850:	eb0d 0403 	add.w	r4, sp, r3
 8006854:	9b01      	ldr	r3, [sp, #4]
 8006856:	18f7      	adds	r7, r6, r3
 8006858:	ab1c      	add	r3, sp, #112	; 0x70
 800685a:	f106 0c01 	add.w	ip, r6, #1
 800685e:	3c4c      	subs	r4, #76	; 0x4c
 8006860:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006864:	4430      	add	r0, r6
 8006866:	4560      	cmp	r0, ip
 8006868:	da04      	bge.n	8006874 <__kernel_rem_pio2f+0x2ac>
 800686a:	4606      	mov	r6, r0
 800686c:	e711      	b.n	8006692 <__kernel_rem_pio2f+0xca>
 800686e:	9c05      	ldr	r4, [sp, #20]
 8006870:	2001      	movs	r0, #1
 8006872:	e7e6      	b.n	8006842 <__kernel_rem_pio2f+0x27a>
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	f8dd e008 	ldr.w	lr, [sp, #8]
 800687a:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800687e:	9306      	str	r3, [sp, #24]
 8006880:	ee07 3a90 	vmov	s15, r3
 8006884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006888:	2600      	movs	r6, #0
 800688a:	ece7 7a01 	vstmia	r7!, {s15}
 800688e:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80068c8 <__kernel_rem_pio2f+0x300>
 8006892:	46b9      	mov	r9, r7
 8006894:	455e      	cmp	r6, fp
 8006896:	dd04      	ble.n	80068a2 <__kernel_rem_pio2f+0x2da>
 8006898:	ece4 7a01 	vstmia	r4!, {s15}
 800689c:	f10c 0c01 	add.w	ip, ip, #1
 80068a0:	e7e1      	b.n	8006866 <__kernel_rem_pio2f+0x29e>
 80068a2:	ecfe 6a01 	vldmia	lr!, {s13}
 80068a6:	ed39 7a01 	vldmdb	r9!, {s14}
 80068aa:	3601      	adds	r6, #1
 80068ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80068b0:	e7f0      	b.n	8006894 <__kernel_rem_pio2f+0x2cc>
 80068b2:	3c01      	subs	r4, #1
 80068b4:	e777      	b.n	80067a6 <__kernel_rem_pio2f+0x1de>
 80068b6:	bf00      	nop
 80068b8:	0800c2b8 	.word	0x0800c2b8
 80068bc:	0800c28c 	.word	0x0800c28c
 80068c0:	43800000 	.word	0x43800000
 80068c4:	3b800000 	.word	0x3b800000
 80068c8:	00000000 	.word	0x00000000
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	eeb0 0a48 	vmov.f32	s0, s16
 80068d2:	1a98      	subs	r0, r3, r2
 80068d4:	f000 f8ea 	bl	8006aac <scalbnf>
 80068d8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80068c0 <__kernel_rem_pio2f+0x2f8>
 80068dc:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80068e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e4:	db19      	blt.n	800691a <__kernel_rem_pio2f+0x352>
 80068e6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80068c4 <__kernel_rem_pio2f+0x2fc>
 80068ea:	ee60 7a27 	vmul.f32	s15, s0, s15
 80068ee:	aa08      	add	r2, sp, #32
 80068f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80068f4:	1c74      	adds	r4, r6, #1
 80068f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80068fa:	3508      	adds	r5, #8
 80068fc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006900:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006904:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006908:	ee10 3a10 	vmov	r3, s0
 800690c:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006910:	ee17 3a90 	vmov	r3, s15
 8006914:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006918:	e74b      	b.n	80067b2 <__kernel_rem_pio2f+0x1ea>
 800691a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800691e:	aa08      	add	r2, sp, #32
 8006920:	ee10 3a10 	vmov	r3, s0
 8006924:	4634      	mov	r4, r6
 8006926:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800692a:	e742      	b.n	80067b2 <__kernel_rem_pio2f+0x1ea>
 800692c:	a808      	add	r0, sp, #32
 800692e:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8006932:	9001      	str	r0, [sp, #4]
 8006934:	ee07 0a90 	vmov	s15, r0
 8006938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800693c:	3b01      	subs	r3, #1
 800693e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006942:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006946:	ed62 7a01 	vstmdb	r2!, {s15}
 800694a:	e73f      	b.n	80067cc <__kernel_rem_pio2f+0x204>
 800694c:	ecf6 6a01 	vldmia	r6!, {s13}
 8006950:	ecb5 7a01 	vldmia	r5!, {s14}
 8006954:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006958:	3001      	adds	r0, #1
 800695a:	4550      	cmp	r0, sl
 800695c:	dc01      	bgt.n	8006962 <__kernel_rem_pio2f+0x39a>
 800695e:	4290      	cmp	r0, r2
 8006960:	ddf4      	ble.n	800694c <__kernel_rem_pio2f+0x384>
 8006962:	a858      	add	r0, sp, #352	; 0x160
 8006964:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006968:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 800696c:	3b01      	subs	r3, #1
 800696e:	e731      	b.n	80067d4 <__kernel_rem_pio2f+0x20c>
 8006970:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8006972:	2b02      	cmp	r3, #2
 8006974:	dc09      	bgt.n	800698a <__kernel_rem_pio2f+0x3c2>
 8006976:	2b00      	cmp	r3, #0
 8006978:	dc2b      	bgt.n	80069d2 <__kernel_rem_pio2f+0x40a>
 800697a:	d044      	beq.n	8006a06 <__kernel_rem_pio2f+0x43e>
 800697c:	f009 0007 	and.w	r0, r9, #7
 8006980:	b059      	add	sp, #356	; 0x164
 8006982:	ecbd 8b04 	vpop	{d8-d9}
 8006986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800698c:	2b03      	cmp	r3, #3
 800698e:	d1f5      	bne.n	800697c <__kernel_rem_pio2f+0x3b4>
 8006990:	aa30      	add	r2, sp, #192	; 0xc0
 8006992:	1f0b      	subs	r3, r1, #4
 8006994:	4413      	add	r3, r2
 8006996:	461a      	mov	r2, r3
 8006998:	4620      	mov	r0, r4
 800699a:	2800      	cmp	r0, #0
 800699c:	f1a2 0204 	sub.w	r2, r2, #4
 80069a0:	dc52      	bgt.n	8006a48 <__kernel_rem_pio2f+0x480>
 80069a2:	4622      	mov	r2, r4
 80069a4:	2a01      	cmp	r2, #1
 80069a6:	f1a3 0304 	sub.w	r3, r3, #4
 80069aa:	dc5d      	bgt.n	8006a68 <__kernel_rem_pio2f+0x4a0>
 80069ac:	ab30      	add	r3, sp, #192	; 0xc0
 80069ae:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80068c8 <__kernel_rem_pio2f+0x300>
 80069b2:	440b      	add	r3, r1
 80069b4:	2c01      	cmp	r4, #1
 80069b6:	dc67      	bgt.n	8006a88 <__kernel_rem_pio2f+0x4c0>
 80069b8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80069bc:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80069c0:	2f00      	cmp	r7, #0
 80069c2:	d167      	bne.n	8006a94 <__kernel_rem_pio2f+0x4cc>
 80069c4:	edc8 6a00 	vstr	s13, [r8]
 80069c8:	ed88 7a01 	vstr	s14, [r8, #4]
 80069cc:	edc8 7a02 	vstr	s15, [r8, #8]
 80069d0:	e7d4      	b.n	800697c <__kernel_rem_pio2f+0x3b4>
 80069d2:	ab30      	add	r3, sp, #192	; 0xc0
 80069d4:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 80068c8 <__kernel_rem_pio2f+0x300>
 80069d8:	440b      	add	r3, r1
 80069da:	4622      	mov	r2, r4
 80069dc:	2a00      	cmp	r2, #0
 80069de:	da24      	bge.n	8006a2a <__kernel_rem_pio2f+0x462>
 80069e0:	b34f      	cbz	r7, 8006a36 <__kernel_rem_pio2f+0x46e>
 80069e2:	eef1 7a47 	vneg.f32	s15, s14
 80069e6:	edc8 7a00 	vstr	s15, [r8]
 80069ea:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80069ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069f2:	aa31      	add	r2, sp, #196	; 0xc4
 80069f4:	2301      	movs	r3, #1
 80069f6:	429c      	cmp	r4, r3
 80069f8:	da20      	bge.n	8006a3c <__kernel_rem_pio2f+0x474>
 80069fa:	b10f      	cbz	r7, 8006a00 <__kernel_rem_pio2f+0x438>
 80069fc:	eef1 7a67 	vneg.f32	s15, s15
 8006a00:	edc8 7a01 	vstr	s15, [r8, #4]
 8006a04:	e7ba      	b.n	800697c <__kernel_rem_pio2f+0x3b4>
 8006a06:	ab30      	add	r3, sp, #192	; 0xc0
 8006a08:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 80068c8 <__kernel_rem_pio2f+0x300>
 8006a0c:	440b      	add	r3, r1
 8006a0e:	2c00      	cmp	r4, #0
 8006a10:	da05      	bge.n	8006a1e <__kernel_rem_pio2f+0x456>
 8006a12:	b10f      	cbz	r7, 8006a18 <__kernel_rem_pio2f+0x450>
 8006a14:	eef1 7a67 	vneg.f32	s15, s15
 8006a18:	edc8 7a00 	vstr	s15, [r8]
 8006a1c:	e7ae      	b.n	800697c <__kernel_rem_pio2f+0x3b4>
 8006a1e:	ed33 7a01 	vldmdb	r3!, {s14}
 8006a22:	3c01      	subs	r4, #1
 8006a24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a28:	e7f1      	b.n	8006a0e <__kernel_rem_pio2f+0x446>
 8006a2a:	ed73 7a01 	vldmdb	r3!, {s15}
 8006a2e:	3a01      	subs	r2, #1
 8006a30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006a34:	e7d2      	b.n	80069dc <__kernel_rem_pio2f+0x414>
 8006a36:	eef0 7a47 	vmov.f32	s15, s14
 8006a3a:	e7d4      	b.n	80069e6 <__kernel_rem_pio2f+0x41e>
 8006a3c:	ecb2 7a01 	vldmia	r2!, {s14}
 8006a40:	3301      	adds	r3, #1
 8006a42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a46:	e7d6      	b.n	80069f6 <__kernel_rem_pio2f+0x42e>
 8006a48:	edd2 7a00 	vldr	s15, [r2]
 8006a4c:	edd2 6a01 	vldr	s13, [r2, #4]
 8006a50:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a54:	3801      	subs	r0, #1
 8006a56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a5a:	ed82 7a00 	vstr	s14, [r2]
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	edc2 7a01 	vstr	s15, [r2, #4]
 8006a66:	e798      	b.n	800699a <__kernel_rem_pio2f+0x3d2>
 8006a68:	edd3 7a00 	vldr	s15, [r3]
 8006a6c:	edd3 6a01 	vldr	s13, [r3, #4]
 8006a70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006a74:	3a01      	subs	r2, #1
 8006a76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a7a:	ed83 7a00 	vstr	s14, [r3]
 8006a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a82:	edc3 7a01 	vstr	s15, [r3, #4]
 8006a86:	e78d      	b.n	80069a4 <__kernel_rem_pio2f+0x3dc>
 8006a88:	ed33 7a01 	vldmdb	r3!, {s14}
 8006a8c:	3c01      	subs	r4, #1
 8006a8e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a92:	e78f      	b.n	80069b4 <__kernel_rem_pio2f+0x3ec>
 8006a94:	eef1 6a66 	vneg.f32	s13, s13
 8006a98:	eeb1 7a47 	vneg.f32	s14, s14
 8006a9c:	edc8 6a00 	vstr	s13, [r8]
 8006aa0:	ed88 7a01 	vstr	s14, [r8, #4]
 8006aa4:	eef1 7a67 	vneg.f32	s15, s15
 8006aa8:	e790      	b.n	80069cc <__kernel_rem_pio2f+0x404>
 8006aaa:	bf00      	nop

08006aac <scalbnf>:
 8006aac:	ee10 3a10 	vmov	r3, s0
 8006ab0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006ab4:	d02b      	beq.n	8006b0e <scalbnf+0x62>
 8006ab6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006aba:	d302      	bcc.n	8006ac2 <scalbnf+0x16>
 8006abc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006ac0:	4770      	bx	lr
 8006ac2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006ac6:	d123      	bne.n	8006b10 <scalbnf+0x64>
 8006ac8:	4b24      	ldr	r3, [pc, #144]	; (8006b5c <scalbnf+0xb0>)
 8006aca:	eddf 7a25 	vldr	s15, [pc, #148]	; 8006b60 <scalbnf+0xb4>
 8006ace:	4298      	cmp	r0, r3
 8006ad0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006ad4:	db17      	blt.n	8006b06 <scalbnf+0x5a>
 8006ad6:	ee10 3a10 	vmov	r3, s0
 8006ada:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006ade:	3a19      	subs	r2, #25
 8006ae0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8006ae4:	4288      	cmp	r0, r1
 8006ae6:	dd15      	ble.n	8006b14 <scalbnf+0x68>
 8006ae8:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006b64 <scalbnf+0xb8>
 8006aec:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8006b68 <scalbnf+0xbc>
 8006af0:	ee10 3a10 	vmov	r3, s0
 8006af4:	eeb0 7a67 	vmov.f32	s14, s15
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bfb8      	it	lt
 8006afc:	eef0 7a66 	vmovlt.f32	s15, s13
 8006b00:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006b04:	4770      	bx	lr
 8006b06:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006b6c <scalbnf+0xc0>
 8006b0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006b0e:	4770      	bx	lr
 8006b10:	0dd2      	lsrs	r2, r2, #23
 8006b12:	e7e5      	b.n	8006ae0 <scalbnf+0x34>
 8006b14:	4410      	add	r0, r2
 8006b16:	28fe      	cmp	r0, #254	; 0xfe
 8006b18:	dce6      	bgt.n	8006ae8 <scalbnf+0x3c>
 8006b1a:	2800      	cmp	r0, #0
 8006b1c:	dd06      	ble.n	8006b2c <scalbnf+0x80>
 8006b1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b22:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006b26:	ee00 3a10 	vmov	s0, r3
 8006b2a:	4770      	bx	lr
 8006b2c:	f110 0f16 	cmn.w	r0, #22
 8006b30:	da09      	bge.n	8006b46 <scalbnf+0x9a>
 8006b32:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8006b6c <scalbnf+0xc0>
 8006b36:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006b70 <scalbnf+0xc4>
 8006b3a:	ee10 3a10 	vmov	r3, s0
 8006b3e:	eeb0 7a67 	vmov.f32	s14, s15
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	e7d9      	b.n	8006afa <scalbnf+0x4e>
 8006b46:	3019      	adds	r0, #25
 8006b48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b4c:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006b50:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8006b74 <scalbnf+0xc8>
 8006b54:	ee07 3a90 	vmov	s15, r3
 8006b58:	e7d7      	b.n	8006b0a <scalbnf+0x5e>
 8006b5a:	bf00      	nop
 8006b5c:	ffff3cb0 	.word	0xffff3cb0
 8006b60:	4c000000 	.word	0x4c000000
 8006b64:	7149f2ca 	.word	0x7149f2ca
 8006b68:	f149f2ca 	.word	0xf149f2ca
 8006b6c:	0da24260 	.word	0x0da24260
 8006b70:	8da24260 	.word	0x8da24260
 8006b74:	33000000 	.word	0x33000000

08006b78 <floorf>:
 8006b78:	ee10 3a10 	vmov	r3, s0
 8006b7c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006b80:	3a7f      	subs	r2, #127	; 0x7f
 8006b82:	2a16      	cmp	r2, #22
 8006b84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006b88:	dc2a      	bgt.n	8006be0 <floorf+0x68>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	da11      	bge.n	8006bb2 <floorf+0x3a>
 8006b8e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8006bf0 <floorf+0x78>
 8006b92:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006b96:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b9e:	dd05      	ble.n	8006bac <floorf+0x34>
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da23      	bge.n	8006bec <floorf+0x74>
 8006ba4:	4a13      	ldr	r2, [pc, #76]	; (8006bf4 <floorf+0x7c>)
 8006ba6:	2900      	cmp	r1, #0
 8006ba8:	bf18      	it	ne
 8006baa:	4613      	movne	r3, r2
 8006bac:	ee00 3a10 	vmov	s0, r3
 8006bb0:	4770      	bx	lr
 8006bb2:	4911      	ldr	r1, [pc, #68]	; (8006bf8 <floorf+0x80>)
 8006bb4:	4111      	asrs	r1, r2
 8006bb6:	420b      	tst	r3, r1
 8006bb8:	d0fa      	beq.n	8006bb0 <floorf+0x38>
 8006bba:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8006bf0 <floorf+0x78>
 8006bbe:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006bc2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bca:	ddef      	ble.n	8006bac <floorf+0x34>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfbe      	ittt	lt
 8006bd0:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8006bd4:	fa40 f202 	asrlt.w	r2, r0, r2
 8006bd8:	189b      	addlt	r3, r3, r2
 8006bda:	ea23 0301 	bic.w	r3, r3, r1
 8006bde:	e7e5      	b.n	8006bac <floorf+0x34>
 8006be0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006be4:	d3e4      	bcc.n	8006bb0 <floorf+0x38>
 8006be6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006bea:	4770      	bx	lr
 8006bec:	2300      	movs	r3, #0
 8006bee:	e7dd      	b.n	8006bac <floorf+0x34>
 8006bf0:	7149f2ca 	.word	0x7149f2ca
 8006bf4:	bf800000 	.word	0xbf800000
 8006bf8:	007fffff 	.word	0x007fffff

08006bfc <_init>:
 8006bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfe:	bf00      	nop
 8006c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c02:	bc08      	pop	{r3}
 8006c04:	469e      	mov	lr, r3
 8006c06:	4770      	bx	lr

08006c08 <_fini>:
 8006c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c0a:	bf00      	nop
 8006c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0e:	bc08      	pop	{r3}
 8006c10:	469e      	mov	lr, r3
 8006c12:	4770      	bx	lr
