
poc_oled_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004024  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002830  080041fc  080041fc  000141fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a2c  08006a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a34  08006a34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a34  08006a34  00016a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a38  08006a38  00016a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  2000000c  08006a48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08006a48  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010c56  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002348  00000000  00000000  00030cd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00033020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a53  00000000  00000000  00033d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002509e  00000000  00000000  000347cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011cd2  00000000  00000000  00059869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec8d2  00000000  00000000  0006b53b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f0  00000000  00000000  00157e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015b500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080041e4 	.word	0x080041e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080041e4 	.word	0x080041e4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fb3e 	bl	8000b9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f8af 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f983 	bl	800082c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 f937 	bl	8000798 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052a:	f000 f8f5 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800052e:	f003 fa21 	bl	8003974 <ssd1306_Init>

  //ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,White);
  //ssd1306_DrawBitmap(0,0,github_logo_64x64,64,64,White);
  ssd1306_FillRectangle(0, 0, 108, 15, White);
 8000532:	2301      	movs	r3, #1
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	230f      	movs	r3, #15
 8000538:	226c      	movs	r2, #108	; 0x6c
 800053a:	2100      	movs	r1, #0
 800053c:	2000      	movs	r0, #0
 800053e:	f003 fd4b 	bl	8003fd8 <ssd1306_FillRectangle>
  ssd1306_FillRectangle(64, 16, 128, 64, White);
 8000542:	2301      	movs	r3, #1
 8000544:	9300      	str	r3, [sp, #0]
 8000546:	2340      	movs	r3, #64	; 0x40
 8000548:	2280      	movs	r2, #128	; 0x80
 800054a:	2110      	movs	r1, #16
 800054c:	2040      	movs	r0, #64	; 0x40
 800054e:	f003 fd43 	bl	8003fd8 <ssd1306_FillRectangle>
  ssd1306_DrawBitmap(108, 0, woodstock, 20, 20, White);
 8000552:	2301      	movs	r3, #1
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2314      	movs	r3, #20
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2314      	movs	r3, #20
 800055c:	4a3b      	ldr	r2, [pc, #236]	; (800064c <main+0x138>)
 800055e:	2100      	movs	r1, #0
 8000560:	206c      	movs	r0, #108	; 0x6c
 8000562:	f003 fd87 	bl	8004074 <ssd1306_DrawBitmap>
  ssd1306_DrawBitmap(0,16,snoopy_48x48,48,48,White);
 8000566:	2301      	movs	r3, #1
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2330      	movs	r3, #48	; 0x30
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2330      	movs	r3, #48	; 0x30
 8000570:	4a37      	ldr	r2, [pc, #220]	; (8000650 <main+0x13c>)
 8000572:	2110      	movs	r1, #16
 8000574:	2000      	movs	r0, #0
 8000576:	f003 fd7d 	bl	8004074 <ssd1306_DrawBitmap>
  ssd1306_FillRectangle(48, 16, 64, 63, White);
 800057a:	2301      	movs	r3, #1
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	233f      	movs	r3, #63	; 0x3f
 8000580:	2240      	movs	r2, #64	; 0x40
 8000582:	2110      	movs	r1, #16
 8000584:	2030      	movs	r0, #48	; 0x30
 8000586:	f003 fd27 	bl	8003fd8 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 800058a:	f003 fa75 	bl	8003a78 <ssd1306_UpdateScreen>

  HAL_Delay(3000);
 800058e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000592:	f000 fb73 	bl	8000c7c <HAL_Delay>
  ssd1306_Fill(Black);
 8000596:	2000      	movs	r0, #0
 8000598:	f003 fa56 	bl	8003a48 <ssd1306_Fill>

  ssd1306_FillRectangle(0, 0, 128, 15, White);
 800059c:	2301      	movs	r3, #1
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	230f      	movs	r3, #15
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	2100      	movs	r1, #0
 80005a6:	2000      	movs	r0, #0
 80005a8:	f003 fd16 	bl	8003fd8 <ssd1306_FillRectangle>

  ssd1306_SetCursor(4,4);
 80005ac:	2104      	movs	r1, #4
 80005ae:	2004      	movs	r0, #4
 80005b0:	f003 fb96 	bl	8003ce0 <ssd1306_SetCursor>
  ssd1306_WriteString("6x8", Font_6x8, Black);
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <main+0x140>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	9200      	str	r2, [sp, #0]
 80005ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005bc:	4826      	ldr	r0, [pc, #152]	; (8000658 <main+0x144>)
 80005be:	f003 fb69 	bl	8003c94 <ssd1306_WriteString>

  ssd1306_SetCursor(26,3);
 80005c2:	2103      	movs	r1, #3
 80005c4:	201a      	movs	r0, #26
 80005c6:	f003 fb8b 	bl	8003ce0 <ssd1306_SetCursor>
  ssd1306_WriteString("7x10", Font_7x10, Black);
 80005ca:	4b24      	ldr	r3, [pc, #144]	; (800065c <main+0x148>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	9200      	str	r2, [sp, #0]
 80005d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005d2:	4823      	ldr	r0, [pc, #140]	; (8000660 <main+0x14c>)
 80005d4:	f003 fb5e 	bl	8003c94 <ssd1306_WriteString>

  ssd1306_SetCursor(0,16);
 80005d8:	2110      	movs	r1, #16
 80005da:	2000      	movs	r0, #0
 80005dc:	f003 fb80 	bl	8003ce0 <ssd1306_SetCursor>
  ssd1306_WriteString("16x15", Font_16x15, White);
 80005e0:	4b20      	ldr	r3, [pc, #128]	; (8000664 <main+0x150>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	9200      	str	r2, [sp, #0]
 80005e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005e8:	481f      	ldr	r0, [pc, #124]	; (8000668 <main+0x154>)
 80005ea:	f003 fb53 	bl	8003c94 <ssd1306_WriteString>

  ssd1306_SetCursor(0,31);
 80005ee:	211f      	movs	r1, #31
 80005f0:	2000      	movs	r0, #0
 80005f2:	f003 fb75 	bl	8003ce0 <ssd1306_SetCursor>
  ssd1306_WriteString("11x18", Font_11x18, White);
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <main+0x158>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	9200      	str	r2, [sp, #0]
 80005fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80005fe:	481c      	ldr	r0, [pc, #112]	; (8000670 <main+0x15c>)
 8000600:	f003 fb48 	bl	8003c94 <ssd1306_WriteString>
  //ssd1306_WriteString("16x26", Font_16x26, White);

  //ssd1306_SetCursor(0,40);
  //ssd1306_WriteString("16x24", Font_16x24, White);

  ssd1306_DrawCircle(7, 56, 7, White);
 8000604:	2301      	movs	r3, #1
 8000606:	2207      	movs	r2, #7
 8000608:	2138      	movs	r1, #56	; 0x38
 800060a:	2007      	movs	r0, #7
 800060c:	f003 fc26 	bl	8003e5c <ssd1306_DrawCircle>
  ssd1306_DrawRectangle(21, 49, 35, 63, White);
 8000610:	2301      	movs	r3, #1
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	233f      	movs	r3, #63	; 0x3f
 8000616:	2223      	movs	r2, #35	; 0x23
 8000618:	2131      	movs	r1, #49	; 0x31
 800061a:	2015      	movs	r0, #21
 800061c:	f003 fca5 	bl	8003f6a <ssd1306_DrawRectangle>

  // Draw a triangle
  SSD1306_VERTEX vertexes[4];
  vertexes[0] = (SSD1306_VERTEX){.x = 47, .y = 49};
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <main+0x160>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	823b      	strh	r3, [r7, #16]
  vertexes[1] = (SSD1306_VERTEX){.x = 40, .y = 63};
 8000626:	4b14      	ldr	r3, [pc, #80]	; (8000678 <main+0x164>)
 8000628:	881b      	ldrh	r3, [r3, #0]
 800062a:	827b      	strh	r3, [r7, #18]
  vertexes[2] = (SSD1306_VERTEX){.x = 54, .y = 63};
 800062c:	4b13      	ldr	r3, [pc, #76]	; (800067c <main+0x168>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	82bb      	strh	r3, [r7, #20]
  vertexes[3] = (SSD1306_VERTEX){.x = 47, .y = 49};
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <main+0x160>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	82fb      	strh	r3, [r7, #22]
  ssd1306_Polyline(vertexes, 4, White);
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	2201      	movs	r2, #1
 800063e:	2104      	movs	r1, #4
 8000640:	4618      	mov	r0, r3
 8000642:	f003 fbd1 	bl	8003de8 <ssd1306_Polyline>

  ssd1306_UpdateScreen();
 8000646:	f003 fa17 	bl	8003a78 <ssd1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x136>
 800064c:	08004344 	.word	0x08004344
 8000650:	08004224 	.word	0x08004224
 8000654:	080069fc 	.word	0x080069fc
 8000658:	080041fc 	.word	0x080041fc
 800065c:	08006a08 	.word	0x08006a08
 8000660:	08004200 	.word	0x08004200
 8000664:	08006a20 	.word	0x08006a20
 8000668:	08004208 	.word	0x08004208
 800066c:	08006a14 	.word	0x08006a14
 8000670:	08004210 	.word	0x08004210
 8000674:	08004218 	.word	0x08004218
 8000678:	0800421c 	.word	0x0800421c
 800067c:	08004220 	.word	0x08004220

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b094      	sub	sp, #80	; 0x50
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 0318 	add.w	r3, r7, #24
 800068a:	2238      	movs	r2, #56	; 0x38
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fd7c 	bl	800418c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	1d3b      	adds	r3, r7, #4
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006a2:	2000      	movs	r0, #0
 80006a4:	f001 fa8e 	bl	8001bc4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b2:	2340      	movs	r3, #64	; 0x40
 80006b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b6:	2302      	movs	r3, #2
 80006b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ba:	2302      	movs	r3, #2
 80006bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006be:	2304      	movs	r3, #4
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80006c2:	2355      	movs	r3, #85	; 0x55
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fb28 	bl	8001d2c <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006e2:	f000 f911 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	2104      	movs	r1, #4
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 fe26 	bl	8002350 <HAL_RCC_ClockConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800070a:	f000 f8fd 	bl	8000908 <Error_Handler>
  }
}
 800070e:	bf00      	nop
 8000710:	3750      	adds	r7, #80	; 0x50
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
	...

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_I2C1_Init+0x74>)
 8000754:	f000 fd81 	bl	800125a <HAL_I2C_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075e:	f000 f8d3 	bl	8000908 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C1_Init+0x74>)
 8000766:	f001 f995 	bl	8001a94 <HAL_I2CEx_ConfigAnalogFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 f8ca 	bl	8000908 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2C1_Init+0x74>)
 8000778:	f001 f9d7 	bl	8001b2a <HAL_I2CEx_ConfigDigitalFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f8c1 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40005400 	.word	0x40005400
 8000794:	30a0a7fb 	.word	0x30a0a7fb

08000798 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800079c:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 800079e:	4a22      	ldr	r2, [pc, #136]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80007a2:	4b20      	ldr	r3, [pc, #128]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1c      	ldr	r3, [pc, #112]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007da:	4812      	ldr	r0, [pc, #72]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007dc:	f002 fa22 	bl	8002c24 <HAL_UART_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80007e6:	f000 f88f 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	480d      	ldr	r0, [pc, #52]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 80007ee:	f002 ffbd 	bl	800376c <HAL_UARTEx_SetTxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007f8:	f000 f886 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007fc:	2100      	movs	r1, #0
 80007fe:	4809      	ldr	r0, [pc, #36]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 8000800:	f002 fff2 	bl	80037e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800080a:	f000 f87d 	bl	8000908 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800080e:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_LPUART1_UART_Init+0x8c>)
 8000810:	f002 ff73 	bl	80036fa <HAL_UARTEx_DisableFifoMode>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800081a:	f000 f875 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	2000007c 	.word	0x2000007c
 8000828:	40008000 	.word	0x40008000

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08a      	sub	sp, #40	; 0x28
 8000830:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
 800083a:	605a      	str	r2, [r3, #4]
 800083c:	609a      	str	r2, [r3, #8]
 800083e:	60da      	str	r2, [r3, #12]
 8000840:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000842:	4b2f      	ldr	r3, [pc, #188]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000848:	f043 0304 	orr.w	r3, r3, #4
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b2c      	ldr	r3, [pc, #176]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0304 	and.w	r3, r3, #4
 8000856:	613b      	str	r3, [r7, #16]
 8000858:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0xd4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000860:	f043 0320 	orr.w	r3, r3, #32
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0320 	and.w	r3, r3, #32
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	4b23      	ldr	r3, [pc, #140]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a22      	ldr	r2, [pc, #136]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b20      	ldr	r3, [pc, #128]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088a:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_GPIO_Init+0xd4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000890:	f043 0302 	orr.w	r3, r3, #2
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_GPIO_Init+0xd4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0302 	and.w	r3, r3, #2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2120      	movs	r1, #32
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 fc9b 	bl	80011e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4619      	mov	r1, r3
 80008c4:	480f      	ldr	r0, [pc, #60]	; (8000904 <MX_GPIO_Init+0xd8>)
 80008c6:	f000 fb0b 	bl	8000ee0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ca:	2320      	movs	r3, #32
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008e4:	f000 fafc 	bl	8000ee0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2100      	movs	r1, #0
 80008ec:	2028      	movs	r0, #40	; 0x28
 80008ee:	f000 fac2 	bl	8000e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008f2:	2028      	movs	r0, #40	; 0x28
 80008f4:	f000 fad9 	bl	8000eaa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40021000 	.word	0x40021000
 8000904:	48000800 	.word	0x48000800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_MspInit+0x44>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <HAL_MspInit+0x44>)
 8000920:	f043 0301 	orr.w	r3, r3, #1
 8000924:	6613      	str	r3, [r2, #96]	; 0x60
 8000926:	4b0c      	ldr	r3, [pc, #48]	; (8000958 <HAL_MspInit+0x44>)
 8000928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_MspInit+0x44>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_MspInit+0x44>)
 8000938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_MspInit+0x44>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800094a:	f001 f9df 	bl	8001d0c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000974:	f107 0310 	add.w	r3, r7, #16
 8000978:	2254      	movs	r2, #84	; 0x54
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f003 fc05 	bl	800418c <memset>
  if(hi2c->Instance==I2C1)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_I2C_MspInit+0xa8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d136      	bne.n	80009fa <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800098c:	2340      	movs	r3, #64	; 0x40
 800098e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4618      	mov	r0, r3
 800099a:	f001 fef5 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80009a4:	f7ff ffb0 	bl	8000908 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a8:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	4a16      	ldr	r2, [pc, #88]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b4:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b8:	f003 0302 	and.w	r3, r3, #2
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009c6:	2312      	movs	r3, #18
 80009c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009d2:	2304      	movs	r3, #4
 80009d4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009da:	4619      	mov	r1, r3
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <HAL_I2C_MspInit+0xb0>)
 80009de:	f000 fa7f 	bl	8000ee0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009e6:	4a08      	ldr	r2, [pc, #32]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ec:	6593      	str	r3, [r2, #88]	; 0x58
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_I2C_MspInit+0xac>)
 80009f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009fa:	bf00      	nop
 80009fc:	3778      	adds	r7, #120	; 0x78
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40005400 	.word	0x40005400
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	48000400 	.word	0x48000400

08000a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b09e      	sub	sp, #120	; 0x78
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a28:	f107 0310 	add.w	r3, r7, #16
 8000a2c:	2254      	movs	r2, #84	; 0x54
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f003 fbab 	bl	800418c <memset>
  if(huart->Instance==LPUART1)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	; (8000ab8 <HAL_UART_MspInit+0xa8>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d136      	bne.n	8000aae <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000a40:	2320      	movs	r3, #32
 8000a42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f001 fe9b 	bl	8002788 <HAL_RCCEx_PeriphCLKConfig>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a58:	f7ff ff56 	bl	8000908 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a60:	4a16      	ldr	r2, [pc, #88]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b11      	ldr	r3, [pc, #68]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a78:	4a10      	ldr	r2, [pc, #64]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a80:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <HAL_UART_MspInit+0xac>)
 8000a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a90:	2302      	movs	r3, #2
 8000a92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000a9c:	230c      	movs	r3, #12
 8000a9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aaa:	f000 fa19 	bl	8000ee0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000aae:	bf00      	nop
 8000ab0:	3778      	adds	r7, #120	; 0x78
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40008000 	.word	0x40008000
 8000abc:	40021000 	.word	0x40021000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr

08000afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0c:	f000 f898 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b1c:	f000 fb7a 	bl	8001214 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b48:	480d      	ldr	r0, [pc, #52]	; (8000b80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b4c:	f7ff ffea 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	; (8000b84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	; (8000b88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	; (8000b90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	; (8000b94 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f003 fb11 	bl	800419c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b7a:	f7ff fccb 	bl	8000514 <main>

08000b7e <LoopForever>:

LoopForever:
    b LoopForever
 8000b7e:	e7fe      	b.n	8000b7e <LoopForever>
  ldr   r0, =_estack
 8000b80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b8c:	08006a3c 	.word	0x08006a3c
  ldr r2, =_sbss
 8000b90:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b94:	2000051c 	.word	0x2000051c

08000b98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC1_2_IRQHandler>

08000b9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	b082      	sub	sp, #8
 8000b9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	f000 f95b 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000baa:	2000      	movs	r0, #0
 8000bac:	f000 f80e 	bl	8000bcc <HAL_InitTick>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d002      	beq.n	8000bbc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	71fb      	strb	r3, [r7, #7]
 8000bba:	e001      	b.n	8000bc0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bbc:	f7ff feaa 	bl	8000914 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc0:	79fb      	ldrb	r3, [r7, #7]

}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3708      	adds	r7, #8
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bd8:	4b16      	ldr	r3, [pc, #88]	; (8000c34 <HAL_InitTick+0x68>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d022      	beq.n	8000c26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_InitTick+0x6c>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_InitTick+0x68>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f000 f966 	bl	8000ec6 <HAL_SYSTICK_Config>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d10f      	bne.n	8000c20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b0f      	cmp	r3, #15
 8000c04:	d809      	bhi.n	8000c1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c06:	2200      	movs	r2, #0
 8000c08:	6879      	ldr	r1, [r7, #4]
 8000c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000c0e:	f000 f932 	bl	8000e76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <HAL_InitTick+0x70>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e007      	b.n	8000c2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	73fb      	strb	r3, [r7, #15]
 8000c1e:	e004      	b.n	8000c2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	73fb      	strb	r3, [r7, #15]
 8000c24:	e001      	b.n	8000c2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3710      	adds	r7, #16
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000008 	.word	0x20000008
 8000c38:	20000000 	.word	0x20000000
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <HAL_IncTick+0x1c>)
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_IncTick+0x20>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_IncTick+0x1c>)
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	20000110 	.word	0x20000110
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return uwTick;
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_GetTick+0x14>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	20000110 	.word	0x20000110

08000c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c84:	f7ff ffee 	bl	8000c64 <HAL_GetTick>
 8000c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c94:	d004      	beq.n	8000ca0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c96:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <HAL_Delay+0x40>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ca0:	bf00      	nop
 8000ca2:	f7ff ffdf 	bl	8000c64 <HAL_GetTick>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	68fa      	ldr	r2, [r7, #12]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	d8f7      	bhi.n	8000ca2 <HAL_Delay+0x26>
  {
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	bf00      	nop
 8000cb6:	3710      	adds	r7, #16
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cf2:	4a04      	ldr	r2, [pc, #16]	; (8000d04 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	60d3      	str	r3, [r2, #12]
}
 8000cf8:	bf00      	nop
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d0c:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <__NVIC_GetPriorityGrouping+0x18>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	0a1b      	lsrs	r3, r3, #8
 8000d12:	f003 0307 	and.w	r3, r3, #7
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db0b      	blt.n	8000d4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f003 021f 	and.w	r2, r3, #31
 8000d3c:	4907      	ldr	r1, [pc, #28]	; (8000d5c <__NVIC_EnableIRQ+0x38>)
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	095b      	lsrs	r3, r3, #5
 8000d44:	2001      	movs	r0, #1
 8000d46:	fa00 f202 	lsl.w	r2, r0, r2
 8000d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d4e:	bf00      	nop
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000e100 	.word	0xe000e100

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff29 	bl	8000cc0 <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff40 	bl	8000d08 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff ff33 	bl	8000d24 <__NVIC_EnableIRQ>
}
 8000ebe:	bf00      	nop
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ffa4 	bl	8000e1c <SysTick_Config>
 8000ed4:	4603      	mov	r3, r0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b087      	sub	sp, #28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000eee:	e15a      	b.n	80011a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	f000 814c 	beq.w	80011a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d005      	beq.n	8000f20 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d130      	bne.n	8000f82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	2203      	movs	r2, #3
 8000f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f30:	43db      	mvns	r3, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	68da      	ldr	r2, [r3, #12]
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f56:	2201      	movs	r2, #1
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	693a      	ldr	r2, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	f003 0201 	and.w	r2, r3, #1
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b03      	cmp	r3, #3
 8000f8c:	d017      	beq.n	8000fbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	005b      	lsls	r3, r3, #1
 8000f98:	2203      	movs	r2, #3
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689a      	ldr	r2, [r3, #8]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d123      	bne.n	8001012 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	08da      	lsrs	r2, r3, #3
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	3208      	adds	r2, #8
 8000fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f003 0307 	and.w	r3, r3, #7
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	220f      	movs	r2, #15
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691a      	ldr	r2, [r3, #16]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	08da      	lsrs	r2, r3, #3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	3208      	adds	r2, #8
 800100c:	6939      	ldr	r1, [r7, #16]
 800100e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	2203      	movs	r2, #3
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f003 0203 	and.w	r2, r3, #3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104e:	2b00      	cmp	r3, #0
 8001050:	f000 80a6 	beq.w	80011a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001054:	4b5b      	ldr	r3, [pc, #364]	; (80011c4 <HAL_GPIO_Init+0x2e4>)
 8001056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001058:	4a5a      	ldr	r2, [pc, #360]	; (80011c4 <HAL_GPIO_Init+0x2e4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6613      	str	r3, [r2, #96]	; 0x60
 8001060:	4b58      	ldr	r3, [pc, #352]	; (80011c4 <HAL_GPIO_Init+0x2e4>)
 8001062:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106c:	4a56      	ldr	r2, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	089b      	lsrs	r3, r3, #2
 8001072:	3302      	adds	r3, #2
 8001074:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	220f      	movs	r2, #15
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001096:	d01f      	beq.n	80010d8 <HAL_GPIO_Init+0x1f8>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4a4c      	ldr	r2, [pc, #304]	; (80011cc <HAL_GPIO_Init+0x2ec>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d019      	beq.n	80010d4 <HAL_GPIO_Init+0x1f4>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	4a4b      	ldr	r2, [pc, #300]	; (80011d0 <HAL_GPIO_Init+0x2f0>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <HAL_GPIO_Init+0x1f0>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a4a      	ldr	r2, [pc, #296]	; (80011d4 <HAL_GPIO_Init+0x2f4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00d      	beq.n	80010cc <HAL_GPIO_Init+0x1ec>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a49      	ldr	r2, [pc, #292]	; (80011d8 <HAL_GPIO_Init+0x2f8>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d007      	beq.n	80010c8 <HAL_GPIO_Init+0x1e8>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a48      	ldr	r2, [pc, #288]	; (80011dc <HAL_GPIO_Init+0x2fc>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d101      	bne.n	80010c4 <HAL_GPIO_Init+0x1e4>
 80010c0:	2305      	movs	r3, #5
 80010c2:	e00a      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010c4:	2306      	movs	r3, #6
 80010c6:	e008      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010c8:	2304      	movs	r3, #4
 80010ca:	e006      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010cc:	2303      	movs	r3, #3
 80010ce:	e004      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e002      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <HAL_GPIO_Init+0x1fa>
 80010d8:	2300      	movs	r3, #0
 80010da:	697a      	ldr	r2, [r7, #20]
 80010dc:	f002 0203 	and.w	r2, r2, #3
 80010e0:	0092      	lsls	r2, r2, #2
 80010e2:	4093      	lsls	r3, r2
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010ea:	4937      	ldr	r1, [pc, #220]	; (80011c8 <HAL_GPIO_Init+0x2e8>)
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010f8:	4b39      	ldr	r3, [pc, #228]	; (80011e0 <HAL_GPIO_Init+0x300>)
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43db      	mvns	r3, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4013      	ands	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800111c:	4a30      	ldr	r2, [pc, #192]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43db      	mvns	r3, r3
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	4013      	ands	r3, r2
 8001130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001146:	4a26      	ldr	r2, [pc, #152]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800114c:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	43db      	mvns	r3, r3
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	4013      	ands	r3, r2
 800115a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001170:	4a1b      	ldr	r2, [pc, #108]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_GPIO_Init+0x300>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4313      	orrs	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800119a:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_GPIO_Init+0x300>)
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	fa22 f303 	lsr.w	r3, r2, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f47f ae9d 	bne.w	8000ef0 <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	371c      	adds	r7, #28
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000
 80011c8:	40010000 	.word	0x40010000
 80011cc:	48000400 	.word	0x48000400
 80011d0:	48000800 	.word	0x48000800
 80011d4:	48000c00 	.word	0x48000c00
 80011d8:	48001000 	.word	0x48001000
 80011dc:	48001400 	.word	0x48001400
 80011e0:	40010400 	.word	0x40010400

080011e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	807b      	strh	r3, [r7, #2]
 80011f0:	4613      	mov	r3, r2
 80011f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011f4:	787b      	ldrb	r3, [r7, #1]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011fa:	887a      	ldrh	r2, [r7, #2]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001200:	e002      	b.n	8001208 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001202:	887a      	ldrh	r2, [r7, #2]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001220:	695a      	ldr	r2, [r3, #20]
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	4013      	ands	r3, r2
 8001226:	2b00      	cmp	r3, #0
 8001228:	d006      	beq.n	8001238 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800122c:	88fb      	ldrh	r3, [r7, #6]
 800122e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f806 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e08d      	b.n	8001388 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001272:	b2db      	uxtb	r3, r3
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff fb6b 	bl	800095c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2224      	movs	r2, #36	; 0x24
 800128a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	e006      	b.n	80012e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d108      	bne.n	80012fc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	e007      	b.n	800130c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	6812      	ldr	r2, [r2, #0]
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800131e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	68da      	ldr	r2, [r3, #12]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800132e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69d9      	ldr	r1, [r3, #28]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a1a      	ldr	r2, [r3, #32]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f042 0201 	orr.w	r2, r2, #1
 8001368:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2220      	movs	r2, #32
 8001374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af02      	add	r7, sp, #8
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	4608      	mov	r0, r1
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	4603      	mov	r3, r0
 80013a0:	817b      	strh	r3, [r7, #10]
 80013a2:	460b      	mov	r3, r1
 80013a4:	813b      	strh	r3, [r7, #8]
 80013a6:	4613      	mov	r3, r2
 80013a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b20      	cmp	r3, #32
 80013b4:	f040 80f9 	bne.w	80015aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80013b8:	6a3b      	ldr	r3, [r7, #32]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d002      	beq.n	80013c4 <HAL_I2C_Mem_Write+0x34>
 80013be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d105      	bne.n	80013d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e0ed      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d101      	bne.n	80013de <HAL_I2C_Mem_Write+0x4e>
 80013da:	2302      	movs	r3, #2
 80013dc:	e0e6      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013e6:	f7ff fc3d 	bl	8000c64 <HAL_GetTick>
 80013ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2319      	movs	r3, #25
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013f8:	68f8      	ldr	r0, [r7, #12]
 80013fa:	f000 f955 	bl	80016a8 <I2C_WaitOnFlagUntilTimeout>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0d1      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2221      	movs	r2, #33	; 0x21
 800140c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	2240      	movs	r2, #64	; 0x40
 8001414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2200      	movs	r2, #0
 800141c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6a3a      	ldr	r2, [r7, #32]
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001428:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001430:	88f8      	ldrh	r0, [r7, #6]
 8001432:	893a      	ldrh	r2, [r7, #8]
 8001434:	8979      	ldrh	r1, [r7, #10]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	4603      	mov	r3, r0
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f8b9 	bl	80015b8 <I2C_RequestMemoryWrite>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e0a9      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800145c:	b29b      	uxth	r3, r3
 800145e:	2bff      	cmp	r3, #255	; 0xff
 8001460:	d90e      	bls.n	8001480 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	22ff      	movs	r2, #255	; 0xff
 8001466:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	b2da      	uxtb	r2, r3
 800146e:	8979      	ldrh	r1, [r7, #10]
 8001470:	2300      	movs	r3, #0
 8001472:	9300      	str	r3, [sp, #0]
 8001474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 fad9 	bl	8001a30 <I2C_TransferConfig>
 800147e:	e00f      	b.n	80014a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148e:	b2da      	uxtb	r2, r3
 8001490:	8979      	ldrh	r1, [r7, #10]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f000 fac8 	bl	8001a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f000 f958 	bl	800175a <I2C_WaitOnTXISFlagUntilTimeout>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	e07b      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c4:	1c5a      	adds	r2, r3, #1
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	3b01      	subs	r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014dc:	3b01      	subs	r3, #1
 80014de:	b29a      	uxth	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d034      	beq.n	8001558 <HAL_I2C_Mem_Write+0x1c8>
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d130      	bne.n	8001558 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fc:	2200      	movs	r2, #0
 80014fe:	2180      	movs	r1, #128	; 0x80
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f000 f8d1 	bl	80016a8 <I2C_WaitOnFlagUntilTimeout>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e04d      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001514:	b29b      	uxth	r3, r3
 8001516:	2bff      	cmp	r3, #255	; 0xff
 8001518:	d90e      	bls.n	8001538 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001524:	b2da      	uxtb	r2, r3
 8001526:	8979      	ldrh	r1, [r7, #10]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f000 fa7d 	bl	8001a30 <I2C_TransferConfig>
 8001536:	e00f      	b.n	8001558 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153c:	b29a      	uxth	r2, r3
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001546:	b2da      	uxtb	r2, r3
 8001548:	8979      	ldrh	r1, [r7, #10]
 800154a:	2300      	movs	r3, #0
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 fa6c 	bl	8001a30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800155c:	b29b      	uxth	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d19e      	bne.n	80014a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f000 f93e 	bl	80017e8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e01a      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2220      	movs	r2, #32
 800157c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <HAL_I2C_Mem_Write+0x224>)
 800158a:	400b      	ands	r3, r1
 800158c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2220      	movs	r2, #32
 8001592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80015aa:	2302      	movs	r3, #2
  }
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	fe00e800 	.word	0xfe00e800

080015b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	4608      	mov	r0, r1
 80015c2:	4611      	mov	r1, r2
 80015c4:	461a      	mov	r2, r3
 80015c6:	4603      	mov	r3, r0
 80015c8:	817b      	strh	r3, [r7, #10]
 80015ca:	460b      	mov	r3, r1
 80015cc:	813b      	strh	r3, [r7, #8]
 80015ce:	4613      	mov	r3, r2
 80015d0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	8979      	ldrh	r1, [r7, #10]
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <I2C_RequestMemoryWrite+0xa4>)
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015e0:	68f8      	ldr	r0, [r7, #12]
 80015e2:	f000 fa25 	bl	8001a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	69b9      	ldr	r1, [r7, #24]
 80015ea:	68f8      	ldr	r0, [r7, #12]
 80015ec:	f000 f8b5 	bl	800175a <I2C_WaitOnTXISFlagUntilTimeout>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e02c      	b.n	8001654 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d105      	bne.n	800160c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001600:	893b      	ldrh	r3, [r7, #8]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
 800160a:	e015      	b.n	8001638 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800160c:	893b      	ldrh	r3, [r7, #8]
 800160e:	0a1b      	lsrs	r3, r3, #8
 8001610:	b29b      	uxth	r3, r3
 8001612:	b2da      	uxtb	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	69b9      	ldr	r1, [r7, #24]
 800161e:	68f8      	ldr	r0, [r7, #12]
 8001620:	f000 f89b 	bl	800175a <I2C_WaitOnTXISFlagUntilTimeout>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e012      	b.n	8001654 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800162e:	893b      	ldrh	r3, [r7, #8]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2200      	movs	r2, #0
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f830 	bl	80016a8 <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3710      	adds	r7, #16
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	80002000 	.word	0x80002000

08001660 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b02      	cmp	r3, #2
 8001674:	d103      	bne.n	800167e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	2b01      	cmp	r3, #1
 800168a:	d007      	beq.n	800169c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	699a      	ldr	r2, [r3, #24]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	619a      	str	r2, [r3, #24]
  }
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	4613      	mov	r3, r2
 80016b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016b8:	e03b      	b.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f8d6 	bl	8001870 <I2C_IsErrorOccurred>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e041      	b.n	8001752 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d02d      	beq.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d6:	f7ff fac5 	bl	8000c64 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d302      	bcc.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x44>
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d122      	bne.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	429a      	cmp	r2, r3
 8001708:	d113      	bne.n	8001732 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2220      	movs	r2, #32
 800171a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	e00f      	b.n	8001752 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	4013      	ands	r3, r2
 800173c:	68ba      	ldr	r2, [r7, #8]
 800173e:	429a      	cmp	r2, r3
 8001740:	bf0c      	ite	eq
 8001742:	2301      	moveq	r3, #1
 8001744:	2300      	movne	r3, #0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	461a      	mov	r2, r3
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	429a      	cmp	r2, r3
 800174e:	d0b4      	beq.n	80016ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b084      	sub	sp, #16
 800175e:	af00      	add	r7, sp, #0
 8001760:	60f8      	str	r0, [r7, #12]
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001766:	e033      	b.n	80017d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	68b9      	ldr	r1, [r7, #8]
 800176c:	68f8      	ldr	r0, [r7, #12]
 800176e:	f000 f87f 	bl	8001870 <I2C_IsErrorOccurred>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e031      	b.n	80017e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001782:	d025      	beq.n	80017d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001784:	f7ff fa6e 	bl	8000c64 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	429a      	cmp	r2, r3
 8001792:	d302      	bcc.n	800179a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d11a      	bne.n	80017d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d013      	beq.n	80017d0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ac:	f043 0220 	orr.w	r2, r3, #32
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2220      	movs	r2, #32
 80017b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e007      	b.n	80017e0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d1c4      	bne.n	8001768 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}

080017e8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60f8      	str	r0, [r7, #12]
 80017f0:	60b9      	str	r1, [r7, #8]
 80017f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017f4:	e02f      	b.n	8001856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 f838 	bl	8001870 <I2C_IsErrorOccurred>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e02d      	b.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7ff fa2b 	bl	8000c64 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d11a      	bne.n	8001856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f003 0320 	and.w	r3, r3, #32
 800182a:	2b20      	cmp	r3, #32
 800182c:	d013      	beq.n	8001856 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001832:	f043 0220 	orr.w	r2, r3, #32
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2220      	movs	r2, #32
 800183e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e007      	b.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0320 	and.w	r3, r3, #32
 8001860:	2b20      	cmp	r3, #32
 8001862:	d1c8      	bne.n	80017f6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	f003 0310 	and.w	r3, r3, #16
 8001898:	2b00      	cmp	r3, #0
 800189a:	d068      	beq.n	800196e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2210      	movs	r2, #16
 80018a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80018a4:	e049      	b.n	800193a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d045      	beq.n	800193a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018ae:	f7ff f9d9 	bl	8000c64 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <I2C_IsErrorOccurred+0x54>
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d13a      	bne.n	800193a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e6:	d121      	bne.n	800192c <I2C_IsErrorOccurred+0xbc>
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80018ee:	d01d      	beq.n	800192c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80018f0:	7cfb      	ldrb	r3, [r7, #19]
 80018f2:	2b20      	cmp	r3, #32
 80018f4:	d01a      	beq.n	800192c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001904:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001906:	f7ff f9ad 	bl	8000c64 <HAL_GetTick>
 800190a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800190c:	e00e      	b.n	800192c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800190e:	f7ff f9a9 	bl	8000c64 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b19      	cmp	r3, #25
 800191a:	d907      	bls.n	800192c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800191c:	6a3b      	ldr	r3, [r7, #32]
 800191e:	f043 0320 	orr.w	r3, r3, #32
 8001922:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800192a:	e006      	b.n	800193a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	f003 0320 	and.w	r3, r3, #32
 8001936:	2b20      	cmp	r3, #32
 8001938:	d1e9      	bne.n	800190e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0320 	and.w	r3, r3, #32
 8001944:	2b20      	cmp	r3, #32
 8001946:	d003      	beq.n	8001950 <I2C_IsErrorOccurred+0xe0>
 8001948:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0aa      	beq.n	80018a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001954:	2b00      	cmp	r3, #0
 8001956:	d103      	bne.n	8001960 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2220      	movs	r2, #32
 800195e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00b      	beq.n	8001998 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00b      	beq.n	80019ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f043 0308 	orr.w	r3, r3, #8
 80019a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00b      	beq.n	80019dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f043 0302 	orr.w	r3, r3, #2
 80019ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80019dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01c      	beq.n	8001a1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f7ff fe3b 	bl	8001660 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <I2C_IsErrorOccurred+0x1bc>)
 80019f6:	400b      	ands	r3, r1
 80019f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	431a      	orrs	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3728      	adds	r7, #40	; 0x28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	fe00e800 	.word	0xfe00e800

08001a30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	817b      	strh	r3, [r7, #10]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a42:	897b      	ldrh	r3, [r7, #10]
 8001a44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a48:	7a7b      	ldrb	r3, [r7, #9]
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	0d5b      	lsrs	r3, r3, #21
 8001a6a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <I2C_TransferConfig+0x60>)
 8001a70:	430b      	orrs	r3, r1
 8001a72:	43db      	mvns	r3, r3
 8001a74:	ea02 0103 	and.w	r1, r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	697a      	ldr	r2, [r7, #20]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001a82:	bf00      	nop
 8001a84:	371c      	adds	r7, #28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	03ff63ff 	.word	0x03ff63ff

08001a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b20      	cmp	r3, #32
 8001aa8:	d138      	bne.n	8001b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e032      	b.n	8001b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2224      	movs	r2, #36	; 0x24
 8001ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6819      	ldr	r1, [r3, #0]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	683a      	ldr	r2, [r7, #0]
 8001af4:	430a      	orrs	r2, r1
 8001af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	e000      	b.n	8001b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b1c:	2302      	movs	r3, #2
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b085      	sub	sp, #20
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b20      	cmp	r3, #32
 8001b3e:	d139      	bne.n	8001bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e033      	b.n	8001bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2224      	movs	r2, #36	; 0x24
 8001b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2220      	movs	r2, #32
 8001ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001bb4:	2302      	movs	r3, #2
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d141      	bne.n	8001c56 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bd2:	4b4b      	ldr	r3, [pc, #300]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bde:	d131      	bne.n	8001c44 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001be6:	4a46      	ldr	r2, [pc, #280]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bf0:	4b43      	ldr	r3, [pc, #268]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf8:	4a41      	ldr	r2, [pc, #260]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bfe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c00:	4b40      	ldr	r3, [pc, #256]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2232      	movs	r2, #50	; 0x32
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	4a3f      	ldr	r2, [pc, #252]	; (8001d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c10:	0c9b      	lsrs	r3, r3, #18
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c16:	e002      	b.n	8001c1e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c2a:	d102      	bne.n	8001c32 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f2      	bne.n	8001c18 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c32:	4b33      	ldr	r3, [pc, #204]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c3e:	d158      	bne.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e057      	b.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c44:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c4a:	4a2d      	ldr	r2, [pc, #180]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c54:	e04d      	b.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d141      	bne.n	8001ce2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c5e:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c6a:	d131      	bne.n	8001cd0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c72:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c84:	4a1e      	ldr	r2, [pc, #120]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c8c:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2232      	movs	r2, #50	; 0x32
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a1c      	ldr	r2, [pc, #112]	; (8001d08 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ca2:	e002      	b.n	8001caa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cb6:	d102      	bne.n	8001cbe <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f2      	bne.n	8001ca4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cca:	d112      	bne.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e011      	b.n	8001cf4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cd6:	4a0a      	ldr	r2, [pc, #40]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ce0:	e007      	b.n	8001cf2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ce2:	4b07      	ldr	r3, [pc, #28]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cea:	4a05      	ldr	r2, [pc, #20]	; (8001d00 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cf0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001cf2:	2300      	movs	r3, #0
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3714      	adds	r7, #20
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	40007000 	.word	0x40007000
 8001d04:	20000000 	.word	0x20000000
 8001d08:	431bde83 	.word	0x431bde83

08001d0c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	4a04      	ldr	r2, [pc, #16]	; (8001d28 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1a:	6093      	str	r3, [r2, #8]
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40007000 	.word	0x40007000

08001d2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e2fe      	b.n	800233c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d075      	beq.n	8001e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b97      	ldr	r3, [pc, #604]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b94      	ldr	r3, [pc, #592]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3e>
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b03      	cmp	r3, #3
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_OscConfig+0x44>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b8d      	ldr	r3, [pc, #564]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x108>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e2d9      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x74>
 8001d92:	4b85      	ldr	r3, [pc, #532]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a84      	ldr	r2, [pc, #528]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x98>
 8001daa:	4b7f      	ldr	r3, [pc, #508]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7e      	ldr	r2, [pc, #504]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b7c      	ldr	r3, [pc, #496]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7b      	ldr	r2, [pc, #492]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xb0>
 8001dc4:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b75      	ldr	r3, [pc, #468]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a74      	ldr	r2, [pc, #464]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7fe ff3e 	bl	8000c64 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7fe ff3a 	bl	8000c64 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	; 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e29e      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfe:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xc0>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff2a 	bl	8000c64 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7fe ff26 	bl	8000c64 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e28a      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e26:	4b60      	ldr	r3, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0xe8>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d075      	beq.n	8001f2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e4c:	4b56      	ldr	r3, [pc, #344]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0303 	and.w	r3, r3, #3
 8001e54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	2b0c      	cmp	r3, #12
 8001e5a:	d102      	bne.n	8001e62 <HAL_RCC_OscConfig+0x136>
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d002      	beq.n	8001e68 <HAL_RCC_OscConfig+0x13c>
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d11f      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d005      	beq.n	8001e80 <HAL_RCC_OscConfig+0x154>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e25d      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e80:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	061b      	lsls	r3, r3, #24
 8001e8e:	4946      	ldr	r1, [pc, #280]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e94:	4b45      	ldr	r3, [pc, #276]	; (8001fac <HAL_RCC_OscConfig+0x280>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fe97 	bl	8000bcc <HAL_InitTick>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d043      	beq.n	8001f2c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e249      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3c      	ldr	r2, [pc, #240]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7fe fed2 	bl	8000c64 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec4:	f7fe fece 	bl	8000c64 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e232      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed6:	4b34      	ldr	r3, [pc, #208]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	691b      	ldr	r3, [r3, #16]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	492d      	ldr	r1, [pc, #180]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	604b      	str	r3, [r1, #4]
 8001ef6:	e01a      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef8:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a2a      	ldr	r2, [pc, #168]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001efe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe feae 	bl	8000c64 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7fe feaa 	bl	8000c64 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e20e      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1e:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x1e0>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d041      	beq.n	8001fbe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f48:	4a17      	ldr	r2, [pc, #92]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7fe fe87 	bl	8000c64 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5a:	f7fe fe83 	bl	8000c64 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e1e7      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <HAL_RCC_OscConfig+0x22e>
 8001f7a:	e020      	b.n	8001fbe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f82:	4a09      	ldr	r2, [pc, #36]	; (8001fa8 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7fe fe6a 	bl	8000c64 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f92:	e00d      	b.n	8001fb0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe fe66 	bl	8000c64 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d906      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e1ca      	b.n	800233c <HAL_RCC_OscConfig+0x610>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb0:	4b8c      	ldr	r3, [pc, #560]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1ea      	bne.n	8001f94 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80a6 	beq.w	8002118 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd0:	4b84      	ldr	r3, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x2b4>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x2b6>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00d      	beq.n	8002002 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	4a7e      	ldr	r2, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4b79      	ldr	r3, [pc, #484]	; (80021e8 <HAL_RCC_OscConfig+0x4bc>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800200e:	4b76      	ldr	r3, [pc, #472]	; (80021e8 <HAL_RCC_OscConfig+0x4bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a75      	ldr	r2, [pc, #468]	; (80021e8 <HAL_RCC_OscConfig+0x4bc>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7fe fe23 	bl	8000c64 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7fe fe1f 	bl	8000c64 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e183      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002034:	4b6c      	ldr	r3, [pc, #432]	; (80021e8 <HAL_RCC_OscConfig+0x4bc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d108      	bne.n	800205a <HAL_RCC_OscConfig+0x32e>
 8002048:	4b66      	ldr	r3, [pc, #408]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a65      	ldr	r2, [pc, #404]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002058:	e024      	b.n	80020a4 <HAL_RCC_OscConfig+0x378>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b05      	cmp	r3, #5
 8002060:	d110      	bne.n	8002084 <HAL_RCC_OscConfig+0x358>
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002068:	4a5e      	ldr	r2, [pc, #376]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800206a:	f043 0304 	orr.w	r3, r3, #4
 800206e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002072:	4b5c      	ldr	r3, [pc, #368]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	4a5a      	ldr	r2, [pc, #360]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002082:	e00f      	b.n	80020a4 <HAL_RCC_OscConfig+0x378>
 8002084:	4b57      	ldr	r3, [pc, #348]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a56      	ldr	r2, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209a:	4a52      	ldr	r2, [pc, #328]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800209c:	f023 0304 	bic.w	r3, r3, #4
 80020a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d016      	beq.n	80020da <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ac:	f7fe fdda 	bl	8000c64 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe fdd6 	bl	8000c64 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e138      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ca:	4b46      	ldr	r3, [pc, #280]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ed      	beq.n	80020b4 <HAL_RCC_OscConfig+0x388>
 80020d8:	e015      	b.n	8002106 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020da:	f7fe fdc3 	bl	8000c64 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fdbf 	bl	8000c64 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e121      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ed      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002106:	7ffb      	ldrb	r3, [r7, #31]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b35      	ldr	r3, [pc, #212]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800210e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002110:	4a34      	ldr	r2, [pc, #208]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002112:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002116:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0320 	and.w	r3, r3, #32
 8002120:	2b00      	cmp	r3, #0
 8002122:	d03c      	beq.n	800219e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01c      	beq.n	8002166 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800212c:	4b2d      	ldr	r3, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800212e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002132:	4a2c      	ldr	r2, [pc, #176]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7fe fd92 	bl	8000c64 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002144:	f7fe fd8e 	bl	8000c64 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0f2      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002156:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0ef      	beq.n	8002144 <HAL_RCC_OscConfig+0x418>
 8002164:	e01b      	b.n	800219e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800216c:	4a1d      	ldr	r2, [pc, #116]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002176:	f7fe fd75 	bl	8000c64 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800217e:	f7fe fd71 	bl	8000c64 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0d5      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 8002192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d1ef      	bne.n	800217e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 80c9 	beq.w	800233a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
 80021b0:	2b0c      	cmp	r3, #12
 80021b2:	f000 8083 	beq.w	80022bc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d15e      	bne.n	800227c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ca:	f7fe fd4b 	bl	8000c64 <HAL_GetTick>
 80021ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021d0:	e00c      	b.n	80021ec <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d2:	f7fe fd47 	bl	8000c64 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d905      	bls.n	80021ec <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e0ab      	b.n	800233c <HAL_RCC_OscConfig+0x610>
 80021e4:	40021000 	.word	0x40021000
 80021e8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ec:	4b55      	ldr	r3, [pc, #340]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1ec      	bne.n	80021d2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021f8:	4b52      	ldr	r3, [pc, #328]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4b52      	ldr	r3, [pc, #328]	; (8002348 <HAL_RCC_OscConfig+0x61c>)
 80021fe:	4013      	ands	r3, r2
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6a11      	ldr	r1, [r2, #32]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002208:	3a01      	subs	r2, #1
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	4311      	orrs	r1, r2
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002212:	0212      	lsls	r2, r2, #8
 8002214:	4311      	orrs	r1, r2
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800221a:	0852      	lsrs	r2, r2, #1
 800221c:	3a01      	subs	r2, #1
 800221e:	0552      	lsls	r2, r2, #21
 8002220:	4311      	orrs	r1, r2
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002226:	0852      	lsrs	r2, r2, #1
 8002228:	3a01      	subs	r2, #1
 800222a:	0652      	lsls	r2, r2, #25
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002232:	06d2      	lsls	r2, r2, #27
 8002234:	430a      	orrs	r2, r1
 8002236:	4943      	ldr	r1, [pc, #268]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 8002238:	4313      	orrs	r3, r2
 800223a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800223c:	4b41      	ldr	r3, [pc, #260]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a40      	ldr	r2, [pc, #256]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002248:	4b3e      	ldr	r3, [pc, #248]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	4a3d      	ldr	r2, [pc, #244]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe fd06 	bl	8000c64 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe fd02 	bl	8000c64 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e066      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800226e:	4b35      	ldr	r3, [pc, #212]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x530>
 800227a:	e05e      	b.n	800233a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800227c:	4b31      	ldr	r3, [pc, #196]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a30      	ldr	r2, [pc, #192]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fcec 	bl	8000c64 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fce8 	bl	8000c64 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04c      	b.n	800233c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	4b28      	ldr	r3, [pc, #160]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80022ae:	4b25      	ldr	r3, [pc, #148]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4924      	ldr	r1, [pc, #144]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80022b4:	4b25      	ldr	r3, [pc, #148]	; (800234c <HAL_RCC_OscConfig+0x620>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	60cb      	str	r3, [r1, #12]
 80022ba:	e03e      	b.n	800233a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d101      	bne.n	80022c8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e039      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80022c8:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_RCC_OscConfig+0x618>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d12c      	bne.n	8002336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d123      	bne.n	8002336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d11b      	bne.n	8002336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002308:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800230a:	429a      	cmp	r2, r3
 800230c:	d113      	bne.n	8002336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002318:	085b      	lsrs	r3, r3, #1
 800231a:	3b01      	subs	r3, #1
 800231c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d109      	bne.n	8002336 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002332:	429a      	cmp	r2, r3
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40021000 	.word	0x40021000
 8002348:	019f800c 	.word	0x019f800c
 800234c:	feeefffc 	.word	0xfeeefffc

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e11e      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002368:	4b91      	ldr	r3, [pc, #580]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	429a      	cmp	r2, r3
 8002374:	d910      	bls.n	8002398 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002376:	4b8e      	ldr	r3, [pc, #568]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f023 020f 	bic.w	r2, r3, #15
 800237e:	498c      	ldr	r1, [pc, #560]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	4313      	orrs	r3, r2
 8002384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b8a      	ldr	r3, [pc, #552]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e106      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d073      	beq.n	800248c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d129      	bne.n	8002400 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ac:	4b81      	ldr	r3, [pc, #516]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0f4      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80023bc:	f000 f99e 	bl	80026fc <RCC_GetSysClockFreqFromPLLSource>
 80023c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4a7c      	ldr	r2, [pc, #496]	; (80025b8 <HAL_RCC_ClockConfig+0x268>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d93f      	bls.n	800244a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023ca:	4b7a      	ldr	r3, [pc, #488]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d009      	beq.n	80023ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d033      	beq.n	800244a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d12f      	bne.n	800244a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023ea:	4b72      	ldr	r3, [pc, #456]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f2:	4a70      	ldr	r2, [pc, #448]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80023f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023fa:	2380      	movs	r3, #128	; 0x80
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	e024      	b.n	800244a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b02      	cmp	r3, #2
 8002406:	d107      	bne.n	8002418 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d109      	bne.n	8002428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0c6      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	4b66      	ldr	r3, [pc, #408]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002420:	2b00      	cmp	r3, #0
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0be      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002428:	f000 f8ce 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 800242c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4a61      	ldr	r2, [pc, #388]	; (80025b8 <HAL_RCC_ClockConfig+0x268>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d909      	bls.n	800244a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002436:	4b5f      	ldr	r3, [pc, #380]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800243e:	4a5d      	ldr	r2, [pc, #372]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002444:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800244a:	4b5a      	ldr	r3, [pc, #360]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f023 0203 	bic.w	r2, r3, #3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4957      	ldr	r1, [pc, #348]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002458:	4313      	orrs	r3, r2
 800245a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fc02 	bl	8000c64 <HAL_GetTick>
 8002460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002462:	e00a      	b.n	800247a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002464:	f7fe fbfe 	bl	8000c64 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002472:	4293      	cmp	r3, r2
 8002474:	d901      	bls.n	800247a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e095      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247a:	4b4e      	ldr	r3, [pc, #312]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 020c 	and.w	r2, r3, #12
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	429a      	cmp	r2, r3
 800248a:	d1eb      	bne.n	8002464 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d023      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d005      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a4:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	4a42      	ldr	r2, [pc, #264]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0308 	and.w	r3, r3, #8
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80024bc:	4b3d      	ldr	r3, [pc, #244]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80024c4:	4a3b      	ldr	r2, [pc, #236]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b39      	ldr	r3, [pc, #228]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	4936      	ldr	r1, [pc, #216]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
 80024de:	e008      	b.n	80024f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b80      	cmp	r3, #128	; 0x80
 80024e4:	d105      	bne.n	80024f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80024e6:	4b33      	ldr	r3, [pc, #204]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	4a32      	ldr	r2, [pc, #200]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024f2:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d21d      	bcs.n	800253c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	4b2b      	ldr	r3, [pc, #172]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 020f 	bic.w	r2, r3, #15
 8002508:	4929      	ldr	r1, [pc, #164]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002510:	f7fe fba8 	bl	8000c64 <HAL_GetTick>
 8002514:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002516:	e00a      	b.n	800252e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002518:	f7fe fba4 	bl	8000c64 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	f241 3288 	movw	r2, #5000	; 0x1388
 8002526:	4293      	cmp	r3, r2
 8002528:	d901      	bls.n	800252e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e03b      	b.n	80025a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	; (80025b0 <HAL_RCC_ClockConfig+0x260>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d1ed      	bne.n	8002518 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002548:	4b1a      	ldr	r3, [pc, #104]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4917      	ldr	r1, [pc, #92]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002556:	4313      	orrs	r3, r2
 8002558:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d009      	beq.n	800257a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002566:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	00db      	lsls	r3, r3, #3
 8002574:	490f      	ldr	r1, [pc, #60]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800257a:	f000 f825 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 800257e:	4602      	mov	r2, r0
 8002580:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <HAL_RCC_ClockConfig+0x264>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	091b      	lsrs	r3, r3, #4
 8002586:	f003 030f 	and.w	r3, r3, #15
 800258a:	490c      	ldr	r1, [pc, #48]	; (80025bc <HAL_RCC_ClockConfig+0x26c>)
 800258c:	5ccb      	ldrb	r3, [r1, r3]
 800258e:	f003 031f 	and.w	r3, r3, #31
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a0a      	ldr	r2, [pc, #40]	; (80025c0 <HAL_RCC_ClockConfig+0x270>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x274>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fb14 	bl	8000bcc <HAL_InitTick>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	04c4b400 	.word	0x04c4b400
 80025bc:	08004380 	.word	0x08004380
 80025c0:	20000000 	.word	0x20000000
 80025c4:	20000004 	.word	0x20000004

080025c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80025ce:	4b2c      	ldr	r3, [pc, #176]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d102      	bne.n	80025e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 80025dc:	613b      	str	r3, [r7, #16]
 80025de:	e047      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d102      	bne.n	80025f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_RCC_GetSysClockFreq+0xc0>)
 80025ee:	613b      	str	r3, [r7, #16]
 80025f0:	e03e      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80025f2:	4b23      	ldr	r3, [pc, #140]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b0c      	cmp	r3, #12
 80025fc:	d136      	bne.n	800266c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fe:	4b20      	ldr	r3, [pc, #128]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3301      	adds	r3, #1
 8002614:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800261c:	4a1a      	ldr	r2, [pc, #104]	; (8002688 <HAL_RCC_GetSysClockFreq+0xc0>)
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	0a12      	lsrs	r2, r2, #8
 800262a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
      break;
 8002634:	e00c      	b.n	8002650 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002636:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4a10      	ldr	r2, [pc, #64]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	0a12      	lsrs	r2, r2, #8
 8002644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
      break;
 800264e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0e5b      	lsrs	r3, r3, #25
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	e001      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800266c:	2300      	movs	r3, #0
 800266e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002670:	693b      	ldr	r3, [r7, #16]
}
 8002672:	4618      	mov	r0, r3
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	00f42400 	.word	0x00f42400
 8002688:	016e3600 	.word	0x016e3600

0800268c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4602      	mov	r2, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4904      	ldr	r1, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80026ba:	5ccb      	ldrb	r3, [r1, r3]
 80026bc:	f003 031f 	and.w	r3, r3, #31
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08004390 	.word	0x08004390

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026d4:	f7ff ffda 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4904      	ldr	r1, [pc, #16]	; (80026f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08004390 	.word	0x08004390

080026fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002702:	4b1e      	ldr	r3, [pc, #120]	; (800277c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800270c:	4b1b      	ldr	r3, [pc, #108]	; (800277c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	3301      	adds	r3, #1
 8002718:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b03      	cmp	r3, #3
 800271e:	d10c      	bne.n	800273a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002720:	4a17      	ldr	r2, [pc, #92]	; (8002780 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	fbb2 f3f3 	udiv	r3, r2, r3
 8002728:	4a14      	ldr	r2, [pc, #80]	; (800277c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800272a:	68d2      	ldr	r2, [r2, #12]
 800272c:	0a12      	lsrs	r2, r2, #8
 800272e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002732:	fb02 f303 	mul.w	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
    break;
 8002738:	e00c      	b.n	8002754 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800273a:	4a12      	ldr	r2, [pc, #72]	; (8002784 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4a0e      	ldr	r2, [pc, #56]	; (800277c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002744:	68d2      	ldr	r2, [r2, #12]
 8002746:	0a12      	lsrs	r2, r2, #8
 8002748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	617b      	str	r3, [r7, #20]
    break;
 8002752:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	0e5b      	lsrs	r3, r3, #25
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	3301      	adds	r3, #1
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	fbb2 f3f3 	udiv	r3, r2, r3
 800276c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800276e:	687b      	ldr	r3, [r7, #4]
}
 8002770:	4618      	mov	r0, r3
 8002772:	371c      	adds	r7, #28
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	40021000 	.word	0x40021000
 8002780:	016e3600 	.word	0x016e3600
 8002784:	00f42400 	.word	0x00f42400

08002788 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002790:	2300      	movs	r3, #0
 8002792:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002794:	2300      	movs	r3, #0
 8002796:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	f000 8098 	beq.w	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027a6:	2300      	movs	r3, #0
 80027a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027aa:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10d      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027b6:	4b40      	ldr	r3, [pc, #256]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ba:	4a3f      	ldr	r2, [pc, #252]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
 80027c2:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027ce:	2301      	movs	r3, #1
 80027d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027d2:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a39      	ldr	r2, [pc, #228]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027de:	f7fe fa41 	bl	8000c64 <HAL_GetTick>
 80027e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027e4:	e009      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e6:	f7fe fa3d 	bl	8000c64 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d902      	bls.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	74fb      	strb	r3, [r7, #19]
        break;
 80027f8:	e005      	b.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0ef      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002806:	7cfb      	ldrb	r3, [r7, #19]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d159      	bne.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800280c:	4b2a      	ldr	r3, [pc, #168]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002816:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d01e      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d019      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002828:	4b23      	ldr	r3, [pc, #140]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800284c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002854:	4a18      	ldr	r2, [pc, #96]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d016      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7fe f9fd 	bl	8000c64 <HAL_GetTick>
 800286a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800286c:	e00b      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7fe f9f9 	bl	8000c64 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d902      	bls.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	74fb      	strb	r3, [r7, #19]
            break;
 8002884:	e006      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002886:	4b0c      	ldr	r3, [pc, #48]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0ec      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002894:	7cfb      	ldrb	r3, [r7, #19]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10b      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800289a:	4b07      	ldr	r3, [pc, #28]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a8:	4903      	ldr	r1, [pc, #12]	; (80028b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028b0:	e008      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028b2:	7cfb      	ldrb	r3, [r7, #19]
 80028b4:	74bb      	strb	r3, [r7, #18]
 80028b6:	e005      	b.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80028b8:	40021000 	.word	0x40021000
 80028bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028c0:	7cfb      	ldrb	r3, [r7, #19]
 80028c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c4:	7c7b      	ldrb	r3, [r7, #17]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ca:	4ba7      	ldr	r3, [pc, #668]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ce:	4aa6      	ldr	r2, [pc, #664]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028e2:	4ba1      	ldr	r3, [pc, #644]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f023 0203 	bic.w	r2, r3, #3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	499d      	ldr	r1, [pc, #628]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00a      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002904:	4b98      	ldr	r3, [pc, #608]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	f023 020c 	bic.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	4995      	ldr	r1, [pc, #596]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002926:	4b90      	ldr	r3, [pc, #576]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	498c      	ldr	r1, [pc, #560]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002948:	4b87      	ldr	r3, [pc, #540]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	4984      	ldr	r1, [pc, #528]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800296a:	4b7f      	ldr	r3, [pc, #508]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	497b      	ldr	r1, [pc, #492]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800298c:	4b76      	ldr	r3, [pc, #472]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	4973      	ldr	r1, [pc, #460]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029ae:	4b6e      	ldr	r3, [pc, #440]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	496a      	ldr	r1, [pc, #424]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029d0:	4b65      	ldr	r3, [pc, #404]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	4962      	ldr	r1, [pc, #392]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029f2:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	4959      	ldr	r1, [pc, #356]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a14:	4b54      	ldr	r3, [pc, #336]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a1a:	f023 0203 	bic.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	4951      	ldr	r1, [pc, #324]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a44:	4948      	ldr	r1, [pc, #288]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d015      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	4940      	ldr	r1, [pc, #256]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a78:	4b3b      	ldr	r3, [pc, #236]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a3a      	ldr	r2, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a82:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a90:	4b35      	ldr	r3, [pc, #212]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a96:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	4932      	ldr	r1, [pc, #200]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aae:	d105      	bne.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d015      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ace:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad6:	4924      	ldr	r1, [pc, #144]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ae6:	d105      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ae8:	4b1f      	ldr	r3, [pc, #124]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002af2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d015      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b00:	4b19      	ldr	r3, [pc, #100]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0e:	4916      	ldr	r1, [pc, #88]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d019      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4908      	ldr	r1, [pc, #32]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b56:	d109      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a02      	ldr	r2, [pc, #8]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b62:	60d3      	str	r3, [r2, #12]
 8002b64:	e002      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d015      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b86:	4926      	ldr	r1, [pc, #152]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b96:	d105      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d015      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbe:	4918      	ldr	r1, [pc, #96]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bce:	d105      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bd0:	4b13      	ldr	r3, [pc, #76]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4a12      	ldr	r2, [pc, #72]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bda:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002be8:	4b0d      	ldr	r3, [pc, #52]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf6:	490a      	ldr	r1, [pc, #40]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c06:	d105      	bne.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c08:	4b05      	ldr	r3, [pc, #20]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3718      	adds	r7, #24
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40021000 	.word	0x40021000

08002c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e042      	b.n	8002cbc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d106      	bne.n	8002c4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f7fd fee1 	bl	8000a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2224      	movs	r2, #36	; 0x24
 8002c52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0201 	bic.w	r2, r2, #1
 8002c64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d002      	beq.n	8002c74 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 fb24 	bl	80032bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f825 	bl	8002cc4 <UART_SetConfig>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e01b      	b.n	8002cbc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ca2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 fba3 	bl	8003400 <UART_CheckIdleState>
 8002cba:	4603      	mov	r3, r0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3708      	adds	r7, #8
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}

08002cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cc8:	b08c      	sub	sp, #48	; 0x30
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4baa      	ldr	r3, [pc, #680]	; (8002f9c <UART_SetConfig+0x2d8>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a9f      	ldr	r2, [pc, #636]	; (8002fa0 <UART_SetConfig+0x2dc>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d004      	beq.n	8002d30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002d3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	f023 010f 	bic.w	r1, r3, #15
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a90      	ldr	r2, [pc, #576]	; (8002fa4 <UART_SetConfig+0x2e0>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d125      	bne.n	8002db4 <UART_SetConfig+0xf0>
 8002d68:	4b8f      	ldr	r3, [pc, #572]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f003 0303 	and.w	r3, r3, #3
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d81a      	bhi.n	8002dac <UART_SetConfig+0xe8>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <UART_SetConfig+0xb8>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d8d 	.word	0x08002d8d
 8002d80:	08002d9d 	.word	0x08002d9d
 8002d84:	08002d95 	.word	0x08002d95
 8002d88:	08002da5 	.word	0x08002da5
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d92:	e116      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002d94:	2302      	movs	r3, #2
 8002d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d9a:	e112      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002d9c:	2304      	movs	r3, #4
 8002d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002da2:	e10e      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002da4:	2308      	movs	r3, #8
 8002da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002daa:	e10a      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002dac:	2310      	movs	r3, #16
 8002dae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db2:	e106      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a7c      	ldr	r2, [pc, #496]	; (8002fac <UART_SetConfig+0x2e8>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d138      	bne.n	8002e30 <UART_SetConfig+0x16c>
 8002dbe:	4b7a      	ldr	r3, [pc, #488]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d82d      	bhi.n	8002e28 <UART_SetConfig+0x164>
 8002dcc:	a201      	add	r2, pc, #4	; (adr r2, 8002dd4 <UART_SetConfig+0x110>)
 8002dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd2:	bf00      	nop
 8002dd4:	08002e09 	.word	0x08002e09
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	08002e29 	.word	0x08002e29
 8002de0:	08002e29 	.word	0x08002e29
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e29 	.word	0x08002e29
 8002dec:	08002e29 	.word	0x08002e29
 8002df0:	08002e29 	.word	0x08002e29
 8002df4:	08002e11 	.word	0x08002e11
 8002df8:	08002e29 	.word	0x08002e29
 8002dfc:	08002e29 	.word	0x08002e29
 8002e00:	08002e29 	.word	0x08002e29
 8002e04:	08002e21 	.word	0x08002e21
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e0e:	e0d8      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e10:	2302      	movs	r3, #2
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e16:	e0d4      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e18:	2304      	movs	r3, #4
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e1e:	e0d0      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e20:	2308      	movs	r3, #8
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e26:	e0cc      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e28:	2310      	movs	r3, #16
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e2e:	e0c8      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a5e      	ldr	r2, [pc, #376]	; (8002fb0 <UART_SetConfig+0x2ec>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d125      	bne.n	8002e86 <UART_SetConfig+0x1c2>
 8002e3a:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e44:	2b30      	cmp	r3, #48	; 0x30
 8002e46:	d016      	beq.n	8002e76 <UART_SetConfig+0x1b2>
 8002e48:	2b30      	cmp	r3, #48	; 0x30
 8002e4a:	d818      	bhi.n	8002e7e <UART_SetConfig+0x1ba>
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d00a      	beq.n	8002e66 <UART_SetConfig+0x1a2>
 8002e50:	2b20      	cmp	r3, #32
 8002e52:	d814      	bhi.n	8002e7e <UART_SetConfig+0x1ba>
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d002      	beq.n	8002e5e <UART_SetConfig+0x19a>
 8002e58:	2b10      	cmp	r3, #16
 8002e5a:	d008      	beq.n	8002e6e <UART_SetConfig+0x1aa>
 8002e5c:	e00f      	b.n	8002e7e <UART_SetConfig+0x1ba>
 8002e5e:	2300      	movs	r3, #0
 8002e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e64:	e0ad      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e66:	2302      	movs	r3, #2
 8002e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e6c:	e0a9      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e6e:	2304      	movs	r3, #4
 8002e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e74:	e0a5      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e76:	2308      	movs	r3, #8
 8002e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7c:	e0a1      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e7e:	2310      	movs	r3, #16
 8002e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e84:	e09d      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a4a      	ldr	r2, [pc, #296]	; (8002fb4 <UART_SetConfig+0x2f0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d125      	bne.n	8002edc <UART_SetConfig+0x218>
 8002e90:	4b45      	ldr	r3, [pc, #276]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e9c:	d016      	beq.n	8002ecc <UART_SetConfig+0x208>
 8002e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8002ea0:	d818      	bhi.n	8002ed4 <UART_SetConfig+0x210>
 8002ea2:	2b80      	cmp	r3, #128	; 0x80
 8002ea4:	d00a      	beq.n	8002ebc <UART_SetConfig+0x1f8>
 8002ea6:	2b80      	cmp	r3, #128	; 0x80
 8002ea8:	d814      	bhi.n	8002ed4 <UART_SetConfig+0x210>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <UART_SetConfig+0x1f0>
 8002eae:	2b40      	cmp	r3, #64	; 0x40
 8002eb0:	d008      	beq.n	8002ec4 <UART_SetConfig+0x200>
 8002eb2:	e00f      	b.n	8002ed4 <UART_SetConfig+0x210>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eba:	e082      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ec2:	e07e      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eca:	e07a      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002ecc:	2308      	movs	r3, #8
 8002ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ed2:	e076      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002ed4:	2310      	movs	r3, #16
 8002ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002eda:	e072      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <UART_SetConfig+0x2f4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d12a      	bne.n	8002f3c <UART_SetConfig+0x278>
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ef0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ef4:	d01a      	beq.n	8002f2c <UART_SetConfig+0x268>
 8002ef6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002efa:	d81b      	bhi.n	8002f34 <UART_SetConfig+0x270>
 8002efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f00:	d00c      	beq.n	8002f1c <UART_SetConfig+0x258>
 8002f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f06:	d815      	bhi.n	8002f34 <UART_SetConfig+0x270>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <UART_SetConfig+0x250>
 8002f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f10:	d008      	beq.n	8002f24 <UART_SetConfig+0x260>
 8002f12:	e00f      	b.n	8002f34 <UART_SetConfig+0x270>
 8002f14:	2300      	movs	r3, #0
 8002f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f1a:	e052      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f22:	e04e      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f24:	2304      	movs	r3, #4
 8002f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f2a:	e04a      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f2c:	2308      	movs	r3, #8
 8002f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f32:	e046      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f34:	2310      	movs	r3, #16
 8002f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f3a:	e042      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a17      	ldr	r2, [pc, #92]	; (8002fa0 <UART_SetConfig+0x2dc>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d13a      	bne.n	8002fbc <UART_SetConfig+0x2f8>
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <UART_SetConfig+0x2e4>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f54:	d01a      	beq.n	8002f8c <UART_SetConfig+0x2c8>
 8002f56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f5a:	d81b      	bhi.n	8002f94 <UART_SetConfig+0x2d0>
 8002f5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f60:	d00c      	beq.n	8002f7c <UART_SetConfig+0x2b8>
 8002f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f66:	d815      	bhi.n	8002f94 <UART_SetConfig+0x2d0>
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <UART_SetConfig+0x2b0>
 8002f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f70:	d008      	beq.n	8002f84 <UART_SetConfig+0x2c0>
 8002f72:	e00f      	b.n	8002f94 <UART_SetConfig+0x2d0>
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f7a:	e022      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f7c:	2302      	movs	r3, #2
 8002f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f82:	e01e      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f84:	2304      	movs	r3, #4
 8002f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f8a:	e01a      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f8c:	2308      	movs	r3, #8
 8002f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f92:	e016      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f94:	2310      	movs	r3, #16
 8002f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002f9a:	e012      	b.n	8002fc2 <UART_SetConfig+0x2fe>
 8002f9c:	cfff69f3 	.word	0xcfff69f3
 8002fa0:	40008000 	.word	0x40008000
 8002fa4:	40013800 	.word	0x40013800
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	40004400 	.word	0x40004400
 8002fb0:	40004800 	.word	0x40004800
 8002fb4:	40004c00 	.word	0x40004c00
 8002fb8:	40005000 	.word	0x40005000
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4aae      	ldr	r2, [pc, #696]	; (8003280 <UART_SetConfig+0x5bc>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 8097 	bne.w	80030fc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d823      	bhi.n	800301e <UART_SetConfig+0x35a>
 8002fd6:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x318>)
 8002fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	0800301f 	.word	0x0800301f
 8002fe4:	08003009 	.word	0x08003009
 8002fe8:	0800301f 	.word	0x0800301f
 8002fec:	0800300f 	.word	0x0800300f
 8002ff0:	0800301f 	.word	0x0800301f
 8002ff4:	0800301f 	.word	0x0800301f
 8002ff8:	0800301f 	.word	0x0800301f
 8002ffc:	08003017 	.word	0x08003017
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003000:	f7ff fb50 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8003004:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003006:	e010      	b.n	800302a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003008:	4b9e      	ldr	r3, [pc, #632]	; (8003284 <UART_SetConfig+0x5c0>)
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800300c:	e00d      	b.n	800302a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800300e:	f7ff fadb 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003012:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003014:	e009      	b.n	800302a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800301c:	e005      	b.n	800302a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003028:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 8130 	beq.w	8003292 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	4a94      	ldr	r2, [pc, #592]	; (8003288 <UART_SetConfig+0x5c4>)
 8003038:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800303c:	461a      	mov	r2, r3
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	fbb3 f3f2 	udiv	r3, r3, r2
 8003044:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	4613      	mov	r3, r2
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	4413      	add	r3, r2
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	429a      	cmp	r2, r3
 8003054:	d305      	bcc.n	8003062 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	429a      	cmp	r2, r3
 8003060:	d903      	bls.n	800306a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003068:	e113      	b.n	8003292 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2200      	movs	r2, #0
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	60fa      	str	r2, [r7, #12]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	4a84      	ldr	r2, [pc, #528]	; (8003288 <UART_SetConfig+0x5c4>)
 8003078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800307c:	b29b      	uxth	r3, r3
 800307e:	2200      	movs	r2, #0
 8003080:	603b      	str	r3, [r7, #0]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003088:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800308c:	f7fd f8c4 	bl	8000218 <__aeabi_uldivmod>
 8003090:	4602      	mov	r2, r0
 8003092:	460b      	mov	r3, r1
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	020b      	lsls	r3, r1, #8
 80030a2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80030a6:	0202      	lsls	r2, r0, #8
 80030a8:	6979      	ldr	r1, [r7, #20]
 80030aa:	6849      	ldr	r1, [r1, #4]
 80030ac:	0849      	lsrs	r1, r1, #1
 80030ae:	2000      	movs	r0, #0
 80030b0:	460c      	mov	r4, r1
 80030b2:	4605      	mov	r5, r0
 80030b4:	eb12 0804 	adds.w	r8, r2, r4
 80030b8:	eb43 0905 	adc.w	r9, r3, r5
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	469a      	mov	sl, r3
 80030c4:	4693      	mov	fp, r2
 80030c6:	4652      	mov	r2, sl
 80030c8:	465b      	mov	r3, fp
 80030ca:	4640      	mov	r0, r8
 80030cc:	4649      	mov	r1, r9
 80030ce:	f7fd f8a3 	bl	8000218 <__aeabi_uldivmod>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4613      	mov	r3, r2
 80030d8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030da:	6a3b      	ldr	r3, [r7, #32]
 80030dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030e0:	d308      	bcc.n	80030f4 <UART_SetConfig+0x430>
 80030e2:	6a3b      	ldr	r3, [r7, #32]
 80030e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030e8:	d204      	bcs.n	80030f4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6a3a      	ldr	r2, [r7, #32]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	e0ce      	b.n	8003292 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030fa:	e0ca      	b.n	8003292 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003104:	d166      	bne.n	80031d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003106:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800310a:	2b08      	cmp	r3, #8
 800310c:	d827      	bhi.n	800315e <UART_SetConfig+0x49a>
 800310e:	a201      	add	r2, pc, #4	; (adr r2, 8003114 <UART_SetConfig+0x450>)
 8003110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003114:	08003139 	.word	0x08003139
 8003118:	08003141 	.word	0x08003141
 800311c:	08003149 	.word	0x08003149
 8003120:	0800315f 	.word	0x0800315f
 8003124:	0800314f 	.word	0x0800314f
 8003128:	0800315f 	.word	0x0800315f
 800312c:	0800315f 	.word	0x0800315f
 8003130:	0800315f 	.word	0x0800315f
 8003134:	08003157 	.word	0x08003157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003138:	f7ff fab4 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800313c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800313e:	e014      	b.n	800316a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003140:	f7ff fac6 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003146:	e010      	b.n	800316a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003148:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <UART_SetConfig+0x5c0>)
 800314a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800314c:	e00d      	b.n	800316a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800314e:	f7ff fa3b 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003152:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003154:	e009      	b.n	800316a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800315c:	e005      	b.n	800316a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003168:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8090 	beq.w	8003292 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	4a44      	ldr	r2, [pc, #272]	; (8003288 <UART_SetConfig+0x5c4>)
 8003178:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800317c:	461a      	mov	r2, r3
 800317e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003180:	fbb3 f3f2 	udiv	r3, r3, r2
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	085b      	lsrs	r3, r3, #1
 800318c:	441a      	add	r2, r3
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	2b0f      	cmp	r3, #15
 800319c:	d916      	bls.n	80031cc <UART_SetConfig+0x508>
 800319e:	6a3b      	ldr	r3, [r7, #32]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031a4:	d212      	bcs.n	80031cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031a6:	6a3b      	ldr	r3, [r7, #32]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f023 030f 	bic.w	r3, r3, #15
 80031ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	8bfb      	ldrh	r3, [r7, #30]
 80031be:	4313      	orrs	r3, r2
 80031c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	8bfa      	ldrh	r2, [r7, #30]
 80031c8:	60da      	str	r2, [r3, #12]
 80031ca:	e062      	b.n	8003292 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80031d2:	e05e      	b.n	8003292 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80031d8:	2b08      	cmp	r3, #8
 80031da:	d828      	bhi.n	800322e <UART_SetConfig+0x56a>
 80031dc:	a201      	add	r2, pc, #4	; (adr r2, 80031e4 <UART_SetConfig+0x520>)
 80031de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031e2:	bf00      	nop
 80031e4:	08003209 	.word	0x08003209
 80031e8:	08003211 	.word	0x08003211
 80031ec:	08003219 	.word	0x08003219
 80031f0:	0800322f 	.word	0x0800322f
 80031f4:	0800321f 	.word	0x0800321f
 80031f8:	0800322f 	.word	0x0800322f
 80031fc:	0800322f 	.word	0x0800322f
 8003200:	0800322f 	.word	0x0800322f
 8003204:	08003227 	.word	0x08003227
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003208:	f7ff fa4c 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 800320c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800320e:	e014      	b.n	800323a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff fa5e 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003214:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003216:	e010      	b.n	800323a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <UART_SetConfig+0x5c0>)
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800321c:	e00d      	b.n	800323a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321e:	f7ff f9d3 	bl	80025c8 <HAL_RCC_GetSysClockFreq>
 8003222:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003224:	e009      	b.n	800323a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003226:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800322c:	e005      	b.n	800323a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800322e:	2300      	movs	r3, #0
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003238:	bf00      	nop
    }

    if (pclk != 0U)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d028      	beq.n	8003292 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	4a10      	ldr	r2, [pc, #64]	; (8003288 <UART_SetConfig+0x5c4>)
 8003246:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800324a:	461a      	mov	r2, r3
 800324c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	441a      	add	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003262:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	2b0f      	cmp	r3, #15
 8003268:	d910      	bls.n	800328c <UART_SetConfig+0x5c8>
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003270:	d20c      	bcs.n	800328c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	b29a      	uxth	r2, r3
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	e009      	b.n	8003292 <UART_SetConfig+0x5ce>
 800327e:	bf00      	nop
 8003280:	40008000 	.word	0x40008000
 8003284:	00f42400 	.word	0x00f42400
 8003288:	08004398 	.word	0x08004398
      }
      else
      {
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2201      	movs	r2, #1
 8003296:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2201      	movs	r2, #1
 800329e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2200      	movs	r2, #0
 80032a6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2200      	movs	r2, #0
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80032ae:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3730      	adds	r7, #48	; 0x30
 80032b6:	46bd      	mov	sp, r7
 80032b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032bc:	b480      	push	{r7}
 80032be:	b083      	sub	sp, #12
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c8:	f003 0308 	and.w	r3, r3, #8
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00a      	beq.n	800332a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00a      	beq.n	800334c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00a      	beq.n	800336e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	430a      	orrs	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00a      	beq.n	8003390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01a      	beq.n	80033d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ba:	d10a      	bne.n	80033d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	605a      	str	r2, [r3, #4]
  }
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b098      	sub	sp, #96	; 0x60
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003410:	f7fd fc28 	bl	8000c64 <HAL_GetTick>
 8003414:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b08      	cmp	r3, #8
 8003422:	d12f      	bne.n	8003484 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800342c:	2200      	movs	r2, #0
 800342e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f88e 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d022      	beq.n	8003484 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003446:	e853 3f00 	ldrex	r3, [r3]
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800344c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800344e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003452:	653b      	str	r3, [r7, #80]	; 0x50
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	461a      	mov	r2, r3
 800345a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345c:	647b      	str	r3, [r7, #68]	; 0x44
 800345e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003464:	e841 2300 	strex	r3, r2, [r1]
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800346a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d1e6      	bne.n	800343e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e063      	b.n	800354c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0304 	and.w	r3, r3, #4
 800348e:	2b04      	cmp	r3, #4
 8003490:	d149      	bne.n	8003526 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003492:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800349a:	2200      	movs	r2, #0
 800349c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f857 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d03c      	beq.n	8003526 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	623b      	str	r3, [r7, #32]
   return(result);
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034ca:	633b      	str	r3, [r7, #48]	; 0x30
 80034cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e6      	bne.n	80034ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3308      	adds	r3, #8
 80034e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3308      	adds	r3, #8
 80034fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fe:	61fa      	str	r2, [r7, #28]
 8003500:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	69b9      	ldr	r1, [r7, #24]
 8003504:	69fa      	ldr	r2, [r7, #28]
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	617b      	str	r3, [r7, #20]
   return(result);
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e012      	b.n	800354c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2220      	movs	r2, #32
 800352a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3758      	adds	r7, #88	; 0x58
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e04f      	b.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d04b      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356e:	f7fd fb79 	bl	8000c64 <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	429a      	cmp	r2, r3
 800357c:	d302      	bcc.n	8003584 <UART_WaitOnFlagUntilTimeout+0x30>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d101      	bne.n	8003588 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e04e      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d037      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d034      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	2b40      	cmp	r3, #64	; 0x40
 80035a0:	d031      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 0308 	and.w	r3, r3, #8
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d110      	bne.n	80035d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2208      	movs	r2, #8
 80035b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f838 	bl	800362e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2208      	movs	r2, #8
 80035c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e029      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035e0:	d111      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f81e 	bl	800362e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2220      	movs	r2, #32
 80035f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e00f      	b.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69da      	ldr	r2, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d0a0      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362e:	b480      	push	{r7}
 8003630:	b095      	sub	sp, #84	; 0x54
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003654:	643b      	str	r3, [r7, #64]	; 0x40
 8003656:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e6      	bne.n	8003636 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3308      	adds	r3, #8
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	64bb      	str	r3, [r7, #72]	; 0x48
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800368c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e3      	bne.n	8003668 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d118      	bne.n	80036da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0310 	bic.w	r3, r3, #16
 80036bc:	647b      	str	r3, [r7, #68]	; 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	613b      	str	r3, [r7, #16]
   return(result);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	675a      	str	r2, [r3, #116]	; 0x74
}
 80036ee:	bf00      	nop
 80036f0:	3754      	adds	r7, #84	; 0x54
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003708:	2b01      	cmp	r3, #1
 800370a:	d101      	bne.n	8003710 <HAL_UARTEx_DisableFifoMode+0x16>
 800370c:	2302      	movs	r3, #2
 800370e:	e027      	b.n	8003760 <HAL_UARTEx_DisableFifoMode+0x66>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f022 0201 	bic.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800373e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2220      	movs	r2, #32
 8003752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003780:	2302      	movs	r3, #2
 8003782:	e02d      	b.n	80037e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2224      	movs	r2, #36	; 0x24
 8003790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 f84f 	bl	8003864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2220      	movs	r2, #32
 80037d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e02d      	b.n	800385c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 0201 	bic.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f811 	bl	8003864 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}

08003864 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003870:	2b00      	cmp	r3, #0
 8003872:	d108      	bne.n	8003886 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003884:	e031      	b.n	80038ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003886:	2308      	movs	r3, #8
 8003888:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800388a:	2308      	movs	r3, #8
 800388c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	0e5b      	lsrs	r3, r3, #25
 8003896:	b2db      	uxtb	r3, r3
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	0f5b      	lsrs	r3, r3, #29
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038ae:	7bbb      	ldrb	r3, [r7, #14]
 80038b0:	7b3a      	ldrb	r2, [r7, #12]
 80038b2:	4911      	ldr	r1, [pc, #68]	; (80038f8 <UARTEx_SetNbDataToProcess+0x94>)
 80038b4:	5c8a      	ldrb	r2, [r1, r2]
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80038ba:	7b3a      	ldrb	r2, [r7, #12]
 80038bc:	490f      	ldr	r1, [pc, #60]	; (80038fc <UARTEx_SetNbDataToProcess+0x98>)
 80038be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80038c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	7b7a      	ldrb	r2, [r7, #13]
 80038d0:	4909      	ldr	r1, [pc, #36]	; (80038f8 <UARTEx_SetNbDataToProcess+0x94>)
 80038d2:	5c8a      	ldrb	r2, [r1, r2]
 80038d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80038d8:	7b7a      	ldrb	r2, [r7, #13]
 80038da:	4908      	ldr	r1, [pc, #32]	; (80038fc <UARTEx_SetNbDataToProcess+0x98>)
 80038dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80038de:	fb93 f3f2 	sdiv	r3, r3, r2
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80038ea:	bf00      	nop
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	080043b0 	.word	0x080043b0
 80038fc:	080043b8 	.word	0x080043b8

08003900 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
	...

08003910 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af04      	add	r7, sp, #16
 8003916:	4603      	mov	r3, r0
 8003918:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
 800391e:	9302      	str	r3, [sp, #8]
 8003920:	2301      	movs	r3, #1
 8003922:	9301      	str	r3, [sp, #4]
 8003924:	1dfb      	adds	r3, r7, #7
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2301      	movs	r3, #1
 800392a:	2200      	movs	r2, #0
 800392c:	2178      	movs	r1, #120	; 0x78
 800392e:	4803      	ldr	r0, [pc, #12]	; (800393c <ssd1306_WriteCommand+0x2c>)
 8003930:	f7fd fd2e 	bl	8001390 <HAL_I2C_Mem_Write>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	20000028 	.word	0x20000028

08003940 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af04      	add	r7, sp, #16
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b29b      	uxth	r3, r3
 800394e:	f04f 32ff 	mov.w	r2, #4294967295
 8003952:	9202      	str	r2, [sp, #8]
 8003954:	9301      	str	r3, [sp, #4]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	2301      	movs	r3, #1
 800395c:	2240      	movs	r2, #64	; 0x40
 800395e:	2178      	movs	r1, #120	; 0x78
 8003960:	4803      	ldr	r0, [pc, #12]	; (8003970 <ssd1306_WriteData+0x30>)
 8003962:	f7fd fd15 	bl	8001390 <HAL_I2C_Mem_Write>
}
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000028 	.word	0x20000028

08003974 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003978:	f7ff ffc2 	bl	8003900 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800397c:	2064      	movs	r0, #100	; 0x64
 800397e:	f7fd f97d 	bl	8000c7c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8003982:	2000      	movs	r0, #0
 8003984:	f000 fbe4 	bl	8004150 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003988:	2020      	movs	r0, #32
 800398a:	f7ff ffc1 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800398e:	2000      	movs	r0, #0
 8003990:	f7ff ffbe 	bl	8003910 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003994:	20b0      	movs	r0, #176	; 0xb0
 8003996:	f7ff ffbb 	bl	8003910 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800399a:	20c8      	movs	r0, #200	; 0xc8
 800399c:	f7ff ffb8 	bl	8003910 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7ff ffb5 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80039a6:	2010      	movs	r0, #16
 80039a8:	f7ff ffb2 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80039ac:	2040      	movs	r0, #64	; 0x40
 80039ae:	f7ff ffaf 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80039b2:	20ff      	movs	r0, #255	; 0xff
 80039b4:	f000 fbb9 	bl	800412a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80039b8:	20a1      	movs	r0, #161	; 0xa1
 80039ba:	f7ff ffa9 	bl	8003910 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80039be:	20a6      	movs	r0, #166	; 0xa6
 80039c0:	f7ff ffa6 	bl	8003910 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80039c4:	20a8      	movs	r0, #168	; 0xa8
 80039c6:	f7ff ffa3 	bl	8003910 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80039ca:	203f      	movs	r0, #63	; 0x3f
 80039cc:	f7ff ffa0 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80039d0:	20a4      	movs	r0, #164	; 0xa4
 80039d2:	f7ff ff9d 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80039d6:	20d3      	movs	r0, #211	; 0xd3
 80039d8:	f7ff ff9a 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80039dc:	2000      	movs	r0, #0
 80039de:	f7ff ff97 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80039e2:	20d5      	movs	r0, #213	; 0xd5
 80039e4:	f7ff ff94 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80039e8:	20f0      	movs	r0, #240	; 0xf0
 80039ea:	f7ff ff91 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80039ee:	20d9      	movs	r0, #217	; 0xd9
 80039f0:	f7ff ff8e 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80039f4:	2022      	movs	r0, #34	; 0x22
 80039f6:	f7ff ff8b 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80039fa:	20da      	movs	r0, #218	; 0xda
 80039fc:	f7ff ff88 	bl	8003910 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003a00:	2012      	movs	r0, #18
 8003a02:	f7ff ff85 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8003a06:	20db      	movs	r0, #219	; 0xdb
 8003a08:	f7ff ff82 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003a0c:	2020      	movs	r0, #32
 8003a0e:	f7ff ff7f 	bl	8003910 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8003a12:	208d      	movs	r0, #141	; 0x8d
 8003a14:	f7ff ff7c 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003a18:	2014      	movs	r0, #20
 8003a1a:	f7ff ff79 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f000 fb96 	bl	8004150 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8003a24:	2000      	movs	r0, #0
 8003a26:	f000 f80f 	bl	8003a48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003a2a:	f000 f825 	bl	8003a78 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <ssd1306_Init+0xd0>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8003a34:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <ssd1306_Init+0xd0>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003a3a:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <ssd1306_Init+0xd0>)
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	711a      	strb	r2, [r3, #4]
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	20000514 	.word	0x20000514

08003a48 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b082      	sub	sp, #8
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003a52:	79fb      	ldrb	r3, [r7, #7]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <ssd1306_Fill+0x14>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <ssd1306_Fill+0x16>
 8003a5c:	23ff      	movs	r3, #255	; 0xff
 8003a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a62:	4619      	mov	r1, r3
 8003a64:	4803      	ldr	r0, [pc, #12]	; (8003a74 <ssd1306_Fill+0x2c>)
 8003a66:	f000 fb91 	bl	800418c <memset>
}
 8003a6a:	bf00      	nop
 8003a6c:	3708      	adds	r7, #8
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	20000114 	.word	0x20000114

08003a78 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003a7e:	2300      	movs	r3, #0
 8003a80:	71fb      	strb	r3, [r7, #7]
 8003a82:	e016      	b.n	8003ab2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	3b50      	subs	r3, #80	; 0x50
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff ff40 	bl	8003910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003a90:	2000      	movs	r0, #0
 8003a92:	f7ff ff3d 	bl	8003910 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8003a96:	2010      	movs	r0, #16
 8003a98:	f7ff ff3a 	bl	8003910 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8003a9c:	79fb      	ldrb	r3, [r7, #7]
 8003a9e:	01db      	lsls	r3, r3, #7
 8003aa0:	4a08      	ldr	r2, [pc, #32]	; (8003ac4 <ssd1306_UpdateScreen+0x4c>)
 8003aa2:	4413      	add	r3, r2
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff4a 	bl	8003940 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	3301      	adds	r3, #1
 8003ab0:	71fb      	strb	r3, [r7, #7]
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	2b07      	cmp	r3, #7
 8003ab6:	d9e5      	bls.n	8003a84 <ssd1306_UpdateScreen+0xc>
    }
}
 8003ab8:	bf00      	nop
 8003aba:	bf00      	nop
 8003abc:	3708      	adds	r7, #8
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	20000114 	.word	0x20000114

08003ac8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	71bb      	strb	r3, [r7, #6]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	db3d      	blt.n	8003b5e <ssd1306_DrawPixel+0x96>
 8003ae2:	79bb      	ldrb	r3, [r7, #6]
 8003ae4:	2b3f      	cmp	r3, #63	; 0x3f
 8003ae6:	d83a      	bhi.n	8003b5e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8003ae8:	797b      	ldrb	r3, [r7, #5]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d11a      	bne.n	8003b24 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003aee:	79fa      	ldrb	r2, [r7, #7]
 8003af0:	79bb      	ldrb	r3, [r7, #6]
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	b2d8      	uxtb	r0, r3
 8003af6:	4603      	mov	r3, r0
 8003af8:	01db      	lsls	r3, r3, #7
 8003afa:	4413      	add	r3, r2
 8003afc:	4a1b      	ldr	r2, [pc, #108]	; (8003b6c <ssd1306_DrawPixel+0xa4>)
 8003afe:	5cd3      	ldrb	r3, [r2, r3]
 8003b00:	b25a      	sxtb	r2, r3
 8003b02:	79bb      	ldrb	r3, [r7, #6]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	2101      	movs	r1, #1
 8003b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b0e:	b25b      	sxtb	r3, r3
 8003b10:	4313      	orrs	r3, r2
 8003b12:	b259      	sxtb	r1, r3
 8003b14:	79fa      	ldrb	r2, [r7, #7]
 8003b16:	4603      	mov	r3, r0
 8003b18:	01db      	lsls	r3, r3, #7
 8003b1a:	4413      	add	r3, r2
 8003b1c:	b2c9      	uxtb	r1, r1
 8003b1e:	4a13      	ldr	r2, [pc, #76]	; (8003b6c <ssd1306_DrawPixel+0xa4>)
 8003b20:	54d1      	strb	r1, [r2, r3]
 8003b22:	e01d      	b.n	8003b60 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003b24:	79fa      	ldrb	r2, [r7, #7]
 8003b26:	79bb      	ldrb	r3, [r7, #6]
 8003b28:	08db      	lsrs	r3, r3, #3
 8003b2a:	b2d8      	uxtb	r0, r3
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	01db      	lsls	r3, r3, #7
 8003b30:	4413      	add	r3, r2
 8003b32:	4a0e      	ldr	r2, [pc, #56]	; (8003b6c <ssd1306_DrawPixel+0xa4>)
 8003b34:	5cd3      	ldrb	r3, [r2, r3]
 8003b36:	b25a      	sxtb	r2, r3
 8003b38:	79bb      	ldrb	r3, [r7, #6]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	b25b      	sxtb	r3, r3
 8003b46:	43db      	mvns	r3, r3
 8003b48:	b25b      	sxtb	r3, r3
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	b259      	sxtb	r1, r3
 8003b4e:	79fa      	ldrb	r2, [r7, #7]
 8003b50:	4603      	mov	r3, r0
 8003b52:	01db      	lsls	r3, r3, #7
 8003b54:	4413      	add	r3, r2
 8003b56:	b2c9      	uxtb	r1, r1
 8003b58:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <ssd1306_DrawPixel+0xa4>)
 8003b5a:	54d1      	strb	r1, [r2, r3]
 8003b5c:	e000      	b.n	8003b60 <ssd1306_DrawPixel+0x98>
        return;
 8003b5e:	bf00      	nop
    }
}
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	20000114 	.word	0x20000114

08003b70 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4604      	mov	r4, r0
 8003b78:	4638      	mov	r0, r7
 8003b7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8003b7e:	4623      	mov	r3, r4
 8003b80:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
 8003b84:	2b1f      	cmp	r3, #31
 8003b86:	d902      	bls.n	8003b8e <ssd1306_WriteChar+0x1e>
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b7e      	cmp	r3, #126	; 0x7e
 8003b8c:	d901      	bls.n	8003b92 <ssd1306_WriteChar+0x22>
        return 0;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e079      	b.n	8003c86 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	783b      	ldrb	r3, [r7, #0]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	dc06      	bgt.n	8003bae <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8003ba0:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003ba2:	885b      	ldrh	r3, [r3, #2]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	787b      	ldrb	r3, [r7, #1]
 8003ba8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	dd01      	ble.n	8003bb2 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	e069      	b.n	8003c86 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
 8003bb6:	e04e      	b.n	8003c56 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	3b20      	subs	r3, #32
 8003bbe:	7879      	ldrb	r1, [r7, #1]
 8003bc0:	fb01 f303 	mul.w	r3, r1, r3
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	440b      	add	r3, r1
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	4413      	add	r3, r2
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	e036      	b.n	8003c46 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d013      	beq.n	8003c10 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8003be8:	4b29      	ldr	r3, [pc, #164]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	b2d8      	uxtb	r0, r3
 8003bf6:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003bf8:	885b      	ldrh	r3, [r3, #2]
 8003bfa:	b2da      	uxtb	r2, r3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	4413      	add	r3, r2
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003c08:	4619      	mov	r1, r3
 8003c0a:	f7ff ff5d 	bl	8003ac8 <ssd1306_DrawPixel>
 8003c0e:	e017      	b.n	8003c40 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003c10:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4413      	add	r3, r2
 8003c1c:	b2d8      	uxtb	r0, r3
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003c20:	885b      	ldrh	r3, [r3, #2]
 8003c22:	b2da      	uxtb	r2, r3
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	4413      	add	r3, r2
 8003c2a:	b2d9      	uxtb	r1, r3
 8003c2c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f7ff ff44 	bl	8003ac8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	3301      	adds	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
 8003c46:	783b      	ldrb	r3, [r7, #0]
 8003c48:	461a      	mov	r2, r3
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d3c3      	bcc.n	8003bd8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	3301      	adds	r3, #1
 8003c54:	61fb      	str	r3, [r7, #28]
 8003c56:	787b      	ldrb	r3, [r7, #1]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d3ab      	bcc.n	8003bb8 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003c62:	881a      	ldrh	r2, [r3, #0]
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <ssd1306_WriteChar+0x108>
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	3b20      	subs	r3, #32
 8003c70:	440b      	add	r3, r1
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	e001      	b.n	8003c7c <ssd1306_WriteChar+0x10c>
 8003c78:	783b      	ldrb	r3, [r7, #0]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	b29a      	uxth	r2, r3
 8003c80:	4b03      	ldr	r3, [pc, #12]	; (8003c90 <ssd1306_WriteChar+0x120>)
 8003c82:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3724      	adds	r7, #36	; 0x24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd90      	pop	{r4, r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000514 	.word	0x20000514

08003c94 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b086      	sub	sp, #24
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	4638      	mov	r0, r7
 8003c9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8003ca2:	e013      	b.n	8003ccc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	7818      	ldrb	r0, [r3, #0]
 8003ca8:	7e3b      	ldrb	r3, [r7, #24]
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	463b      	mov	r3, r7
 8003cae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cb0:	f7ff ff5e 	bl	8003b70 <ssd1306_WriteChar>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d002      	beq.n	8003cc6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	e008      	b.n	8003cd8 <ssd1306_WriteString+0x44>
        }
        str++;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1e7      	bne.n	8003ca4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3710      	adds	r7, #16
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	460a      	mov	r2, r1
 8003cea:	71fb      	strb	r3, [r7, #7]
 8003cec:	4613      	mov	r3, r2
 8003cee:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <ssd1306_SetCursor+0x2c>)
 8003cf6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8003cf8:	79bb      	ldrb	r3, [r7, #6]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b03      	ldr	r3, [pc, #12]	; (8003d0c <ssd1306_SetCursor+0x2c>)
 8003cfe:	805a      	strh	r2, [r3, #2]
}
 8003d00:	bf00      	nop
 8003d02:	370c      	adds	r7, #12
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr
 8003d0c:	20000514 	.word	0x20000514

08003d10 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b089      	sub	sp, #36	; 0x24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4604      	mov	r4, r0
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	71fb      	strb	r3, [r7, #7]
 8003d22:	4603      	mov	r3, r0
 8003d24:	71bb      	strb	r3, [r7, #6]
 8003d26:	460b      	mov	r3, r1
 8003d28:	717b      	strb	r3, [r7, #5]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8003d2e:	797a      	ldrb	r2, [r7, #5]
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	bfb8      	it	lt
 8003d38:	425b      	neglt	r3, r3
 8003d3a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8003d3c:	793a      	ldrb	r2, [r7, #4]
 8003d3e:	79bb      	ldrb	r3, [r7, #6]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bfb8      	it	lt
 8003d46:	425b      	neglt	r3, r3
 8003d48:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8003d4a:	79fa      	ldrb	r2, [r7, #7]
 8003d4c:	797b      	ldrb	r3, [r7, #5]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d201      	bcs.n	8003d56 <ssd1306_Line+0x46>
 8003d52:	2301      	movs	r3, #1
 8003d54:	e001      	b.n	8003d5a <ssd1306_Line+0x4a>
 8003d56:	f04f 33ff 	mov.w	r3, #4294967295
 8003d5a:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8003d5c:	79ba      	ldrb	r2, [r7, #6]
 8003d5e:	793b      	ldrb	r3, [r7, #4]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d201      	bcs.n	8003d68 <ssd1306_Line+0x58>
 8003d64:	2301      	movs	r3, #1
 8003d66:	e001      	b.n	8003d6c <ssd1306_Line+0x5c>
 8003d68:	f04f 33ff 	mov.w	r3, #4294967295
 8003d6c:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8003d76:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003d7a:	7939      	ldrb	r1, [r7, #4]
 8003d7c:	797b      	ldrb	r3, [r7, #5]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fea2 	bl	8003ac8 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8003d84:	e024      	b.n	8003dd0 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8003d86:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003d8a:	79b9      	ldrb	r1, [r7, #6]
 8003d8c:	79fb      	ldrb	r3, [r7, #7]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe9a 	bl	8003ac8 <ssd1306_DrawPixel>
        error2 = error * 2;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	425b      	negs	r3, r3
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	dd08      	ble.n	8003db6 <ssd1306_Line+0xa6>
            error -= deltaY;
 8003da4:	69fa      	ldr	r2, [r7, #28]
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	4413      	add	r3, r2
 8003db4:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	da08      	bge.n	8003dd0 <ssd1306_Line+0xc0>
            error += deltaX;
 8003dbe:	69fa      	ldr	r2, [r7, #28]
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	79bb      	ldrb	r3, [r7, #6]
 8003dcc:	4413      	add	r3, r2
 8003dce:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8003dd0:	79fa      	ldrb	r2, [r7, #7]
 8003dd2:	797b      	ldrb	r3, [r7, #5]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1d6      	bne.n	8003d86 <ssd1306_Line+0x76>
 8003dd8:	79ba      	ldrb	r2, [r7, #6]
 8003dda:	793b      	ldrb	r3, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d1d2      	bne.n	8003d86 <ssd1306_Line+0x76>
        }
    }
    return;
 8003de0:	bf00      	nop
}
 8003de2:	3724      	adds	r7, #36	; 0x24
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd90      	pop	{r4, r7, pc}

08003de8 <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	460b      	mov	r3, r1
 8003df2:	807b      	strh	r3, [r7, #2]
 8003df4:	4613      	mov	r3, r2
 8003df6:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d02a      	beq.n	8003e54 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8003dfe:	2301      	movs	r3, #1
 8003e00:	81fb      	strh	r3, [r7, #14]
 8003e02:	e022      	b.n	8003e4a <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8003e04:	89fb      	ldrh	r3, [r7, #14]
 8003e06:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	7818      	ldrb	r0, [r3, #0]
 8003e14:	89fb      	ldrh	r3, [r7, #14]
 8003e16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	7859      	ldrb	r1, [r3, #1]
 8003e24:	89fb      	ldrh	r3, [r7, #14]
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	781c      	ldrb	r4, [r3, #0]
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4413      	add	r3, r2
 8003e36:	785a      	ldrb	r2, [r3, #1]
 8003e38:	787b      	ldrb	r3, [r7, #1]
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	4622      	mov	r2, r4
 8003e40:	f7ff ff66 	bl	8003d10 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8003e44:	89fb      	ldrh	r3, [r7, #14]
 8003e46:	3301      	adds	r3, #1
 8003e48:	81fb      	strh	r3, [r7, #14]
 8003e4a:	89fa      	ldrh	r2, [r7, #14]
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d3d8      	bcc.n	8003e04 <ssd1306_Polyline+0x1c>
    }

    return;
 8003e52:	e000      	b.n	8003e56 <ssd1306_Polyline+0x6e>
        return;
 8003e54:	bf00      	nop
}
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd90      	pop	{r4, r7, pc}

08003e5c <ssd1306_DrawCircle>:
    ssd1306_Line(x,y,xp2,yp2,color);
    return;
}

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	4604      	mov	r4, r0
 8003e64:	4608      	mov	r0, r1
 8003e66:	4611      	mov	r1, r2
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4623      	mov	r3, r4
 8003e6c:	71fb      	strb	r3, [r7, #7]
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71bb      	strb	r3, [r7, #6]
 8003e72:	460b      	mov	r3, r1
 8003e74:	717b      	strb	r3, [r7, #5]
 8003e76:	4613      	mov	r3, r2
 8003e78:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8003e7a:	797b      	ldrb	r3, [r7, #5]
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8003e84:	797b      	ldrb	r3, [r7, #5]
 8003e86:	f1c3 0301 	rsb	r3, r3, #1
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 8003e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	db65      	blt.n	8003f62 <ssd1306_DrawCircle+0x106>
 8003e96:	79bb      	ldrb	r3, [r7, #6]
 8003e98:	2b3f      	cmp	r3, #63	; 0x3f
 8003e9a:	d862      	bhi.n	8003f62 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	79fa      	ldrb	r2, [r7, #7]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	b2d8      	uxtb	r0, r3
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	79bb      	ldrb	r3, [r7, #6]
 8003eac:	4413      	add	r3, r2
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	793a      	ldrb	r2, [r7, #4]
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7ff fe08 	bl	8003ac8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	79fb      	ldrb	r3, [r7, #7]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	b2d8      	uxtb	r0, r3
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	79bb      	ldrb	r3, [r7, #6]
 8003ec8:	4413      	add	r3, r2
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	793a      	ldrb	r2, [r7, #4]
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f7ff fdfa 	bl	8003ac8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	79fb      	ldrb	r3, [r7, #7]
 8003eda:	4413      	add	r3, r2
 8003edc:	b2d8      	uxtb	r0, r3
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	79ba      	ldrb	r2, [r7, #6]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	793a      	ldrb	r2, [r7, #4]
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7ff fdec 	bl	8003ac8 <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	79fa      	ldrb	r2, [r7, #7]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	b2d8      	uxtb	r0, r3
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	79ba      	ldrb	r2, [r7, #6]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	793a      	ldrb	r2, [r7, #4]
 8003f06:	4619      	mov	r1, r3
 8003f08:	f7ff fdde 	bl	8003ac8 <ssd1306_DrawPixel>
        e2 = err;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8003f10:	68ba      	ldr	r2, [r7, #8]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	dc13      	bgt.n	8003f40 <ssd1306_DrawCircle+0xe4>
            y++;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	3301      	adds	r3, #1
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	425b      	negs	r3, r3
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d105      	bne.n	8003f40 <ssd1306_DrawCircle+0xe4>
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	dc01      	bgt.n	8003f40 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	dd08      	ble.n	8003f5a <ssd1306_DrawCircle+0xfe>
            x++;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	3301      	adds	r3, #1
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	dd9d      	ble.n	8003e9c <ssd1306_DrawCircle+0x40>

    return;
 8003f60:	e000      	b.n	8003f64 <ssd1306_DrawCircle+0x108>
        return;
 8003f62:	bf00      	nop
}
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd90      	pop	{r4, r7, pc}

08003f6a <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003f6a:	b590      	push	{r4, r7, lr}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af02      	add	r7, sp, #8
 8003f70:	4604      	mov	r4, r0
 8003f72:	4608      	mov	r0, r1
 8003f74:	4611      	mov	r1, r2
 8003f76:	461a      	mov	r2, r3
 8003f78:	4623      	mov	r3, r4
 8003f7a:	71fb      	strb	r3, [r7, #7]
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	71bb      	strb	r3, [r7, #6]
 8003f80:	460b      	mov	r3, r1
 8003f82:	717b      	strb	r3, [r7, #5]
 8003f84:	4613      	mov	r3, r2
 8003f86:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8003f88:	79bc      	ldrb	r4, [r7, #6]
 8003f8a:	797a      	ldrb	r2, [r7, #5]
 8003f8c:	79b9      	ldrb	r1, [r7, #6]
 8003f8e:	79f8      	ldrb	r0, [r7, #7]
 8003f90:	7e3b      	ldrb	r3, [r7, #24]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	4623      	mov	r3, r4
 8003f96:	f7ff febb 	bl	8003d10 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8003f9a:	793c      	ldrb	r4, [r7, #4]
 8003f9c:	797a      	ldrb	r2, [r7, #5]
 8003f9e:	79b9      	ldrb	r1, [r7, #6]
 8003fa0:	7978      	ldrb	r0, [r7, #5]
 8003fa2:	7e3b      	ldrb	r3, [r7, #24]
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4623      	mov	r3, r4
 8003fa8:	f7ff feb2 	bl	8003d10 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8003fac:	793c      	ldrb	r4, [r7, #4]
 8003fae:	79fa      	ldrb	r2, [r7, #7]
 8003fb0:	7939      	ldrb	r1, [r7, #4]
 8003fb2:	7978      	ldrb	r0, [r7, #5]
 8003fb4:	7e3b      	ldrb	r3, [r7, #24]
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	4623      	mov	r3, r4
 8003fba:	f7ff fea9 	bl	8003d10 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8003fbe:	79bc      	ldrb	r4, [r7, #6]
 8003fc0:	79fa      	ldrb	r2, [r7, #7]
 8003fc2:	7939      	ldrb	r1, [r7, #4]
 8003fc4:	79f8      	ldrb	r0, [r7, #7]
 8003fc6:	7e3b      	ldrb	r3, [r7, #24]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	4623      	mov	r3, r4
 8003fcc:	f7ff fea0 	bl	8003d10 <ssd1306_Line>

    return;
 8003fd0:	bf00      	nop
}
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd90      	pop	{r4, r7, pc}

08003fd8 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4604      	mov	r4, r0
 8003fe0:	4608      	mov	r0, r1
 8003fe2:	4611      	mov	r1, r2
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4623      	mov	r3, r4
 8003fe8:	71fb      	strb	r3, [r7, #7]
 8003fea:	4603      	mov	r3, r0
 8003fec:	71bb      	strb	r3, [r7, #6]
 8003fee:	460b      	mov	r3, r1
 8003ff0:	717b      	strb	r3, [r7, #5]
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8003ff6:	79fa      	ldrb	r2, [r7, #7]
 8003ff8:	797b      	ldrb	r3, [r7, #5]
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	bf28      	it	cs
 8003ffe:	4613      	movcs	r3, r2
 8004000:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8004002:	797a      	ldrb	r2, [r7, #5]
 8004004:	79fb      	ldrb	r3, [r7, #7]
 8004006:	4293      	cmp	r3, r2
 8004008:	bf38      	it	cc
 800400a:	4613      	movcc	r3, r2
 800400c:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 800400e:	79ba      	ldrb	r2, [r7, #6]
 8004010:	793b      	ldrb	r3, [r7, #4]
 8004012:	4293      	cmp	r3, r2
 8004014:	bf28      	it	cs
 8004016:	4613      	movcs	r3, r2
 8004018:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800401a:	793a      	ldrb	r2, [r7, #4]
 800401c:	79bb      	ldrb	r3, [r7, #6]
 800401e:	4293      	cmp	r3, r2
 8004020:	bf38      	it	cc
 8004022:	4613      	movcc	r3, r2
 8004024:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004026:	7afb      	ldrb	r3, [r7, #11]
 8004028:	73fb      	strb	r3, [r7, #15]
 800402a:	e017      	b.n	800405c <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800402c:	7b7b      	ldrb	r3, [r7, #13]
 800402e:	73bb      	strb	r3, [r7, #14]
 8004030:	e009      	b.n	8004046 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8004032:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004036:	7bf9      	ldrb	r1, [r7, #15]
 8004038:	7bbb      	ldrb	r3, [r7, #14]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fd44 	bl	8003ac8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8004040:	7bbb      	ldrb	r3, [r7, #14]
 8004042:	3301      	adds	r3, #1
 8004044:	73bb      	strb	r3, [r7, #14]
 8004046:	7bba      	ldrb	r2, [r7, #14]
 8004048:	7b3b      	ldrb	r3, [r7, #12]
 800404a:	429a      	cmp	r2, r3
 800404c:	d803      	bhi.n	8004056 <ssd1306_FillRectangle+0x7e>
 800404e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004052:	2b00      	cmp	r3, #0
 8004054:	daed      	bge.n	8004032 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	7abb      	ldrb	r3, [r7, #10]
 8004060:	429a      	cmp	r2, r3
 8004062:	d803      	bhi.n	800406c <ssd1306_FillRectangle+0x94>
 8004064:	7bfb      	ldrb	r3, [r7, #15]
 8004066:	2b3f      	cmp	r3, #63	; 0x3f
 8004068:	d9e0      	bls.n	800402c <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 800406a:	bf00      	nop
 800406c:	bf00      	nop
}
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	bd90      	pop	{r4, r7, pc}

08004074 <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	603a      	str	r2, [r7, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4603      	mov	r3, r0
 8004080:	71fb      	strb	r3, [r7, #7]
 8004082:	460b      	mov	r3, r1
 8004084:	71bb      	strb	r3, [r7, #6]
 8004086:	4613      	mov	r3, r2
 8004088:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800408a:	797b      	ldrb	r3, [r7, #5]
 800408c:	3307      	adds	r3, #7
 800408e:	2b00      	cmp	r3, #0
 8004090:	da00      	bge.n	8004094 <ssd1306_DrawBitmap+0x20>
 8004092:	3307      	adds	r3, #7
 8004094:	10db      	asrs	r3, r3, #3
 8004096:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800409c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	db3e      	blt.n	8004122 <ssd1306_DrawBitmap+0xae>
 80040a4:	79bb      	ldrb	r3, [r7, #6]
 80040a6:	2b3f      	cmp	r3, #63	; 0x3f
 80040a8:	d83b      	bhi.n	8004122 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80040aa:	2300      	movs	r3, #0
 80040ac:	73bb      	strb	r3, [r7, #14]
 80040ae:	e033      	b.n	8004118 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 80040b0:	2300      	movs	r3, #0
 80040b2:	737b      	strb	r3, [r7, #13]
 80040b4:	e026      	b.n	8004104 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 80040b6:	7b7b      	ldrb	r3, [r7, #13]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d003      	beq.n	80040c8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	005b      	lsls	r3, r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	e00d      	b.n	80040e4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80040c8:	7bbb      	ldrb	r3, [r7, #14]
 80040ca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80040ce:	fb02 f303 	mul.w	r3, r2, r3
 80040d2:	7b7a      	ldrb	r2, [r7, #13]
 80040d4:	08d2      	lsrs	r2, r2, #3
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	4413      	add	r3, r2
 80040da:	461a      	mov	r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	4413      	add	r3, r2
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80040e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	da08      	bge.n	80040fe <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80040ec:	79fa      	ldrb	r2, [r7, #7]
 80040ee:	7b7b      	ldrb	r3, [r7, #13]
 80040f0:	4413      	add	r3, r2
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	7f3a      	ldrb	r2, [r7, #28]
 80040f6:	79b9      	ldrb	r1, [r7, #6]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff fce5 	bl	8003ac8 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80040fe:	7b7b      	ldrb	r3, [r7, #13]
 8004100:	3301      	adds	r3, #1
 8004102:	737b      	strb	r3, [r7, #13]
 8004104:	7b7a      	ldrb	r2, [r7, #13]
 8004106:	797b      	ldrb	r3, [r7, #5]
 8004108:	429a      	cmp	r2, r3
 800410a:	d3d4      	bcc.n	80040b6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 800410c:	7bbb      	ldrb	r3, [r7, #14]
 800410e:	3301      	adds	r3, #1
 8004110:	73bb      	strb	r3, [r7, #14]
 8004112:	79bb      	ldrb	r3, [r7, #6]
 8004114:	3301      	adds	r3, #1
 8004116:	71bb      	strb	r3, [r7, #6]
 8004118:	7bba      	ldrb	r2, [r7, #14]
 800411a:	7e3b      	ldrb	r3, [r7, #24]
 800411c:	429a      	cmp	r2, r3
 800411e:	d3c7      	bcc.n	80040b0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8004120:	e000      	b.n	8004124 <ssd1306_DrawBitmap+0xb0>
        return;
 8004122:	bf00      	nop
}
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	4603      	mov	r3, r0
 8004132:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004134:	2381      	movs	r3, #129	; 0x81
 8004136:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004138:	7bfb      	ldrb	r3, [r7, #15]
 800413a:	4618      	mov	r0, r3
 800413c:	f7ff fbe8 	bl	8003910 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004140:	79fb      	ldrb	r3, [r7, #7]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fbe4 	bl	8003910 <ssd1306_WriteCommand>
}
 8004148:	bf00      	nop
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	4603      	mov	r3, r0
 8004158:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004160:	23af      	movs	r3, #175	; 0xaf
 8004162:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <ssd1306_SetDisplayOn+0x38>)
 8004166:	2201      	movs	r2, #1
 8004168:	715a      	strb	r2, [r3, #5]
 800416a:	e004      	b.n	8004176 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800416c:	23ae      	movs	r3, #174	; 0xae
 800416e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <ssd1306_SetDisplayOn+0x38>)
 8004172:	2200      	movs	r2, #0
 8004174:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004176:	7bfb      	ldrb	r3, [r7, #15]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fbc9 	bl	8003910 <ssd1306_WriteCommand>
}
 800417e:	bf00      	nop
 8004180:	3710      	adds	r7, #16
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000514 	.word	0x20000514

0800418c <memset>:
 800418c:	4402      	add	r2, r0
 800418e:	4603      	mov	r3, r0
 8004190:	4293      	cmp	r3, r2
 8004192:	d100      	bne.n	8004196 <memset+0xa>
 8004194:	4770      	bx	lr
 8004196:	f803 1b01 	strb.w	r1, [r3], #1
 800419a:	e7f9      	b.n	8004190 <memset+0x4>

0800419c <__libc_init_array>:
 800419c:	b570      	push	{r4, r5, r6, lr}
 800419e:	4d0d      	ldr	r5, [pc, #52]	; (80041d4 <__libc_init_array+0x38>)
 80041a0:	4c0d      	ldr	r4, [pc, #52]	; (80041d8 <__libc_init_array+0x3c>)
 80041a2:	1b64      	subs	r4, r4, r5
 80041a4:	10a4      	asrs	r4, r4, #2
 80041a6:	2600      	movs	r6, #0
 80041a8:	42a6      	cmp	r6, r4
 80041aa:	d109      	bne.n	80041c0 <__libc_init_array+0x24>
 80041ac:	4d0b      	ldr	r5, [pc, #44]	; (80041dc <__libc_init_array+0x40>)
 80041ae:	4c0c      	ldr	r4, [pc, #48]	; (80041e0 <__libc_init_array+0x44>)
 80041b0:	f000 f818 	bl	80041e4 <_init>
 80041b4:	1b64      	subs	r4, r4, r5
 80041b6:	10a4      	asrs	r4, r4, #2
 80041b8:	2600      	movs	r6, #0
 80041ba:	42a6      	cmp	r6, r4
 80041bc:	d105      	bne.n	80041ca <__libc_init_array+0x2e>
 80041be:	bd70      	pop	{r4, r5, r6, pc}
 80041c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80041c4:	4798      	blx	r3
 80041c6:	3601      	adds	r6, #1
 80041c8:	e7ee      	b.n	80041a8 <__libc_init_array+0xc>
 80041ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80041ce:	4798      	blx	r3
 80041d0:	3601      	adds	r6, #1
 80041d2:	e7f2      	b.n	80041ba <__libc_init_array+0x1e>
 80041d4:	08006a34 	.word	0x08006a34
 80041d8:	08006a34 	.word	0x08006a34
 80041dc:	08006a34 	.word	0x08006a34
 80041e0:	08006a38 	.word	0x08006a38

080041e4 <_init>:
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	bf00      	nop
 80041e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041ea:	bc08      	pop	{r3}
 80041ec:	469e      	mov	lr, r3
 80041ee:	4770      	bx	lr

080041f0 <_fini>:
 80041f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041f2:	bf00      	nop
 80041f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041f6:	bc08      	pop	{r3}
 80041f8:	469e      	mov	lr, r3
 80041fa:	4770      	bx	lr
