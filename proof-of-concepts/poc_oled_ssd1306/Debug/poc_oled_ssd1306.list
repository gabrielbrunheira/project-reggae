
poc_oled_ssd1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003abc  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e30  08003e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003e30  08003e30  00013e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003e38  08003e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e38  08003e38  00013e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e3c  08003e3c  00013e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  2000000c  08003e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  08003e4c  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010801  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002278  00000000  00000000  00030880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  00032af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a52  00000000  00000000  00033838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e75  00000000  00000000  0003428a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011438  00000000  00000000  000590ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec828  00000000  00000000  0006a537  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000036f0  00000000  00000000  00156d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015a450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003c7c 	.word	0x08003c7c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003c7c 	.word	0x08003c7c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fac2 	bl	8000aa2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f833 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f907 	bl	8000734 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 f8bb 	bl	80006a0 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 800052a:	f000 f879 	bl	8000620 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 800052e:	f003 f9a5 	bl	800387c <ssd1306_Init>

  //ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,White);
  //ssd1306_DrawBitmap(0,0,github_logo_64x64,64,64,White);
  ssd1306_FillRectangle(0, 0, 43, 15, White);
 8000532:	2301      	movs	r3, #1
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	230f      	movs	r3, #15
 8000538:	222b      	movs	r2, #43	; 0x2b
 800053a:	2100      	movs	r1, #0
 800053c:	2000      	movs	r0, #0
 800053e:	f003 fa99 	bl	8003a74 <ssd1306_FillRectangle>
  ssd1306_DrawBitmap(44, 0, woodstock, 20, 20, White);
 8000542:	2301      	movs	r3, #1
 8000544:	9301      	str	r3, [sp, #4]
 8000546:	2314      	movs	r3, #20
 8000548:	9300      	str	r3, [sp, #0]
 800054a:	2314      	movs	r3, #20
 800054c:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <main+0x6c>)
 800054e:	2100      	movs	r1, #0
 8000550:	202c      	movs	r0, #44	; 0x2c
 8000552:	f003 fadc 	bl	8003b0e <ssd1306_DrawBitmap>
  ssd1306_DrawBitmap(0,16,snoopy_48x48,48,48,White);
 8000556:	2301      	movs	r3, #1
 8000558:	9301      	str	r3, [sp, #4]
 800055a:	2330      	movs	r3, #48	; 0x30
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2330      	movs	r3, #48	; 0x30
 8000560:	4a08      	ldr	r2, [pc, #32]	; (8000584 <main+0x70>)
 8000562:	2110      	movs	r1, #16
 8000564:	2000      	movs	r0, #0
 8000566:	f003 fad2 	bl	8003b0e <ssd1306_DrawBitmap>
  ssd1306_FillRectangle(48, 16, 64, 63, White);
 800056a:	2301      	movs	r3, #1
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	233f      	movs	r3, #63	; 0x3f
 8000570:	2240      	movs	r2, #64	; 0x40
 8000572:	2110      	movs	r1, #16
 8000574:	2030      	movs	r0, #48	; 0x30
 8000576:	f003 fa7d 	bl	8003a74 <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 800057a:	f003 fa01 	bl	8003980 <ssd1306_UpdateScreen>
  ssd1306_UpdateScreen();*/
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x6a>
 8000580:	08003db4 	.word	0x08003db4
 8000584:	08003c94 	.word	0x08003c94

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0318 	add.w	r3, r7, #24
 8000592:	2238      	movs	r2, #56	; 0x38
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fb44 	bl	8003c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fa8e 	bl	8001acc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b0:	2302      	movs	r3, #2
 80005b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2340      	movs	r3, #64	; 0x40
 80005bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005ca:	2355      	movs	r3, #85	; 0x55
 80005cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0318 	add.w	r3, r7, #24
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fb28 	bl	8001c34 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 f911 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ee:	230f      	movs	r3, #15
 80005f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fe26 	bl	8002258 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000612:	f000 f8fd 	bl	8000810 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <MX_I2C1_Init+0x74>)
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <MX_I2C1_Init+0x78>)
 8000628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800062a:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_I2C1_Init+0x74>)
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <MX_I2C1_Init+0x7c>)
 800062e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000630:	4b18      	ldr	r3, [pc, #96]	; (8000694 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_I2C1_Init+0x74>)
 8000638:	2201      	movs	r2, #1
 800063a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_I2C1_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_I2C1_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_I2C1_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_I2C1_Init+0x74>)
 8000656:	2200      	movs	r2, #0
 8000658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800065a:	480e      	ldr	r0, [pc, #56]	; (8000694 <MX_I2C1_Init+0x74>)
 800065c:	f000 fd81 	bl	8001162 <HAL_I2C_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000666:	f000 f8d3 	bl	8000810 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800066a:	2100      	movs	r1, #0
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <MX_I2C1_Init+0x74>)
 800066e:	f001 f995 	bl	800199c <HAL_I2CEx_ConfigAnalogFilter>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000678:	f000 f8ca 	bl	8000810 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_I2C1_Init+0x74>)
 8000680:	f001 f9d7 	bl	8001a32 <HAL_I2CEx_ConfigDigitalFilter>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800068a:	f000 f8c1 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	20000028 	.word	0x20000028
 8000698:	40005400 	.word	0x40005400
 800069c:	30a0a7fb 	.word	0x30a0a7fb

080006a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006a4:	4b21      	ldr	r3, [pc, #132]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006a6:	4a22      	ldr	r2, [pc, #136]	; (8000730 <MX_LPUART1_UART_Init+0x90>)
 80006a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80006aa:	4b20      	ldr	r3, [pc, #128]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b19      	ldr	r3, [pc, #100]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006e2:	4812      	ldr	r0, [pc, #72]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006e4:	f002 fa22 	bl	8002b2c <HAL_UART_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006ee:	f000 f88f 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f2:	2100      	movs	r1, #0
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 80006f6:	f002 ffbd 	bl	8003674 <HAL_UARTEx_SetTxFifoThreshold>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000700:	f000 f886 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 8000708:	f002 fff2 	bl	80036f0 <HAL_UARTEx_SetRxFifoThreshold>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000712:	f000 f87d 	bl	8000810 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000716:	4805      	ldr	r0, [pc, #20]	; (800072c <MX_LPUART1_UART_Init+0x8c>)
 8000718:	f002 ff73 	bl	8003602 <HAL_UARTEx_DisableFifoMode>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000722:	f000 f875 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	2000007c 	.word	0x2000007c
 8000730:	40008000 	.word	0x40008000

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	; 0x28
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 0314 	add.w	r3, r7, #20
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	4b2f      	ldr	r3, [pc, #188]	; (8000808 <MX_GPIO_Init+0xd4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a2e      	ldr	r2, [pc, #184]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b2c      	ldr	r3, [pc, #176]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000762:	4b29      	ldr	r3, [pc, #164]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a28      	ldr	r2, [pc, #160]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000768:	f043 0320 	orr.w	r3, r3, #32
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0320 	and.w	r3, r3, #32
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b23      	ldr	r3, [pc, #140]	; (8000808 <MX_GPIO_Init+0xd4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a22      	ldr	r2, [pc, #136]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a1c      	ldr	r2, [pc, #112]	; (8000808 <MX_GPIO_Init+0xd4>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_GPIO_Init+0xd4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f000 fc9b 	bl	80010ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	480f      	ldr	r0, [pc, #60]	; (800080c <MX_GPIO_Init+0xd8>)
 80007ce:	f000 fb0b 	bl	8000de8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d2:	2320      	movs	r3, #32
 80007d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0314 	add.w	r3, r7, #20
 80007e6:	4619      	mov	r1, r3
 80007e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ec:	f000 fafc 	bl	8000de8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	2028      	movs	r0, #40	; 0x28
 80007f6:	f000 fac2 	bl	8000d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007fa:	2028      	movs	r0, #40	; 0x28
 80007fc:	f000 fad9 	bl	8000db2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3728      	adds	r7, #40	; 0x28
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	48000800 	.word	0x48000800

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6613      	str	r3, [r2, #96]	; 0x60
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000852:	f001 f9df 	bl	8001c14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b09e      	sub	sp, #120	; 0x78
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	2254      	movs	r2, #84	; 0x54
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f003 f9cd 	bl	8003c24 <memset>
  if(hi2c->Instance==I2C1)
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a1f      	ldr	r2, [pc, #124]	; (800090c <HAL_I2C_MspInit+0xa8>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d136      	bne.n	8000902 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000894:	2340      	movs	r3, #64	; 0x40
 8000896:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000898:	2300      	movs	r3, #0
 800089a:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fef5 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008ac:	f7ff ffb0 	bl	8000810 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b0:	4b17      	ldr	r3, [pc, #92]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b4:	4a16      	ldr	r2, [pc, #88]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008b6:	f043 0302 	orr.w	r3, r3, #2
 80008ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008cc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ce:	2312      	movs	r3, #18
 80008d0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008da:	2304      	movs	r3, #4
 80008dc:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008e2:	4619      	mov	r1, r3
 80008e4:	480b      	ldr	r0, [pc, #44]	; (8000914 <HAL_I2C_MspInit+0xb0>)
 80008e6:	f000 fa7f 	bl	8000de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008ee:	4a08      	ldr	r2, [pc, #32]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008f4:	6593      	str	r3, [r2, #88]	; 0x58
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <HAL_I2C_MspInit+0xac>)
 80008f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3778      	adds	r7, #120	; 0x78
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40005400 	.word	0x40005400
 8000910:	40021000 	.word	0x40021000
 8000914:	48000400 	.word	0x48000400

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09e      	sub	sp, #120	; 0x78
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2254      	movs	r2, #84	; 0x54
 8000936:	2100      	movs	r1, #0
 8000938:	4618      	mov	r0, r3
 800093a:	f003 f973 	bl	8003c24 <memset>
  if(huart->Instance==LPUART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a1f      	ldr	r2, [pc, #124]	; (80009c0 <HAL_UART_MspInit+0xa8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d136      	bne.n	80009b6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000948:	2320      	movs	r3, #32
 800094a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800094c:	2300      	movs	r3, #0
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fe9b 	bl	8002690 <HAL_RCCEx_PeriphCLKConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000960:	f7ff ff56 	bl	8000810 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000964:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <HAL_UART_MspInit+0xac>)
 8000966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000968:	4a16      	ldr	r2, [pc, #88]	; (80009c4 <HAL_UART_MspInit+0xac>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <HAL_UART_MspInit+0xac>)
 8000972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	60fb      	str	r3, [r7, #12]
 800097a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097c:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_MspInit+0xac>)
 800097e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000980:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_UART_MspInit+0xac>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_UART_MspInit+0xac>)
 800098a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	60bb      	str	r3, [r7, #8]
 8000992:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000994:	230c      	movs	r3, #12
 8000996:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80009a4:	230c      	movs	r3, #12
 80009a6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f000 fa19 	bl	8000de8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3778      	adds	r7, #120	; 0x78
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40008000 	.word	0x40008000
 80009c4:	40021000 	.word	0x40021000

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	e7fe      	b.n	80009cc <NMI_Handler+0x4>

080009ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <MemManage_Handler+0x4>

080009da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <BusFault_Handler+0x4>

080009e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <UsageFault_Handler+0x4>

080009e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr

08000a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a14:	f000 f898 	bl	8000b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a24:	f000 fb7a 	bl	800111c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <SystemInit+0x20>)
 8000a32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a36:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <SystemInit+0x20>)
 8000a38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a52:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a54:	f7ff ffea 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a58:	480c      	ldr	r0, [pc, #48]	; (8000a8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a5a:	490d      	ldr	r1, [pc, #52]	; (8000a90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a5c:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <LoopForever+0xe>)
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a60:	e002      	b.n	8000a68 <LoopCopyDataInit>

08000a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a66:	3304      	adds	r3, #4

08000a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a6c:	d3f9      	bcc.n	8000a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a70:	4c0a      	ldr	r4, [pc, #40]	; (8000a9c <LoopForever+0x16>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a74:	e001      	b.n	8000a7a <LoopFillZerobss>

08000a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a78:	3204      	adds	r2, #4

08000a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a7c:	d3fb      	bcc.n	8000a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a7e:	f003 f8d9 	bl	8003c34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a82:	f7ff fd47 	bl	8000514 <main>

08000a86 <LoopForever>:

LoopForever:
    b LoopForever
 8000a86:	e7fe      	b.n	8000a86 <LoopForever>
  ldr   r0, =_estack
 8000a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a94:	08003e40 	.word	0x08003e40
  ldr r2, =_sbss
 8000a98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a9c:	2000031c 	.word	0x2000031c

08000aa0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000aa0:	e7fe      	b.n	8000aa0 <ADC1_2_IRQHandler>

08000aa2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f000 f95b 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f000 f80e 	bl	8000ad4 <HAL_InitTick>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	e001      	b.n	8000ac8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac4:	f7ff feaa 	bl	800081c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac8:	79fb      	ldrb	r3, [r7, #7]

}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
	...

08000ad4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000adc:	2300      	movs	r3, #0
 8000ade:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_InitTick+0x68>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d022      	beq.n	8000b2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_InitTick+0x6c>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <HAL_InitTick+0x68>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000af4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afc:	4618      	mov	r0, r3
 8000afe:	f000 f966 	bl	8000dce <HAL_SYSTICK_Config>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d10f      	bne.n	8000b28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b0f      	cmp	r3, #15
 8000b0c:	d809      	bhi.n	8000b22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	f04f 30ff 	mov.w	r0, #4294967295
 8000b16:	f000 f932 	bl	8000d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <HAL_InitTick+0x70>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	e007      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e004      	b.n	8000b32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
 8000b2c:	e001      	b.n	8000b32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000000 	.word	0x20000000
 8000b44:	20000004 	.word	0x20000004

08000b48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <HAL_IncTick+0x20>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4413      	add	r3, r2
 8000b56:	4a03      	ldr	r2, [pc, #12]	; (8000b64 <HAL_IncTick+0x1c>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	20000110 	.word	0x20000110
 8000b68:	20000008 	.word	0x20000008

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000110 	.word	0x20000110

08000b84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b8c:	f7ff ffee 	bl	8000b6c <HAL_GetTick>
 8000b90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b9c:	d004      	beq.n	8000ba8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <HAL_Delay+0x40>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ba8:	bf00      	nop
 8000baa:	f7ff ffdf 	bl	8000b6c <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	68fa      	ldr	r2, [r7, #12]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d8f7      	bhi.n	8000baa <HAL_Delay+0x26>
  {
  }
}
 8000bba:	bf00      	nop
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <__NVIC_EnableIRQ+0x38>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	db0a      	blt.n	8000c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <__NVIC_SetPriority+0x4c>)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	0112      	lsls	r2, r2, #4
 8000c88:	b2d2      	uxtb	r2, r2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c90:	e00a      	b.n	8000ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4908      	ldr	r1, [pc, #32]	; (8000cb8 <__NVIC_SetPriority+0x50>)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	f003 030f 	and.w	r3, r3, #15
 8000c9e:	3b04      	subs	r3, #4
 8000ca0:	0112      	lsls	r2, r2, #4
 8000ca2:	b2d2      	uxtb	r2, r2
 8000ca4:	440b      	add	r3, r1
 8000ca6:	761a      	strb	r2, [r3, #24]
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000e100 	.word	0xe000e100
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff29 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff40 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff90 	bl	8000cbc <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5f 	bl	8000c68 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff33 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa4 	bl	8000d24 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df6:	e15a      	b.n	80010ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 814c 	beq.w	80010a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d005      	beq.n	8000e28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d130      	bne.n	8000e8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68da      	ldr	r2, [r3, #12]
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e5e:	2201      	movs	r2, #1
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43db      	mvns	r3, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	091b      	lsrs	r3, r3, #4
 8000e74:	f003 0201 	and.w	r2, r3, #1
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d017      	beq.n	8000ec6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0203 	and.w	r2, r3, #3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80a6 	beq.w	80010a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f60:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6613      	str	r3, [r2, #96]	; 0x60
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f74:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9e:	d01f      	beq.n	8000fe0 <HAL_GPIO_Init+0x1f8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d019      	beq.n	8000fdc <HAL_GPIO_Init+0x1f4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x2f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1ec>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x2f8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2fc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1e4>
 8000fc8:	2305      	movs	r3, #5
 8000fca:	e00a      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fcc:	2306      	movs	r3, #6
 8000fce:	e008      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff2:	4937      	ldr	r1, [pc, #220]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001024:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x300>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_GPIO_Init+0x300>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_GPIO_Init+0x300>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f47f ae9d 	bne.w	8000df8 <HAL_GPIO_Init+0x10>
  }
}
 80010be:	bf00      	nop
 80010c0:	bf00      	nop
 80010c2:	371c      	adds	r7, #28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00
 80010e0:	48001000 	.word	0x48001000
 80010e4:	48001400 	.word	0x48001400
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e002      	b.n	8001110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d006      	beq.n	8001140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001132:	4a05      	ldr	r2, [pc, #20]	; (8001148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f806 	bl	800114c <HAL_GPIO_EXTI_Callback>
  }
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40010400 	.word	0x40010400

0800114c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d101      	bne.n	8001174 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e08d      	b.n	8001290 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d106      	bne.n	800118e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff fb6b 	bl	8000864 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2224      	movs	r2, #36	; 0x24
 8001192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0201 	bic.w	r2, r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d107      	bne.n	80011dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689a      	ldr	r2, [r3, #8]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011d8:	609a      	str	r2, [r3, #8]
 80011da:	e006      	b.n	80011ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	689a      	ldr	r2, [r3, #8]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80011e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d108      	bne.n	8001204 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	e007      	b.n	8001214 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001212:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001226:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68da      	ldr	r2, [r3, #12]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001236:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	691a      	ldr	r2, [r3, #16]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	699b      	ldr	r3, [r3, #24]
 8001248:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	430a      	orrs	r2, r1
 8001250:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69d9      	ldr	r1, [r3, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6a1a      	ldr	r2, [r3, #32]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f042 0201 	orr.w	r2, r2, #1
 8001270:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2220      	movs	r2, #32
 800127c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	4608      	mov	r0, r1
 80012a2:	4611      	mov	r1, r2
 80012a4:	461a      	mov	r2, r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	817b      	strh	r3, [r7, #10]
 80012aa:	460b      	mov	r3, r1
 80012ac:	813b      	strh	r3, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b20      	cmp	r3, #32
 80012bc:	f040 80f9 	bne.w	80014b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d002      	beq.n	80012cc <HAL_I2C_Mem_Write+0x34>
 80012c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d105      	bne.n	80012d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	e0ed      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d101      	bne.n	80012e6 <HAL_I2C_Mem_Write+0x4e>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e0e6      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012ee:	f7ff fc3d 	bl	8000b6c <HAL_GetTick>
 80012f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	9300      	str	r3, [sp, #0]
 80012f8:	2319      	movs	r3, #25
 80012fa:	2201      	movs	r2, #1
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f955 	bl	80015b0 <I2C_WaitOnFlagUntilTimeout>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e0d1      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2221      	movs	r2, #33	; 0x21
 8001314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2240      	movs	r2, #64	; 0x40
 800131c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6a3a      	ldr	r2, [r7, #32]
 800132a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001330:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2200      	movs	r2, #0
 8001336:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001338:	88f8      	ldrh	r0, [r7, #6]
 800133a:	893a      	ldrh	r2, [r7, #8]
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	4603      	mov	r3, r0
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f000 f8b9 	bl	80014c0 <I2C_RequestMemoryWrite>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e0a9      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001364:	b29b      	uxth	r3, r3
 8001366:	2bff      	cmp	r3, #255	; 0xff
 8001368:	d90e      	bls.n	8001388 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	22ff      	movs	r2, #255	; 0xff
 800136e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001374:	b2da      	uxtb	r2, r3
 8001376:	8979      	ldrh	r1, [r7, #10]
 8001378:	2300      	movs	r3, #0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001380:	68f8      	ldr	r0, [r7, #12]
 8001382:	f000 fad9 	bl	8001938 <I2C_TransferConfig>
 8001386:	e00f      	b.n	80013a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800138c:	b29a      	uxth	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001396:	b2da      	uxtb	r2, r3
 8001398:	8979      	ldrh	r1, [r7, #10]
 800139a:	2300      	movs	r3, #0
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 fac8 	bl	8001938 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f000 f958 	bl	8001662 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e07b      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c0:	781a      	ldrb	r2, [r3, #0]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3b01      	subs	r3, #1
 80013da:	b29a      	uxth	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e4:	3b01      	subs	r3, #1
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d034      	beq.n	8001460 <HAL_I2C_Mem_Write+0x1c8>
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d130      	bne.n	8001460 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001404:	2200      	movs	r2, #0
 8001406:	2180      	movs	r1, #128	; 0x80
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f8d1 	bl	80015b0 <I2C_WaitOnFlagUntilTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001414:	2301      	movs	r3, #1
 8001416:	e04d      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800141c:	b29b      	uxth	r3, r3
 800141e:	2bff      	cmp	r3, #255	; 0xff
 8001420:	d90e      	bls.n	8001440 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	22ff      	movs	r2, #255	; 0xff
 8001426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800142c:	b2da      	uxtb	r2, r3
 800142e:	8979      	ldrh	r1, [r7, #10]
 8001430:	2300      	movs	r3, #0
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 fa7d 	bl	8001938 <I2C_TransferConfig>
 800143e:	e00f      	b.n	8001460 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001444:	b29a      	uxth	r2, r3
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800144e:	b2da      	uxtb	r2, r3
 8001450:	8979      	ldrh	r1, [r7, #10]
 8001452:	2300      	movs	r3, #0
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fa6c 	bl	8001938 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001464:	b29b      	uxth	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d19e      	bne.n	80013a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800146e:	68f8      	ldr	r0, [r7, #12]
 8001470:	f000 f93e 	bl	80016f0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e01a      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2220      	movs	r2, #32
 8001484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6859      	ldr	r1, [r3, #4]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_I2C_Mem_Write+0x224>)
 8001492:	400b      	ands	r3, r1
 8001494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2220      	movs	r2, #32
 800149a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e000      	b.n	80014b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80014b2:	2302      	movs	r3, #2
  }
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	fe00e800 	.word	0xfe00e800

080014c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af02      	add	r7, sp, #8
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	4608      	mov	r0, r1
 80014ca:	4611      	mov	r1, r2
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	817b      	strh	r3, [r7, #10]
 80014d2:	460b      	mov	r3, r1
 80014d4:	813b      	strh	r3, [r7, #8]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	8979      	ldrh	r1, [r7, #10]
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <I2C_RequestMemoryWrite+0xa4>)
 80014e2:	9300      	str	r3, [sp, #0]
 80014e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f000 fa25 	bl	8001938 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	69b9      	ldr	r1, [r7, #24]
 80014f2:	68f8      	ldr	r0, [r7, #12]
 80014f4:	f000 f8b5 	bl	8001662 <I2C_WaitOnTXISFlagUntilTimeout>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e02c      	b.n	800155c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d105      	bne.n	8001514 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001508:	893b      	ldrh	r3, [r7, #8]
 800150a:	b2da      	uxtb	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	629a      	str	r2, [r3, #40]	; 0x28
 8001512:	e015      	b.n	8001540 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001514:	893b      	ldrh	r3, [r7, #8]
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	b2da      	uxtb	r2, r3
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001522:	69fa      	ldr	r2, [r7, #28]
 8001524:	69b9      	ldr	r1, [r7, #24]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 f89b 	bl	8001662 <I2C_WaitOnTXISFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e012      	b.n	800155c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001536:	893b      	ldrh	r3, [r7, #8]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	; 0x80
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f000 f830 	bl	80015b0 <I2C_WaitOnFlagUntilTimeout>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800155a:	2300      	movs	r3, #0
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	80002000 	.word	0x80002000

08001568 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b02      	cmp	r3, #2
 800157c:	d103      	bne.n	8001586 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2200      	movs	r2, #0
 8001584:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d007      	beq.n	80015a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699a      	ldr	r2, [r3, #24]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f042 0201 	orr.w	r2, r2, #1
 80015a2:	619a      	str	r2, [r3, #24]
  }
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80015c0:	e03b      	b.n	800163a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	6839      	ldr	r1, [r7, #0]
 80015c6:	68f8      	ldr	r0, [r7, #12]
 80015c8:	f000 f8d6 	bl	8001778 <I2C_IsErrorOccurred>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e041      	b.n	800165a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015dc:	d02d      	beq.n	800163a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015de:	f7ff fac5 	bl	8000b6c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	683a      	ldr	r2, [r7, #0]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d302      	bcc.n	80015f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d122      	bne.n	800163a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	4013      	ands	r3, r2
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	429a      	cmp	r2, r3
 8001602:	bf0c      	ite	eq
 8001604:	2301      	moveq	r3, #1
 8001606:	2300      	movne	r3, #0
 8001608:	b2db      	uxtb	r3, r3
 800160a:	461a      	mov	r2, r3
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	429a      	cmp	r2, r3
 8001610:	d113      	bne.n	800163a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001616:	f043 0220 	orr.w	r2, r3, #32
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2220      	movs	r2, #32
 8001622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	699a      	ldr	r2, [r3, #24]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4013      	ands	r3, r2
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	429a      	cmp	r2, r3
 8001648:	bf0c      	ite	eq
 800164a:	2301      	moveq	r3, #1
 800164c:	2300      	movne	r3, #0
 800164e:	b2db      	uxtb	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	429a      	cmp	r2, r3
 8001656:	d0b4      	beq.n	80015c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800166e:	e033      	b.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f000 f87f 	bl	8001778 <I2C_IsErrorOccurred>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e031      	b.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800168a:	d025      	beq.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800168c:	f7ff fa6e 	bl	8000b6c <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	429a      	cmp	r2, r3
 800169a:	d302      	bcc.n	80016a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11a      	bne.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d013      	beq.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b4:	f043 0220 	orr.w	r2, r3, #32
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2220      	movs	r2, #32
 80016c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e007      	b.n	80016e8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699b      	ldr	r3, [r3, #24]
 80016de:	f003 0302 	and.w	r3, r3, #2
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d1c4      	bne.n	8001670 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016fc:	e02f      	b.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f838 	bl	8001778 <I2C_IsErrorOccurred>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e02d      	b.n	800176e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001712:	f7ff fa2b 	bl	8000b6c <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	429a      	cmp	r2, r3
 8001720:	d302      	bcc.n	8001728 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d11a      	bne.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0320 	and.w	r3, r3, #32
 8001732:	2b20      	cmp	r3, #32
 8001734:	d013      	beq.n	800175e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173a:	f043 0220 	orr.w	r2, r3, #32
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e007      	b.n	800176e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0320 	and.w	r3, r3, #32
 8001768:	2b20      	cmp	r3, #32
 800176a:	d1c8      	bne.n	80016fe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3710      	adds	r7, #16
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001784:	2300      	movs	r3, #0
 8001786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d068      	beq.n	8001876 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2210      	movs	r2, #16
 80017aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80017ac:	e049      	b.n	8001842 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b4:	d045      	beq.n	8001842 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80017b6:	f7ff f9d9 	bl	8000b6c <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d302      	bcc.n	80017cc <I2C_IsErrorOccurred+0x54>
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d13a      	bne.n	8001842 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80017de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017ee:	d121      	bne.n	8001834 <I2C_IsErrorOccurred+0xbc>
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017f6:	d01d      	beq.n	8001834 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80017f8:	7cfb      	ldrb	r3, [r7, #19]
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d01a      	beq.n	8001834 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800180e:	f7ff f9ad 	bl	8000b6c <HAL_GetTick>
 8001812:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001814:	e00e      	b.n	8001834 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001816:	f7ff f9a9 	bl	8000b6c <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	69fb      	ldr	r3, [r7, #28]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b19      	cmp	r3, #25
 8001822:	d907      	bls.n	8001834 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	f043 0320 	orr.w	r3, r3, #32
 800182a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001832:	e006      	b.n	8001842 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b20      	cmp	r3, #32
 8001840:	d1e9      	bne.n	8001816 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	f003 0320 	and.w	r3, r3, #32
 800184c:	2b20      	cmp	r3, #32
 800184e:	d003      	beq.n	8001858 <I2C_IsErrorOccurred+0xe0>
 8001850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0aa      	beq.n	80017ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185c:	2b00      	cmp	r3, #0
 800185e:	d103      	bne.n	8001868 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2220      	movs	r2, #32
 8001866:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f043 0304 	orr.w	r3, r3, #4
 800186e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001884:	2b00      	cmp	r3, #0
 8001886:	d00b      	beq.n	80018a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001888:	6a3b      	ldr	r3, [r7, #32]
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018a0:	69bb      	ldr	r3, [r7, #24]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00b      	beq.n	80018c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018aa:	6a3b      	ldr	r3, [r7, #32]
 80018ac:	f043 0308 	orr.w	r3, r3, #8
 80018b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00b      	beq.n	80018e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80018e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01c      	beq.n	8001926 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80018ec:	68f8      	ldr	r0, [r7, #12]
 80018ee:	f7ff fe3b 	bl	8001568 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <I2C_IsErrorOccurred+0x1bc>)
 80018fe:	400b      	ands	r3, r1
 8001900:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2220      	movs	r2, #32
 8001912:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	2200      	movs	r2, #0
 800191a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800192a:	4618      	mov	r0, r3
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	fe00e800 	.word	0xfe00e800

08001938 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	460b      	mov	r3, r1
 8001944:	817b      	strh	r3, [r7, #10]
 8001946:	4613      	mov	r3, r2
 8001948:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800194a:	897b      	ldrh	r3, [r7, #10]
 800194c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001950:	7a7b      	ldrb	r3, [r7, #9]
 8001952:	041b      	lsls	r3, r3, #16
 8001954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001958:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800195e:	6a3b      	ldr	r3, [r7, #32]
 8001960:	4313      	orrs	r3, r2
 8001962:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001966:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	6a3b      	ldr	r3, [r7, #32]
 8001970:	0d5b      	lsrs	r3, r3, #21
 8001972:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <I2C_TransferConfig+0x60>)
 8001978:	430b      	orrs	r3, r1
 800197a:	43db      	mvns	r3, r3
 800197c:	ea02 0103 	and.w	r1, r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	430a      	orrs	r2, r1
 8001988:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800198a:	bf00      	nop
 800198c:	371c      	adds	r7, #28
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	03ff63ff 	.word	0x03ff63ff

0800199c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d138      	bne.n	8001a24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019bc:	2302      	movs	r3, #2
 80019be:	e032      	b.n	8001a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6819      	ldr	r1, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	430a      	orrs	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f042 0201 	orr.w	r2, r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2220      	movs	r2, #32
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	e000      	b.n	8001a26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2302      	movs	r3, #2
  }
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	2b20      	cmp	r3, #32
 8001a46:	d139      	bne.n	8001abc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001a52:	2302      	movs	r3, #2
 8001a54:	e033      	b.n	8001abe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2224      	movs	r2, #36	; 0x24
 8001a62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001a84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	021b      	lsls	r3, r3, #8
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2220      	movs	r2, #32
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	e000      	b.n	8001abe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001abc:	2302      	movs	r3, #2
  }
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d141      	bne.n	8001b5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ada:	4b4b      	ldr	r3, [pc, #300]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ae6:	d131      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ae8:	4b47      	ldr	r3, [pc, #284]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aee:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b00:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2232      	movs	r2, #50	; 0x32
 8001b0e:	fb02 f303 	mul.w	r3, r2, r3
 8001b12:	4a3f      	ldr	r2, [pc, #252]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9b      	lsrs	r3, r3, #18
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b1e:	e002      	b.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b26:	4b38      	ldr	r3, [pc, #224]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b32:	d102      	bne.n	8001b3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f2      	bne.n	8001b20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b3a:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	695b      	ldr	r3, [r3, #20]
 8001b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b46:	d158      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e057      	b.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b4c:	4b2e      	ldr	r3, [pc, #184]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b5c:	e04d      	b.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b64:	d141      	bne.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b66:	4b28      	ldr	r3, [pc, #160]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b72:	d131      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b74:	4b24      	ldr	r3, [pc, #144]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b7a:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b84:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b8c:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b94:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2232      	movs	r2, #50	; 0x32
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	4a1c      	ldr	r2, [pc, #112]	; (8001c10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba4:	0c9b      	lsrs	r3, r3, #18
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001baa:	e002      	b.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbe:	d102      	bne.n	8001bc6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1f2      	bne.n	8001bac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd2:	d112      	bne.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e011      	b.n	8001bfc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001be8:	e007      	b.n	8001bfa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bf4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bf8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bfa:	2300      	movs	r3, #0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40007000 	.word	0x40007000
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	431bde83 	.word	0x431bde83

08001c14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	4a04      	ldr	r2, [pc, #16]	; (8001c30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c22:	6093      	str	r3, [r2, #8]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40007000 	.word	0x40007000

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e2fe      	b.n	8002244 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d075      	beq.n	8001d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4b97      	ldr	r3, [pc, #604]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4b94      	ldr	r3, [pc, #592]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b0c      	cmp	r3, #12
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3e>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x44>
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d05b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x108>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d157      	bne.n	8001d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e2d9      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x74>
 8001c9a:	4b85      	ldr	r3, [pc, #532]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a84      	ldr	r2, [pc, #528]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4b7f      	ldr	r3, [pc, #508]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4b7c      	ldr	r3, [pc, #496]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a7b      	ldr	r2, [pc, #492]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	4b78      	ldr	r3, [pc, #480]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a77      	ldr	r2, [pc, #476]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4b75      	ldr	r3, [pc, #468]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a74      	ldr	r2, [pc, #464]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff3e 	bl	8000b6c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe ff3a 	bl	8000b6c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e29e      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d06:	4b6a      	ldr	r3, [pc, #424]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7fe ff2a 	bl	8000b6c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7fe ff26 	bl	8000b6c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e28a      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d2e:	4b60      	ldr	r3, [pc, #384]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0xe8>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d075      	beq.n	8001e36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d54:	4b56      	ldr	r3, [pc, #344]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	d102      	bne.n	8001d6a <HAL_RCC_OscConfig+0x136>
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d002      	beq.n	8001d70 <HAL_RCC_OscConfig+0x13c>
 8001d6a:	69bb      	ldr	r3, [r7, #24]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d11f      	bne.n	8001db0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d70:	4b4f      	ldr	r3, [pc, #316]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_OscConfig+0x154>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e25d      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d88:	4b49      	ldr	r3, [pc, #292]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	4946      	ldr	r1, [pc, #280]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d9c:	4b45      	ldr	r3, [pc, #276]	; (8001eb4 <HAL_RCC_OscConfig+0x280>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fe97 	bl	8000ad4 <HAL_InitTick>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d043      	beq.n	8001e34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e249      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d023      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7fe fed2 	bl	8000b6c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dcc:	f7fe fece 	bl	8000b6c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e232      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dde:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b31      	ldr	r3, [pc, #196]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	061b      	lsls	r3, r3, #24
 8001df8:	492d      	ldr	r1, [pc, #180]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
 8001dfe:	e01a      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e00:	4b2b      	ldr	r3, [pc, #172]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a2a      	ldr	r2, [pc, #168]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7fe feae 	bl	8000b6c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e14:	f7fe feaa 	bl	8000b6c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e20e      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1e0>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d041      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d01c      	beq.n	8001e84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e52:	f043 0301 	orr.w	r3, r3, #1
 8001e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5a:	f7fe fe87 	bl	8000b6c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e62:	f7fe fe83 	bl	8000b6c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e1e7      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0ef      	beq.n	8001e62 <HAL_RCC_OscConfig+0x22e>
 8001e82:	e020      	b.n	8001ec6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8a:	4a09      	ldr	r2, [pc, #36]	; (8001eb0 <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	f023 0301 	bic.w	r3, r3, #1
 8001e90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7fe fe6a 	bl	8000b6c <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e9a:	e00d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9c:	f7fe fe66 	bl	8000b6c <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d906      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e1ca      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
 8001eae:	bf00      	nop
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb8:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1ea      	bne.n	8001e9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f000 80a6 	beq.w	8002020 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed8:	4b84      	ldr	r3, [pc, #528]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x2b4>
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x2b6>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d00d      	beq.n	8001f0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eee:	4b7f      	ldr	r3, [pc, #508]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a7e      	ldr	r2, [pc, #504]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
 8001efa:	4b7c      	ldr	r3, [pc, #496]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f06:	2301      	movs	r3, #1
 8001f08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f0a:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d118      	bne.n	8001f48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f16:	4b76      	ldr	r3, [pc, #472]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a75      	ldr	r2, [pc, #468]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7fe fe23 	bl	8000b6c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2a:	f7fe fe1f 	bl	8000b6c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e183      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3c:	4b6c      	ldr	r3, [pc, #432]	; (80020f0 <HAL_RCC_OscConfig+0x4bc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d108      	bne.n	8001f62 <HAL_RCC_OscConfig+0x32e>
 8001f50:	4b66      	ldr	r3, [pc, #408]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f56:	4a65      	ldr	r2, [pc, #404]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f60:	e024      	b.n	8001fac <HAL_RCC_OscConfig+0x378>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b05      	cmp	r3, #5
 8001f68:	d110      	bne.n	8001f8c <HAL_RCC_OscConfig+0x358>
 8001f6a:	4b60      	ldr	r3, [pc, #384]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a5e      	ldr	r2, [pc, #376]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f72:	f043 0304 	orr.w	r3, r3, #4
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f7a:	4b5c      	ldr	r3, [pc, #368]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a5a      	ldr	r2, [pc, #360]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f8a:	e00f      	b.n	8001fac <HAL_RCC_OscConfig+0x378>
 8001f8c:	4b57      	ldr	r3, [pc, #348]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a56      	ldr	r2, [pc, #344]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9c:	4b53      	ldr	r3, [pc, #332]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a52      	ldr	r2, [pc, #328]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001fa4:	f023 0304 	bic.w	r3, r3, #4
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d016      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fb4:	f7fe fdda 	bl	8000b6c <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fbc:	f7fe fdd6 	bl	8000b6c <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e138      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd2:	4b46      	ldr	r3, [pc, #280]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8001fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d0ed      	beq.n	8001fbc <HAL_RCC_OscConfig+0x388>
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe fdc3 	bl	8000b6c <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe fdbf 	bl	8000b6c <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e121      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002000:	4b3a      	ldr	r3, [pc, #232]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	2b00      	cmp	r3, #0
 800200c:	d1ed      	bne.n	8001fea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800200e:	7ffb      	ldrb	r3, [r7, #31]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002014:	4b35      	ldr	r3, [pc, #212]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002018:	4a34      	ldr	r2, [pc, #208]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 800201a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800201e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0320 	and.w	r3, r3, #32
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03c      	beq.n	80020a6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01c      	beq.n	800206e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002034:	4b2d      	ldr	r3, [pc, #180]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002036:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800203a:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002044:	f7fe fd92 	bl	8000b6c <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204c:	f7fe fd8e 	bl	8000b6c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e0f2      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800205e:	4b23      	ldr	r3, [pc, #140]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002060:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0ef      	beq.n	800204c <HAL_RCC_OscConfig+0x418>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800206e:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002074:	4a1d      	ldr	r2, [pc, #116]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 8002076:	f023 0301 	bic.w	r3, r3, #1
 800207a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7fe fd75 	bl	8000b6c <HAL_GetTick>
 8002082:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002086:	f7fe fd71 	bl	8000b6c <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0d5      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002098:	4b14      	ldr	r3, [pc, #80]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 800209a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1ef      	bne.n	8002086 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80c9 	beq.w	8002242 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	2b0c      	cmp	r3, #12
 80020ba:	f000 8083 	beq.w	80021c4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d15e      	bne.n	8002184 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_RCC_OscConfig+0x4b8>)
 80020cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d2:	f7fe fd4b 	bl	8000b6c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d8:	e00c      	b.n	80020f4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020da:	f7fe fd47 	bl	8000b6c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d905      	bls.n	80020f4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0ab      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f4:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1ec      	bne.n	80020da <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002100:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	4b52      	ldr	r3, [pc, #328]	; (8002250 <HAL_RCC_OscConfig+0x61c>)
 8002106:	4013      	ands	r3, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6a11      	ldr	r1, [r2, #32]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002110:	3a01      	subs	r2, #1
 8002112:	0112      	lsls	r2, r2, #4
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800211a:	0212      	lsls	r2, r2, #8
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002122:	0852      	lsrs	r2, r2, #1
 8002124:	3a01      	subs	r2, #1
 8002126:	0552      	lsls	r2, r2, #21
 8002128:	4311      	orrs	r1, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800212e:	0852      	lsrs	r2, r2, #1
 8002130:	3a01      	subs	r2, #1
 8002132:	0652      	lsls	r2, r2, #25
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800213a:	06d2      	lsls	r2, r2, #27
 800213c:	430a      	orrs	r2, r1
 800213e:	4943      	ldr	r1, [pc, #268]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002140:	4313      	orrs	r3, r2
 8002142:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a40      	ldr	r2, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800214e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002150:	4b3e      	ldr	r3, [pc, #248]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4a3d      	ldr	r2, [pc, #244]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215c:	f7fe fd06 	bl	8000b6c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002164:	f7fe fd02 	bl	8000b6c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e066      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002176:	4b35      	ldr	r3, [pc, #212]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x530>
 8002182:	e05e      	b.n	8002242 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a30      	ldr	r2, [pc, #192]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800218a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7fe fcec 	bl	8000b6c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7fe fce8 	bl	8000b6c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e04c      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021aa:	4b28      	ldr	r3, [pc, #160]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	4924      	ldr	r1, [pc, #144]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021bc:	4b25      	ldr	r3, [pc, #148]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80021be:	4013      	ands	r3, r2
 80021c0:	60cb      	str	r3, [r1, #12]
 80021c2:	e03e      	b.n	8002242 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e039      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021d0:	4b1e      	ldr	r3, [pc, #120]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 0203 	and.w	r2, r3, #3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d12c      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ee:	3b01      	subs	r3, #1
 80021f0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d123      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002200:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002202:	429a      	cmp	r2, r3
 8002204:	d11b      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002210:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d113      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	085b      	lsrs	r3, r3, #1
 8002222:	3b01      	subs	r3, #1
 8002224:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d109      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	019f800c 	.word	0x019f800c
 8002254:	feeefffc 	.word	0xfeeefffc

08002258 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b086      	sub	sp, #24
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e11e      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b91      	ldr	r3, [pc, #580]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d910      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b8e      	ldr	r3, [pc, #568]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	498c      	ldr	r1, [pc, #560]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b8a      	ldr	r3, [pc, #552]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d001      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e106      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d073      	beq.n	8002394 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d129      	bne.n	8002308 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b4:	4b81      	ldr	r3, [pc, #516]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e0f4      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022c4:	f000 f99e 	bl	8002604 <RCC_GetSysClockFreqFromPLLSource>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4a7c      	ldr	r2, [pc, #496]	; (80024c0 <HAL_RCC_ClockConfig+0x268>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d93f      	bls.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022d2:	4b7a      	ldr	r3, [pc, #488]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d033      	beq.n	8002352 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d12f      	bne.n	8002352 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022fa:	4a70      	ldr	r2, [pc, #448]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80022fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002300:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	617b      	str	r3, [r7, #20]
 8002306:	e024      	b.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d107      	bne.n	8002320 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002310:	4b6a      	ldr	r3, [pc, #424]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d109      	bne.n	8002330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0c6      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0be      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002330:	f000 f8ce 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4a61      	ldr	r2, [pc, #388]	; (80024c0 <HAL_RCC_ClockConfig+0x268>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d909      	bls.n	8002352 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800233e:	4b5f      	ldr	r3, [pc, #380]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002346:	4a5d      	ldr	r2, [pc, #372]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002348:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800234c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	f023 0203 	bic.w	r2, r3, #3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	4957      	ldr	r1, [pc, #348]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002360:	4313      	orrs	r3, r2
 8002362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002364:	f7fe fc02 	bl	8000b6c <HAL_GetTick>
 8002368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	e00a      	b.n	8002382 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800236c:	f7fe fbfe 	bl	8000b6c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	f241 3288 	movw	r2, #5000	; 0x1388
 800237a:	4293      	cmp	r3, r2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e095      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 020c 	and.w	r2, r3, #12
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	429a      	cmp	r2, r3
 8002392:	d1eb      	bne.n	800236c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a42      	ldr	r2, [pc, #264]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023b6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023c4:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023d2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b39      	ldr	r3, [pc, #228]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4936      	ldr	r1, [pc, #216]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
 80023e6:	e008      	b.n	80023fa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2b80      	cmp	r3, #128	; 0x80
 80023ec:	d105      	bne.n	80023fa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023ee:	4b33      	ldr	r3, [pc, #204]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	4a32      	ldr	r2, [pc, #200]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 80023f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023f8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023fa:	4b2f      	ldr	r3, [pc, #188]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d21d      	bcs.n	8002444 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002408:	4b2b      	ldr	r3, [pc, #172]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f023 020f 	bic.w	r2, r3, #15
 8002410:	4929      	ldr	r1, [pc, #164]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002418:	f7fe fba8 	bl	8000b6c <HAL_GetTick>
 800241c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800241e:	e00a      	b.n	8002436 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fba4 	bl	8000b6c <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	f241 3288 	movw	r2, #5000	; 0x1388
 800242e:	4293      	cmp	r3, r2
 8002430:	d901      	bls.n	8002436 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e03b      	b.n	80024ae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x260>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d1ed      	bne.n	8002420 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0304 	and.w	r3, r3, #4
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	4917      	ldr	r1, [pc, #92]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0308 	and.w	r3, r3, #8
 800246a:	2b00      	cmp	r3, #0
 800246c:	d009      	beq.n	8002482 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	490f      	ldr	r1, [pc, #60]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800247e:	4313      	orrs	r3, r2
 8002480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002482:	f000 f825 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002486:	4602      	mov	r2, r0
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_ClockConfig+0x264>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	490c      	ldr	r1, [pc, #48]	; (80024c4 <HAL_RCC_ClockConfig+0x26c>)
 8002494:	5ccb      	ldrb	r3, [r1, r3]
 8002496:	f003 031f 	and.w	r3, r3, #31
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <HAL_RCC_ClockConfig+0x270>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_RCC_ClockConfig+0x274>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fb14 	bl	8000ad4 <HAL_InitTick>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40022000 	.word	0x40022000
 80024bc:	40021000 	.word	0x40021000
 80024c0:	04c4b400 	.word	0x04c4b400
 80024c4:	08003df0 	.word	0x08003df0
 80024c8:	20000000 	.word	0x20000000
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b087      	sub	sp, #28
 80024d4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024d6:	4b2c      	ldr	r3, [pc, #176]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d102      	bne.n	80024e8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e2:	4b2a      	ldr	r3, [pc, #168]	; (800258c <HAL_RCC_GetSysClockFreq+0xbc>)
 80024e4:	613b      	str	r3, [r7, #16]
 80024e6:	e047      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024e8:	4b27      	ldr	r3, [pc, #156]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d102      	bne.n	80024fa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f4:	4b26      	ldr	r3, [pc, #152]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	e03e      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b0c      	cmp	r3, #12
 8002504:	d136      	bne.n	8002574 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002510:	4b1d      	ldr	r3, [pc, #116]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	091b      	lsrs	r3, r3, #4
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	3301      	adds	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d10c      	bne.n	800253e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002524:	4a1a      	ldr	r2, [pc, #104]	; (8002590 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	4a16      	ldr	r2, [pc, #88]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800252e:	68d2      	ldr	r2, [r2, #12]
 8002530:	0a12      	lsrs	r2, r2, #8
 8002532:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002536:	fb02 f303 	mul.w	r3, r2, r3
 800253a:	617b      	str	r3, [r7, #20]
      break;
 800253c:	e00c      	b.n	8002558 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	fbb2 f3f3 	udiv	r3, r2, r3
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002548:	68d2      	ldr	r2, [r2, #12]
 800254a:	0a12      	lsrs	r2, r2, #8
 800254c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	617b      	str	r3, [r7, #20]
      break;
 8002556:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCC_GetSysClockFreq+0xb8>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	0e5b      	lsrs	r3, r3, #25
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	3301      	adds	r3, #1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e001      	b.n	8002578 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002578:	693b      	ldr	r3, [r7, #16]
}
 800257a:	4618      	mov	r0, r3
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
 800258c:	00f42400 	.word	0x00f42400
 8002590:	016e3600 	.word	0x016e3600

08002594 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800259a:	681b      	ldr	r3, [r3, #0]
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	20000000 	.word	0x20000000

080025ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025b0:	f7ff fff0 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	; (80025d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	08003e00 	.word	0x08003e00

080025d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025dc:	f7ff ffda 	bl	8002594 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b06      	ldr	r3, [pc, #24]	; (80025fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0adb      	lsrs	r3, r3, #11
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4904      	ldr	r1, [pc, #16]	; (8002600 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	f003 031f 	and.w	r3, r3, #31
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	08003e00 	.word	0x08003e00

08002604 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002604:	b480      	push	{r7}
 8002606:	b087      	sub	sp, #28
 8002608:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800260a:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f003 0303 	and.w	r3, r3, #3
 8002612:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002614:	4b1b      	ldr	r3, [pc, #108]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d10c      	bne.n	8002642 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002628:	4a17      	ldr	r2, [pc, #92]	; (8002688 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	4a14      	ldr	r2, [pc, #80]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002632:	68d2      	ldr	r2, [r2, #12]
 8002634:	0a12      	lsrs	r2, r2, #8
 8002636:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	617b      	str	r3, [r7, #20]
    break;
 8002640:	e00c      	b.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	fbb2 f3f3 	udiv	r3, r2, r3
 800264a:	4a0e      	ldr	r2, [pc, #56]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800264c:	68d2      	ldr	r2, [r2, #12]
 800264e:	0a12      	lsrs	r2, r2, #8
 8002650:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002654:	fb02 f303 	mul.w	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
    break;
 800265a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800265c:	4b09      	ldr	r3, [pc, #36]	; (8002684 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800265e:	68db      	ldr	r3, [r3, #12]
 8002660:	0e5b      	lsrs	r3, r3, #25
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	3301      	adds	r3, #1
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002676:	687b      	ldr	r3, [r7, #4]
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	40021000 	.word	0x40021000
 8002688:	016e3600 	.word	0x016e3600
 800268c:	00f42400 	.word	0x00f42400

08002690 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002698:	2300      	movs	r3, #0
 800269a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800269c:	2300      	movs	r3, #0
 800269e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f000 8098 	beq.w	80027de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026be:	4b40      	ldr	r3, [pc, #256]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	4a3f      	ldr	r2, [pc, #252]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026c8:	6593      	str	r3, [r2, #88]	; 0x58
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026d6:	2301      	movs	r3, #1
 80026d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a39      	ldr	r2, [pc, #228]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026e6:	f7fe fa41 	bl	8000b6c <HAL_GetTick>
 80026ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ec:	e009      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ee:	f7fe fa3d 	bl	8000b6c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002700:	e005      	b.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ef      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800270e:	7cfb      	ldrb	r3, [r7, #19]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d159      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002714:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d01e      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	d019      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002730:	4b23      	ldr	r3, [pc, #140]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800273a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800273c:	4b20      	ldr	r3, [pc, #128]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800273e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	4a1b      	ldr	r2, [pc, #108]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002754:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800275c:	4a18      	ldr	r2, [pc, #96]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d016      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe f9fd 	bl	8000b6c <HAL_GetTick>
 8002772:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002774:	e00b      	b.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe f9f9 	bl	8000b6c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d902      	bls.n	800278e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	74fb      	strb	r3, [r7, #19]
            break;
 800278c:	e006      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800278e:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ec      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10b      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a2:	4b07      	ldr	r3, [pc, #28]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027b0:	4903      	ldr	r1, [pc, #12]	; (80027c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027b8:	e008      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ba:	7cfb      	ldrb	r3, [r7, #19]
 80027bc:	74bb      	strb	r3, [r7, #18]
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027cc:	7c7b      	ldrb	r3, [r7, #17]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d105      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027d2:	4ba7      	ldr	r3, [pc, #668]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d6:	4aa6      	ldr	r2, [pc, #664]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027ea:	4ba1      	ldr	r3, [pc, #644]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 0203 	bic.w	r2, r3, #3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	499d      	ldr	r1, [pc, #628]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800280c:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 020c 	bic.w	r2, r3, #12
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	4995      	ldr	r1, [pc, #596]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800282e:	4b90      	ldr	r3, [pc, #576]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	498c      	ldr	r1, [pc, #560]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002850:	4b87      	ldr	r3, [pc, #540]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	4984      	ldr	r1, [pc, #528]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002872:	4b7f      	ldr	r3, [pc, #508]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	497b      	ldr	r1, [pc, #492]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0320 	and.w	r3, r3, #32
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002894:	4b76      	ldr	r3, [pc, #472]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	4973      	ldr	r1, [pc, #460]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b6:	4b6e      	ldr	r3, [pc, #440]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	496a      	ldr	r1, [pc, #424]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d8:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	4962      	ldr	r1, [pc, #392]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fa:	4b5d      	ldr	r3, [pc, #372]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4959      	ldr	r1, [pc, #356]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800291c:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800291e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002922:	f023 0203 	bic.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	4951      	ldr	r1, [pc, #324]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800293e:	4b4c      	ldr	r3, [pc, #304]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	4948      	ldr	r1, [pc, #288]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002960:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	4940      	ldr	r1, [pc, #256]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a3a      	ldr	r2, [pc, #232]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002998:	4b35      	ldr	r3, [pc, #212]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	4932      	ldr	r1, [pc, #200]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b6:	d105      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b2d      	ldr	r3, [pc, #180]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a2c      	ldr	r2, [pc, #176]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	4924      	ldr	r1, [pc, #144]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b1f      	ldr	r3, [pc, #124]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a1e      	ldr	r2, [pc, #120]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d015      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a26:	d105      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b11      	ldr	r3, [pc, #68]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a10      	ldr	r2, [pc, #64]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d019      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a02      	ldr	r2, [pc, #8]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e002      	b.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a80:	4b29      	ldr	r3, [pc, #164]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	4926      	ldr	r1, [pc, #152]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002aa0:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a20      	ldr	r2, [pc, #128]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	4918      	ldr	r1, [pc, #96]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ad8:	4b13      	ldr	r3, [pc, #76]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a12      	ldr	r2, [pc, #72]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002af0:	4b0d      	ldr	r3, [pc, #52]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002af6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	490a      	ldr	r1, [pc, #40]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b10:	4b05      	ldr	r3, [pc, #20]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b1c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000

08002b2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e042      	b.n	8002bc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d106      	bne.n	8002b56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f7fd fee1 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2224      	movs	r2, #36	; 0x24
 8002b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fb24 	bl	80031c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f825 	bl	8002bcc <UART_SetConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d101      	bne.n	8002b8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e01b      	b.n	8002bc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002baa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f042 0201 	orr.w	r2, r2, #1
 8002bba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 fba3 	bl	8003308 <UART_CheckIdleState>
 8002bc2:	4603      	mov	r3, r0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bd0:	b08c      	sub	sp, #48	; 0x30
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	4baa      	ldr	r3, [pc, #680]	; (8002ea4 <UART_SetConfig+0x2d8>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	6812      	ldr	r2, [r2, #0]
 8002c02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c04:	430b      	orrs	r3, r1
 8002c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a9f      	ldr	r2, [pc, #636]	; (8002ea8 <UART_SetConfig+0x2dc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d004      	beq.n	8002c38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c34:	4313      	orrs	r3, r2
 8002c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c42:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	6812      	ldr	r2, [r2, #0]
 8002c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f023 010f 	bic.w	r1, r3, #15
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a90      	ldr	r2, [pc, #576]	; (8002eac <UART_SetConfig+0x2e0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d125      	bne.n	8002cbc <UART_SetConfig+0xf0>
 8002c70:	4b8f      	ldr	r3, [pc, #572]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d81a      	bhi.n	8002cb4 <UART_SetConfig+0xe8>
 8002c7e:	a201      	add	r2, pc, #4	; (adr r2, 8002c84 <UART_SetConfig+0xb8>)
 8002c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c84:	08002c95 	.word	0x08002c95
 8002c88:	08002ca5 	.word	0x08002ca5
 8002c8c:	08002c9d 	.word	0x08002c9d
 8002c90:	08002cad 	.word	0x08002cad
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9a:	e116      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca2:	e112      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002caa:	e10e      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002cac:	2308      	movs	r3, #8
 8002cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cb2:	e10a      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002cb4:	2310      	movs	r3, #16
 8002cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cba:	e106      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a7c      	ldr	r2, [pc, #496]	; (8002eb4 <UART_SetConfig+0x2e8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d138      	bne.n	8002d38 <UART_SetConfig+0x16c>
 8002cc6:	4b7a      	ldr	r3, [pc, #488]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b0c      	cmp	r3, #12
 8002cd2:	d82d      	bhi.n	8002d30 <UART_SetConfig+0x164>
 8002cd4:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <UART_SetConfig+0x110>)
 8002cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cda:	bf00      	nop
 8002cdc:	08002d11 	.word	0x08002d11
 8002ce0:	08002d31 	.word	0x08002d31
 8002ce4:	08002d31 	.word	0x08002d31
 8002ce8:	08002d31 	.word	0x08002d31
 8002cec:	08002d21 	.word	0x08002d21
 8002cf0:	08002d31 	.word	0x08002d31
 8002cf4:	08002d31 	.word	0x08002d31
 8002cf8:	08002d31 	.word	0x08002d31
 8002cfc:	08002d19 	.word	0x08002d19
 8002d00:	08002d31 	.word	0x08002d31
 8002d04:	08002d31 	.word	0x08002d31
 8002d08:	08002d31 	.word	0x08002d31
 8002d0c:	08002d29 	.word	0x08002d29
 8002d10:	2300      	movs	r3, #0
 8002d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d16:	e0d8      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1e:	e0d4      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d20:	2304      	movs	r3, #4
 8002d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d26:	e0d0      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d28:	2308      	movs	r3, #8
 8002d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2e:	e0cc      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d30:	2310      	movs	r3, #16
 8002d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d36:	e0c8      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a5e      	ldr	r2, [pc, #376]	; (8002eb8 <UART_SetConfig+0x2ec>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d125      	bne.n	8002d8e <UART_SetConfig+0x1c2>
 8002d42:	4b5b      	ldr	r3, [pc, #364]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d4c:	2b30      	cmp	r3, #48	; 0x30
 8002d4e:	d016      	beq.n	8002d7e <UART_SetConfig+0x1b2>
 8002d50:	2b30      	cmp	r3, #48	; 0x30
 8002d52:	d818      	bhi.n	8002d86 <UART_SetConfig+0x1ba>
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d00a      	beq.n	8002d6e <UART_SetConfig+0x1a2>
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d814      	bhi.n	8002d86 <UART_SetConfig+0x1ba>
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d002      	beq.n	8002d66 <UART_SetConfig+0x19a>
 8002d60:	2b10      	cmp	r3, #16
 8002d62:	d008      	beq.n	8002d76 <UART_SetConfig+0x1aa>
 8002d64:	e00f      	b.n	8002d86 <UART_SetConfig+0x1ba>
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d6c:	e0ad      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d74:	e0a9      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d76:	2304      	movs	r3, #4
 8002d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d7c:	e0a5      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d7e:	2308      	movs	r3, #8
 8002d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d84:	e0a1      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d86:	2310      	movs	r3, #16
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d8c:	e09d      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4a      	ldr	r2, [pc, #296]	; (8002ebc <UART_SetConfig+0x2f0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d125      	bne.n	8002de4 <UART_SetConfig+0x218>
 8002d98:	4b45      	ldr	r3, [pc, #276]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002da2:	2bc0      	cmp	r3, #192	; 0xc0
 8002da4:	d016      	beq.n	8002dd4 <UART_SetConfig+0x208>
 8002da6:	2bc0      	cmp	r3, #192	; 0xc0
 8002da8:	d818      	bhi.n	8002ddc <UART_SetConfig+0x210>
 8002daa:	2b80      	cmp	r3, #128	; 0x80
 8002dac:	d00a      	beq.n	8002dc4 <UART_SetConfig+0x1f8>
 8002dae:	2b80      	cmp	r3, #128	; 0x80
 8002db0:	d814      	bhi.n	8002ddc <UART_SetConfig+0x210>
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <UART_SetConfig+0x1f0>
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d008      	beq.n	8002dcc <UART_SetConfig+0x200>
 8002dba:	e00f      	b.n	8002ddc <UART_SetConfig+0x210>
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc2:	e082      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dca:	e07e      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002dcc:	2304      	movs	r3, #4
 8002dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd2:	e07a      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002dd4:	2308      	movs	r3, #8
 8002dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dda:	e076      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002ddc:	2310      	movs	r3, #16
 8002dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002de2:	e072      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a35      	ldr	r2, [pc, #212]	; (8002ec0 <UART_SetConfig+0x2f4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d12a      	bne.n	8002e44 <UART_SetConfig+0x278>
 8002dee:	4b30      	ldr	r3, [pc, #192]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfc:	d01a      	beq.n	8002e34 <UART_SetConfig+0x268>
 8002dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e02:	d81b      	bhi.n	8002e3c <UART_SetConfig+0x270>
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d00c      	beq.n	8002e24 <UART_SetConfig+0x258>
 8002e0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e0e:	d815      	bhi.n	8002e3c <UART_SetConfig+0x270>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <UART_SetConfig+0x250>
 8002e14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e18:	d008      	beq.n	8002e2c <UART_SetConfig+0x260>
 8002e1a:	e00f      	b.n	8002e3c <UART_SetConfig+0x270>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e22:	e052      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e2a:	e04e      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e32:	e04a      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e34:	2308      	movs	r3, #8
 8002e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e3a:	e046      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e42:	e042      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a17      	ldr	r2, [pc, #92]	; (8002ea8 <UART_SetConfig+0x2dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d13a      	bne.n	8002ec4 <UART_SetConfig+0x2f8>
 8002e4e:	4b18      	ldr	r3, [pc, #96]	; (8002eb0 <UART_SetConfig+0x2e4>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e5c:	d01a      	beq.n	8002e94 <UART_SetConfig+0x2c8>
 8002e5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e62:	d81b      	bhi.n	8002e9c <UART_SetConfig+0x2d0>
 8002e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e68:	d00c      	beq.n	8002e84 <UART_SetConfig+0x2b8>
 8002e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e6e:	d815      	bhi.n	8002e9c <UART_SetConfig+0x2d0>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <UART_SetConfig+0x2b0>
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e78:	d008      	beq.n	8002e8c <UART_SetConfig+0x2c0>
 8002e7a:	e00f      	b.n	8002e9c <UART_SetConfig+0x2d0>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e82:	e022      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8a:	e01e      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e92:	e01a      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e94:	2308      	movs	r3, #8
 8002e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e9a:	e016      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ea2:	e012      	b.n	8002eca <UART_SetConfig+0x2fe>
 8002ea4:	cfff69f3 	.word	0xcfff69f3
 8002ea8:	40008000 	.word	0x40008000
 8002eac:	40013800 	.word	0x40013800
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40004400 	.word	0x40004400
 8002eb8:	40004800 	.word	0x40004800
 8002ebc:	40004c00 	.word	0x40004c00
 8002ec0:	40005000 	.word	0x40005000
 8002ec4:	2310      	movs	r3, #16
 8002ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4aae      	ldr	r2, [pc, #696]	; (8003188 <UART_SetConfig+0x5bc>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	f040 8097 	bne.w	8003004 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ed6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d823      	bhi.n	8002f26 <UART_SetConfig+0x35a>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <UART_SetConfig+0x318>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002f09 	.word	0x08002f09
 8002ee8:	08002f27 	.word	0x08002f27
 8002eec:	08002f11 	.word	0x08002f11
 8002ef0:	08002f27 	.word	0x08002f27
 8002ef4:	08002f17 	.word	0x08002f17
 8002ef8:	08002f27 	.word	0x08002f27
 8002efc:	08002f27 	.word	0x08002f27
 8002f00:	08002f27 	.word	0x08002f27
 8002f04:	08002f1f 	.word	0x08002f1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f08:	f7ff fb50 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8002f0c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f0e:	e010      	b.n	8002f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f10:	4b9e      	ldr	r3, [pc, #632]	; (800318c <UART_SetConfig+0x5c0>)
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f14:	e00d      	b.n	8002f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f16:	f7ff fadb 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 8002f1a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f1c:	e009      	b.n	8002f32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f24:	e005      	b.n	8002f32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 8130 	beq.w	800319a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3e:	4a94      	ldr	r2, [pc, #592]	; (8003190 <UART_SetConfig+0x5c4>)
 8002f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f44:	461a      	mov	r2, r3
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	4413      	add	r3, r2
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d305      	bcc.n	8002f6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d903      	bls.n	8002f72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f70:	e113      	b.n	800319a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	2200      	movs	r2, #0
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	60fa      	str	r2, [r7, #12]
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7e:	4a84      	ldr	r2, [pc, #528]	; (8003190 <UART_SetConfig+0x5c4>)
 8002f80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	2200      	movs	r2, #0
 8002f88:	603b      	str	r3, [r7, #0]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f94:	f7fd f940 	bl	8000218 <__aeabi_uldivmod>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	460b      	mov	r3, r1
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	f04f 0200 	mov.w	r2, #0
 8002fa4:	f04f 0300 	mov.w	r3, #0
 8002fa8:	020b      	lsls	r3, r1, #8
 8002faa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fae:	0202      	lsls	r2, r0, #8
 8002fb0:	6979      	ldr	r1, [r7, #20]
 8002fb2:	6849      	ldr	r1, [r1, #4]
 8002fb4:	0849      	lsrs	r1, r1, #1
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	460c      	mov	r4, r1
 8002fba:	4605      	mov	r5, r0
 8002fbc:	eb12 0804 	adds.w	r8, r2, r4
 8002fc0:	eb43 0905 	adc.w	r9, r3, r5
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	469a      	mov	sl, r3
 8002fcc:	4693      	mov	fp, r2
 8002fce:	4652      	mov	r2, sl
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	f7fd f91f 	bl	8000218 <__aeabi_uldivmod>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	460b      	mov	r3, r1
 8002fde:	4613      	mov	r3, r2
 8002fe0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe8:	d308      	bcc.n	8002ffc <UART_SetConfig+0x430>
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff0:	d204      	bcs.n	8002ffc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6a3a      	ldr	r2, [r7, #32]
 8002ff8:	60da      	str	r2, [r3, #12]
 8002ffa:	e0ce      	b.n	800319a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003002:	e0ca      	b.n	800319a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800300c:	d166      	bne.n	80030dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800300e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003012:	2b08      	cmp	r3, #8
 8003014:	d827      	bhi.n	8003066 <UART_SetConfig+0x49a>
 8003016:	a201      	add	r2, pc, #4	; (adr r2, 800301c <UART_SetConfig+0x450>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003067 	.word	0x08003067
 800302c:	08003057 	.word	0x08003057
 8003030:	08003067 	.word	0x08003067
 8003034:	08003067 	.word	0x08003067
 8003038:	08003067 	.word	0x08003067
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7ff fab4 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003044:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003046:	e014      	b.n	8003072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff fac6 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 800304c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800304e:	e010      	b.n	8003072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b4e      	ldr	r3, [pc, #312]	; (800318c <UART_SetConfig+0x5c0>)
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003054:	e00d      	b.n	8003072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7ff fa3b 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800305a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800305c:	e009      	b.n	8003072 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003064:	e005      	b.n	8003072 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003070:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8090 	beq.w	800319a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307e:	4a44      	ldr	r2, [pc, #272]	; (8003190 <UART_SetConfig+0x5c4>)
 8003080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003084:	461a      	mov	r2, r3
 8003086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003088:	fbb3 f3f2 	udiv	r3, r3, r2
 800308c:	005a      	lsls	r2, r3, #1
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	441a      	add	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030a0:	6a3b      	ldr	r3, [r7, #32]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d916      	bls.n	80030d4 <UART_SetConfig+0x508>
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d212      	bcs.n	80030d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f023 030f 	bic.w	r3, r3, #15
 80030b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	085b      	lsrs	r3, r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	8bfb      	ldrh	r3, [r7, #30]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	8bfa      	ldrh	r2, [r7, #30]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	e062      	b.n	800319a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030da:	e05e      	b.n	800319a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030e0:	2b08      	cmp	r3, #8
 80030e2:	d828      	bhi.n	8003136 <UART_SetConfig+0x56a>
 80030e4:	a201      	add	r2, pc, #4	; (adr r2, 80030ec <UART_SetConfig+0x520>)
 80030e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ea:	bf00      	nop
 80030ec:	08003111 	.word	0x08003111
 80030f0:	08003119 	.word	0x08003119
 80030f4:	08003121 	.word	0x08003121
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003127 	.word	0x08003127
 8003100:	08003137 	.word	0x08003137
 8003104:	08003137 	.word	0x08003137
 8003108:	08003137 	.word	0x08003137
 800310c:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003110:	f7ff fa4c 	bl	80025ac <HAL_RCC_GetPCLK1Freq>
 8003114:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003116:	e014      	b.n	8003142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003118:	f7ff fa5e 	bl	80025d8 <HAL_RCC_GetPCLK2Freq>
 800311c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800311e:	e010      	b.n	8003142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b1a      	ldr	r3, [pc, #104]	; (800318c <UART_SetConfig+0x5c0>)
 8003122:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003124:	e00d      	b.n	8003142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7ff f9d3 	bl	80024d0 <HAL_RCC_GetSysClockFreq>
 800312a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003134:	e005      	b.n	8003142 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003140:	bf00      	nop
    }

    if (pclk != 0U)
 8003142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003144:	2b00      	cmp	r3, #0
 8003146:	d028      	beq.n	800319a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314c:	4a10      	ldr	r2, [pc, #64]	; (8003190 <UART_SetConfig+0x5c4>)
 800314e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003152:	461a      	mov	r2, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	fbb3 f2f2 	udiv	r2, r3, r2
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	441a      	add	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	d910      	bls.n	8003194 <UART_SetConfig+0x5c8>
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d20c      	bcs.n	8003194 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	b29a      	uxth	r2, r3
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	e009      	b.n	800319a <UART_SetConfig+0x5ce>
 8003186:	bf00      	nop
 8003188:	40008000 	.word	0x40008000
 800318c:	00f42400 	.word	0x00f42400
 8003190:	08003e08 	.word	0x08003e08
      }
      else
      {
        ret = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2201      	movs	r2, #1
 800319e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	2200      	movs	r2, #0
 80031ae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2200      	movs	r2, #0
 80031b4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80031b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3730      	adds	r7, #48	; 0x30
 80031be:	46bd      	mov	sp, r7
 80031c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	f003 0308 	and.w	r3, r3, #8
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003214:	f003 0302 	and.w	r3, r3, #2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d10a      	bne.n	80032da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b098      	sub	sp, #96	; 0x60
 800330c:	af02      	add	r7, sp, #8
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003318:	f7fd fc28 	bl	8000b6c <HAL_GetTick>
 800331c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d12f      	bne.n	800338c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f88e 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d022      	beq.n	800338c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800334e:	e853 3f00 	ldrex	r3, [r3]
 8003352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335a:	653b      	str	r3, [r7, #80]	; 0x50
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003364:	647b      	str	r3, [r7, #68]	; 0x44
 8003366:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800336a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800336c:	e841 2300 	strex	r3, r2, [r1]
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1e6      	bne.n	8003346 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2220      	movs	r2, #32
 800337c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e063      	b.n	8003454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d149      	bne.n	800342e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033a2:	2200      	movs	r2, #0
 80033a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 f857 	bl	800345c <UART_WaitOnFlagUntilTimeout>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d03c      	beq.n	800342e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	e853 3f00 	ldrex	r3, [r3]
 80033c0:	623b      	str	r3, [r7, #32]
   return(result);
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	461a      	mov	r2, r3
 80033d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d2:	633b      	str	r3, [r7, #48]	; 0x30
 80033d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e6      	bne.n	80033b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f023 0301 	bic.w	r3, r3, #1
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003406:	61fa      	str	r2, [r7, #28]
 8003408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	69b9      	ldr	r1, [r7, #24]
 800340c:	69fa      	ldr	r2, [r7, #28]
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	617b      	str	r3, [r7, #20]
   return(result);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e5      	bne.n	80033e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e012      	b.n	8003454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2220      	movs	r2, #32
 8003432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3758      	adds	r7, #88	; 0x58
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346c:	e04f      	b.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003474:	d04b      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003476:	f7fd fb79 	bl	8000b6c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	429a      	cmp	r2, r3
 8003484:	d302      	bcc.n	800348c <UART_WaitOnFlagUntilTimeout+0x30>
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e04e      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d037      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	2b80      	cmp	r3, #128	; 0x80
 80034a2:	d034      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	2b40      	cmp	r3, #64	; 0x40
 80034a8:	d031      	beq.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	f003 0308 	and.w	r3, r3, #8
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d110      	bne.n	80034da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2208      	movs	r2, #8
 80034be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f838 	bl	8003536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2208      	movs	r2, #8
 80034ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e029      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034e8:	d111      	bne.n	800350e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f81e 	bl	8003536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e00f      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4013      	ands	r3, r2
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	bf0c      	ite	eq
 800351e:	2301      	moveq	r3, #1
 8003520:	2300      	movne	r3, #0
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	79fb      	ldrb	r3, [r7, #7]
 8003528:	429a      	cmp	r2, r3
 800352a:	d0a0      	beq.n	800346e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003536:	b480      	push	{r7}
 8003538:	b095      	sub	sp, #84	; 0x54
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003546:	e853 3f00 	ldrex	r3, [r3]
 800354a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	461a      	mov	r2, r3
 800355a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800355c:	643b      	str	r3, [r7, #64]	; 0x40
 800355e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003560:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003562:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003564:	e841 2300 	strex	r3, r2, [r1]
 8003568:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800356a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356c:	2b00      	cmp	r3, #0
 800356e:	d1e6      	bne.n	800353e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	3308      	adds	r3, #8
 8003576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	e853 3f00 	ldrex	r3, [r3]
 800357e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003586:	f023 0301 	bic.w	r3, r3, #1
 800358a:	64bb      	str	r3, [r7, #72]	; 0x48
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	3308      	adds	r3, #8
 8003592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003594:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800359a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800359c:	e841 2300 	strex	r3, r2, [r1]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e3      	bne.n	8003570 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d118      	bne.n	80035e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	e853 3f00 	ldrex	r3, [r3]
 80035bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f023 0310 	bic.w	r3, r3, #16
 80035c4:	647b      	str	r3, [r7, #68]	; 0x44
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	461a      	mov	r2, r3
 80035cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ce:	61bb      	str	r3, [r7, #24]
 80035d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	6979      	ldr	r1, [r7, #20]
 80035d4:	69ba      	ldr	r2, [r7, #24]
 80035d6:	e841 2300 	strex	r3, r2, [r1]
 80035da:	613b      	str	r3, [r7, #16]
   return(result);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1e6      	bne.n	80035b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80035f6:	bf00      	nop
 80035f8:	3754      	adds	r7, #84	; 0x54
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003602:	b480      	push	{r7}
 8003604:	b085      	sub	sp, #20
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003610:	2b01      	cmp	r3, #1
 8003612:	d101      	bne.n	8003618 <HAL_UARTEx_DisableFifoMode+0x16>
 8003614:	2302      	movs	r3, #2
 8003616:	e027      	b.n	8003668 <HAL_UARTEx_DisableFifoMode+0x66>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2224      	movs	r2, #36	; 0x24
 8003624:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003646:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003688:	2302      	movs	r3, #2
 800368a:	e02d      	b.n	80036e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2224      	movs	r2, #36	; 0x24
 8003698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f84f 	bl	800376c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003700:	2b01      	cmp	r3, #1
 8003702:	d101      	bne.n	8003708 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003704:	2302      	movs	r3, #2
 8003706:	e02d      	b.n	8003764 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2224      	movs	r2, #36	; 0x24
 8003714:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	430a      	orrs	r2, r1
 8003742:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f811 	bl	800376c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003762:	2300      	movs	r3, #0
}
 8003764:	4618      	mov	r0, r3
 8003766:	3710      	adds	r7, #16
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003778:	2b00      	cmp	r3, #0
 800377a:	d108      	bne.n	800378e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800378c:	e031      	b.n	80037f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800378e:	2308      	movs	r3, #8
 8003790:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003792:	2308      	movs	r3, #8
 8003794:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	0e5b      	lsrs	r3, r3, #25
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	f003 0307 	and.w	r3, r3, #7
 80037a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	0f5b      	lsrs	r3, r3, #29
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	f003 0307 	and.w	r3, r3, #7
 80037b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037b6:	7bbb      	ldrb	r3, [r7, #14]
 80037b8:	7b3a      	ldrb	r2, [r7, #12]
 80037ba:	4911      	ldr	r1, [pc, #68]	; (8003800 <UARTEx_SetNbDataToProcess+0x94>)
 80037bc:	5c8a      	ldrb	r2, [r1, r2]
 80037be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80037c2:	7b3a      	ldrb	r2, [r7, #12]
 80037c4:	490f      	ldr	r1, [pc, #60]	; (8003804 <UARTEx_SetNbDataToProcess+0x98>)
 80037c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80037c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	7b7a      	ldrb	r2, [r7, #13]
 80037d8:	4909      	ldr	r1, [pc, #36]	; (8003800 <UARTEx_SetNbDataToProcess+0x94>)
 80037da:	5c8a      	ldrb	r2, [r1, r2]
 80037dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80037e0:	7b7a      	ldrb	r2, [r7, #13]
 80037e2:	4908      	ldr	r1, [pc, #32]	; (8003804 <UARTEx_SetNbDataToProcess+0x98>)
 80037e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80037e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	08003e20 	.word	0x08003e20
 8003804:	08003e28 	.word	0x08003e28

08003808 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
	...

08003818 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b086      	sub	sp, #24
 800381c:	af04      	add	r7, sp, #16
 800381e:	4603      	mov	r3, r0
 8003820:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8003822:	f04f 33ff 	mov.w	r3, #4294967295
 8003826:	9302      	str	r3, [sp, #8]
 8003828:	2301      	movs	r3, #1
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	1dfb      	adds	r3, r7, #7
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	2301      	movs	r3, #1
 8003832:	2200      	movs	r2, #0
 8003834:	2178      	movs	r1, #120	; 0x78
 8003836:	4803      	ldr	r0, [pc, #12]	; (8003844 <ssd1306_WriteCommand+0x2c>)
 8003838:	f7fd fd2e 	bl	8001298 <HAL_I2C_Mem_Write>
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000028 	.word	0x20000028

08003848 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af04      	add	r7, sp, #16
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b29b      	uxth	r3, r3
 8003856:	f04f 32ff 	mov.w	r2, #4294967295
 800385a:	9202      	str	r2, [sp, #8]
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2301      	movs	r3, #1
 8003864:	2240      	movs	r2, #64	; 0x40
 8003866:	2178      	movs	r1, #120	; 0x78
 8003868:	4803      	ldr	r0, [pc, #12]	; (8003878 <ssd1306_WriteData+0x30>)
 800386a:	f7fd fd15 	bl	8001298 <HAL_I2C_Mem_Write>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000028 	.word	0x20000028

0800387c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8003880:	f7ff ffc2 	bl	8003808 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8003884:	2064      	movs	r0, #100	; 0x64
 8003886:	f7fd f97d 	bl	8000b84 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800388a:	2000      	movs	r0, #0
 800388c:	f000 f9ac 	bl	8003be8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8003890:	2020      	movs	r0, #32
 8003892:	f7ff ffc1 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8003896:	2000      	movs	r0, #0
 8003898:	f7ff ffbe 	bl	8003818 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800389c:	20b0      	movs	r0, #176	; 0xb0
 800389e:	f7ff ffbb 	bl	8003818 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80038a2:	20c8      	movs	r0, #200	; 0xc8
 80038a4:	f7ff ffb8 	bl	8003818 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80038a8:	2000      	movs	r0, #0
 80038aa:	f7ff ffb5 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80038ae:	2010      	movs	r0, #16
 80038b0:	f7ff ffb2 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80038b4:	2040      	movs	r0, #64	; 0x40
 80038b6:	f7ff ffaf 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80038ba:	20ff      	movs	r0, #255	; 0xff
 80038bc:	f000 f981 	bl	8003bc2 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80038c0:	20a1      	movs	r0, #161	; 0xa1
 80038c2:	f7ff ffa9 	bl	8003818 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80038c6:	20a6      	movs	r0, #166	; 0xa6
 80038c8:	f7ff ffa6 	bl	8003818 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80038cc:	20a8      	movs	r0, #168	; 0xa8
 80038ce:	f7ff ffa3 	bl	8003818 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80038d2:	203f      	movs	r0, #63	; 0x3f
 80038d4:	f7ff ffa0 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80038d8:	20a4      	movs	r0, #164	; 0xa4
 80038da:	f7ff ff9d 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80038de:	20d3      	movs	r0, #211	; 0xd3
 80038e0:	f7ff ff9a 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80038e4:	2000      	movs	r0, #0
 80038e6:	f7ff ff97 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80038ea:	20d5      	movs	r0, #213	; 0xd5
 80038ec:	f7ff ff94 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80038f0:	20f0      	movs	r0, #240	; 0xf0
 80038f2:	f7ff ff91 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80038f6:	20d9      	movs	r0, #217	; 0xd9
 80038f8:	f7ff ff8e 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80038fc:	2022      	movs	r0, #34	; 0x22
 80038fe:	f7ff ff8b 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8003902:	20da      	movs	r0, #218	; 0xda
 8003904:	f7ff ff88 	bl	8003818 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8003908:	2012      	movs	r0, #18
 800390a:	f7ff ff85 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800390e:	20db      	movs	r0, #219	; 0xdb
 8003910:	f7ff ff82 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8003914:	2020      	movs	r0, #32
 8003916:	f7ff ff7f 	bl	8003818 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800391a:	208d      	movs	r0, #141	; 0x8d
 800391c:	f7ff ff7c 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8003920:	2014      	movs	r0, #20
 8003922:	f7ff ff79 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8003926:	2001      	movs	r0, #1
 8003928:	f000 f95e 	bl	8003be8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800392c:	2000      	movs	r0, #0
 800392e:	f000 f80f 	bl	8003950 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8003932:	f000 f825 	bl	8003980 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8003936:	4b05      	ldr	r3, [pc, #20]	; (800394c <ssd1306_Init+0xd0>)
 8003938:	2200      	movs	r2, #0
 800393a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800393c:	4b03      	ldr	r3, [pc, #12]	; (800394c <ssd1306_Init+0xd0>)
 800393e:	2200      	movs	r2, #0
 8003940:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8003942:	4b02      	ldr	r3, [pc, #8]	; (800394c <ssd1306_Init+0xd0>)
 8003944:	2201      	movs	r2, #1
 8003946:	711a      	strb	r2, [r3, #4]
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20000314 	.word	0x20000314

08003950 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	4603      	mov	r3, r0
 8003958:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800395a:	79fb      	ldrb	r3, [r7, #7]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <ssd1306_Fill+0x14>
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <ssd1306_Fill+0x16>
 8003964:	23ff      	movs	r3, #255	; 0xff
 8003966:	f44f 7200 	mov.w	r2, #512	; 0x200
 800396a:	4619      	mov	r1, r3
 800396c:	4803      	ldr	r0, [pc, #12]	; (800397c <ssd1306_Fill+0x2c>)
 800396e:	f000 f959 	bl	8003c24 <memset>
}
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	20000114 	.word	0x20000114

08003980 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8003986:	2300      	movs	r3, #0
 8003988:	71fb      	strb	r3, [r7, #7]
 800398a:	e016      	b.n	80039ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	3b50      	subs	r3, #80	; 0x50
 8003990:	b2db      	uxtb	r3, r3
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff ff40 	bl	8003818 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8003998:	2000      	movs	r0, #0
 800399a:	f7ff ff3d 	bl	8003818 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800399e:	2010      	movs	r0, #16
 80039a0:	f7ff ff3a 	bl	8003818 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	019b      	lsls	r3, r3, #6
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <ssd1306_UpdateScreen+0x4c>)
 80039aa:	4413      	add	r3, r2
 80039ac:	2140      	movs	r1, #64	; 0x40
 80039ae:	4618      	mov	r0, r3
 80039b0:	f7ff ff4a 	bl	8003848 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	3301      	adds	r3, #1
 80039b8:	71fb      	strb	r3, [r7, #7]
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d9e5      	bls.n	800398c <ssd1306_UpdateScreen+0xc>
    }
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	20000114 	.word	0x20000114

080039d0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	4603      	mov	r3, r0
 80039d8:	71fb      	strb	r3, [r7, #7]
 80039da:	460b      	mov	r3, r1
 80039dc:	71bb      	strb	r3, [r7, #6]
 80039de:	4613      	mov	r3, r2
 80039e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	2b3f      	cmp	r3, #63	; 0x3f
 80039e6:	d83d      	bhi.n	8003a64 <ssd1306_DrawPixel+0x94>
 80039e8:	79bb      	ldrb	r3, [r7, #6]
 80039ea:	2b3f      	cmp	r3, #63	; 0x3f
 80039ec:	d83a      	bhi.n	8003a64 <ssd1306_DrawPixel+0x94>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80039ee:	797b      	ldrb	r3, [r7, #5]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d11a      	bne.n	8003a2a <ssd1306_DrawPixel+0x5a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80039f4:	79fa      	ldrb	r2, [r7, #7]
 80039f6:	79bb      	ldrb	r3, [r7, #6]
 80039f8:	08db      	lsrs	r3, r3, #3
 80039fa:	b2d8      	uxtb	r0, r3
 80039fc:	4603      	mov	r3, r0
 80039fe:	019b      	lsls	r3, r3, #6
 8003a00:	4413      	add	r3, r2
 8003a02:	4a1b      	ldr	r2, [pc, #108]	; (8003a70 <ssd1306_DrawPixel+0xa0>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	b25a      	sxtb	r2, r3
 8003a08:	79bb      	ldrb	r3, [r7, #6]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	2101      	movs	r1, #1
 8003a10:	fa01 f303 	lsl.w	r3, r1, r3
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	4313      	orrs	r3, r2
 8003a18:	b259      	sxtb	r1, r3
 8003a1a:	79fa      	ldrb	r2, [r7, #7]
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	019b      	lsls	r3, r3, #6
 8003a20:	4413      	add	r3, r2
 8003a22:	b2c9      	uxtb	r1, r1
 8003a24:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <ssd1306_DrawPixel+0xa0>)
 8003a26:	54d1      	strb	r1, [r2, r3]
 8003a28:	e01d      	b.n	8003a66 <ssd1306_DrawPixel+0x96>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	79bb      	ldrb	r3, [r7, #6]
 8003a2e:	08db      	lsrs	r3, r3, #3
 8003a30:	b2d8      	uxtb	r0, r3
 8003a32:	4603      	mov	r3, r0
 8003a34:	019b      	lsls	r3, r3, #6
 8003a36:	4413      	add	r3, r2
 8003a38:	4a0d      	ldr	r2, [pc, #52]	; (8003a70 <ssd1306_DrawPixel+0xa0>)
 8003a3a:	5cd3      	ldrb	r3, [r2, r3]
 8003a3c:	b25a      	sxtb	r2, r3
 8003a3e:	79bb      	ldrb	r3, [r7, #6]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	2101      	movs	r1, #1
 8003a46:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4a:	b25b      	sxtb	r3, r3
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	b25b      	sxtb	r3, r3
 8003a50:	4013      	ands	r3, r2
 8003a52:	b259      	sxtb	r1, r3
 8003a54:	79fa      	ldrb	r2, [r7, #7]
 8003a56:	4603      	mov	r3, r0
 8003a58:	019b      	lsls	r3, r3, #6
 8003a5a:	4413      	add	r3, r2
 8003a5c:	b2c9      	uxtb	r1, r1
 8003a5e:	4a04      	ldr	r2, [pc, #16]	; (8003a70 <ssd1306_DrawPixel+0xa0>)
 8003a60:	54d1      	strb	r1, [r2, r3]
 8003a62:	e000      	b.n	8003a66 <ssd1306_DrawPixel+0x96>
        return;
 8003a64:	bf00      	nop
    }
}
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	20000114 	.word	0x20000114

08003a74 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	4608      	mov	r0, r1
 8003a7e:	4611      	mov	r1, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	4623      	mov	r3, r4
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	4603      	mov	r3, r0
 8003a88:	71bb      	strb	r3, [r7, #6]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	717b      	strb	r3, [r7, #5]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8003a92:	79fa      	ldrb	r2, [r7, #7]
 8003a94:	797b      	ldrb	r3, [r7, #5]
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf28      	it	cs
 8003a9a:	4613      	movcs	r3, r2
 8003a9c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8003a9e:	797a      	ldrb	r2, [r7, #5]
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	bf38      	it	cc
 8003aa6:	4613      	movcc	r3, r2
 8003aa8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8003aaa:	79ba      	ldrb	r2, [r7, #6]
 8003aac:	793b      	ldrb	r3, [r7, #4]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	bf28      	it	cs
 8003ab2:	4613      	movcs	r3, r2
 8003ab4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8003ab6:	793a      	ldrb	r2, [r7, #4]
 8003ab8:	79bb      	ldrb	r3, [r7, #6]
 8003aba:	4293      	cmp	r3, r2
 8003abc:	bf38      	it	cc
 8003abe:	4613      	movcc	r3, r2
 8003ac0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003ac2:	7afb      	ldrb	r3, [r7, #11]
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	e016      	b.n	8003af6 <ssd1306_FillRectangle+0x82>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003ac8:	7b7b      	ldrb	r3, [r7, #13]
 8003aca:	73bb      	strb	r3, [r7, #14]
 8003acc:	e009      	b.n	8003ae2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8003ace:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003ad2:	7bf9      	ldrb	r1, [r7, #15]
 8003ad4:	7bbb      	ldrb	r3, [r7, #14]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff7a 	bl	80039d0 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8003adc:	7bbb      	ldrb	r3, [r7, #14]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	73bb      	strb	r3, [r7, #14]
 8003ae2:	7bba      	ldrb	r2, [r7, #14]
 8003ae4:	7b3b      	ldrb	r3, [r7, #12]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d802      	bhi.n	8003af0 <ssd1306_FillRectangle+0x7c>
 8003aea:	7bbb      	ldrb	r3, [r7, #14]
 8003aec:	2b3f      	cmp	r3, #63	; 0x3f
 8003aee:	d9ee      	bls.n	8003ace <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8003af0:	7bfb      	ldrb	r3, [r7, #15]
 8003af2:	3301      	adds	r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	7bfa      	ldrb	r2, [r7, #15]
 8003af8:	7abb      	ldrb	r3, [r7, #10]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d803      	bhi.n	8003b06 <ssd1306_FillRectangle+0x92>
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b3f      	cmp	r3, #63	; 0x3f
 8003b02:	d9e1      	bls.n	8003ac8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
}
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd90      	pop	{r4, r7, pc}

08003b0e <ssd1306_DrawBitmap>:
  }
  return SSD1306_OK;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b084      	sub	sp, #16
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	603a      	str	r2, [r7, #0]
 8003b16:	461a      	mov	r2, r3
 8003b18:	4603      	mov	r3, r0
 8003b1a:	71fb      	strb	r3, [r7, #7]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	71bb      	strb	r3, [r7, #6]
 8003b20:	4613      	mov	r3, r2
 8003b22:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003b24:	797b      	ldrb	r3, [r7, #5]
 8003b26:	3307      	adds	r3, #7
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	da00      	bge.n	8003b2e <ssd1306_DrawBitmap+0x20>
 8003b2c:	3307      	adds	r3, #7
 8003b2e:	10db      	asrs	r3, r3, #3
 8003b30:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2b3f      	cmp	r3, #63	; 0x3f
 8003b3a:	d83e      	bhi.n	8003bba <ssd1306_DrawBitmap+0xac>
 8003b3c:	79bb      	ldrb	r3, [r7, #6]
 8003b3e:	2b3f      	cmp	r3, #63	; 0x3f
 8003b40:	d83b      	bhi.n	8003bba <ssd1306_DrawBitmap+0xac>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8003b42:	2300      	movs	r3, #0
 8003b44:	73bb      	strb	r3, [r7, #14]
 8003b46:	e033      	b.n	8003bb0 <ssd1306_DrawBitmap+0xa2>
        for (uint8_t i = 0; i < w; i++) {
 8003b48:	2300      	movs	r3, #0
 8003b4a:	737b      	strb	r3, [r7, #13]
 8003b4c:	e026      	b.n	8003b9c <ssd1306_DrawBitmap+0x8e>
            if (i & 7) {
 8003b4e:	7b7b      	ldrb	r3, [r7, #13]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <ssd1306_DrawBitmap+0x52>
                byte <<= 1;
 8003b58:	7bfb      	ldrb	r3, [r7, #15]
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e00d      	b.n	8003b7c <ssd1306_DrawBitmap+0x6e>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8003b60:	7bbb      	ldrb	r3, [r7, #14]
 8003b62:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	7b7a      	ldrb	r2, [r7, #13]
 8003b6c:	08d2      	lsrs	r2, r2, #3
 8003b6e:	b2d2      	uxtb	r2, r2
 8003b70:	4413      	add	r3, r2
 8003b72:	461a      	mov	r2, r3
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8003b7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	da08      	bge.n	8003b96 <ssd1306_DrawBitmap+0x88>
                ssd1306_DrawPixel(x + i, y, color);
 8003b84:	79fa      	ldrb	r2, [r7, #7]
 8003b86:	7b7b      	ldrb	r3, [r7, #13]
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	7f3a      	ldrb	r2, [r7, #28]
 8003b8e:	79b9      	ldrb	r1, [r7, #6]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff1d 	bl	80039d0 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8003b96:	7b7b      	ldrb	r3, [r7, #13]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	737b      	strb	r3, [r7, #13]
 8003b9c:	7b7a      	ldrb	r2, [r7, #13]
 8003b9e:	797b      	ldrb	r3, [r7, #5]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d3d4      	bcc.n	8003b4e <ssd1306_DrawBitmap+0x40>
    for (uint8_t j = 0; j < h; j++, y++) {
 8003ba4:	7bbb      	ldrb	r3, [r7, #14]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	73bb      	strb	r3, [r7, #14]
 8003baa:	79bb      	ldrb	r3, [r7, #6]
 8003bac:	3301      	adds	r3, #1
 8003bae:	71bb      	strb	r3, [r7, #6]
 8003bb0:	7bba      	ldrb	r2, [r7, #14]
 8003bb2:	7e3b      	ldrb	r3, [r7, #24]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d3c7      	bcc.n	8003b48 <ssd1306_DrawBitmap+0x3a>
            }
        }
    }
    return;
 8003bb8:	e000      	b.n	8003bbc <ssd1306_DrawBitmap+0xae>
        return;
 8003bba:	bf00      	nop
}
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003bcc:	2381      	movs	r3, #129	; 0x81
 8003bce:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7ff fe20 	bl	8003818 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003bd8:	79fb      	ldrb	r3, [r7, #7]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7ff fe1c 	bl	8003818 <ssd1306_WriteCommand>
}
 8003be0:	bf00      	nop
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d005      	beq.n	8003c04 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003bf8:	23af      	movs	r3, #175	; 0xaf
 8003bfa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <ssd1306_SetDisplayOn+0x38>)
 8003bfe:	2201      	movs	r2, #1
 8003c00:	715a      	strb	r2, [r3, #5]
 8003c02:	e004      	b.n	8003c0e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003c04:	23ae      	movs	r3, #174	; 0xae
 8003c06:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <ssd1306_SetDisplayOn+0x38>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fe01 	bl	8003818 <ssd1306_WriteCommand>
}
 8003c16:	bf00      	nop
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	20000314 	.word	0x20000314

08003c24 <memset>:
 8003c24:	4402      	add	r2, r0
 8003c26:	4603      	mov	r3, r0
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d100      	bne.n	8003c2e <memset+0xa>
 8003c2c:	4770      	bx	lr
 8003c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003c32:	e7f9      	b.n	8003c28 <memset+0x4>

08003c34 <__libc_init_array>:
 8003c34:	b570      	push	{r4, r5, r6, lr}
 8003c36:	4d0d      	ldr	r5, [pc, #52]	; (8003c6c <__libc_init_array+0x38>)
 8003c38:	4c0d      	ldr	r4, [pc, #52]	; (8003c70 <__libc_init_array+0x3c>)
 8003c3a:	1b64      	subs	r4, r4, r5
 8003c3c:	10a4      	asrs	r4, r4, #2
 8003c3e:	2600      	movs	r6, #0
 8003c40:	42a6      	cmp	r6, r4
 8003c42:	d109      	bne.n	8003c58 <__libc_init_array+0x24>
 8003c44:	4d0b      	ldr	r5, [pc, #44]	; (8003c74 <__libc_init_array+0x40>)
 8003c46:	4c0c      	ldr	r4, [pc, #48]	; (8003c78 <__libc_init_array+0x44>)
 8003c48:	f000 f818 	bl	8003c7c <_init>
 8003c4c:	1b64      	subs	r4, r4, r5
 8003c4e:	10a4      	asrs	r4, r4, #2
 8003c50:	2600      	movs	r6, #0
 8003c52:	42a6      	cmp	r6, r4
 8003c54:	d105      	bne.n	8003c62 <__libc_init_array+0x2e>
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5c:	4798      	blx	r3
 8003c5e:	3601      	adds	r6, #1
 8003c60:	e7ee      	b.n	8003c40 <__libc_init_array+0xc>
 8003c62:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c66:	4798      	blx	r3
 8003c68:	3601      	adds	r6, #1
 8003c6a:	e7f2      	b.n	8003c52 <__libc_init_array+0x1e>
 8003c6c:	08003e38 	.word	0x08003e38
 8003c70:	08003e38 	.word	0x08003e38
 8003c74:	08003e38 	.word	0x08003e38
 8003c78:	08003e3c 	.word	0x08003e3c

08003c7c <_init>:
 8003c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c7e:	bf00      	nop
 8003c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c82:	bc08      	pop	{r3}
 8003c84:	469e      	mov	lr, r3
 8003c86:	4770      	bx	lr

08003c88 <_fini>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr
