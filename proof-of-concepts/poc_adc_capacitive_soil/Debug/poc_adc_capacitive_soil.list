
poc_adc_capacitive_soil.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d94  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001124  08008f78  08008f78  00018f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0a4  0800a0a4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0a4  0800a0a4  0001a0a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a8  0800a0a8  0001a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800a0ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006dc  200001d4  0800a280  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008b0  0800a280  000208b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015c06  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c04  00000000  00000000  00035e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00038a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e0d  00000000  00000000  00039c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ba0  00000000  00000000  0003aaa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001706f  00000000  00000000  00063645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105afc  00000000  00000000  0007a6b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ed4  00000000  00000000  001801b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00186084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008f5c 	.word	0x08008f5c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08008f5c 	.word	0x08008f5c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b970 	b.w	8000f90 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	460d      	mov	r5, r1
 8000cd0:	4604      	mov	r4, r0
 8000cd2:	460f      	mov	r7, r1
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d14a      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd8:	428a      	cmp	r2, r1
 8000cda:	4694      	mov	ip, r2
 8000cdc:	d965      	bls.n	8000daa <__udivmoddi4+0xe2>
 8000cde:	fab2 f382 	clz	r3, r2
 8000ce2:	b143      	cbz	r3, 8000cf6 <__udivmoddi4+0x2e>
 8000ce4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce8:	f1c3 0220 	rsb	r2, r3, #32
 8000cec:	409f      	lsls	r7, r3
 8000cee:	fa20 f202 	lsr.w	r2, r0, r2
 8000cf2:	4317      	orrs	r7, r2
 8000cf4:	409c      	lsls	r4, r3
 8000cf6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cfa:	fa1f f58c 	uxth.w	r5, ip
 8000cfe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d02:	0c22      	lsrs	r2, r4, #16
 8000d04:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d08:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d0c:	fb01 f005 	mul.w	r0, r1, r5
 8000d10:	4290      	cmp	r0, r2
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x62>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d1c:	f080 811c 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d20:	4290      	cmp	r0, r2
 8000d22:	f240 8119 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d26:	3902      	subs	r1, #2
 8000d28:	4462      	add	r2, ip
 8000d2a:	1a12      	subs	r2, r2, r0
 8000d2c:	b2a4      	uxth	r4, r4
 8000d2e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d32:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d36:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3a:	fb00 f505 	mul.w	r5, r0, r5
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	d90a      	bls.n	8000d58 <__udivmoddi4+0x90>
 8000d42:	eb1c 0404 	adds.w	r4, ip, r4
 8000d46:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x294>
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x294>
 8000d54:	4464      	add	r4, ip
 8000d56:	3802      	subs	r0, #2
 8000d58:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	2100      	movs	r1, #0
 8000d60:	b11e      	cbz	r6, 8000d6a <__udivmoddi4+0xa2>
 8000d62:	40dc      	lsrs	r4, r3
 8000d64:	2300      	movs	r3, #0
 8000d66:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0xbc>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80ed 	beq.w	8000f52 <__udivmoddi4+0x28a>
 8000d78:	2100      	movs	r1, #0
 8000d7a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d84:	fab3 f183 	clz	r1, r3
 8000d88:	2900      	cmp	r1, #0
 8000d8a:	d149      	bne.n	8000e20 <__udivmoddi4+0x158>
 8000d8c:	42ab      	cmp	r3, r5
 8000d8e:	d302      	bcc.n	8000d96 <__udivmoddi4+0xce>
 8000d90:	4282      	cmp	r2, r0
 8000d92:	f200 80f8 	bhi.w	8000f86 <__udivmoddi4+0x2be>
 8000d96:	1a84      	subs	r4, r0, r2
 8000d98:	eb65 0203 	sbc.w	r2, r5, r3
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	4617      	mov	r7, r2
 8000da0:	2e00      	cmp	r6, #0
 8000da2:	d0e2      	beq.n	8000d6a <__udivmoddi4+0xa2>
 8000da4:	e9c6 4700 	strd	r4, r7, [r6]
 8000da8:	e7df      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xe6>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f382 	clz	r3, r2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000db8:	1a8a      	subs	r2, r1, r2
 8000dba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbe:	fa1f fe8c 	uxth.w	lr, ip
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dcc:	0c22      	lsrs	r2, r4, #16
 8000dce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dd2:	fb0e f005 	mul.w	r0, lr, r5
 8000dd6:	4290      	cmp	r0, r2
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x124>
 8000dda:	eb1c 0202 	adds.w	r2, ip, r2
 8000dde:	f105 38ff 	add.w	r8, r5, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4290      	cmp	r0, r2
 8000de6:	f200 80cb 	bhi.w	8000f80 <__udivmoddi4+0x2b8>
 8000dea:	4645      	mov	r5, r8
 8000dec:	1a12      	subs	r2, r2, r0
 8000dee:	b2a4      	uxth	r4, r4
 8000df0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000df4:	fb07 2210 	mls	r2, r7, r0, r2
 8000df8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000e00:	45a6      	cmp	lr, r4
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x14e>
 8000e04:	eb1c 0404 	adds.w	r4, ip, r4
 8000e08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e0c:	d202      	bcs.n	8000e14 <__udivmoddi4+0x14c>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f200 80bb 	bhi.w	8000f8a <__udivmoddi4+0x2c2>
 8000e14:	4610      	mov	r0, r2
 8000e16:	eba4 040e 	sub.w	r4, r4, lr
 8000e1a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e1e:	e79f      	b.n	8000d60 <__udivmoddi4+0x98>
 8000e20:	f1c1 0720 	rsb	r7, r1, #32
 8000e24:	408b      	lsls	r3, r1
 8000e26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e2e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e32:	fa20 f307 	lsr.w	r3, r0, r7
 8000e36:	40fd      	lsrs	r5, r7
 8000e38:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e3c:	4323      	orrs	r3, r4
 8000e3e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	fb09 5518 	mls	r5, r9, r8, r5
 8000e4a:	0c1c      	lsrs	r4, r3, #16
 8000e4c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e50:	fb08 f50e 	mul.w	r5, r8, lr
 8000e54:	42a5      	cmp	r5, r4
 8000e56:	fa02 f201 	lsl.w	r2, r2, r1
 8000e5a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e68:	f080 8088 	bcs.w	8000f7c <__udivmoddi4+0x2b4>
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	f240 8085 	bls.w	8000f7c <__udivmoddi4+0x2b4>
 8000e72:	f1a8 0802 	sub.w	r8, r8, #2
 8000e76:	4464      	add	r4, ip
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	b29d      	uxth	r5, r3
 8000e7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e80:	fb09 4413 	mls	r4, r9, r3, r4
 8000e84:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e88:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e8c:	45a6      	cmp	lr, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e98:	d26c      	bcs.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9a:	45a6      	cmp	lr, r4
 8000e9c:	d96a      	bls.n	8000f74 <__udivmoddi4+0x2ac>
 8000e9e:	3b02      	subs	r3, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ea6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	46c8      	mov	r8, r9
 8000eb2:	46ae      	mov	lr, r5
 8000eb4:	d356      	bcc.n	8000f64 <__udivmoddi4+0x29c>
 8000eb6:	d053      	beq.n	8000f60 <__udivmoddi4+0x298>
 8000eb8:	b156      	cbz	r6, 8000ed0 <__udivmoddi4+0x208>
 8000eba:	ebb0 0208 	subs.w	r2, r0, r8
 8000ebe:	eb64 040e 	sbc.w	r4, r4, lr
 8000ec2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ec6:	40ca      	lsrs	r2, r1
 8000ec8:	40cc      	lsrs	r4, r1
 8000eca:	4317      	orrs	r7, r2
 8000ecc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed8:	f1c3 0120 	rsb	r1, r3, #32
 8000edc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ee0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ee4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee8:	409d      	lsls	r5, r3
 8000eea:	432a      	orrs	r2, r5
 8000eec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef0:	fa1f fe8c 	uxth.w	lr, ip
 8000ef4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef8:	fb07 1510 	mls	r5, r7, r0, r1
 8000efc:	0c11      	lsrs	r1, r2, #16
 8000efe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f02:	fb00 f50e 	mul.w	r5, r0, lr
 8000f06:	428d      	cmp	r5, r1
 8000f08:	fa04 f403 	lsl.w	r4, r4, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x258>
 8000f0e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f16:	d22f      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f18:	428d      	cmp	r5, r1
 8000f1a:	d92d      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4461      	add	r1, ip
 8000f20:	1b49      	subs	r1, r1, r5
 8000f22:	b292      	uxth	r2, r2
 8000f24:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f28:	fb07 1115 	mls	r1, r7, r5, r1
 8000f2c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f30:	fb05 f10e 	mul.w	r1, r5, lr
 8000f34:	4291      	cmp	r1, r2
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x282>
 8000f38:	eb1c 0202 	adds.w	r2, ip, r2
 8000f3c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f40:	d216      	bcs.n	8000f70 <__udivmoddi4+0x2a8>
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d914      	bls.n	8000f70 <__udivmoddi4+0x2a8>
 8000f46:	3d02      	subs	r5, #2
 8000f48:	4462      	add	r2, ip
 8000f4a:	1a52      	subs	r2, r2, r1
 8000f4c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f50:	e738      	b.n	8000dc4 <__udivmoddi4+0xfc>
 8000f52:	4631      	mov	r1, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e708      	b.n	8000d6a <__udivmoddi4+0xa2>
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e6e6      	b.n	8000d2a <__udivmoddi4+0x62>
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x90>
 8000f60:	4548      	cmp	r0, r9
 8000f62:	d2a9      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f64:	ebb9 0802 	subs.w	r8, r9, r2
 8000f68:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	e7a3      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f70:	4645      	mov	r5, r8
 8000f72:	e7ea      	b.n	8000f4a <__udivmoddi4+0x282>
 8000f74:	462b      	mov	r3, r5
 8000f76:	e794      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f78:	4640      	mov	r0, r8
 8000f7a:	e7d1      	b.n	8000f20 <__udivmoddi4+0x258>
 8000f7c:	46d0      	mov	r8, sl
 8000f7e:	e77b      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f80:	3d02      	subs	r5, #2
 8000f82:	4462      	add	r2, ip
 8000f84:	e732      	b.n	8000dec <__udivmoddi4+0x124>
 8000f86:	4608      	mov	r0, r1
 8000f88:	e70a      	b.n	8000da0 <__udivmoddi4+0xd8>
 8000f8a:	4464      	add	r4, ip
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	e742      	b.n	8000e16 <__udivmoddi4+0x14e>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9a:	f000 fc8a 	bl	80018b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9e:	f000 f869 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa2:	f000 f9b5 	bl	8001310 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000fa6:	f000 f969 	bl	800127c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000faa:	f000 f8af 	bl	800110c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fae:	f000 f925 	bl	80011fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000fb2:	f004 ff4f 	bl	8005e54 <ssd1306_Init>
  ssd1306_Fill(White);
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f004 ffb6 	bl	8005f28 <ssd1306_Fill>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	HAL_ADC_Start(&hadc1);
 8000fbc:	4825      	ldr	r0, [pc, #148]	; (8001054 <main+0xc0>)
 8000fbe:	f001 f8f3 	bl	80021a8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000fc2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <main+0xc0>)
 8000fc8:	f001 f9d2 	bl	8002370 <HAL_ADC_PollForConversion>
	adc_raw = HAL_ADC_GetValue(&hadc1);
 8000fcc:	4821      	ldr	r0, [pc, #132]	; (8001054 <main+0xc0>)
 8000fce:	f001 fad5 	bl	800257c <HAL_ADC_GetValue>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	4b20      	ldr	r3, [pc, #128]	; (8001058 <main+0xc4>)
 8000fd8:	801a      	strh	r2, [r3, #0]
	soil_hum = (float) adc_raw * 100.0/4096.0;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <main+0xc4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	ee17 0a90 	vmov	r0, s15
 8000fea:	f7ff fad5 	bl	8000598 <__aeabi_f2d>
 8000fee:	f04f 0200 	mov.w	r2, #0
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <main+0xc8>)
 8000ff4:	f7ff fb28 	bl	8000648 <__aeabi_dmul>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4610      	mov	r0, r2
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <main+0xcc>)
 8001006:	f7ff fc49 	bl	800089c <__aeabi_ddiv>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4610      	mov	r0, r2
 8001010:	4619      	mov	r1, r3
 8001012:	f7ff fdf1 	bl	8000bf8 <__aeabi_d2f>
 8001016:	4603      	mov	r3, r0
 8001018:	4a12      	ldr	r2, [pc, #72]	; (8001064 <main+0xd0>)
 800101a:	6013      	str	r3, [r2, #0]

	sprintf(hum, "%04.1f%%", soil_hum);
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <main+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fab9 	bl	8000598 <__aeabi_f2d>
 8001026:	4602      	mov	r2, r0
 8001028:	460b      	mov	r3, r1
 800102a:	490f      	ldr	r1, [pc, #60]	; (8001068 <main+0xd4>)
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <main+0xd8>)
 800102e:	f005 fe39 	bl	8006ca4 <siprintf>

    ssd1306_SetCursor(2, 18);
 8001032:	2112      	movs	r1, #18
 8001034:	2002      	movs	r0, #2
 8001036:	f005 f8c3 	bl	80061c0 <ssd1306_SetCursor>
	ssd1306_WriteString(hum, Font_11x18, Black);
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <main+0xdc>)
 800103c:	2200      	movs	r2, #0
 800103e:	9200      	str	r2, [sp, #0]
 8001040:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <main+0xd8>)
 8001044:	f005 f896 	bl	8006174 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8001048:	f004 ff86 	bl	8005f58 <ssd1306_UpdateScreen>
	HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f000 fca1 	bl	8001994 <HAL_Delay>
	HAL_ADC_Start(&hadc1);
 8001052:	e7b3      	b.n	8000fbc <main+0x28>
 8001054:	200001f0 	.word	0x200001f0
 8001058:	20000344 	.word	0x20000344
 800105c:	40590000 	.word	0x40590000
 8001060:	40b00000 	.word	0x40b00000
 8001064:	20000348 	.word	0x20000348
 8001068:	08008f78 	.word	0x08008f78
 800106c:	2000034c 	.word	0x2000034c
 8001070:	08009d20 	.word	0x08009d20

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2238      	movs	r2, #56	; 0x38
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f005 fe71 	bl	8006d6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	60da      	str	r2, [r3, #12]
 8001094:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001096:	2000      	movs	r0, #0
 8001098:	f003 f804 	bl	80040a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800109c:	2302      	movs	r3, #2
 800109e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a6:	2340      	movs	r3, #64	; 0x40
 80010a8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010aa:	2302      	movs	r3, #2
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010ae:	2302      	movs	r3, #2
 80010b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010b2:	2304      	movs	r3, #4
 80010b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010b6:	2355      	movs	r3, #85	; 0x55
 80010b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010be:	2302      	movs	r3, #2
 80010c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	4618      	mov	r0, r3
 80010cc:	f003 f89e 	bl	800420c <HAL_RCC_OscConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010d6:	f000 f989 	bl	80013ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010da:	230f      	movs	r3, #15
 80010dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010de:	2303      	movs	r3, #3
 80010e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2104      	movs	r1, #4
 80010f2:	4618      	mov	r0, r3
 80010f4:	f003 fb9c 	bl	8004830 <HAL_RCC_ClockConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80010fe:	f000 f975 	bl	80013ec <Error_Handler>
  }
}
 8001102:	bf00      	nop
 8001104:	3750      	adds	r7, #80	; 0x50
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b08c      	sub	sp, #48	; 0x30
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2220      	movs	r2, #32
 8001122:	2100      	movs	r1, #0
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fe20 	bl	8006d6a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800112c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001130:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001132:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001134:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001138:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800113a:	4b2e      	ldr	r3, [pc, #184]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800113c:	2200      	movs	r2, #0
 800113e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001140:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001146:	4b2b      	ldr	r3, [pc, #172]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800114c:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001152:	4b28      	ldr	r3, [pc, #160]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001154:	2204      	movs	r2, #4
 8001156:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001158:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800115a:	2200      	movs	r2, #0
 800115c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001160:	2200      	movs	r2, #0
 8001162:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001164:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001166:	2201      	movs	r2, #1
 8001168:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001174:	2200      	movs	r2, #0
 8001176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800117e:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001180:	2200      	movs	r2, #0
 8001182:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001186:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001188:	2200      	movs	r2, #0
 800118a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_ADC1_Init+0xe8>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_ADC1_Init+0xe8>)
 8001196:	f000 fe4b 	bl	8001e30 <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80011a0:	f000 f924 	bl	80013ec <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_ADC1_Init+0xe8>)
 80011b0:	f001 feee 	bl	8002f90 <HAL_ADCEx_MultiModeConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ba:	f000 f917 	bl	80013ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_ADC1_Init+0xec>)
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	237f      	movs	r3, #127	; 0x7f
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ce:	2304      	movs	r3, #4
 80011d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_ADC1_Init+0xe8>)
 80011dc:	f001 f9dc 	bl	8002598 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011e6:	f000 f901 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200001f0 	.word	0x200001f0
 80011f8:	04300002 	.word	0x04300002

080011fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001200:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_I2C1_Init+0x74>)
 8001202:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <MX_I2C1_Init+0x78>)
 8001204:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_I2C1_Init+0x74>)
 8001208:	4a1b      	ldr	r2, [pc, #108]	; (8001278 <MX_I2C1_Init+0x7c>)
 800120a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800120c:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_I2C1_Init+0x74>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_I2C1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001218:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_I2C1_Init+0x74>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_I2C1_Init+0x74>)
 8001220:	2200      	movs	r2, #0
 8001222:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <MX_I2C1_Init+0x74>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <MX_I2C1_Init+0x74>)
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001230:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <MX_I2C1_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001236:	480e      	ldr	r0, [pc, #56]	; (8001270 <MX_I2C1_Init+0x74>)
 8001238:	f002 fa7f 	bl	800373a <HAL_I2C_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001242:	f000 f8d3 	bl	80013ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001246:	2100      	movs	r1, #0
 8001248:	4809      	ldr	r0, [pc, #36]	; (8001270 <MX_I2C1_Init+0x74>)
 800124a:	f002 fe93 	bl	8003f74 <HAL_I2CEx_ConfigAnalogFilter>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001254:	f000 f8ca 	bl	80013ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001258:	2100      	movs	r1, #0
 800125a:	4805      	ldr	r0, [pc, #20]	; (8001270 <MX_I2C1_Init+0x74>)
 800125c:	f002 fed5 	bl	800400a <HAL_I2CEx_ConfigDigitalFilter>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001266:	f000 f8c1 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	2000025c 	.word	0x2000025c
 8001274:	40005400 	.word	0x40005400
 8001278:	30a0a7fb 	.word	0x30a0a7fb

0800127c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001282:	4a22      	ldr	r2, [pc, #136]	; (800130c <MX_LPUART1_UART_Init+0x90>)
 8001284:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b1b      	ldr	r3, [pc, #108]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b2:	4b15      	ldr	r3, [pc, #84]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	f003 ff20 	bl	8005104 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ca:	f000 f88f 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012d2:	f004 fcbb 	bl	8005c4c <HAL_UARTEx_SetTxFifoThreshold>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012dc:	f000 f886 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4809      	ldr	r0, [pc, #36]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012e4:	f004 fcf0 	bl	8005cc8 <HAL_UARTEx_SetRxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012ee:	f000 f87d 	bl	80013ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012f4:	f004 fc71 	bl	8005bda <HAL_UARTEx_DisableFifoMode>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012fe:	f000 f875 	bl	80013ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200002b0 	.word	0x200002b0
 800130c:	40008000 	.word	0x40008000

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b2f      	ldr	r3, [pc, #188]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a2e      	ldr	r2, [pc, #184]	; (80013e4 <MX_GPIO_Init+0xd4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b2c      	ldr	r3, [pc, #176]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800133e:	4b29      	ldr	r3, [pc, #164]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a28      	ldr	r2, [pc, #160]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001344:	f043 0320 	orr.w	r3, r3, #32
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <MX_GPIO_Init+0xd4>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0320 	and.w	r3, r3, #32
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <MX_GPIO_Init+0xd4>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a1c      	ldr	r2, [pc, #112]	; (80013e4 <MX_GPIO_Init+0xd4>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_GPIO_Init+0xd4>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2120      	movs	r1, #32
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f002 f999 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800139c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	4619      	mov	r1, r3
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <MX_GPIO_Init+0xd8>)
 80013aa:	f002 f809 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ae:	2320      	movs	r3, #32
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c8:	f001 fffa 	bl	80033c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 ffc0 	bl	8003356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d6:	2028      	movs	r0, #40	; 0x28
 80013d8:	f001 ffd7 	bl	800338a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	48000800 	.word	0x48000800

080013ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
}
 80013f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <Error_Handler+0x8>
	...

080013f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fe:	4b0f      	ldr	r3, [pc, #60]	; (800143c <HAL_MspInit+0x44>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001402:	4a0e      	ldr	r2, [pc, #56]	; (800143c <HAL_MspInit+0x44>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6613      	str	r3, [r2, #96]	; 0x60
 800140a:	4b0c      	ldr	r3, [pc, #48]	; (800143c <HAL_MspInit+0x44>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <HAL_MspInit+0x44>)
 8001418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141a:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_MspInit+0x44>)
 800141c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001420:	6593      	str	r3, [r2, #88]	; 0x58
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <HAL_MspInit+0x44>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001426:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142a:	603b      	str	r3, [r7, #0]
 800142c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800142e:	f002 fedd 	bl	80041ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b09e      	sub	sp, #120	; 0x78
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	2254      	movs	r2, #84	; 0x54
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f005 fc82 	bl	8006d6a <memset>
  if(hadc->Instance==ADC1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800146e:	d134      	bne.n	80014da <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001470:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001474:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001476:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800147a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fbf1 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800148c:	f7ff ffae 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 8001492:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001494:	4a13      	ldr	r2, [pc, #76]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 8001496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800149a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 800149e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a8:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 80014aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_ADC_MspInit+0xa4>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014c0:	2301      	movs	r3, #1
 80014c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c4:	2303      	movs	r3, #3
 80014c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014d0:	4619      	mov	r1, r3
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 ff73 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3778      	adds	r7, #120	; 0x78
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40021000 	.word	0x40021000

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b09e      	sub	sp, #120	; 0x78
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001500:	f107 0310 	add.w	r3, r7, #16
 8001504:	2254      	movs	r2, #84	; 0x54
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f005 fc2e 	bl	8006d6a <memset>
  if(hi2c->Instance==I2C1)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_I2C_MspInit+0xa8>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d136      	bne.n	8001586 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001518:	2340      	movs	r3, #64	; 0x40
 800151a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800151c:	2300      	movs	r3, #0
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fb9f 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001530:	f7ff ff5c 	bl	80013ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001534:	4b17      	ldr	r3, [pc, #92]	; (8001594 <HAL_I2C_MspInit+0xac>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	4a16      	ldr	r2, [pc, #88]	; (8001594 <HAL_I2C_MspInit+0xac>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <HAL_I2C_MspInit+0xac>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	60fb      	str	r3, [r7, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800154c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001550:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001552:	2312      	movs	r3, #18
 8001554:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155a:	2300      	movs	r3, #0
 800155c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800155e:	2304      	movs	r3, #4
 8001560:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001562:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001566:	4619      	mov	r1, r3
 8001568:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_I2C_MspInit+0xb0>)
 800156a:	f001 ff29 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_I2C_MspInit+0xac>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_I2C_MspInit+0xac>)
 8001574:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_I2C_MspInit+0xac>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001586:	bf00      	nop
 8001588:	3778      	adds	r7, #120	; 0x78
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40005400 	.word	0x40005400
 8001594:	40021000 	.word	0x40021000
 8001598:	48000400 	.word	0x48000400

0800159c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b09e      	sub	sp, #120	; 0x78
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	2254      	movs	r2, #84	; 0x54
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 fbd4 	bl	8006d6a <memset>
  if(huart->Instance==LPUART1)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a1f      	ldr	r2, [pc, #124]	; (8001644 <HAL_UART_MspInit+0xa8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d136      	bne.n	800163a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80015cc:	2320      	movs	r3, #32
 80015ce:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d4:	f107 0310 	add.w	r3, r7, #16
 80015d8:	4618      	mov	r0, r3
 80015da:	f003 fb45 	bl	8004c68 <HAL_RCCEx_PeriphCLKConfig>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e4:	f7ff ff02 	bl	80013ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <HAL_UART_MspInit+0xac>)
 80015ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ec:	4a16      	ldr	r2, [pc, #88]	; (8001648 <HAL_UART_MspInit+0xac>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80015f4:	4b14      	ldr	r3, [pc, #80]	; (8001648 <HAL_UART_MspInit+0xac>)
 80015f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f8:	f003 0301 	and.w	r3, r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <HAL_UART_MspInit+0xac>)
 8001602:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001604:	4a10      	ldr	r2, [pc, #64]	; (8001648 <HAL_UART_MspInit+0xac>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160c:	4b0e      	ldr	r3, [pc, #56]	; (8001648 <HAL_UART_MspInit+0xac>)
 800160e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001618:	230c      	movs	r3, #12
 800161a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001628:	230c      	movs	r3, #12
 800162a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001630:	4619      	mov	r1, r3
 8001632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001636:	f001 fec3 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800163a:	bf00      	nop
 800163c:	3778      	adds	r7, #120	; 0x78
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40008000 	.word	0x40008000
 8001648:	40021000 	.word	0x40021000

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b480      	push	{r7}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800165c:	e7fe      	b.n	800165c <MemManage_Handler+0x4>

0800165e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <BusFault_Handler+0x4>

08001664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <UsageFault_Handler+0x4>

0800166a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001698:	f000 f95e 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}

080016a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a8:	f002 f824 	bl	80036f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return 1;
 80016b4:	2301      	movs	r3, #1
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <_kill>:

int _kill(int pid, int sig)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ca:	f005 fba1 	bl	8006e10 <__errno>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2216      	movs	r2, #22
 80016d2:	601a      	str	r2, [r3, #0]
  return -1;
 80016d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <_exit>:

void _exit (int status)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff ffe7 	bl	80016c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f2:	e7fe      	b.n	80016f2 <_exit+0x12>

080016f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e00a      	b.n	800171c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001706:	f3af 8000 	nop.w
 800170a:	4601      	mov	r1, r0
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	60ba      	str	r2, [r7, #8]
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	3301      	adds	r3, #1
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	697a      	ldr	r2, [r7, #20]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	429a      	cmp	r2, r3
 8001722:	dbf0      	blt.n	8001706 <_read+0x12>
  }

  return len;
 8001724:	687b      	ldr	r3, [r7, #4]
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b086      	sub	sp, #24
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	e009      	b.n	8001754 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1c5a      	adds	r2, r3, #1
 8001744:	60ba      	str	r2, [r7, #8]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	3301      	adds	r3, #1
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	429a      	cmp	r2, r3
 800175a:	dbf1      	blt.n	8001740 <_write+0x12>
  }
  return len;
 800175c:	687b      	ldr	r3, [r7, #4]
}
 800175e:	4618      	mov	r0, r3
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <_close>:

int _close(int file)
{
 8001766:	b480      	push	{r7}
 8001768:	b083      	sub	sp, #12
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
 8001786:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800178e:	605a      	str	r2, [r3, #4]
  return 0;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <_isatty>:

int _isatty(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
	...

080017d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d8:	4a14      	ldr	r2, [pc, #80]	; (800182c <_sbrk+0x5c>)
 80017da:	4b15      	ldr	r3, [pc, #84]	; (8001830 <_sbrk+0x60>)
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d102      	bne.n	80017f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <_sbrk+0x64>)
 80017ee:	4a12      	ldr	r2, [pc, #72]	; (8001838 <_sbrk+0x68>)
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d207      	bcs.n	8001810 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001800:	f005 fb06 	bl	8006e10 <__errno>
 8001804:	4603      	mov	r3, r0
 8001806:	220c      	movs	r2, #12
 8001808:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
 800180e:	e009      	b.n	8001824 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <_sbrk+0x64>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <_sbrk+0x64>)
 8001820:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20020000 	.word	0x20020000
 8001830:	00000400 	.word	0x00000400
 8001834:	20000354 	.word	0x20000354
 8001838:	200008b0 	.word	0x200008b0

0800183c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <SystemInit+0x20>)
 8001842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <SystemInit+0x20>)
 8001848:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800184c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001862:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001864:	f7ff ffea 	bl	800183c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001868:	480c      	ldr	r0, [pc, #48]	; (800189c <LoopForever+0x6>)
  ldr r1, =_edata
 800186a:	490d      	ldr	r1, [pc, #52]	; (80018a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800186c:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <LoopForever+0xe>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001880:	4c0a      	ldr	r4, [pc, #40]	; (80018ac <LoopForever+0x16>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800188e:	f005 fac5 	bl	8006e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001892:	f7ff fb7f 	bl	8000f94 <main>

08001896 <LoopForever>:

LoopForever:
    b LoopForever
 8001896:	e7fe      	b.n	8001896 <LoopForever>
  ldr   r0, =_estack
 8001898:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800189c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018a4:	0800a0ac 	.word	0x0800a0ac
  ldr r2, =_sbss
 80018a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018ac:	200008b0 	.word	0x200008b0

080018b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018b0:	e7fe      	b.n	80018b0 <ADC1_2_IRQHandler>

080018b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018b8:	2300      	movs	r3, #0
 80018ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f001 fd3f 	bl	8003340 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c2:	2000      	movs	r0, #0
 80018c4:	f000 f80e 	bl	80018e4 <HAL_InitTick>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e001      	b.n	80018d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018d4:	f7ff fd90 	bl	80013f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018d8:	79fb      	ldrb	r3, [r7, #7]

}
 80018da:	4618      	mov	r0, r3
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
	...

080018e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018f0:	4b16      	ldr	r3, [pc, #88]	; (800194c <HAL_InitTick+0x68>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d022      	beq.n	800193e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018f8:	4b15      	ldr	r3, [pc, #84]	; (8001950 <HAL_InitTick+0x6c>)
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <HAL_InitTick+0x68>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001904:	fbb1 f3f3 	udiv	r3, r1, r3
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fd4a 	bl	80033a6 <HAL_SYSTICK_Config>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d10f      	bne.n	8001938 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	d809      	bhi.n	8001932 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191e:	2200      	movs	r2, #0
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	f04f 30ff 	mov.w	r0, #4294967295
 8001926:	f001 fd16 	bl	8003356 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192a:	4a0a      	ldr	r2, [pc, #40]	; (8001954 <HAL_InitTick+0x70>)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6013      	str	r3, [r2, #0]
 8001930:	e007      	b.n	8001942 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	73fb      	strb	r3, [r7, #15]
 8001936:	e004      	b.n	8001942 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3710      	adds	r7, #16
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000008 	.word	0x20000008
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <HAL_IncTick+0x1c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b05      	ldr	r3, [pc, #20]	; (8001978 <HAL_IncTick+0x20>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4413      	add	r3, r2
 8001966:	4a03      	ldr	r2, [pc, #12]	; (8001974 <HAL_IncTick+0x1c>)
 8001968:	6013      	str	r3, [r2, #0]
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	20000358 	.word	0x20000358
 8001978:	20000008 	.word	0x20000008

0800197c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return uwTick;
 8001980:	4b03      	ldr	r3, [pc, #12]	; (8001990 <HAL_GetTick+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000358 	.word	0x20000358

08001994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800199c:	f7ff ffee 	bl	800197c <HAL_GetTick>
 80019a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ac:	d004      	beq.n	80019b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ae:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_Delay+0x40>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	4413      	add	r3, r2
 80019b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019b8:	bf00      	nop
 80019ba:	f7ff ffdf 	bl	800197c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	68fa      	ldr	r2, [r7, #12]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d8f7      	bhi.n	80019ba <HAL_Delay+0x26>
  {
  }
}
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20000008 	.word	0x20000008

080019d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	609a      	str	r2, [r3, #8]
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019fe:	b480      	push	{r7}
 8001a00:	b083      	sub	sp, #12
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	6078      	str	r0, [r7, #4]
 8001a06:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	609a      	str	r2, [r3, #8]
}
 8001a18:	bf00      	nop
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	; 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <LL_ADC_SetOffset+0x44>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	687a      	ldr	r2, [r7, #4]
 8001a66:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a78:	bf00      	nop
 8001a7a:	371c      	adds	r7, #28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	03fff000 	.word	0x03fff000

08001a88 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3360      	adds	r3, #96	; 0x60
 8001a96:	461a      	mov	r2, r3
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3360      	adds	r3, #96	; 0x60
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b087      	sub	sp, #28
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	3360      	adds	r3, #96	; 0x60
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b14:	bf00      	nop
 8001b16:	371c      	adds	r7, #28
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3360      	adds	r3, #96	; 0x60
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	431a      	orrs	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b4a:	bf00      	nop
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b083      	sub	sp, #12
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	615a      	str	r2, [r3, #20]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b087      	sub	sp, #28
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	0a1b      	lsrs	r3, r3, #8
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	4413      	add	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
 8001bcc:	211f      	movs	r1, #31
 8001bce:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	0e9b      	lsrs	r3, r3, #26
 8001bda:	f003 011f 	and.w	r1, r3, #31
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f003 031f 	and.w	r3, r3, #31
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	431a      	orrs	r2, r3
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001bee:	bf00      	nop
 8001bf0:	371c      	adds	r7, #28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b087      	sub	sp, #28
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	3314      	adds	r3, #20
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0e5b      	lsrs	r3, r3, #25
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	4413      	add	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	0d1b      	lsrs	r3, r3, #20
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2107      	movs	r1, #7
 8001c28:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	401a      	ands	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	0d1b      	lsrs	r3, r3, #20
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	6879      	ldr	r1, [r7, #4]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c44:	bf00      	nop
 8001c46:	371c      	adds	r7, #28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f003 0318 	and.w	r3, r3, #24
 8001c72:	4908      	ldr	r1, [pc, #32]	; (8001c94 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001c74:	40d9      	lsrs	r1, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	400b      	ands	r3, r1
 8001c7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	0007ffff 	.word	0x0007ffff

08001c98 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 031f 	and.w	r3, r3, #31
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ce0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6093      	str	r3, [r2, #8]
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d08:	d101      	bne.n	8001d0e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001d2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001d58:	d101      	bne.n	8001d5e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d80:	f043 0201 	orr.w	r2, r3, #1
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d101      	bne.n	8001dac <LL_ADC_IsEnabled+0x18>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <LL_ADC_IsEnabled+0x1a>
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001dca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001dce:	f043 0204 	orr.w	r2, r3, #4
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b083      	sub	sp, #12
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d101      	bne.n	8001dfa <LL_ADC_REG_IsConversionOngoing+0x18>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f003 0308 	and.w	r3, r3, #8
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d101      	bne.n	8001e20 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b089      	sub	sp, #36	; 0x24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d101      	bne.n	8001e4a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1a9      	b.n	800219e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d109      	bne.n	8001e6c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff faf1 	bl	8001440 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff3f 	bl	8001cf4 <LL_ADC_IsDeepPowerDownEnabled>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff25 	bl	8001cd0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7ff ff5a 	bl	8001d44 <LL_ADC_IsInternalRegulatorEnabled>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff ff3e 	bl	8001d1c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ea0:	4b9c      	ldr	r3, [pc, #624]	; (8002114 <HAL_ADC_Init+0x2e4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	4a9c      	ldr	r2, [pc, #624]	; (8002118 <HAL_ADC_Init+0x2e8>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	3301      	adds	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001eb4:	e002      	b.n	8001ebc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1f9      	bne.n	8001eb6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff3c 	bl	8001d44 <LL_ADC_IsInternalRegulatorEnabled>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d10d      	bne.n	8001eee <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed6:	f043 0210 	orr.w	r2, r3, #16
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ee2:	f043 0201 	orr.w	r2, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff75 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 8001ef8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f040 8142 	bne.w	800218c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 813e 	bne.w	800218c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f18:	f043 0202 	orr.w	r2, r3, #2
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff35 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d141      	bne.n	8001fb4 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f38:	d004      	beq.n	8001f44 <HAL_ADC_Init+0x114>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a77      	ldr	r2, [pc, #476]	; (800211c <HAL_ADC_Init+0x2ec>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10f      	bne.n	8001f64 <HAL_ADC_Init+0x134>
 8001f44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f48:	f7ff ff24 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	4873      	ldr	r0, [pc, #460]	; (800211c <HAL_ADC_Init+0x2ec>)
 8001f50:	f7ff ff20 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4323      	orrs	r3, r4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	bf0c      	ite	eq
 8001f5c:	2301      	moveq	r3, #1
 8001f5e:	2300      	movne	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e012      	b.n	8001f8a <HAL_ADC_Init+0x15a>
 8001f64:	486e      	ldr	r0, [pc, #440]	; (8002120 <HAL_ADC_Init+0x2f0>)
 8001f66:	f7ff ff15 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	486d      	ldr	r0, [pc, #436]	; (8002124 <HAL_ADC_Init+0x2f4>)
 8001f6e:	f7ff ff11 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f72:	4603      	mov	r3, r0
 8001f74:	431c      	orrs	r4, r3
 8001f76:	486c      	ldr	r0, [pc, #432]	; (8002128 <HAL_ADC_Init+0x2f8>)
 8001f78:	f7ff ff0c 	bl	8001d94 <LL_ADC_IsEnabled>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4323      	orrs	r3, r4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	bf0c      	ite	eq
 8001f84:	2301      	moveq	r3, #1
 8001f86:	2300      	movne	r3, #0
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f96:	d004      	beq.n	8001fa2 <HAL_ADC_Init+0x172>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5f      	ldr	r2, [pc, #380]	; (800211c <HAL_ADC_Init+0x2ec>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Init+0x176>
 8001fa2:	4a62      	ldr	r2, [pc, #392]	; (800212c <HAL_ADC_Init+0x2fc>)
 8001fa4:	e000      	b.n	8001fa8 <HAL_ADC_Init+0x178>
 8001fa6:	4a62      	ldr	r2, [pc, #392]	; (8002130 <HAL_ADC_Init+0x300>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4619      	mov	r1, r3
 8001fae:	4610      	mov	r0, r2
 8001fb0:	f7ff fd12 	bl	80019d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	7f5b      	ldrb	r3, [r3, #29]
 8001fb8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fbe:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fc4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fd2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	045b      	lsls	r3, r3, #17
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d009      	beq.n	800200c <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	4b48      	ldr	r3, [pc, #288]	; (8002134 <HAL_ADC_Init+0x304>)
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	69b9      	ldr	r1, [r7, #24]
 800201c:	430b      	orrs	r3, r1
 800201e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fee4 	bl	8001e08 <LL_ADC_INJ_IsConversionOngoing>
 8002040:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d17f      	bne.n	8002148 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d17c      	bne.n	8002148 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002052:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800205a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800206a:	f023 0302 	bic.w	r3, r3, #2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	69b9      	ldr	r1, [r7, #24]
 8002074:	430b      	orrs	r3, r1
 8002076:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691a      	ldr	r2, [r3, #16]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800208e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002098:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800209c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6911      	ldr	r1, [r2, #16]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	430b      	orrs	r3, r1
 80020aa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ae:	e013      	b.n	80020d8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6812      	ldr	r2, [r2, #0]
 80020cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020d4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d12a      	bne.n	8002138 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80020ec:	f023 0304 	bic.w	r3, r3, #4
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80020f8:	4311      	orrs	r1, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80020fe:	4311      	orrs	r1, r2
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002104:	430a      	orrs	r2, r1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0201 	orr.w	r2, r2, #1
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	e019      	b.n	8002148 <HAL_ADC_Init+0x318>
 8002114:	20000000 	.word	0x20000000
 8002118:	053e2d63 	.word	0x053e2d63
 800211c:	50000100 	.word	0x50000100
 8002120:	50000400 	.word	0x50000400
 8002124:	50000500 	.word	0x50000500
 8002128:	50000600 	.word	0x50000600
 800212c:	50000300 	.word	0x50000300
 8002130:	50000700 	.word	0x50000700
 8002134:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0201 	bic.w	r2, r2, #1
 8002146:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10c      	bne.n	800216a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f023 010f 	bic.w	r1, r3, #15
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
 8002168:	e007      	b.n	800217a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 020f 	bic.w	r2, r2, #15
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	f043 0201 	orr.w	r2, r3, #1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	65da      	str	r2, [r3, #92]	; 0x5c
 800218a:	e007      	b.n	800219c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	f043 0210 	orr.w	r2, r3, #16
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800219c:	7ffb      	ldrb	r3, [r7, #31]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop

080021a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b8:	d004      	beq.n	80021c4 <HAL_ADC_Start+0x1c>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a67      	ldr	r2, [pc, #412]	; (800235c <HAL_ADC_Start+0x1b4>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_Start+0x20>
 80021c4:	4b66      	ldr	r3, [pc, #408]	; (8002360 <HAL_ADC_Start+0x1b8>)
 80021c6:	e000      	b.n	80021ca <HAL_ADC_Start+0x22>
 80021c8:	4b66      	ldr	r3, [pc, #408]	; (8002364 <HAL_ADC_Start+0x1bc>)
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fd64 	bl	8001c98 <LL_ADC_GetMultimode>
 80021d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fe03 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 80b4 	bne.w	800234c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_Start+0x4a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e0af      	b.n	8002352 <HAL_ADC_Start+0x1aa>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 fe0c 	bl	8002e18 <ADC_Enable>
 8002200:	4603      	mov	r3, r0
 8002202:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 809b 	bne.w	8002342 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002214:	f023 0301 	bic.w	r3, r3, #1
 8002218:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_ADC_Start+0x1b4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d009      	beq.n	800223e <HAL_ADC_Start+0x96>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a4e      	ldr	r2, [pc, #312]	; (8002368 <HAL_ADC_Start+0x1c0>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d002      	beq.n	800223a <HAL_ADC_Start+0x92>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	e003      	b.n	8002242 <HAL_ADC_Start+0x9a>
 800223a:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_ADC_Start+0x1c4>)
 800223c:	e001      	b.n	8002242 <HAL_ADC_Start+0x9a>
 800223e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	4293      	cmp	r3, r2
 8002248:	d002      	beq.n	8002250 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d105      	bne.n	800225c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002264:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002268:	d106      	bne.n	8002278 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800226e:	f023 0206 	bic.w	r2, r3, #6
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	661a      	str	r2, [r3, #96]	; 0x60
 8002276:	e002      	b.n	800227e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	221c      	movs	r2, #28
 8002284:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a32      	ldr	r2, [pc, #200]	; (800235c <HAL_ADC_Start+0x1b4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d009      	beq.n	80022ac <HAL_ADC_Start+0x104>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a32      	ldr	r2, [pc, #200]	; (8002368 <HAL_ADC_Start+0x1c0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d002      	beq.n	80022a8 <HAL_ADC_Start+0x100>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e003      	b.n	80022b0 <HAL_ADC_Start+0x108>
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_ADC_Start+0x1c4>)
 80022aa:	e001      	b.n	80022b0 <HAL_ADC_Start+0x108>
 80022ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d008      	beq.n	80022ca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d002      	beq.n	80022ca <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	2b09      	cmp	r3, #9
 80022c8:	d114      	bne.n	80022f4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d007      	beq.n	80022e8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7ff fd64 	bl	8001dba <LL_ADC_REG_StartConversion>
 80022f2:	e02d      	b.n	8002350 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a15      	ldr	r2, [pc, #84]	; (800235c <HAL_ADC_Start+0x1b4>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d009      	beq.n	800231e <HAL_ADC_Start+0x176>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a16      	ldr	r2, [pc, #88]	; (8002368 <HAL_ADC_Start+0x1c0>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d002      	beq.n	800231a <HAL_ADC_Start+0x172>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	e003      	b.n	8002322 <HAL_ADC_Start+0x17a>
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_ADC_Start+0x1c4>)
 800231c:	e001      	b.n	8002322 <HAL_ADC_Start+0x17a>
 800231e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002322:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00f      	beq.n	8002350 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002338:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002340:	e006      	b.n	8002350 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800234a:	e001      	b.n	8002350 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800234c:	2302      	movs	r3, #2
 800234e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002350:	7dfb      	ldrb	r3, [r7, #23]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	50000100 	.word	0x50000100
 8002360:	50000300 	.word	0x50000300
 8002364:	50000700 	.word	0x50000700
 8002368:	50000500 	.word	0x50000500
 800236c:	50000400 	.word	0x50000400

08002370 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002382:	d004      	beq.n	800238e <HAL_ADC_PollForConversion+0x1e>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a77      	ldr	r2, [pc, #476]	; (8002568 <HAL_ADC_PollForConversion+0x1f8>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d101      	bne.n	8002392 <HAL_ADC_PollForConversion+0x22>
 800238e:	4b77      	ldr	r3, [pc, #476]	; (800256c <HAL_ADC_PollForConversion+0x1fc>)
 8002390:	e000      	b.n	8002394 <HAL_ADC_PollForConversion+0x24>
 8002392:	4b77      	ldr	r3, [pc, #476]	; (8002570 <HAL_ADC_PollForConversion+0x200>)
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fc7f 	bl	8001c98 <LL_ADC_GetMultimode>
 800239a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b08      	cmp	r3, #8
 80023a2:	d102      	bne.n	80023aa <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80023a4:	2308      	movs	r3, #8
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	e037      	b.n	800241a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	d002      	beq.n	80023bc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b09      	cmp	r3, #9
 80023ba:	d111      	bne.n	80023e0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ce:	f043 0220 	orr.w	r2, r3, #32
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0c1      	b.n	800255e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80023da:	2304      	movs	r3, #4
 80023dc:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80023de:	e01c      	b.n	800241a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_PollForConversion+0x84>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a5e      	ldr	r2, [pc, #376]	; (8002568 <HAL_ADC_PollForConversion+0x1f8>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d101      	bne.n	80023f8 <HAL_ADC_PollForConversion+0x88>
 80023f4:	4b5d      	ldr	r3, [pc, #372]	; (800256c <HAL_ADC_PollForConversion+0x1fc>)
 80023f6:	e000      	b.n	80023fa <HAL_ADC_PollForConversion+0x8a>
 80023f8:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_ADC_PollForConversion+0x200>)
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fc5a 	bl	8001cb4 <LL_ADC_GetMultiDMATransfer>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d007      	beq.n	8002416 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800240a:	f043 0220 	orr.w	r2, r3, #32
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e0a3      	b.n	800255e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002416:	2304      	movs	r3, #4
 8002418:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800241a:	f7ff faaf 	bl	800197c <HAL_GetTick>
 800241e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002420:	e021      	b.n	8002466 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002428:	d01d      	beq.n	8002466 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800242a:	f7ff faa7 	bl	800197c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d302      	bcc.n	8002440 <HAL_ADC_PollForConversion+0xd0>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d112      	bne.n	8002466 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	4013      	ands	r3, r2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10b      	bne.n	8002466 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	f043 0204 	orr.w	r2, r3, #4
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e07b      	b.n	800255e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0d6      	beq.n	8002422 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002478:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fb79 	bl	8001b7c <LL_ADC_REG_IsTriggerSourceSWStart>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d01c      	beq.n	80024ca <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	7f5b      	ldrb	r3, [r3, #29]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d118      	bne.n	80024ca <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d111      	bne.n	80024ca <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d105      	bne.n	80024ca <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	f043 0201 	orr.w	r2, r3, #1
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a26      	ldr	r2, [pc, #152]	; (8002568 <HAL_ADC_PollForConversion+0x1f8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d009      	beq.n	80024e8 <HAL_ADC_PollForConversion+0x178>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a26      	ldr	r2, [pc, #152]	; (8002574 <HAL_ADC_PollForConversion+0x204>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d002      	beq.n	80024e4 <HAL_ADC_PollForConversion+0x174>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	e003      	b.n	80024ec <HAL_ADC_PollForConversion+0x17c>
 80024e4:	4b24      	ldr	r3, [pc, #144]	; (8002578 <HAL_ADC_PollForConversion+0x208>)
 80024e6:	e001      	b.n	80024ec <HAL_ADC_PollForConversion+0x17c>
 80024e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d008      	beq.n	8002506 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b09      	cmp	r3, #9
 8002504:	d104      	bne.n	8002510 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	e014      	b.n	800253a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a14      	ldr	r2, [pc, #80]	; (8002568 <HAL_ADC_PollForConversion+0x1f8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d009      	beq.n	800252e <HAL_ADC_PollForConversion+0x1be>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a15      	ldr	r2, [pc, #84]	; (8002574 <HAL_ADC_PollForConversion+0x204>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d002      	beq.n	800252a <HAL_ADC_PollForConversion+0x1ba>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	e003      	b.n	8002532 <HAL_ADC_PollForConversion+0x1c2>
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <HAL_ADC_PollForConversion+0x208>)
 800252c:	e001      	b.n	8002532 <HAL_ADC_PollForConversion+0x1c2>
 800252e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002532:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d104      	bne.n	800254a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2208      	movs	r2, #8
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	e008      	b.n	800255c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d103      	bne.n	800255c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	220c      	movs	r2, #12
 800255a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3720      	adds	r7, #32
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	50000100 	.word	0x50000100
 800256c:	50000300 	.word	0x50000300
 8002570:	50000700 	.word	0x50000700
 8002574:	50000500 	.word	0x50000500
 8002578:	50000400 	.word	0x50000400

0800257c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
	...

08002598 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0b6      	sub	sp, #216	; 0xd8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x24>
 80025b6:	2302      	movs	r3, #2
 80025b8:	f000 bc13 	b.w	8002de2 <HAL_ADC_ConfigChannel+0x84a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fc0a 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f040 83f3 	bne.w	8002dbc <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	461a      	mov	r2, r3
 80025e4:	f7ff fadd 	bl	8001ba2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff fbf8 	bl	8001de2 <LL_ADC_REG_IsConversionOngoing>
 80025f2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff fc04 	bl	8001e08 <LL_ADC_INJ_IsConversionOngoing>
 8002600:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002604:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002608:	2b00      	cmp	r3, #0
 800260a:	f040 81d9 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800260e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 81d4 	bne.w	80029c0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002620:	d10f      	bne.n	8002642 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2200      	movs	r2, #0
 800262c:	4619      	mov	r1, r3
 800262e:	f7ff fae4 	bl	8001bfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fa8b 	bl	8001b56 <LL_ADC_SetSamplingTimeCommonConfig>
 8002640:	e00e      	b.n	8002660 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	6819      	ldr	r1, [r3, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	461a      	mov	r2, r3
 8002650:	f7ff fad3 	bl	8001bfa <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2100      	movs	r1, #0
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff fa7b 	bl	8001b56 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	695a      	ldr	r2, [r3, #20]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	f003 0303 	and.w	r3, r3, #3
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b04      	cmp	r3, #4
 8002680:	d022      	beq.n	80026c8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6818      	ldr	r0, [r3, #0]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002692:	f7ff f9d5 	bl	8001a40 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6818      	ldr	r0, [r3, #0]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6919      	ldr	r1, [r3, #16]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f7ff fa21 	bl	8001aea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d102      	bne.n	80026be <HAL_ADC_ConfigChannel+0x126>
 80026b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026bc:	e000      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x128>
 80026be:	2300      	movs	r3, #0
 80026c0:	461a      	mov	r2, r3
 80026c2:	f7ff fa2d 	bl	8001b20 <LL_ADC_SetOffsetSaturation>
 80026c6:	e17b      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2100      	movs	r1, #0
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f9da 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10a      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x15c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2100      	movs	r1, #0
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff f9cf 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80026ea:	4603      	mov	r3, r0
 80026ec:	0e9b      	lsrs	r3, r3, #26
 80026ee:	f003 021f 	and.w	r2, r3, #31
 80026f2:	e01e      	b.n	8002732 <HAL_ADC_ConfigChannel+0x19a>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2100      	movs	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7ff f9c4 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002700:	4603      	mov	r3, r0
 8002702:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002706:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800270a:	fa93 f3a3 	rbit	r3, r3
 800270e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002716:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800271a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002722:	2320      	movs	r3, #32
 8002724:	e004      	b.n	8002730 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d105      	bne.n	800274a <HAL_ADC_ConfigChannel+0x1b2>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	f003 031f 	and.w	r3, r3, #31
 8002748:	e018      	b.n	800277c <HAL_ADC_ConfigChannel+0x1e4>
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002756:	fa93 f3a3 	rbit	r3, r3
 800275a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800275e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002762:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002766:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e004      	b.n	800277c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002772:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002776:	fab3 f383 	clz	r3, r3
 800277a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800277c:	429a      	cmp	r2, r3
 800277e:	d106      	bne.n	800278e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2200      	movs	r2, #0
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f7ff f993 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2101      	movs	r1, #1
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff f977 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800279a:	4603      	mov	r3, r0
 800279c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d10a      	bne.n	80027ba <HAL_ADC_ConfigChannel+0x222>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2101      	movs	r1, #1
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff f96c 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80027b0:	4603      	mov	r3, r0
 80027b2:	0e9b      	lsrs	r3, r3, #26
 80027b4:	f003 021f 	and.w	r2, r3, #31
 80027b8:	e01e      	b.n	80027f8 <HAL_ADC_ConfigChannel+0x260>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2101      	movs	r1, #1
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff f961 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 80027c6:	4603      	mov	r3, r0
 80027c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027d0:	fa93 f3a3 	rbit	r3, r3
 80027d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80027d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80027dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80027e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80027e8:	2320      	movs	r3, #32
 80027ea:	e004      	b.n	80027f6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80027ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80027f0:	fab3 f383 	clz	r3, r3
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002800:	2b00      	cmp	r3, #0
 8002802:	d105      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x278>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	0e9b      	lsrs	r3, r3, #26
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	e018      	b.n	8002842 <HAL_ADC_ConfigChannel+0x2aa>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002824:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002828:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800282c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002834:	2320      	movs	r3, #32
 8002836:	e004      	b.n	8002842 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002838:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800283c:	fab3 f383 	clz	r3, r3
 8002840:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002842:	429a      	cmp	r2, r3
 8002844:	d106      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2200      	movs	r2, #0
 800284c:	2101      	movs	r1, #1
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f930 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2102      	movs	r1, #2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff f914 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002860:	4603      	mov	r3, r0
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10a      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x2e8>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2102      	movs	r1, #2
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff f909 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002876:	4603      	mov	r3, r0
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	f003 021f 	and.w	r2, r3, #31
 800287e:	e01e      	b.n	80028be <HAL_ADC_ConfigChannel+0x326>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2102      	movs	r1, #2
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff f8fe 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800288c:	4603      	mov	r3, r0
 800288e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800289e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80028a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80028a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80028ae:	2320      	movs	r3, #32
 80028b0:	e004      	b.n	80028bc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80028b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028b6:	fab3 f383 	clz	r3, r3
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x33e>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0e9b      	lsrs	r3, r3, #26
 80028d0:	f003 031f 	and.w	r3, r3, #31
 80028d4:	e016      	b.n	8002904 <HAL_ADC_ConfigChannel+0x36c>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80028e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80028ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80028ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80028f6:	2320      	movs	r3, #32
 80028f8:	e004      	b.n	8002904 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80028fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fe:	fab3 f383 	clz	r3, r3
 8002902:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002904:	429a      	cmp	r2, r3
 8002906:	d106      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2200      	movs	r2, #0
 800290e:	2102      	movs	r1, #2
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f8cf 	bl	8001ab4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2103      	movs	r1, #3
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff f8b3 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002922:	4603      	mov	r3, r0
 8002924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002928:	2b00      	cmp	r3, #0
 800292a:	d10a      	bne.n	8002942 <HAL_ADC_ConfigChannel+0x3aa>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2103      	movs	r1, #3
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff f8a8 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 8002938:	4603      	mov	r3, r0
 800293a:	0e9b      	lsrs	r3, r3, #26
 800293c:	f003 021f 	and.w	r2, r3, #31
 8002940:	e017      	b.n	8002972 <HAL_ADC_ConfigChannel+0x3da>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2103      	movs	r1, #3
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f89d 	bl	8001a88 <LL_ADC_GetOffsetChannel>
 800294e:	4603      	mov	r3, r0
 8002950:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002952:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002954:	fa93 f3a3 	rbit	r3, r3
 8002958:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800295a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800295c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800295e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e003      	b.n	8002970 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002968:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297a:	2b00      	cmp	r3, #0
 800297c:	d105      	bne.n	800298a <HAL_ADC_ConfigChannel+0x3f2>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	0e9b      	lsrs	r3, r3, #26
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	e011      	b.n	80029ae <HAL_ADC_ConfigChannel+0x416>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002998:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80029a2:	2320      	movs	r3, #32
 80029a4:	e003      	b.n	80029ae <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80029a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029a8:	fab3 f383 	clz	r3, r3
 80029ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d106      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	2103      	movs	r1, #3
 80029ba:	4618      	mov	r0, r3
 80029bc:	f7ff f87a 	bl	8001ab4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff f9e5 	bl	8001d94 <LL_ADC_IsEnabled>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f040 813d 	bne.w	8002c4c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6819      	ldr	r1, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	461a      	mov	r2, r3
 80029e0:	f7ff f936 	bl	8001c50 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4aa2      	ldr	r2, [pc, #648]	; (8002c74 <HAL_ADC_ConfigChannel+0x6dc>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	f040 812e 	bne.w	8002c4c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10b      	bne.n	8002a18 <HAL_ADC_ConfigChannel+0x480>
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0e9b      	lsrs	r3, r3, #26
 8002a06:	3301      	adds	r3, #1
 8002a08:	f003 031f 	and.w	r3, r3, #31
 8002a0c:	2b09      	cmp	r3, #9
 8002a0e:	bf94      	ite	ls
 8002a10:	2301      	movls	r3, #1
 8002a12:	2300      	movhi	r3, #0
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	e019      	b.n	8002a4c <HAL_ADC_ConfigChannel+0x4b4>
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a20:	fa93 f3a3 	rbit	r3, r3
 8002a24:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002a26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a28:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002a30:	2320      	movs	r3, #32
 8002a32:	e003      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002a34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a36:	fab3 f383 	clz	r3, r3
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b09      	cmp	r3, #9
 8002a44:	bf94      	ite	ls
 8002a46:	2301      	movls	r3, #1
 8002a48:	2300      	movhi	r3, #0
 8002a4a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d079      	beq.n	8002b44 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d107      	bne.n	8002a6c <HAL_ADC_ConfigChannel+0x4d4>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	0e9b      	lsrs	r3, r3, #26
 8002a62:	3301      	adds	r3, #1
 8002a64:	069b      	lsls	r3, r3, #26
 8002a66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a6a:	e015      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x500>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a74:	fa93 f3a3 	rbit	r3, r3
 8002a78:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002a7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a7c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002a84:	2320      	movs	r3, #32
 8002a86:	e003      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a8a:	fab3 f383 	clz	r3, r3
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	069b      	lsls	r3, r3, #26
 8002a94:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_ConfigChannel+0x520>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	0e9b      	lsrs	r3, r3, #26
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f003 031f 	and.w	r3, r3, #31
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	e017      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x550>
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ac6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002aca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002ad0:	2320      	movs	r3, #32
 8002ad2:	e003      	b.n	8002adc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae8:	ea42 0103 	orr.w	r1, r2, r3
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10a      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x576>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	3301      	adds	r3, #1
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	051b      	lsls	r3, r3, #20
 8002b0c:	e018      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x5a8>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b16:	fa93 f3a3 	rbit	r3, r3
 8002b1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002b26:	2320      	movs	r3, #32
 8002b28:	e003      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002b2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	3301      	adds	r3, #1
 8002b34:	f003 021f 	and.w	r2, r3, #31
 8002b38:	4613      	mov	r3, r2
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4413      	add	r3, r2
 8002b3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b40:	430b      	orrs	r3, r1
 8002b42:	e07e      	b.n	8002c42 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d107      	bne.n	8002b60 <HAL_ADC_ConfigChannel+0x5c8>
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	0e9b      	lsrs	r3, r3, #26
 8002b56:	3301      	adds	r3, #1
 8002b58:	069b      	lsls	r3, r3, #26
 8002b5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b5e:	e015      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x5f4>
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	fa93 f3a3 	rbit	r3, r3
 8002b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b70:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d101      	bne.n	8002b7c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002b78:	2320      	movs	r3, #32
 8002b7a:	e003      	b.n	8002b84 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b7e:	fab3 f383 	clz	r3, r3
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	069b      	lsls	r3, r3, #26
 8002b88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d109      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x614>
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	0e9b      	lsrs	r3, r3, #26
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	f003 031f 	and.w	r3, r3, #31
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8002baa:	e017      	b.n	8002bdc <HAL_ADC_ConfigChannel+0x644>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb2:	6a3b      	ldr	r3, [r7, #32]
 8002bb4:	fa93 f3a3 	rbit	r3, r3
 8002bb8:	61fb      	str	r3, [r7, #28]
  return result;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002bc4:	2320      	movs	r3, #32
 8002bc6:	e003      	b.n	8002bd0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bca:	fab3 f383 	clz	r3, r3
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bdc:	ea42 0103 	orr.w	r1, r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10d      	bne.n	8002c08 <HAL_ADC_ConfigChannel+0x670>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	3b1e      	subs	r3, #30
 8002c00:	051b      	lsls	r3, r3, #20
 8002c02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c06:	e01b      	b.n	8002c40 <HAL_ADC_ConfigChannel+0x6a8>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	fa93 f3a3 	rbit	r3, r3
 8002c14:	613b      	str	r3, [r7, #16]
  return result;
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002c20:	2320      	movs	r3, #32
 8002c22:	e003      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	f003 021f 	and.w	r2, r3, #31
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	3b1e      	subs	r3, #30
 8002c3a:	051b      	lsls	r3, r3, #20
 8002c3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c40:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c46:	4619      	mov	r1, r3
 8002c48:	f7fe ffd7 	bl	8001bfa <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b09      	ldr	r3, [pc, #36]	; (8002c78 <HAL_ADC_ConfigChannel+0x6e0>)
 8002c52:	4013      	ands	r3, r2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80be 	beq.w	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c62:	d004      	beq.n	8002c6e <HAL_ADC_ConfigChannel+0x6d6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <HAL_ADC_ConfigChannel+0x6e4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d10a      	bne.n	8002c84 <HAL_ADC_ConfigChannel+0x6ec>
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <HAL_ADC_ConfigChannel+0x6e8>)
 8002c70:	e009      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x6ee>
 8002c72:	bf00      	nop
 8002c74:	407f0000 	.word	0x407f0000
 8002c78:	80080000 	.word	0x80080000
 8002c7c:	50000100 	.word	0x50000100
 8002c80:	50000300 	.word	0x50000300
 8002c84:	4b59      	ldr	r3, [pc, #356]	; (8002dec <HAL_ADC_ConfigChannel+0x854>)
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fe fecc 	bl	8001a24 <LL_ADC_GetCommonPathInternalCh>
 8002c8c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a56      	ldr	r2, [pc, #344]	; (8002df0 <HAL_ADC_ConfigChannel+0x858>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d004      	beq.n	8002ca4 <HAL_ADC_ConfigChannel+0x70c>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a55      	ldr	r2, [pc, #340]	; (8002df4 <HAL_ADC_ConfigChannel+0x85c>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d13a      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ca8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d134      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cb8:	d005      	beq.n	8002cc6 <HAL_ADC_ConfigChannel+0x72e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a4e      	ldr	r2, [pc, #312]	; (8002df8 <HAL_ADC_ConfigChannel+0x860>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	f040 8085 	bne.w	8002dd0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cce:	d004      	beq.n	8002cda <HAL_ADC_ConfigChannel+0x742>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a49      	ldr	r2, [pc, #292]	; (8002dfc <HAL_ADC_ConfigChannel+0x864>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d101      	bne.n	8002cde <HAL_ADC_ConfigChannel+0x746>
 8002cda:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_ADC_ConfigChannel+0x868>)
 8002cdc:	e000      	b.n	8002ce0 <HAL_ADC_ConfigChannel+0x748>
 8002cde:	4a43      	ldr	r2, [pc, #268]	; (8002dec <HAL_ADC_ConfigChannel+0x854>)
 8002ce0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f7fe fe87 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cf0:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <HAL_ADC_ConfigChannel+0x86c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	099b      	lsrs	r3, r3, #6
 8002cf6:	4a44      	ldr	r2, [pc, #272]	; (8002e08 <HAL_ADC_ConfigChannel+0x870>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	099b      	lsrs	r3, r3, #6
 8002cfe:	1c5a      	adds	r2, r3, #1
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d0a:	e002      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002d18:	e05a      	b.n	8002dd0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3b      	ldr	r2, [pc, #236]	; (8002e0c <HAL_ADC_ConfigChannel+0x874>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d125      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002d24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d11f      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a31      	ldr	r2, [pc, #196]	; (8002dfc <HAL_ADC_ConfigChannel+0x864>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d104      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x7ac>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_ADC_ConfigChannel+0x878>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d047      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4c:	d004      	beq.n	8002d58 <HAL_ADC_ConfigChannel+0x7c0>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <HAL_ADC_ConfigChannel+0x864>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x7c4>
 8002d58:	4a29      	ldr	r2, [pc, #164]	; (8002e00 <HAL_ADC_ConfigChannel+0x868>)
 8002d5a:	e000      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x7c6>
 8002d5c:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_ADC_ConfigChannel+0x854>)
 8002d5e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d66:	4619      	mov	r1, r3
 8002d68:	4610      	mov	r0, r2
 8002d6a:	f7fe fe48 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002d6e:	e031      	b.n	8002dd4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a27      	ldr	r2, [pc, #156]	; (8002e14 <HAL_ADC_ConfigChannel+0x87c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d12d      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002d7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d127      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <HAL_ADC_ConfigChannel+0x864>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d98:	d004      	beq.n	8002da4 <HAL_ADC_ConfigChannel+0x80c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a17      	ldr	r2, [pc, #92]	; (8002dfc <HAL_ADC_ConfigChannel+0x864>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x810>
 8002da4:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <HAL_ADC_ConfigChannel+0x868>)
 8002da6:	e000      	b.n	8002daa <HAL_ADC_ConfigChannel+0x812>
 8002da8:	4a10      	ldr	r2, [pc, #64]	; (8002dec <HAL_ADC_ConfigChannel+0x854>)
 8002daa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002dae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002db2:	4619      	mov	r1, r3
 8002db4:	4610      	mov	r0, r2
 8002db6:	f7fe fe22 	bl	80019fe <LL_ADC_SetCommonPathInternalCh>
 8002dba:	e00c      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002dce:	e002      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002dd0:	bf00      	nop
 8002dd2:	e000      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002dd4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002dde:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	37d8      	adds	r7, #216	; 0xd8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	50000700 	.word	0x50000700
 8002df0:	c3210000 	.word	0xc3210000
 8002df4:	90c00010 	.word	0x90c00010
 8002df8:	50000600 	.word	0x50000600
 8002dfc:	50000100 	.word	0x50000100
 8002e00:	50000300 	.word	0x50000300
 8002e04:	20000000 	.word	0x20000000
 8002e08:	053e2d63 	.word	0x053e2d63
 8002e0c:	c7520000 	.word	0xc7520000
 8002e10:	50000500 	.word	0x50000500
 8002e14:	cb840000 	.word	0xcb840000

08002e18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7fe ffb3 	bl	8001d94 <LL_ADC_IsEnabled>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d176      	bne.n	8002f22 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	4b3c      	ldr	r3, [pc, #240]	; (8002f2c <ADC_Enable+0x114>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	f043 0210 	orr.w	r2, r3, #16
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e52:	f043 0201 	orr.w	r2, r3, #1
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e062      	b.n	8002f24 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fe ff82 	bl	8001d6c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e70:	d004      	beq.n	8002e7c <ADC_Enable+0x64>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2e      	ldr	r2, [pc, #184]	; (8002f30 <ADC_Enable+0x118>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <ADC_Enable+0x68>
 8002e7c:	4b2d      	ldr	r3, [pc, #180]	; (8002f34 <ADC_Enable+0x11c>)
 8002e7e:	e000      	b.n	8002e82 <ADC_Enable+0x6a>
 8002e80:	4b2d      	ldr	r3, [pc, #180]	; (8002f38 <ADC_Enable+0x120>)
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fe fdce 	bl	8001a24 <LL_ADC_GetCommonPathInternalCh>
 8002e88:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002e8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d013      	beq.n	8002eba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e92:	4b2a      	ldr	r3, [pc, #168]	; (8002f3c <ADC_Enable+0x124>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	099b      	lsrs	r3, r3, #6
 8002e98:	4a29      	ldr	r2, [pc, #164]	; (8002f40 <ADC_Enable+0x128>)
 8002e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e9e:	099b      	lsrs	r3, r3, #6
 8002ea0:	1c5a      	adds	r2, r3, #1
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	4413      	add	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eac:	e002      	b.n	8002eb4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f9      	bne.n	8002eae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002eba:	f7fe fd5f 	bl	800197c <HAL_GetTick>
 8002ebe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ec0:	e028      	b.n	8002f14 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fe ff64 	bl	8001d94 <LL_ADC_IsEnabled>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe ff48 	bl	8001d6c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002edc:	f7fe fd4e 	bl	800197c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d914      	bls.n	8002f14 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d00d      	beq.n	8002f14 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	f043 0210 	orr.w	r2, r3, #16
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f08:	f043 0201 	orr.w	r2, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e007      	b.n	8002f24 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d1cf      	bne.n	8002ec2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	8000003f 	.word	0x8000003f
 8002f30:	50000100 	.word	0x50000100
 8002f34:	50000300 	.word	0x50000300
 8002f38:	50000700 	.word	0x50000700
 8002f3c:	20000000 	.word	0x20000000
 8002f40:	053e2d63 	.word	0x053e2d63

08002f44 <LL_ADC_IsEnabled>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <LL_ADC_IsEnabled+0x18>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e000      	b.n	8002f5e <LL_ADC_IsEnabled+0x1a>
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_REG_IsConversionOngoing>:
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d101      	bne.n	8002f82 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b0a1      	sub	sp, #132	; 0x84
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d101      	bne.n	8002fae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002faa:	2302      	movs	r3, #2
 8002fac:	e0e7      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002fba:	2300      	movs	r3, #0
 8002fbc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fc6:	d102      	bne.n	8002fce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	e009      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d102      	bne.n	8002fde <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002fd8:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fda:	60bb      	str	r3, [r7, #8]
 8002fdc:	e001      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d10b      	bne.n	8003000 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fec:	f043 0220 	orr.w	r2, r3, #32
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0be      	b.n	800317e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff ffb1 	bl	8002f6a <LL_ADC_REG_IsConversionOngoing>
 8003008:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ffab 	bl	8002f6a <LL_ADC_REG_IsConversionOngoing>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 80a0 	bne.w	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800301c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800301e:	2b00      	cmp	r3, #0
 8003020:	f040 809c 	bne.w	800315c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800302c:	d004      	beq.n	8003038 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a55      	ldr	r2, [pc, #340]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d101      	bne.n	800303c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003038:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800303a:	e000      	b.n	800303e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800303c:	4b56      	ldr	r3, [pc, #344]	; (8003198 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800303e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d04b      	beq.n	80030e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800305a:	035b      	lsls	r3, r3, #13
 800305c:	430b      	orrs	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003062:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800306c:	d004      	beq.n	8003078 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a45      	ldr	r2, [pc, #276]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d10f      	bne.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003078:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800307c:	f7ff ff62 	bl	8002f44 <LL_ADC_IsEnabled>
 8003080:	4604      	mov	r4, r0
 8003082:	4841      	ldr	r0, [pc, #260]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003084:	f7ff ff5e 	bl	8002f44 <LL_ADC_IsEnabled>
 8003088:	4603      	mov	r3, r0
 800308a:	4323      	orrs	r3, r4
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	e012      	b.n	80030be <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003098:	483c      	ldr	r0, [pc, #240]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800309a:	f7ff ff53 	bl	8002f44 <LL_ADC_IsEnabled>
 800309e:	4604      	mov	r4, r0
 80030a0:	483b      	ldr	r0, [pc, #236]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80030a2:	f7ff ff4f 	bl	8002f44 <LL_ADC_IsEnabled>
 80030a6:	4603      	mov	r3, r0
 80030a8:	431c      	orrs	r4, r3
 80030aa:	483c      	ldr	r0, [pc, #240]	; (800319c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80030ac:	f7ff ff4a 	bl	8002f44 <LL_ADC_IsEnabled>
 80030b0:	4603      	mov	r3, r0
 80030b2:	4323      	orrs	r3, r4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d056      	beq.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80030c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80030ca:	f023 030f 	bic.w	r3, r3, #15
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6811      	ldr	r1, [r2, #0]
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	431a      	orrs	r2, r3
 80030da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030dc:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030de:	e047      	b.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80030e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030ea:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f4:	d004      	beq.n	8003100 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d10f      	bne.n	8003120 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003100:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003104:	f7ff ff1e 	bl	8002f44 <LL_ADC_IsEnabled>
 8003108:	4604      	mov	r4, r0
 800310a:	481f      	ldr	r0, [pc, #124]	; (8003188 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800310c:	f7ff ff1a 	bl	8002f44 <LL_ADC_IsEnabled>
 8003110:	4603      	mov	r3, r0
 8003112:	4323      	orrs	r3, r4
 8003114:	2b00      	cmp	r3, #0
 8003116:	bf0c      	ite	eq
 8003118:	2301      	moveq	r3, #1
 800311a:	2300      	movne	r3, #0
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e012      	b.n	8003146 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003120:	481a      	ldr	r0, [pc, #104]	; (800318c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003122:	f7ff ff0f 	bl	8002f44 <LL_ADC_IsEnabled>
 8003126:	4604      	mov	r4, r0
 8003128:	4819      	ldr	r0, [pc, #100]	; (8003190 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800312a:	f7ff ff0b 	bl	8002f44 <LL_ADC_IsEnabled>
 800312e:	4603      	mov	r3, r0
 8003130:	431c      	orrs	r4, r3
 8003132:	481a      	ldr	r0, [pc, #104]	; (800319c <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003134:	f7ff ff06 	bl	8002f44 <LL_ADC_IsEnabled>
 8003138:	4603      	mov	r3, r0
 800313a:	4323      	orrs	r3, r4
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d012      	beq.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800314a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003152:	f023 030f 	bic.w	r3, r3, #15
 8003156:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003158:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800315a:	e009      	b.n	8003170 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003160:	f043 0220 	orr.w	r2, r3, #32
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800316e:	e000      	b.n	8003172 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800317a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800317e:	4618      	mov	r0, r3
 8003180:	3784      	adds	r7, #132	; 0x84
 8003182:	46bd      	mov	sp, r7
 8003184:	bd90      	pop	{r4, r7, pc}
 8003186:	bf00      	nop
 8003188:	50000100 	.word	0x50000100
 800318c:	50000400 	.word	0x50000400
 8003190:	50000500 	.word	0x50000500
 8003194:	50000300 	.word	0x50000300
 8003198:	50000700 	.word	0x50000700
 800319c:	50000600 	.word	0x50000600

080031a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b0:	4b0c      	ldr	r3, [pc, #48]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031bc:	4013      	ands	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d2:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <__NVIC_SetPriorityGrouping+0x44>)
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	60d3      	str	r3, [r2, #12]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	e000ed00 	.word	0xe000ed00

080031e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031ec:	4b04      	ldr	r3, [pc, #16]	; (8003200 <__NVIC_GetPriorityGrouping+0x18>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	0a1b      	lsrs	r3, r3, #8
 80031f2:	f003 0307 	and.w	r3, r3, #7
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000ed00 	.word	0xe000ed00

08003204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	2b00      	cmp	r3, #0
 8003214:	db0b      	blt.n	800322e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003216:	79fb      	ldrb	r3, [r7, #7]
 8003218:	f003 021f 	and.w	r2, r3, #31
 800321c:	4907      	ldr	r1, [pc, #28]	; (800323c <__NVIC_EnableIRQ+0x38>)
 800321e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003222:	095b      	lsrs	r3, r3, #5
 8003224:	2001      	movs	r0, #1
 8003226:	fa00 f202 	lsl.w	r2, r0, r2
 800322a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	e000e100 	.word	0xe000e100

08003240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	6039      	str	r1, [r7, #0]
 800324a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003250:	2b00      	cmp	r3, #0
 8003252:	db0a      	blt.n	800326a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	b2da      	uxtb	r2, r3
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <__NVIC_SetPriority+0x4c>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	0112      	lsls	r2, r2, #4
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	440b      	add	r3, r1
 8003264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003268:	e00a      	b.n	8003280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	b2da      	uxtb	r2, r3
 800326e:	4908      	ldr	r1, [pc, #32]	; (8003290 <__NVIC_SetPriority+0x50>)
 8003270:	79fb      	ldrb	r3, [r7, #7]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	3b04      	subs	r3, #4
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	440b      	add	r3, r1
 800327e:	761a      	strb	r2, [r3, #24]
}
 8003280:	bf00      	nop
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	e000e100 	.word	0xe000e100
 8003290:	e000ed00 	.word	0xe000ed00

08003294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003294:	b480      	push	{r7}
 8003296:	b089      	sub	sp, #36	; 0x24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f1c3 0307 	rsb	r3, r3, #7
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	bf28      	it	cs
 80032b2:	2304      	movcs	r3, #4
 80032b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032b6:	69fb      	ldr	r3, [r7, #28]
 80032b8:	3304      	adds	r3, #4
 80032ba:	2b06      	cmp	r3, #6
 80032bc:	d902      	bls.n	80032c4 <NVIC_EncodePriority+0x30>
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3b03      	subs	r3, #3
 80032c2:	e000      	b.n	80032c6 <NVIC_EncodePriority+0x32>
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032c8:	f04f 32ff 	mov.w	r2, #4294967295
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	fa02 f303 	lsl.w	r3, r2, r3
 80032d2:	43da      	mvns	r2, r3
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	401a      	ands	r2, r3
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032dc:	f04f 31ff 	mov.w	r1, #4294967295
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	43d9      	mvns	r1, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032ec:	4313      	orrs	r3, r2
         );
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3724      	adds	r7, #36	; 0x24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3b01      	subs	r3, #1
 8003308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330c:	d301      	bcc.n	8003312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800330e:	2301      	movs	r3, #1
 8003310:	e00f      	b.n	8003332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003312:	4a0a      	ldr	r2, [pc, #40]	; (800333c <SysTick_Config+0x40>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3b01      	subs	r3, #1
 8003318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331a:	210f      	movs	r1, #15
 800331c:	f04f 30ff 	mov.w	r0, #4294967295
 8003320:	f7ff ff8e 	bl	8003240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003324:	4b05      	ldr	r3, [pc, #20]	; (800333c <SysTick_Config+0x40>)
 8003326:	2200      	movs	r2, #0
 8003328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332a:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Config+0x40>)
 800332c:	2207      	movs	r2, #7
 800332e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	e000e010 	.word	0xe000e010

08003340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	f7ff ff29 	bl	80031a0 <__NVIC_SetPriorityGrouping>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b086      	sub	sp, #24
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
 8003362:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003364:	f7ff ff40 	bl	80031e8 <__NVIC_GetPriorityGrouping>
 8003368:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	68b9      	ldr	r1, [r7, #8]
 800336e:	6978      	ldr	r0, [r7, #20]
 8003370:	f7ff ff90 	bl	8003294 <NVIC_EncodePriority>
 8003374:	4602      	mov	r2, r0
 8003376:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337a:	4611      	mov	r1, r2
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff ff5f 	bl	8003240 <__NVIC_SetPriority>
}
 8003382:	bf00      	nop
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b082      	sub	sp, #8
 800338e:	af00      	add	r7, sp, #0
 8003390:	4603      	mov	r3, r0
 8003392:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff ff33 	bl	8003204 <__NVIC_EnableIRQ>
}
 800339e:	bf00      	nop
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f7ff ffa4 	bl	80032fc <SysTick_Config>
 80033b4:	4603      	mov	r3, r0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b087      	sub	sp, #28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033ce:	e15a      	b.n	8003686 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	2101      	movs	r1, #1
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	4013      	ands	r3, r2
 80033de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 814c 	beq.w	8003680 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d005      	beq.n	8003400 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d130      	bne.n	8003462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	2203      	movs	r2, #3
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003436:	2201      	movs	r2, #1
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	43db      	mvns	r3, r3
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	4013      	ands	r3, r2
 8003444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	091b      	lsrs	r3, r3, #4
 800344c:	f003 0201 	and.w	r2, r3, #1
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	fa02 f303 	lsl.w	r3, r2, r3
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
 800346a:	2b03      	cmp	r3, #3
 800346c:	d017      	beq.n	800349e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	f003 0303 	and.w	r3, r3, #3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d123      	bne.n	80034f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	08da      	lsrs	r2, r3, #3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	3208      	adds	r2, #8
 80034b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	220f      	movs	r2, #15
 80034c2:	fa02 f303 	lsl.w	r3, r2, r3
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f003 0307 	and.w	r3, r3, #7
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	6939      	ldr	r1, [r7, #16]
 80034ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2203      	movs	r2, #3
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0203 	and.w	r2, r3, #3
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 80a6 	beq.w	8003680 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003534:	4b5b      	ldr	r3, [pc, #364]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 8003536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003538:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6613      	str	r3, [r2, #96]	; 0x60
 8003540:	4b58      	ldr	r3, [pc, #352]	; (80036a4 <HAL_GPIO_Init+0x2e4>)
 8003542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003544:	f003 0301 	and.w	r3, r3, #1
 8003548:	60bb      	str	r3, [r7, #8]
 800354a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800354c:	4a56      	ldr	r2, [pc, #344]	; (80036a8 <HAL_GPIO_Init+0x2e8>)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	089b      	lsrs	r3, r3, #2
 8003552:	3302      	adds	r3, #2
 8003554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f003 0303 	and.w	r3, r3, #3
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	220f      	movs	r2, #15
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	43db      	mvns	r3, r3
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4013      	ands	r3, r2
 800356e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003576:	d01f      	beq.n	80035b8 <HAL_GPIO_Init+0x1f8>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <HAL_GPIO_Init+0x2ec>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d019      	beq.n	80035b4 <HAL_GPIO_Init+0x1f4>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a4b      	ldr	r2, [pc, #300]	; (80036b0 <HAL_GPIO_Init+0x2f0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d013      	beq.n	80035b0 <HAL_GPIO_Init+0x1f0>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a4a      	ldr	r2, [pc, #296]	; (80036b4 <HAL_GPIO_Init+0x2f4>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <HAL_GPIO_Init+0x1ec>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a49      	ldr	r2, [pc, #292]	; (80036b8 <HAL_GPIO_Init+0x2f8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_Init+0x1e8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a48      	ldr	r2, [pc, #288]	; (80036bc <HAL_GPIO_Init+0x2fc>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d101      	bne.n	80035a4 <HAL_GPIO_Init+0x1e4>
 80035a0:	2305      	movs	r3, #5
 80035a2:	e00a      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035a4:	2306      	movs	r3, #6
 80035a6:	e008      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035a8:	2304      	movs	r3, #4
 80035aa:	e006      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035ac:	2303      	movs	r3, #3
 80035ae:	e004      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035b0:	2302      	movs	r3, #2
 80035b2:	e002      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_GPIO_Init+0x1fa>
 80035b8:	2300      	movs	r3, #0
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	f002 0203 	and.w	r2, r2, #3
 80035c0:	0092      	lsls	r2, r2, #2
 80035c2:	4093      	lsls	r3, r2
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035ca:	4937      	ldr	r1, [pc, #220]	; (80036a8 <HAL_GPIO_Init+0x2e8>)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	089b      	lsrs	r3, r3, #2
 80035d0:	3302      	adds	r3, #2
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80035d8:	4b39      	ldr	r3, [pc, #228]	; (80036c0 <HAL_GPIO_Init+0x300>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	43db      	mvns	r3, r3
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	4013      	ands	r3, r2
 80035e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035fc:	4a30      	ldr	r2, [pc, #192]	; (80036c0 <HAL_GPIO_Init+0x300>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003602:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <HAL_GPIO_Init+0x300>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	43db      	mvns	r3, r3
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4013      	ands	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800361e:	693a      	ldr	r2, [r7, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003626:	4a26      	ldr	r2, [pc, #152]	; (80036c0 <HAL_GPIO_Init+0x300>)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800362c:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <HAL_GPIO_Init+0x300>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	43db      	mvns	r3, r3
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4013      	ands	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d003      	beq.n	8003650 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003650:	4a1b      	ldr	r2, [pc, #108]	; (80036c0 <HAL_GPIO_Init+0x300>)
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <HAL_GPIO_Init+0x300>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	43db      	mvns	r3, r3
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4313      	orrs	r3, r2
 8003678:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <HAL_GPIO_Init+0x300>)
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	3301      	adds	r3, #1
 8003684:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	2b00      	cmp	r3, #0
 8003692:	f47f ae9d 	bne.w	80033d0 <HAL_GPIO_Init+0x10>
  }
}
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	371c      	adds	r7, #28
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr
 80036a4:	40021000 	.word	0x40021000
 80036a8:	40010000 	.word	0x40010000
 80036ac:	48000400 	.word	0x48000400
 80036b0:	48000800 	.word	0x48000800
 80036b4:	48000c00 	.word	0x48000c00
 80036b8:	48001000 	.word	0x48001000
 80036bc:	48001400 	.word	0x48001400
 80036c0:	40010400 	.word	0x40010400

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036e0:	e002      	b.n	80036e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr

080036f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003700:	695a      	ldr	r2, [r3, #20]
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	4013      	ands	r3, r2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d006      	beq.n	8003718 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370a:	4a05      	ldr	r2, [pc, #20]	; (8003720 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	4618      	mov	r0, r3
 8003714:	f000 f806 	bl	8003724 <HAL_GPIO_EXTI_Callback>
  }
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40010400 	.word	0x40010400

08003724 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800372e:	bf00      	nop
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e08d      	b.n	8003868 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d106      	bne.n	8003766 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fec1 	bl	80014e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2224      	movs	r2, #36	; 0x24
 800376a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800378a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689a      	ldr	r2, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	e006      	b.n	80037c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d108      	bne.n	80037dc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d8:	605a      	str	r2, [r3, #4]
 80037da:	e007      	b.n	80037ec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6812      	ldr	r2, [r2, #0]
 80037f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037fe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800380e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	430a      	orrs	r2, r1
 8003828:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69d9      	ldr	r1, [r3, #28]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1a      	ldr	r2, [r3, #32]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	4608      	mov	r0, r1
 800387a:	4611      	mov	r1, r2
 800387c:	461a      	mov	r2, r3
 800387e:	4603      	mov	r3, r0
 8003880:	817b      	strh	r3, [r7, #10]
 8003882:	460b      	mov	r3, r1
 8003884:	813b      	strh	r3, [r7, #8]
 8003886:	4613      	mov	r3, r2
 8003888:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80f9 	bne.w	8003a8a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003898:	6a3b      	ldr	r3, [r7, #32]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_I2C_Mem_Write+0x34>
 800389e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d105      	bne.n	80038b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ed      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d101      	bne.n	80038be <HAL_I2C_Mem_Write+0x4e>
 80038ba:	2302      	movs	r3, #2
 80038bc:	e0e6      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2201      	movs	r2, #1
 80038c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038c6:	f7fe f859 	bl	800197c <HAL_GetTick>
 80038ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f955 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d1      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2221      	movs	r2, #33	; 0x21
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2240      	movs	r2, #64	; 0x40
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003910:	88f8      	ldrh	r0, [r7, #6]
 8003912:	893a      	ldrh	r2, [r7, #8]
 8003914:	8979      	ldrh	r1, [r7, #10]
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	4603      	mov	r3, r0
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8b9 	bl	8003a98 <I2C_RequestMemoryWrite>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e0a9      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2bff      	cmp	r3, #255	; 0xff
 8003940:	d90e      	bls.n	8003960 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800394c:	b2da      	uxtb	r2, r3
 800394e:	8979      	ldrh	r1, [r7, #10]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003958:	68f8      	ldr	r0, [r7, #12]
 800395a:	f000 fad9 	bl	8003f10 <I2C_TransferConfig>
 800395e:	e00f      	b.n	8003980 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	b2da      	uxtb	r2, r3
 8003970:	8979      	ldrh	r1, [r7, #10]
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fac8 	bl	8003f10 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f958 	bl	8003c3a <I2C_WaitOnTXISFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e07b      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039bc:	3b01      	subs	r3, #1
 80039be:	b29a      	uxth	r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d034      	beq.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d130      	bne.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	9300      	str	r3, [sp, #0]
 80039da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039dc:	2200      	movs	r2, #0
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f8d1 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e04d      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2bff      	cmp	r3, #255	; 0xff
 80039f8:	d90e      	bls.n	8003a18 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	22ff      	movs	r2, #255	; 0xff
 80039fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	8979      	ldrh	r1, [r7, #10]
 8003a08:	2300      	movs	r3, #0
 8003a0a:	9300      	str	r3, [sp, #0]
 8003a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 fa7d 	bl	8003f10 <I2C_TransferConfig>
 8003a16:	e00f      	b.n	8003a38 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fa6c 	bl	8003f10 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d19e      	bne.n	8003980 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 f93e 	bl	8003cc8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e01a      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	2220      	movs	r2, #32
 8003a5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6859      	ldr	r1, [r3, #4]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b0a      	ldr	r3, [pc, #40]	; (8003a94 <HAL_I2C_Mem_Write+0x224>)
 8003a6a:	400b      	ands	r3, r1
 8003a6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a86:	2300      	movs	r3, #0
 8003a88:	e000      	b.n	8003a8c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	fe00e800 	.word	0xfe00e800

08003a98 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	817b      	strh	r3, [r7, #10]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	813b      	strh	r3, [r7, #8]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ab2:	88fb      	ldrh	r3, [r7, #6]
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	4b20      	ldr	r3, [pc, #128]	; (8003b3c <I2C_RequestMemoryWrite+0xa4>)
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 fa25 	bl	8003f10 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ac6:	69fa      	ldr	r2, [r7, #28]
 8003ac8:	69b9      	ldr	r1, [r7, #24]
 8003aca:	68f8      	ldr	r0, [r7, #12]
 8003acc:	f000 f8b5 	bl	8003c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e02c      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d105      	bne.n	8003aec <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ae0:	893b      	ldrh	r3, [r7, #8]
 8003ae2:	b2da      	uxtb	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	629a      	str	r2, [r3, #40]	; 0x28
 8003aea:	e015      	b.n	8003b18 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003aec:	893b      	ldrh	r3, [r7, #8]
 8003aee:	0a1b      	lsrs	r3, r3, #8
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	69b9      	ldr	r1, [r7, #24]
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f000 f89b 	bl	8003c3a <I2C_WaitOnTXISFlagUntilTimeout>
 8003b04:	4603      	mov	r3, r0
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d001      	beq.n	8003b0e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e012      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	9300      	str	r3, [sp, #0]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2180      	movs	r1, #128	; 0x80
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f830 	bl	8003b88 <I2C_WaitOnFlagUntilTimeout>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e000      	b.n	8003b34 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	80002000 	.word	0x80002000

08003b40 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d103      	bne.n	8003b5e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d007      	beq.n	8003b7c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	699a      	ldr	r2, [r3, #24]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	619a      	str	r2, [r3, #24]
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	603b      	str	r3, [r7, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b98:	e03b      	b.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	6839      	ldr	r1, [r7, #0]
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f000 f8d6 	bl	8003d50 <I2C_IsErrorOccurred>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e041      	b.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d02d      	beq.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fd fee1 	bl	800197c <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <I2C_WaitOnFlagUntilTimeout+0x44>
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d122      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	699a      	ldr	r2, [r3, #24]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d113      	bne.n	8003c12 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bee:	f043 0220 	orr.w	r2, r3, #32
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e00f      	b.n	8003c32 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	699a      	ldr	r2, [r3, #24]
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	68ba      	ldr	r2, [r7, #8]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	bf0c      	ite	eq
 8003c22:	2301      	moveq	r3, #1
 8003c24:	2300      	movne	r3, #0
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	461a      	mov	r2, r3
 8003c2a:	79fb      	ldrb	r3, [r7, #7]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d0b4      	beq.n	8003b9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b084      	sub	sp, #16
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	60f8      	str	r0, [r7, #12]
 8003c42:	60b9      	str	r1, [r7, #8]
 8003c44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c46:	e033      	b.n	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68b9      	ldr	r1, [r7, #8]
 8003c4c:	68f8      	ldr	r0, [r7, #12]
 8003c4e:	f000 f87f 	bl	8003d50 <I2C_IsErrorOccurred>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e031      	b.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c62:	d025      	beq.n	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c64:	f7fd fe8a 	bl	800197c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d302      	bcc.n	8003c7a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d11a      	bne.n	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d013      	beq.n	8003cb0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e007      	b.n	8003cc0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d1c4      	bne.n	8003c48 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd4:	e02f      	b.n	8003d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f838 	bl	8003d50 <I2C_IsErrorOccurred>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e02d      	b.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cea:	f7fd fe47 	bl	800197c <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	68ba      	ldr	r2, [r7, #8]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d302      	bcc.n	8003d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d11a      	bne.n	8003d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d013      	beq.n	8003d36 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f043 0220 	orr.w	r2, r3, #32
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e007      	b.n	8003d46 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	f003 0320 	and.w	r3, r3, #32
 8003d40:	2b20      	cmp	r3, #32
 8003d42:	d1c8      	bne.n	8003cd6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08a      	sub	sp, #40	; 0x28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	f003 0310 	and.w	r3, r3, #16
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d068      	beq.n	8003e4e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2210      	movs	r2, #16
 8003d82:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d84:	e049      	b.n	8003e1a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8c:	d045      	beq.n	8003e1a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7fd fdf5 	bl	800197c <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_IsErrorOccurred+0x54>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d13a      	bne.n	8003e1a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003db6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dc6:	d121      	bne.n	8003e0c <I2C_IsErrorOccurred+0xbc>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dce:	d01d      	beq.n	8003e0c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d01a      	beq.n	8003e0c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003de4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003de6:	f7fd fdc9 	bl	800197c <HAL_GetTick>
 8003dea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dec:	e00e      	b.n	8003e0c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003dee:	f7fd fdc5 	bl	800197c <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b19      	cmp	r3, #25
 8003dfa:	d907      	bls.n	8003e0c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	f043 0320 	orr.w	r3, r3, #32
 8003e02:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003e0a:	e006      	b.n	8003e1a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	f003 0320 	and.w	r3, r3, #32
 8003e16:	2b20      	cmp	r3, #32
 8003e18:	d1e9      	bne.n	8003dee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d003      	beq.n	8003e30 <I2C_IsErrorOccurred+0xe0>
 8003e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d0aa      	beq.n	8003d86 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d103      	bne.n	8003e40 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	f043 0304 	orr.w	r3, r3, #4
 8003e46:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003e60:	6a3b      	ldr	r3, [r7, #32]
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e70:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00b      	beq.n	8003e9a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e92:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00b      	beq.n	8003ebc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f043 0302 	orr.w	r3, r3, #2
 8003eaa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01c      	beq.n	8003efe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f7ff fe3b 	bl	8003b40 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	4b0d      	ldr	r3, [pc, #52]	; (8003f0c <I2C_IsErrorOccurred+0x1bc>)
 8003ed6:	400b      	ands	r3, r1
 8003ed8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003efe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3728      	adds	r7, #40	; 0x28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	fe00e800 	.word	0xfe00e800

08003f10 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b087      	sub	sp, #28
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	607b      	str	r3, [r7, #4]
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	817b      	strh	r3, [r7, #10]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f22:	897b      	ldrh	r3, [r7, #10]
 8003f24:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f28:	7a7b      	ldrb	r3, [r7, #9]
 8003f2a:	041b      	lsls	r3, r3, #16
 8003f2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f30:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f3e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685a      	ldr	r2, [r3, #4]
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	0d5b      	lsrs	r3, r3, #21
 8003f4a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f4e:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <I2C_TransferConfig+0x60>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	43db      	mvns	r3, r3
 8003f54:	ea02 0103 	and.w	r1, r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f62:	bf00      	nop
 8003f64:	371c      	adds	r7, #28
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr
 8003f6e:	bf00      	nop
 8003f70:	03ff63ff 	.word	0x03ff63ff

08003f74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d138      	bne.n	8003ffc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e032      	b.n	8003ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003fc6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6819      	ldr	r1, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800400a:	b480      	push	{r7}
 800400c:	b085      	sub	sp, #20
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
 8004012:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b20      	cmp	r3, #32
 800401e:	d139      	bne.n	8004094 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800402a:	2302      	movs	r3, #2
 800402c:	e033      	b.n	8004096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2224      	movs	r2, #36	; 0x24
 800403a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800405c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
	...

080040a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d141      	bne.n	8004136 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040b2:	4b4b      	ldr	r3, [pc, #300]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040be:	d131      	bne.n	8004124 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c0:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040c6:	4a46      	ldr	r2, [pc, #280]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040d0:	4b43      	ldr	r3, [pc, #268]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040d8:	4a41      	ldr	r2, [pc, #260]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80040e0:	4b40      	ldr	r3, [pc, #256]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2232      	movs	r2, #50	; 0x32
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	4a3f      	ldr	r2, [pc, #252]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	0c9b      	lsrs	r3, r3, #18
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040f6:	e002      	b.n	80040fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	3b01      	subs	r3, #1
 80040fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040fe:	4b38      	ldr	r3, [pc, #224]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d102      	bne.n	8004112 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f2      	bne.n	80040f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004112:	4b33      	ldr	r3, [pc, #204]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d158      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e057      	b.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004124:	4b2e      	ldr	r3, [pc, #184]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800412a:	4a2d      	ldr	r2, [pc, #180]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004130:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004134:	e04d      	b.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800413c:	d141      	bne.n	80041c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800413e:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414a:	d131      	bne.n	80041b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800414c:	4b24      	ldr	r3, [pc, #144]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800414e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004152:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800415c:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004164:	4a1e      	ldr	r2, [pc, #120]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004166:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800416c:	4b1d      	ldr	r3, [pc, #116]	; (80041e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2232      	movs	r2, #50	; 0x32
 8004172:	fb02 f303 	mul.w	r3, r2, r3
 8004176:	4a1c      	ldr	r2, [pc, #112]	; (80041e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	0c9b      	lsrs	r3, r3, #18
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004182:	e002      	b.n	800418a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b01      	subs	r3, #1
 8004188:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418a:	4b15      	ldr	r3, [pc, #84]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d102      	bne.n	800419e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f2      	bne.n	8004184 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800419e:	4b10      	ldr	r3, [pc, #64]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041aa:	d112      	bne.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e011      	b.n	80041d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b0:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041b6:	4a0a      	ldr	r2, [pc, #40]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041c0:	e007      	b.n	80041d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041c2:	4b07      	ldr	r3, [pc, #28]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041ca:	4a05      	ldr	r2, [pc, #20]	; (80041e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40007000 	.word	0x40007000
 80041e4:	20000000 	.word	0x20000000
 80041e8:	431bde83 	.word	0x431bde83

080041ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80041ec:	b480      	push	{r7}
 80041ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80041f0:	4b05      	ldr	r3, [pc, #20]	; (8004208 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	4a04      	ldr	r2, [pc, #16]	; (8004208 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80041f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041fa:	6093      	str	r3, [r2, #8]
}
 80041fc:	bf00      	nop
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
 8004206:	bf00      	nop
 8004208:	40007000 	.word	0x40007000

0800420c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e2fe      	b.n	800481c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d075      	beq.n	8004316 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800422a:	4b97      	ldr	r3, [pc, #604]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 030c 	and.w	r3, r3, #12
 8004232:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004234:	4b94      	ldr	r3, [pc, #592]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	d102      	bne.n	800424a <HAL_RCC_OscConfig+0x3e>
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2b03      	cmp	r3, #3
 8004248:	d002      	beq.n	8004250 <HAL_RCC_OscConfig+0x44>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	2b08      	cmp	r3, #8
 800424e:	d10b      	bne.n	8004268 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004250:	4b8d      	ldr	r3, [pc, #564]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05b      	beq.n	8004314 <HAL_RCC_OscConfig+0x108>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d157      	bne.n	8004314 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e2d9      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004270:	d106      	bne.n	8004280 <HAL_RCC_OscConfig+0x74>
 8004272:	4b85      	ldr	r3, [pc, #532]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a84      	ldr	r2, [pc, #528]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800427c:	6013      	str	r3, [r2, #0]
 800427e:	e01d      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x98>
 800428a:	4b7f      	ldr	r3, [pc, #508]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7e      	ldr	r2, [pc, #504]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004294:	6013      	str	r3, [r2, #0]
 8004296:	4b7c      	ldr	r3, [pc, #496]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a7b      	ldr	r2, [pc, #492]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e00b      	b.n	80042bc <HAL_RCC_OscConfig+0xb0>
 80042a4:	4b78      	ldr	r3, [pc, #480]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a77      	ldr	r2, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b75      	ldr	r3, [pc, #468]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a74      	ldr	r2, [pc, #464]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d013      	beq.n	80042ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042c4:	f7fd fb5a 	bl	800197c <HAL_GetTick>
 80042c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042ca:	e008      	b.n	80042de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042cc:	f7fd fb56 	bl	800197c <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e29e      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042de:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0xc0>
 80042ea:	e014      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ec:	f7fd fb46 	bl	800197c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f4:	f7fd fb42 	bl	800197c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	; 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e28a      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004306:	4b60      	ldr	r3, [pc, #384]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0xe8>
 8004312:	e000      	b.n	8004316 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d075      	beq.n	800440e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004322:	4b59      	ldr	r3, [pc, #356]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f003 030c 	and.w	r3, r3, #12
 800432a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800432c:	4b56      	ldr	r3, [pc, #344]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b0c      	cmp	r3, #12
 800433a:	d102      	bne.n	8004342 <HAL_RCC_OscConfig+0x136>
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	2b02      	cmp	r3, #2
 8004340:	d002      	beq.n	8004348 <HAL_RCC_OscConfig+0x13c>
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b04      	cmp	r3, #4
 8004346:	d11f      	bne.n	8004388 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004348:	4b4f      	ldr	r3, [pc, #316]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_OscConfig+0x154>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d101      	bne.n	8004360 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e25d      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004360:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	061b      	lsls	r3, r3, #24
 800436e:	4946      	ldr	r1, [pc, #280]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <HAL_RCC_OscConfig+0x280>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fd fab3 	bl	80018e4 <HAL_InitTick>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d043      	beq.n	800440c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e249      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004390:	4b3d      	ldr	r3, [pc, #244]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a3c      	ldr	r2, [pc, #240]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fd faee 	bl	800197c <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043a4:	f7fd faea 	bl	800197c <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e232      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043b6:	4b34      	ldr	r3, [pc, #208]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d0f0      	beq.n	80043a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b31      	ldr	r3, [pc, #196]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	061b      	lsls	r3, r3, #24
 80043d0:	492d      	ldr	r1, [pc, #180]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	604b      	str	r3, [r1, #4]
 80043d6:	e01a      	b.n	800440e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043d8:	4b2b      	ldr	r3, [pc, #172]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a2a      	ldr	r2, [pc, #168]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 80043de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e4:	f7fd faca 	bl	800197c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ec:	f7fd fac6 	bl	800197c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e20e      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80043fe:	4b22      	ldr	r3, [pc, #136]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004406:	2b00      	cmp	r3, #0
 8004408:	d1f0      	bne.n	80043ec <HAL_RCC_OscConfig+0x1e0>
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800440c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d041      	beq.n	800449e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01c      	beq.n	800445c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b19      	ldr	r3, [pc, #100]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004428:	4a17      	ldr	r2, [pc, #92]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800442a:	f043 0301 	orr.w	r3, r3, #1
 800442e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004432:	f7fd faa3 	bl	800197c <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800443a:	f7fd fa9f 	bl	800197c <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e1e7      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800444c:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800444e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0ef      	beq.n	800443a <HAL_RCC_OscConfig+0x22e>
 800445a:	e020      	b.n	800449e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445c:	4b0a      	ldr	r3, [pc, #40]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 800445e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004462:	4a09      	ldr	r2, [pc, #36]	; (8004488 <HAL_RCC_OscConfig+0x27c>)
 8004464:	f023 0301 	bic.w	r3, r3, #1
 8004468:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd fa86 	bl	800197c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004472:	e00d      	b.n	8004490 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd fa82 	bl	800197c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d906      	bls.n	8004490 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e1ca      	b.n	800481c <HAL_RCC_OscConfig+0x610>
 8004486:	bf00      	nop
 8004488:	40021000 	.word	0x40021000
 800448c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004490:	4b8c      	ldr	r3, [pc, #560]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004496:	f003 0302 	and.w	r3, r3, #2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1ea      	bne.n	8004474 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0304 	and.w	r3, r3, #4
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 80a6 	beq.w	80045f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044b0:	4b84      	ldr	r3, [pc, #528]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80044b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d101      	bne.n	80044c0 <HAL_RCC_OscConfig+0x2b4>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x2b6>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00d      	beq.n	80044e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c6:	4b7f      	ldr	r3, [pc, #508]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80044c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044ca:	4a7e      	ldr	r2, [pc, #504]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80044cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d0:	6593      	str	r3, [r2, #88]	; 0x58
 80044d2:	4b7c      	ldr	r3, [pc, #496]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80044de:	2301      	movs	r3, #1
 80044e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e2:	4b79      	ldr	r3, [pc, #484]	; (80046c8 <HAL_RCC_OscConfig+0x4bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d118      	bne.n	8004520 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044ee:	4b76      	ldr	r3, [pc, #472]	; (80046c8 <HAL_RCC_OscConfig+0x4bc>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a75      	ldr	r2, [pc, #468]	; (80046c8 <HAL_RCC_OscConfig+0x4bc>)
 80044f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fa:	f7fd fa3f 	bl	800197c <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004500:	e008      	b.n	8004514 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004502:	f7fd fa3b 	bl	800197c <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b02      	cmp	r3, #2
 800450e:	d901      	bls.n	8004514 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e183      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004514:	4b6c      	ldr	r3, [pc, #432]	; (80046c8 <HAL_RCC_OscConfig+0x4bc>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0f0      	beq.n	8004502 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d108      	bne.n	800453a <HAL_RCC_OscConfig+0x32e>
 8004528:	4b66      	ldr	r3, [pc, #408]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800452a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452e:	4a65      	ldr	r2, [pc, #404]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004538:	e024      	b.n	8004584 <HAL_RCC_OscConfig+0x378>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2b05      	cmp	r3, #5
 8004540:	d110      	bne.n	8004564 <HAL_RCC_OscConfig+0x358>
 8004542:	4b60      	ldr	r3, [pc, #384]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004548:	4a5e      	ldr	r2, [pc, #376]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004552:	4b5c      	ldr	r3, [pc, #368]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004558:	4a5a      	ldr	r2, [pc, #360]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004562:	e00f      	b.n	8004584 <HAL_RCC_OscConfig+0x378>
 8004564:	4b57      	ldr	r3, [pc, #348]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456a:	4a56      	ldr	r2, [pc, #344]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004574:	4b53      	ldr	r3, [pc, #332]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a52      	ldr	r2, [pc, #328]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d016      	beq.n	80045ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800458c:	f7fd f9f6 	bl	800197c <HAL_GetTick>
 8004590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004592:	e00a      	b.n	80045aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004594:	f7fd f9f2 	bl	800197c <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e138      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045aa:	4b46      	ldr	r3, [pc, #280]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d0ed      	beq.n	8004594 <HAL_RCC_OscConfig+0x388>
 80045b8:	e015      	b.n	80045e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd f9df 	bl	800197c <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f9db 	bl	800197c <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e121      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1ed      	bne.n	80045c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045e6:	7ffb      	ldrb	r3, [r7, #31]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d105      	bne.n	80045f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ec:	4b35      	ldr	r3, [pc, #212]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80045ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f0:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80045f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045f6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0320 	and.w	r3, r3, #32
 8004600:	2b00      	cmp	r3, #0
 8004602:	d03c      	beq.n	800467e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d01c      	beq.n	8004646 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800460c:	4b2d      	ldr	r3, [pc, #180]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800460e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004612:	4a2c      	ldr	r2, [pc, #176]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461c:	f7fd f9ae 	bl	800197c <HAL_GetTick>
 8004620:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004622:	e008      	b.n	8004636 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004624:	f7fd f9aa 	bl	800197c <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d901      	bls.n	8004636 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e0f2      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004636:	4b23      	ldr	r3, [pc, #140]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004638:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0ef      	beq.n	8004624 <HAL_RCC_OscConfig+0x418>
 8004644:	e01b      	b.n	800467e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004646:	4b1f      	ldr	r3, [pc, #124]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800464e:	f023 0301 	bic.w	r3, r3, #1
 8004652:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004656:	f7fd f991 	bl	800197c <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800465e:	f7fd f98d 	bl	800197c <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e0d5      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004670:	4b14      	ldr	r3, [pc, #80]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 8004672:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1ef      	bne.n	800465e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f000 80c9 	beq.w	800481a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004688:	4b0e      	ldr	r3, [pc, #56]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f003 030c 	and.w	r3, r3, #12
 8004690:	2b0c      	cmp	r3, #12
 8004692:	f000 8083 	beq.w	800479c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	2b02      	cmp	r3, #2
 800469c:	d15e      	bne.n	800475c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <HAL_RCC_OscConfig+0x4b8>)
 80046a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046aa:	f7fd f967 	bl	800197c <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046b0:	e00c      	b.n	80046cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b2:	f7fd f963 	bl	800197c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d905      	bls.n	80046cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e0ab      	b.n	800481c <HAL_RCC_OscConfig+0x610>
 80046c4:	40021000 	.word	0x40021000
 80046c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046cc:	4b55      	ldr	r3, [pc, #340]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ec      	bne.n	80046b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d8:	4b52      	ldr	r3, [pc, #328]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	4b52      	ldr	r3, [pc, #328]	; (8004828 <HAL_RCC_OscConfig+0x61c>)
 80046de:	4013      	ands	r3, r2
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	6a11      	ldr	r1, [r2, #32]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046e8:	3a01      	subs	r2, #1
 80046ea:	0112      	lsls	r2, r2, #4
 80046ec:	4311      	orrs	r1, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80046f2:	0212      	lsls	r2, r2, #8
 80046f4:	4311      	orrs	r1, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046fa:	0852      	lsrs	r2, r2, #1
 80046fc:	3a01      	subs	r2, #1
 80046fe:	0552      	lsls	r2, r2, #21
 8004700:	4311      	orrs	r1, r2
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004706:	0852      	lsrs	r2, r2, #1
 8004708:	3a01      	subs	r2, #1
 800470a:	0652      	lsls	r2, r2, #25
 800470c:	4311      	orrs	r1, r2
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004712:	06d2      	lsls	r2, r2, #27
 8004714:	430a      	orrs	r2, r1
 8004716:	4943      	ldr	r1, [pc, #268]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004718:	4313      	orrs	r3, r2
 800471a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800471c:	4b41      	ldr	r3, [pc, #260]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a40      	ldr	r2, [pc, #256]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004728:	4b3e      	ldr	r3, [pc, #248]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4a3d      	ldr	r2, [pc, #244]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800472e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004732:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004734:	f7fd f922 	bl	800197c <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800473c:	f7fd f91e 	bl	800197c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e066      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474e:	4b35      	ldr	r3, [pc, #212]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x530>
 800475a:	e05e      	b.n	800481a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475c:	4b31      	ldr	r3, [pc, #196]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a30      	ldr	r2, [pc, #192]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004762:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004766:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004768:	f7fd f908 	bl	800197c <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004770:	f7fd f904 	bl	800197c <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e04c      	b.n	800481c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004782:	4b28      	ldr	r3, [pc, #160]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d1f0      	bne.n	8004770 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800478e:	4b25      	ldr	r3, [pc, #148]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	4924      	ldr	r1, [pc, #144]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <HAL_RCC_OscConfig+0x620>)
 8004796:	4013      	ands	r3, r2
 8004798:	60cb      	str	r3, [r1, #12]
 800479a:	e03e      	b.n	800481a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e039      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80047a8:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <HAL_RCC_OscConfig+0x618>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f003 0203 	and.w	r2, r3, #3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d12c      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	3b01      	subs	r3, #1
 80047c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d123      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d11b      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d113      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	3b01      	subs	r3, #1
 80047fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80047fe:	429a      	cmp	r2, r3
 8004800:	d109      	bne.n	8004816 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	3b01      	subs	r3, #1
 8004810:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d001      	beq.n	800481a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e000      	b.n	800481c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3720      	adds	r7, #32
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000
 8004828:	019f800c 	.word	0x019f800c
 800482c:	feeefffc 	.word	0xfeeefffc

08004830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e11e      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004848:	4b91      	ldr	r3, [pc, #580]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 030f 	and.w	r3, r3, #15
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d910      	bls.n	8004878 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004856:	4b8e      	ldr	r3, [pc, #568]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f023 020f 	bic.w	r2, r3, #15
 800485e:	498c      	ldr	r1, [pc, #560]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004866:	4b8a      	ldr	r3, [pc, #552]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	429a      	cmp	r2, r3
 8004872:	d001      	beq.n	8004878 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e106      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d073      	beq.n	800496c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d129      	bne.n	80048e0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800488c:	4b81      	ldr	r3, [pc, #516]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0f4      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800489c:	f000 f99e 	bl	8004bdc <RCC_GetSysClockFreqFromPLLSource>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4a7c      	ldr	r2, [pc, #496]	; (8004a98 <HAL_RCC_ClockConfig+0x268>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d93f      	bls.n	800492a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048aa:	4b7a      	ldr	r3, [pc, #488]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d009      	beq.n	80048ca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d033      	beq.n	800492a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d12f      	bne.n	800492a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80048ca:	4b72      	ldr	r3, [pc, #456]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048d2:	4a70      	ldr	r2, [pc, #448]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80048d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048d8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80048da:	2380      	movs	r3, #128	; 0x80
 80048dc:	617b      	str	r3, [r7, #20]
 80048de:	e024      	b.n	800492a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	2b02      	cmp	r3, #2
 80048e6:	d107      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048e8:	4b6a      	ldr	r3, [pc, #424]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e0c6      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048f8:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004900:	2b00      	cmp	r3, #0
 8004902:	d101      	bne.n	8004908 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e0be      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004908:	f000 f8ce 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 800490c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4a61      	ldr	r2, [pc, #388]	; (8004a98 <HAL_RCC_ClockConfig+0x268>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d909      	bls.n	800492a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004916:	4b5f      	ldr	r3, [pc, #380]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800491e:	4a5d      	ldr	r2, [pc, #372]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004924:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b5a      	ldr	r3, [pc, #360]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4957      	ldr	r1, [pc, #348]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004938:	4313      	orrs	r3, r2
 800493a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493c:	f7fd f81e 	bl	800197c <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fd f81a 	bl	800197c <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e095      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b4e      	ldr	r3, [pc, #312]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d023      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004984:	4b43      	ldr	r3, [pc, #268]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4a42      	ldr	r2, [pc, #264]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 800498a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800498e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0308 	and.w	r3, r3, #8
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800499c:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80049a4:	4a3b      	ldr	r2, [pc, #236]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80049a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80049aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049ac:	4b39      	ldr	r3, [pc, #228]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	4936      	ldr	r1, [pc, #216]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	608b      	str	r3, [r1, #8]
 80049be:	e008      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	2b80      	cmp	r3, #128	; 0x80
 80049c4:	d105      	bne.n	80049d2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80049c6:	4b33      	ldr	r3, [pc, #204]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4a32      	ldr	r2, [pc, #200]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 80049cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049d2:	4b2f      	ldr	r3, [pc, #188]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d21d      	bcs.n	8004a1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e0:	4b2b      	ldr	r3, [pc, #172]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f023 020f 	bic.w	r2, r3, #15
 80049e8:	4929      	ldr	r1, [pc, #164]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80049f0:	f7fc ffc4 	bl	800197c <HAL_GetTick>
 80049f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049f6:	e00a      	b.n	8004a0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f8:	f7fc ffc0 	bl	800197c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e03b      	b.n	8004a86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0e:	4b20      	ldr	r3, [pc, #128]	; (8004a90 <HAL_RCC_ClockConfig+0x260>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	683a      	ldr	r2, [r7, #0]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d1ed      	bne.n	80049f8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a28:	4b1a      	ldr	r3, [pc, #104]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4917      	ldr	r1, [pc, #92]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d009      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a46:	4b13      	ldr	r3, [pc, #76]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490f      	ldr	r1, [pc, #60]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a5a:	f000 f825 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <HAL_RCC_ClockConfig+0x264>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	091b      	lsrs	r3, r3, #4
 8004a66:	f003 030f 	and.w	r3, r3, #15
 8004a6a:	490c      	ldr	r1, [pc, #48]	; (8004a9c <HAL_RCC_ClockConfig+0x26c>)
 8004a6c:	5ccb      	ldrb	r3, [r1, r3]
 8004a6e:	f003 031f 	and.w	r3, r3, #31
 8004a72:	fa22 f303 	lsr.w	r3, r2, r3
 8004a76:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_RCC_ClockConfig+0x270>)
 8004a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x274>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fc ff30 	bl	80018e4 <HAL_InitTick>
 8004a84:	4603      	mov	r3, r0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3718      	adds	r7, #24
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	40022000 	.word	0x40022000
 8004a94:	40021000 	.word	0x40021000
 8004a98:	04c4b400 	.word	0x04c4b400
 8004a9c:	08008f84 	.word	0x08008f84
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	20000004 	.word	0x20000004

08004aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b087      	sub	sp, #28
 8004aac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004aae:	4b2c      	ldr	r3, [pc, #176]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d102      	bne.n	8004ac0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004aba:	4b2a      	ldr	r3, [pc, #168]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e047      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ac0:	4b27      	ldr	r3, [pc, #156]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	f003 030c 	and.w	r3, r3, #12
 8004ac8:	2b08      	cmp	r3, #8
 8004aca:	d102      	bne.n	8004ad2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004acc:	4b26      	ldr	r3, [pc, #152]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ace:	613b      	str	r3, [r7, #16]
 8004ad0:	e03e      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004ad2:	4b23      	ldr	r3, [pc, #140]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f003 030c 	and.w	r3, r3, #12
 8004ada:	2b0c      	cmp	r3, #12
 8004adc:	d136      	bne.n	8004b4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ade:	4b20      	ldr	r3, [pc, #128]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f003 0303 	and.w	r3, r3, #3
 8004ae6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	091b      	lsrs	r3, r3, #4
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	3301      	adds	r3, #1
 8004af4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004afc:	4a1a      	ldr	r2, [pc, #104]	; (8004b68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b04:	4a16      	ldr	r2, [pc, #88]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b06:	68d2      	ldr	r2, [r2, #12]
 8004b08:	0a12      	lsrs	r2, r2, #8
 8004b0a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	617b      	str	r3, [r7, #20]
      break;
 8004b14:	e00c      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b16:	4a13      	ldr	r2, [pc, #76]	; (8004b64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b20:	68d2      	ldr	r2, [r2, #12]
 8004b22:	0a12      	lsrs	r2, r2, #8
 8004b24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004b28:	fb02 f303 	mul.w	r3, r2, r3
 8004b2c:	617b      	str	r3, [r7, #20]
      break;
 8004b2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	0e5b      	lsrs	r3, r3, #25
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	e001      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004b50:	693b      	ldr	r3, [r7, #16]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	40021000 	.word	0x40021000
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	016e3600 	.word	0x016e3600

08004b6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000000 	.word	0x20000000

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b06      	ldr	r3, [pc, #24]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4904      	ldr	r1, [pc, #16]	; (8004bac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	08008f94 	.word	0x08008f94

08004bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004bb4:	f7ff ffda 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	0adb      	lsrs	r3, r3, #11
 8004bc0:	f003 0307 	and.w	r3, r3, #7
 8004bc4:	4904      	ldr	r1, [pc, #16]	; (8004bd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004bc6:	5ccb      	ldrb	r3, [r1, r3]
 8004bc8:	f003 031f 	and.w	r3, r3, #31
 8004bcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	08008f94 	.word	0x08008f94

08004bdc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004bec:	4b1b      	ldr	r3, [pc, #108]	; (8004c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	091b      	lsrs	r3, r3, #4
 8004bf2:	f003 030f 	and.w	r3, r3, #15
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d10c      	bne.n	8004c1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c00:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c0a:	68d2      	ldr	r2, [r2, #12]
 8004c0c:	0a12      	lsrs	r2, r2, #8
 8004c0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	617b      	str	r3, [r7, #20]
    break;
 8004c18:	e00c      	b.n	8004c34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c24:	68d2      	ldr	r2, [r2, #12]
 8004c26:	0a12      	lsrs	r2, r2, #8
 8004c28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004c2c:	fb02 f303 	mul.w	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
    break;
 8004c32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	0e5b      	lsrs	r3, r3, #25
 8004c3a:	f003 0303 	and.w	r3, r3, #3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	005b      	lsls	r3, r3, #1
 8004c42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004c4e:	687b      	ldr	r3, [r7, #4]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	371c      	adds	r7, #28
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	016e3600 	.word	0x016e3600
 8004c64:	00f42400 	.word	0x00f42400

08004c68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b086      	sub	sp, #24
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c70:	2300      	movs	r3, #0
 8004c72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c74:	2300      	movs	r3, #0
 8004c76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 8098 	beq.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c86:	2300      	movs	r3, #0
 8004c88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8a:	4b43      	ldr	r3, [pc, #268]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10d      	bne.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c96:	4b40      	ldr	r3, [pc, #256]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9a:	4a3f      	ldr	r2, [pc, #252]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ca2:	4b3d      	ldr	r3, [pc, #244]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004caa:	60bb      	str	r3, [r7, #8]
 8004cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cb2:	4b3a      	ldr	r3, [pc, #232]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a39      	ldr	r2, [pc, #228]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cbe:	f7fc fe5d 	bl	800197c <HAL_GetTick>
 8004cc2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cc4:	e009      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc6:	f7fc fe59 	bl	800197c <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d902      	bls.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	74fb      	strb	r3, [r7, #19]
        break;
 8004cd8:	e005      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004cda:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ef      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ce6:	7cfb      	ldrb	r3, [r7, #19]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d159      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cec:	4b2a      	ldr	r3, [pc, #168]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01e      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d019      	beq.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d08:	4b23      	ldr	r3, [pc, #140]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d1a:	4a1f      	ldr	r2, [pc, #124]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d24:	4b1c      	ldr	r3, [pc, #112]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a1b      	ldr	r2, [pc, #108]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d34:	4a18      	ldr	r2, [pc, #96]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d46:	f7fc fe19 	bl	800197c <HAL_GetTick>
 8004d4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4c:	e00b      	b.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f7fc fe15 	bl	800197c <HAL_GetTick>
 8004d52:	4602      	mov	r2, r0
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	1ad3      	subs	r3, r2, r3
 8004d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d902      	bls.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	74fb      	strb	r3, [r7, #19]
            break;
 8004d64:	e006      	b.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	4b0c      	ldr	r3, [pc, #48]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ec      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004d74:	7cfb      	ldrb	r3, [r7, #19]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d7a:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d88:	4903      	ldr	r1, [pc, #12]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d90:	e008      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d92:	7cfb      	ldrb	r3, [r7, #19]
 8004d94:	74bb      	strb	r3, [r7, #18]
 8004d96:	e005      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da4:	7c7b      	ldrb	r3, [r7, #17]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4ba7      	ldr	r3, [pc, #668]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4aa6      	ldr	r2, [pc, #664]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc2:	4ba1      	ldr	r3, [pc, #644]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	499d      	ldr	r1, [pc, #628]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de4:	4b98      	ldr	r3, [pc, #608]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f023 020c 	bic.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4995      	ldr	r1, [pc, #596]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e06:	4b90      	ldr	r3, [pc, #576]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	498c      	ldr	r1, [pc, #560]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e28:	4b87      	ldr	r3, [pc, #540]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	4984      	ldr	r1, [pc, #528]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e4a:	4b7f      	ldr	r3, [pc, #508]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	497b      	ldr	r1, [pc, #492]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e6c:	4b76      	ldr	r3, [pc, #472]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	4973      	ldr	r1, [pc, #460]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e8e:	4b6e      	ldr	r3, [pc, #440]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	496a      	ldr	r1, [pc, #424]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eb0:	4b65      	ldr	r3, [pc, #404]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	4962      	ldr	r1, [pc, #392]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ed2:	4b5d      	ldr	r3, [pc, #372]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	4959      	ldr	r1, [pc, #356]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004ef4:	4b54      	ldr	r3, [pc, #336]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ef6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004efa:	f023 0203 	bic.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f02:	4951      	ldr	r1, [pc, #324]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f16:	4b4c      	ldr	r3, [pc, #304]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f24:	4948      	ldr	r1, [pc, #288]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d015      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f38:	4b43      	ldr	r3, [pc, #268]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	4940      	ldr	r1, [pc, #256]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f56:	d105      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b3b      	ldr	r3, [pc, #236]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004f70:	4b35      	ldr	r3, [pc, #212]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f7e:	4932      	ldr	r1, [pc, #200]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f90:	4b2d      	ldr	r3, [pc, #180]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a2c      	ldr	r2, [pc, #176]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f9a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004fa8:	4b27      	ldr	r3, [pc, #156]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb6:	4924      	ldr	r1, [pc, #144]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fc8:	4b1f      	ldr	r3, [pc, #124]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fd2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	4916      	ldr	r1, [pc, #88]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffe:	d105      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005000:	4b11      	ldr	r3, [pc, #68]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a10      	ldr	r2, [pc, #64]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800500a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d019      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800501a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005026:	4908      	ldr	r1, [pc, #32]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005028:	4313      	orrs	r3, r2
 800502a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005036:	d109      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005038:	4b03      	ldr	r3, [pc, #12]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	4a02      	ldr	r2, [pc, #8]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800503e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005042:	60d3      	str	r3, [r2, #12]
 8005044:	e002      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005046:	bf00      	nop
 8005048:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d015      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005058:	4b29      	ldr	r3, [pc, #164]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005066:	4926      	ldr	r1, [pc, #152]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d105      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	4a20      	ldr	r2, [pc, #128]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800507e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005082:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d015      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005090:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005096:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800509e:	4918      	ldr	r1, [pc, #96]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ae:	d105      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80050b0:	4b13      	ldr	r3, [pc, #76]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4a12      	ldr	r2, [pc, #72]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d015      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80050c8:	4b0d      	ldr	r3, [pc, #52]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050d6:	490a      	ldr	r1, [pc, #40]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80050e6:	d105      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	4a04      	ldr	r2, [pc, #16]	; (8005100 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80050ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80050f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80050f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	40021000 	.word	0x40021000

08005104 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e042      	b.n	800519c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511c:	2b00      	cmp	r3, #0
 800511e:	d106      	bne.n	800512e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f7fc fa37 	bl	800159c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2224      	movs	r2, #36	; 0x24
 8005132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 0201 	bic.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514a:	2b00      	cmp	r3, #0
 800514c:	d002      	beq.n	8005154 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb24 	bl	800579c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f825 	bl	80051a4 <UART_SetConfig>
 800515a:	4603      	mov	r3, r0
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e01b      	b.n	800519c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005172:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689a      	ldr	r2, [r3, #8]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005182:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f042 0201 	orr.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fba3 	bl	80058e0 <UART_CheckIdleState>
 800519a:	4603      	mov	r3, r0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051a8:	b08c      	sub	sp, #48	; 0x30
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	431a      	orrs	r2, r3
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	431a      	orrs	r2, r3
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	4baa      	ldr	r3, [pc, #680]	; (800547c <UART_SetConfig+0x2d8>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	697a      	ldr	r2, [r7, #20]
 80051d8:	6812      	ldr	r2, [r2, #0]
 80051da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051dc:	430b      	orrs	r3, r1
 80051de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	68da      	ldr	r2, [r3, #12]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a9f      	ldr	r2, [pc, #636]	; (8005480 <UART_SetConfig+0x2dc>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800520c:	4313      	orrs	r3, r2
 800520e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800521a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005224:	430b      	orrs	r3, r1
 8005226:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	f023 010f 	bic.w	r1, r3, #15
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	430a      	orrs	r2, r1
 800523c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a90      	ldr	r2, [pc, #576]	; (8005484 <UART_SetConfig+0x2e0>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d125      	bne.n	8005294 <UART_SetConfig+0xf0>
 8005248:	4b8f      	ldr	r3, [pc, #572]	; (8005488 <UART_SetConfig+0x2e4>)
 800524a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524e:	f003 0303 	and.w	r3, r3, #3
 8005252:	2b03      	cmp	r3, #3
 8005254:	d81a      	bhi.n	800528c <UART_SetConfig+0xe8>
 8005256:	a201      	add	r2, pc, #4	; (adr r2, 800525c <UART_SetConfig+0xb8>)
 8005258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525c:	0800526d 	.word	0x0800526d
 8005260:	0800527d 	.word	0x0800527d
 8005264:	08005275 	.word	0x08005275
 8005268:	08005285 	.word	0x08005285
 800526c:	2301      	movs	r3, #1
 800526e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005272:	e116      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005274:	2302      	movs	r3, #2
 8005276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800527a:	e112      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800527c:	2304      	movs	r3, #4
 800527e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005282:	e10e      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005284:	2308      	movs	r3, #8
 8005286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800528a:	e10a      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800528c:	2310      	movs	r3, #16
 800528e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005292:	e106      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a7c      	ldr	r2, [pc, #496]	; (800548c <UART_SetConfig+0x2e8>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d138      	bne.n	8005310 <UART_SetConfig+0x16c>
 800529e:	4b7a      	ldr	r3, [pc, #488]	; (8005488 <UART_SetConfig+0x2e4>)
 80052a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a4:	f003 030c 	and.w	r3, r3, #12
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d82d      	bhi.n	8005308 <UART_SetConfig+0x164>
 80052ac:	a201      	add	r2, pc, #4	; (adr r2, 80052b4 <UART_SetConfig+0x110>)
 80052ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b2:	bf00      	nop
 80052b4:	080052e9 	.word	0x080052e9
 80052b8:	08005309 	.word	0x08005309
 80052bc:	08005309 	.word	0x08005309
 80052c0:	08005309 	.word	0x08005309
 80052c4:	080052f9 	.word	0x080052f9
 80052c8:	08005309 	.word	0x08005309
 80052cc:	08005309 	.word	0x08005309
 80052d0:	08005309 	.word	0x08005309
 80052d4:	080052f1 	.word	0x080052f1
 80052d8:	08005309 	.word	0x08005309
 80052dc:	08005309 	.word	0x08005309
 80052e0:	08005309 	.word	0x08005309
 80052e4:	08005301 	.word	0x08005301
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052ee:	e0d8      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052f6:	e0d4      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80052f8:	2304      	movs	r3, #4
 80052fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052fe:	e0d0      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005300:	2308      	movs	r3, #8
 8005302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005306:	e0cc      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005308:	2310      	movs	r3, #16
 800530a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800530e:	e0c8      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5e      	ldr	r2, [pc, #376]	; (8005490 <UART_SetConfig+0x2ec>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d125      	bne.n	8005366 <UART_SetConfig+0x1c2>
 800531a:	4b5b      	ldr	r3, [pc, #364]	; (8005488 <UART_SetConfig+0x2e4>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005320:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005324:	2b30      	cmp	r3, #48	; 0x30
 8005326:	d016      	beq.n	8005356 <UART_SetConfig+0x1b2>
 8005328:	2b30      	cmp	r3, #48	; 0x30
 800532a:	d818      	bhi.n	800535e <UART_SetConfig+0x1ba>
 800532c:	2b20      	cmp	r3, #32
 800532e:	d00a      	beq.n	8005346 <UART_SetConfig+0x1a2>
 8005330:	2b20      	cmp	r3, #32
 8005332:	d814      	bhi.n	800535e <UART_SetConfig+0x1ba>
 8005334:	2b00      	cmp	r3, #0
 8005336:	d002      	beq.n	800533e <UART_SetConfig+0x19a>
 8005338:	2b10      	cmp	r3, #16
 800533a:	d008      	beq.n	800534e <UART_SetConfig+0x1aa>
 800533c:	e00f      	b.n	800535e <UART_SetConfig+0x1ba>
 800533e:	2300      	movs	r3, #0
 8005340:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005344:	e0ad      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005346:	2302      	movs	r3, #2
 8005348:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800534c:	e0a9      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800534e:	2304      	movs	r3, #4
 8005350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005354:	e0a5      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005356:	2308      	movs	r3, #8
 8005358:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800535c:	e0a1      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800535e:	2310      	movs	r3, #16
 8005360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005364:	e09d      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <UART_SetConfig+0x2f0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d125      	bne.n	80053bc <UART_SetConfig+0x218>
 8005370:	4b45      	ldr	r3, [pc, #276]	; (8005488 <UART_SetConfig+0x2e4>)
 8005372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800537a:	2bc0      	cmp	r3, #192	; 0xc0
 800537c:	d016      	beq.n	80053ac <UART_SetConfig+0x208>
 800537e:	2bc0      	cmp	r3, #192	; 0xc0
 8005380:	d818      	bhi.n	80053b4 <UART_SetConfig+0x210>
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d00a      	beq.n	800539c <UART_SetConfig+0x1f8>
 8005386:	2b80      	cmp	r3, #128	; 0x80
 8005388:	d814      	bhi.n	80053b4 <UART_SetConfig+0x210>
 800538a:	2b00      	cmp	r3, #0
 800538c:	d002      	beq.n	8005394 <UART_SetConfig+0x1f0>
 800538e:	2b40      	cmp	r3, #64	; 0x40
 8005390:	d008      	beq.n	80053a4 <UART_SetConfig+0x200>
 8005392:	e00f      	b.n	80053b4 <UART_SetConfig+0x210>
 8005394:	2300      	movs	r3, #0
 8005396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800539a:	e082      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800539c:	2302      	movs	r3, #2
 800539e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053a2:	e07e      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80053a4:	2304      	movs	r3, #4
 80053a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053aa:	e07a      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80053ac:	2308      	movs	r3, #8
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053b2:	e076      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80053b4:	2310      	movs	r3, #16
 80053b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053ba:	e072      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a35      	ldr	r2, [pc, #212]	; (8005498 <UART_SetConfig+0x2f4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d12a      	bne.n	800541c <UART_SetConfig+0x278>
 80053c6:	4b30      	ldr	r3, [pc, #192]	; (8005488 <UART_SetConfig+0x2e4>)
 80053c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053d4:	d01a      	beq.n	800540c <UART_SetConfig+0x268>
 80053d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053da:	d81b      	bhi.n	8005414 <UART_SetConfig+0x270>
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e0:	d00c      	beq.n	80053fc <UART_SetConfig+0x258>
 80053e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053e6:	d815      	bhi.n	8005414 <UART_SetConfig+0x270>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d003      	beq.n	80053f4 <UART_SetConfig+0x250>
 80053ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f0:	d008      	beq.n	8005404 <UART_SetConfig+0x260>
 80053f2:	e00f      	b.n	8005414 <UART_SetConfig+0x270>
 80053f4:	2300      	movs	r3, #0
 80053f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80053fa:	e052      	b.n	80054a2 <UART_SetConfig+0x2fe>
 80053fc:	2302      	movs	r3, #2
 80053fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005402:	e04e      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005404:	2304      	movs	r3, #4
 8005406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800540a:	e04a      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800540c:	2308      	movs	r3, #8
 800540e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005412:	e046      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005414:	2310      	movs	r3, #16
 8005416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800541a:	e042      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <UART_SetConfig+0x2dc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d13a      	bne.n	800549c <UART_SetConfig+0x2f8>
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <UART_SetConfig+0x2e4>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005430:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005434:	d01a      	beq.n	800546c <UART_SetConfig+0x2c8>
 8005436:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800543a:	d81b      	bhi.n	8005474 <UART_SetConfig+0x2d0>
 800543c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005440:	d00c      	beq.n	800545c <UART_SetConfig+0x2b8>
 8005442:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005446:	d815      	bhi.n	8005474 <UART_SetConfig+0x2d0>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d003      	beq.n	8005454 <UART_SetConfig+0x2b0>
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d008      	beq.n	8005464 <UART_SetConfig+0x2c0>
 8005452:	e00f      	b.n	8005474 <UART_SetConfig+0x2d0>
 8005454:	2300      	movs	r3, #0
 8005456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800545a:	e022      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800545c:	2302      	movs	r3, #2
 800545e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005462:	e01e      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800546a:	e01a      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005472:	e016      	b.n	80054a2 <UART_SetConfig+0x2fe>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800547a:	e012      	b.n	80054a2 <UART_SetConfig+0x2fe>
 800547c:	cfff69f3 	.word	0xcfff69f3
 8005480:	40008000 	.word	0x40008000
 8005484:	40013800 	.word	0x40013800
 8005488:	40021000 	.word	0x40021000
 800548c:	40004400 	.word	0x40004400
 8005490:	40004800 	.word	0x40004800
 8005494:	40004c00 	.word	0x40004c00
 8005498:	40005000 	.word	0x40005000
 800549c:	2310      	movs	r3, #16
 800549e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4aae      	ldr	r2, [pc, #696]	; (8005760 <UART_SetConfig+0x5bc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	f040 8097 	bne.w	80055dc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d823      	bhi.n	80054fe <UART_SetConfig+0x35a>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0x318>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054ff 	.word	0x080054ff
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054ff 	.word	0x080054ff
 80054cc:	080054ef 	.word	0x080054ef
 80054d0:	080054ff 	.word	0x080054ff
 80054d4:	080054ff 	.word	0x080054ff
 80054d8:	080054ff 	.word	0x080054ff
 80054dc:	080054f7 	.word	0x080054f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e0:	f7ff fb50 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80054e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054e6:	e010      	b.n	800550a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054e8:	4b9e      	ldr	r3, [pc, #632]	; (8005764 <UART_SetConfig+0x5c0>)
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054ec:	e00d      	b.n	800550a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ee:	f7ff fadb 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 80054f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80054f4:	e009      	b.n	800550a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80054fc:	e005      	b.n	800550a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005508:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800550a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	f000 8130 	beq.w	8005772 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	4a94      	ldr	r2, [pc, #592]	; (8005768 <UART_SetConfig+0x5c4>)
 8005518:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800551c:	461a      	mov	r2, r3
 800551e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005520:	fbb3 f3f2 	udiv	r3, r3, r2
 8005524:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	4413      	add	r3, r2
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	429a      	cmp	r2, r3
 8005534:	d305      	bcc.n	8005542 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	429a      	cmp	r2, r3
 8005540:	d903      	bls.n	800554a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005548:	e113      	b.n	8005772 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	2200      	movs	r2, #0
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	60fa      	str	r2, [r7, #12]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005556:	4a84      	ldr	r2, [pc, #528]	; (8005768 <UART_SetConfig+0x5c4>)
 8005558:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555c:	b29b      	uxth	r3, r3
 800555e:	2200      	movs	r2, #0
 8005560:	603b      	str	r3, [r7, #0]
 8005562:	607a      	str	r2, [r7, #4]
 8005564:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005568:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800556c:	f7fb fb94 	bl	8000c98 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4610      	mov	r0, r2
 8005576:	4619      	mov	r1, r3
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	020b      	lsls	r3, r1, #8
 8005582:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005586:	0202      	lsls	r2, r0, #8
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	6849      	ldr	r1, [r1, #4]
 800558c:	0849      	lsrs	r1, r1, #1
 800558e:	2000      	movs	r0, #0
 8005590:	460c      	mov	r4, r1
 8005592:	4605      	mov	r5, r0
 8005594:	eb12 0804 	adds.w	r8, r2, r4
 8005598:	eb43 0905 	adc.w	r9, r3, r5
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	469a      	mov	sl, r3
 80055a4:	4693      	mov	fp, r2
 80055a6:	4652      	mov	r2, sl
 80055a8:	465b      	mov	r3, fp
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fb fb73 	bl	8000c98 <__aeabi_uldivmod>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4613      	mov	r3, r2
 80055b8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055c0:	d308      	bcc.n	80055d4 <UART_SetConfig+0x430>
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055c8:	d204      	bcs.n	80055d4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	60da      	str	r2, [r3, #12]
 80055d2:	e0ce      	b.n	8005772 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80055da:	e0ca      	b.n	8005772 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	69db      	ldr	r3, [r3, #28]
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e4:	d166      	bne.n	80056b4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80055e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80055ea:	2b08      	cmp	r3, #8
 80055ec:	d827      	bhi.n	800563e <UART_SetConfig+0x49a>
 80055ee:	a201      	add	r2, pc, #4	; (adr r2, 80055f4 <UART_SetConfig+0x450>)
 80055f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055f4:	08005619 	.word	0x08005619
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005629 	.word	0x08005629
 8005600:	0800563f 	.word	0x0800563f
 8005604:	0800562f 	.word	0x0800562f
 8005608:	0800563f 	.word	0x0800563f
 800560c:	0800563f 	.word	0x0800563f
 8005610:	0800563f 	.word	0x0800563f
 8005614:	08005637 	.word	0x08005637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005618:	f7ff fab4 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 800561c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800561e:	e014      	b.n	800564a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005620:	f7ff fac6 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 8005624:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005626:	e010      	b.n	800564a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005628:	4b4e      	ldr	r3, [pc, #312]	; (8005764 <UART_SetConfig+0x5c0>)
 800562a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800562c:	e00d      	b.n	800564a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800562e:	f7ff fa3b 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005634:	e009      	b.n	800564a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800563a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800563c:	e005      	b.n	800564a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800563e:	2300      	movs	r3, #0
 8005640:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005648:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 8090 	beq.w	8005772 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	4a44      	ldr	r2, [pc, #272]	; (8005768 <UART_SetConfig+0x5c4>)
 8005658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800565c:	461a      	mov	r2, r3
 800565e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005660:	fbb3 f3f2 	udiv	r3, r3, r2
 8005664:	005a      	lsls	r2, r3, #1
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	441a      	add	r2, r3
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b0f      	cmp	r3, #15
 800567c:	d916      	bls.n	80056ac <UART_SetConfig+0x508>
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005684:	d212      	bcs.n	80056ac <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	b29b      	uxth	r3, r3
 800568a:	f023 030f 	bic.w	r3, r3, #15
 800568e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	085b      	lsrs	r3, r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	f003 0307 	and.w	r3, r3, #7
 800569a:	b29a      	uxth	r2, r3
 800569c:	8bfb      	ldrh	r3, [r7, #30]
 800569e:	4313      	orrs	r3, r2
 80056a0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	8bfa      	ldrh	r2, [r7, #30]
 80056a8:	60da      	str	r2, [r3, #12]
 80056aa:	e062      	b.n	8005772 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80056b2:	e05e      	b.n	8005772 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056b8:	2b08      	cmp	r3, #8
 80056ba:	d828      	bhi.n	800570e <UART_SetConfig+0x56a>
 80056bc:	a201      	add	r2, pc, #4	; (adr r2, 80056c4 <UART_SetConfig+0x520>)
 80056be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c2:	bf00      	nop
 80056c4:	080056e9 	.word	0x080056e9
 80056c8:	080056f1 	.word	0x080056f1
 80056cc:	080056f9 	.word	0x080056f9
 80056d0:	0800570f 	.word	0x0800570f
 80056d4:	080056ff 	.word	0x080056ff
 80056d8:	0800570f 	.word	0x0800570f
 80056dc:	0800570f 	.word	0x0800570f
 80056e0:	0800570f 	.word	0x0800570f
 80056e4:	08005707 	.word	0x08005707
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056e8:	f7ff fa4c 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80056ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056ee:	e014      	b.n	800571a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056f0:	f7ff fa5e 	bl	8004bb0 <HAL_RCC_GetPCLK2Freq>
 80056f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80056f6:	e010      	b.n	800571a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056f8:	4b1a      	ldr	r3, [pc, #104]	; (8005764 <UART_SetConfig+0x5c0>)
 80056fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80056fc:	e00d      	b.n	800571a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056fe:	f7ff f9d3 	bl	8004aa8 <HAL_RCC_GetSysClockFreq>
 8005702:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005704:	e009      	b.n	800571a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005706:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800570c:	e005      	b.n	800571a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005718:	bf00      	nop
    }

    if (pclk != 0U)
 800571a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571c:	2b00      	cmp	r3, #0
 800571e:	d028      	beq.n	8005772 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005724:	4a10      	ldr	r2, [pc, #64]	; (8005768 <UART_SetConfig+0x5c4>)
 8005726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800572a:	461a      	mov	r2, r3
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	085b      	lsrs	r3, r3, #1
 8005738:	441a      	add	r2, r3
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005742:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d910      	bls.n	800576c <UART_SetConfig+0x5c8>
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005750:	d20c      	bcs.n	800576c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	b29a      	uxth	r2, r3
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
 800575c:	e009      	b.n	8005772 <UART_SetConfig+0x5ce>
 800575e:	bf00      	nop
 8005760:	40008000 	.word	0x40008000
 8005764:	00f42400 	.word	0x00f42400
 8005768:	08008f9c 	.word	0x08008f9c
      }
      else
      {
        ret = HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2201      	movs	r2, #1
 8005776:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	2201      	movs	r2, #1
 800577e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2200      	movs	r2, #0
 8005786:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2200      	movs	r2, #0
 800578c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800578e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005792:	4618      	mov	r0, r3
 8005794:	3730      	adds	r7, #48	; 0x30
 8005796:	46bd      	mov	sp, r7
 8005798:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800579c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	f003 0308 	and.w	r3, r3, #8
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00a      	beq.n	80057c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ca:	f003 0301 	and.w	r3, r3, #1
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00a      	beq.n	80057e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	430a      	orrs	r2, r1
 80057e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f003 0302 	and.w	r3, r3, #2
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00a      	beq.n	800580a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00a      	beq.n	800582c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	430a      	orrs	r2, r1
 800582a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00a      	beq.n	800584e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	f003 0320 	and.w	r3, r3, #32
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800589a:	d10a      	bne.n	80058b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	605a      	str	r2, [r3, #4]
  }
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b098      	sub	sp, #96	; 0x60
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80058f0:	f7fc f844 	bl	800197c <HAL_GetTick>
 80058f4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d12f      	bne.n	8005964 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590c:	2200      	movs	r2, #0
 800590e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f88e 	bl	8005a34 <UART_WaitOnFlagUntilTimeout>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d022      	beq.n	8005964 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800592e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005932:	653b      	str	r3, [r7, #80]	; 0x50
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800593c:	647b      	str	r3, [r7, #68]	; 0x44
 800593e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e6      	bne.n	800591e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e063      	b.n	8005a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0304 	and.w	r3, r3, #4
 800596e:	2b04      	cmp	r3, #4
 8005970:	d149      	bne.n	8005a06 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005972:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800597a:	2200      	movs	r2, #0
 800597c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f857 	bl	8005a34 <UART_WaitOnFlagUntilTimeout>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03c      	beq.n	8005a06 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	623b      	str	r3, [r7, #32]
   return(result);
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	461a      	mov	r2, r3
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	633b      	str	r3, [r7, #48]	; 0x30
 80059ac:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059b2:	e841 2300 	strex	r3, r2, [r1]
 80059b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d1e6      	bne.n	800598c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	3308      	adds	r3, #8
 80059c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3308      	adds	r3, #8
 80059dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059de:	61fa      	str	r2, [r7, #28]
 80059e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	617b      	str	r3, [r7, #20]
   return(result);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e5      	bne.n	80059be <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2220      	movs	r2, #32
 80059f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e012      	b.n	8005a2c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3758      	adds	r7, #88	; 0x58
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a44:	e04f      	b.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4c:	d04b      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a4e:	f7fb ff95 	bl	800197c <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	69ba      	ldr	r2, [r7, #24]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d302      	bcc.n	8005a64 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d101      	bne.n	8005a68 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e04e      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d037      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b80      	cmp	r3, #128	; 0x80
 8005a7a:	d034      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b40      	cmp	r3, #64	; 0x40
 8005a80:	d031      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d110      	bne.n	8005ab2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2208      	movs	r2, #8
 8005a96:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f838 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2208      	movs	r2, #8
 8005aa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e029      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69db      	ldr	r3, [r3, #28]
 8005ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005abc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac0:	d111      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f81e 	bl	8005b0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	e00f      	b.n	8005b06 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4013      	ands	r3, r2
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf0c      	ite	eq
 8005af6:	2301      	moveq	r3, #1
 8005af8:	2300      	movne	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	461a      	mov	r2, r3
 8005afe:	79fb      	ldrb	r3, [r7, #7]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d0a0      	beq.n	8005a46 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3710      	adds	r7, #16
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0e:	b480      	push	{r7}
 8005b10:	b095      	sub	sp, #84	; 0x54
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1e:	e853 3f00 	ldrex	r3, [r3]
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b34:	643b      	str	r3, [r7, #64]	; 0x40
 8005b36:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b38:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b3c:	e841 2300 	strex	r3, r2, [r1]
 8005b40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d1e6      	bne.n	8005b16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3308      	adds	r3, #8
 8005b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	e853 3f00 	ldrex	r3, [r3]
 8005b56:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	f023 0301 	bic.w	r3, r3, #1
 8005b62:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3308      	adds	r3, #8
 8005b6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e3      	bne.n	8005b48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d118      	bne.n	8005bba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f023 0310 	bic.w	r3, r3, #16
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6979      	ldr	r1, [r7, #20]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e6      	bne.n	8005b88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d101      	bne.n	8005bf0 <HAL_UARTEx_DisableFifoMode+0x16>
 8005bec:	2302      	movs	r3, #2
 8005bee:	e027      	b.n	8005c40 <HAL_UARTEx_DisableFifoMode+0x66>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2224      	movs	r2, #36	; 0x24
 8005bfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005c1e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2220      	movs	r2, #32
 8005c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e02d      	b.n	8005cc0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	430a      	orrs	r2, r1
 8005c9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 f84f 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e02d      	b.n	8005d3c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	; 0x24
 8005cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0201 	bic.w	r2, r2, #1
 8005d06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	430a      	orrs	r2, r1
 8005d1a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f811 	bl	8005d44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d108      	bne.n	8005d66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2201      	movs	r2, #1
 8005d58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d64:	e031      	b.n	8005dca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d66:	2308      	movs	r3, #8
 8005d68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	0e5b      	lsrs	r3, r3, #25
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f003 0307 	and.w	r3, r3, #7
 8005d7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	0f5b      	lsrs	r3, r3, #29
 8005d86:	b2db      	uxtb	r3, r3
 8005d88:	f003 0307 	and.w	r3, r3, #7
 8005d8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	7b3a      	ldrb	r2, [r7, #12]
 8005d92:	4911      	ldr	r1, [pc, #68]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005d94:	5c8a      	ldrb	r2, [r1, r2]
 8005d96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d9a:	7b3a      	ldrb	r2, [r7, #12]
 8005d9c:	490f      	ldr	r1, [pc, #60]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005d9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005da0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dac:	7bfb      	ldrb	r3, [r7, #15]
 8005dae:	7b7a      	ldrb	r2, [r7, #13]
 8005db0:	4909      	ldr	r1, [pc, #36]	; (8005dd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005db2:	5c8a      	ldrb	r2, [r1, r2]
 8005db4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005db8:	7b7a      	ldrb	r2, [r7, #13]
 8005dba:	4908      	ldr	r1, [pc, #32]	; (8005ddc <UARTEx_SetNbDataToProcess+0x98>)
 8005dbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005dbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	08008fb4 	.word	0x08008fb4
 8005ddc:	08008fbc 	.word	0x08008fbc

08005de0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005de4:	bf00      	nop
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af04      	add	r7, sp, #16
 8005df6:	4603      	mov	r3, r0
 8005df8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005dfe:	9302      	str	r3, [sp, #8]
 8005e00:	2301      	movs	r3, #1
 8005e02:	9301      	str	r3, [sp, #4]
 8005e04:	1dfb      	adds	r3, r7, #7
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2178      	movs	r1, #120	; 0x78
 8005e0e:	4803      	ldr	r0, [pc, #12]	; (8005e1c <ssd1306_WriteCommand+0x2c>)
 8005e10:	f7fd fd2e 	bl	8003870 <HAL_I2C_Mem_Write>
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	2000025c 	.word	0x2000025c

08005e20 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af04      	add	r7, sp, #16
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e32:	9202      	str	r2, [sp, #8]
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	2240      	movs	r2, #64	; 0x40
 8005e3e:	2178      	movs	r1, #120	; 0x78
 8005e40:	4803      	ldr	r0, [pc, #12]	; (8005e50 <ssd1306_WriteData+0x30>)
 8005e42:	f7fd fd15 	bl	8003870 <HAL_I2C_Mem_Write>
}
 8005e46:	bf00      	nop
 8005e48:	3708      	adds	r7, #8
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	2000025c 	.word	0x2000025c

08005e54 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005e54:	b580      	push	{r7, lr}
 8005e56:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005e58:	f7ff ffc2 	bl	8005de0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005e5c:	2064      	movs	r0, #100	; 0x64
 8005e5e:	f7fb fd99 	bl	8001994 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005e62:	2000      	movs	r0, #0
 8005e64:	f000 f9d8 	bl	8006218 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005e68:	2020      	movs	r0, #32
 8005e6a:	f7ff ffc1 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005e6e:	2000      	movs	r0, #0
 8005e70:	f7ff ffbe 	bl	8005df0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005e74:	20b0      	movs	r0, #176	; 0xb0
 8005e76:	f7ff ffbb 	bl	8005df0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005e7a:	20c8      	movs	r0, #200	; 0xc8
 8005e7c:	f7ff ffb8 	bl	8005df0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005e80:	2000      	movs	r0, #0
 8005e82:	f7ff ffb5 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005e86:	2010      	movs	r0, #16
 8005e88:	f7ff ffb2 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005e8c:	2040      	movs	r0, #64	; 0x40
 8005e8e:	f7ff ffaf 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005e92:	20ff      	movs	r0, #255	; 0xff
 8005e94:	f000 f9ac 	bl	80061f0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005e98:	20a1      	movs	r0, #161	; 0xa1
 8005e9a:	f7ff ffa9 	bl	8005df0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005e9e:	20a6      	movs	r0, #166	; 0xa6
 8005ea0:	f7ff ffa6 	bl	8005df0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005ea4:	20a8      	movs	r0, #168	; 0xa8
 8005ea6:	f7ff ffa3 	bl	8005df0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005eaa:	203f      	movs	r0, #63	; 0x3f
 8005eac:	f7ff ffa0 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005eb0:	20a4      	movs	r0, #164	; 0xa4
 8005eb2:	f7ff ff9d 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005eb6:	20d3      	movs	r0, #211	; 0xd3
 8005eb8:	f7ff ff9a 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	f7ff ff97 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005ec2:	20d5      	movs	r0, #213	; 0xd5
 8005ec4:	f7ff ff94 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005ec8:	20f0      	movs	r0, #240	; 0xf0
 8005eca:	f7ff ff91 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005ece:	20d9      	movs	r0, #217	; 0xd9
 8005ed0:	f7ff ff8e 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005ed4:	2022      	movs	r0, #34	; 0x22
 8005ed6:	f7ff ff8b 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005eda:	20da      	movs	r0, #218	; 0xda
 8005edc:	f7ff ff88 	bl	8005df0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005ee0:	2012      	movs	r0, #18
 8005ee2:	f7ff ff85 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005ee6:	20db      	movs	r0, #219	; 0xdb
 8005ee8:	f7ff ff82 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005eec:	2020      	movs	r0, #32
 8005eee:	f7ff ff7f 	bl	8005df0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005ef2:	208d      	movs	r0, #141	; 0x8d
 8005ef4:	f7ff ff7c 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005ef8:	2014      	movs	r0, #20
 8005efa:	f7ff ff79 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005efe:	2001      	movs	r0, #1
 8005f00:	f000 f98a 	bl	8006218 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005f04:	2000      	movs	r0, #0
 8005f06:	f000 f80f 	bl	8005f28 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005f0a:	f000 f825 	bl	8005f58 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <ssd1306_Init+0xd0>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <ssd1306_Init+0xd0>)
 8005f16:	2200      	movs	r2, #0
 8005f18:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005f1a:	4b02      	ldr	r3, [pc, #8]	; (8005f24 <ssd1306_Init+0xd0>)
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	711a      	strb	r2, [r3, #4]
}
 8005f20:	bf00      	nop
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	2000075c 	.word	0x2000075c

08005f28 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b082      	sub	sp, #8
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	4603      	mov	r3, r0
 8005f30:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005f32:	79fb      	ldrb	r3, [r7, #7]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <ssd1306_Fill+0x14>
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e000      	b.n	8005f3e <ssd1306_Fill+0x16>
 8005f3c:	23ff      	movs	r3, #255	; 0xff
 8005f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f42:	4619      	mov	r1, r3
 8005f44:	4803      	ldr	r0, [pc, #12]	; (8005f54 <ssd1306_Fill+0x2c>)
 8005f46:	f000 ff10 	bl	8006d6a <memset>
}
 8005f4a:	bf00      	nop
 8005f4c:	3708      	adds	r7, #8
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	2000035c 	.word	0x2000035c

08005f58 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005f5e:	2300      	movs	r3, #0
 8005f60:	71fb      	strb	r3, [r7, #7]
 8005f62:	e016      	b.n	8005f92 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	3b50      	subs	r3, #80	; 0x50
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7ff ff40 	bl	8005df0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005f70:	2000      	movs	r0, #0
 8005f72:	f7ff ff3d 	bl	8005df0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005f76:	2010      	movs	r0, #16
 8005f78:	f7ff ff3a 	bl	8005df0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	01db      	lsls	r3, r3, #7
 8005f80:	4a08      	ldr	r2, [pc, #32]	; (8005fa4 <ssd1306_UpdateScreen+0x4c>)
 8005f82:	4413      	add	r3, r2
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	4618      	mov	r0, r3
 8005f88:	f7ff ff4a 	bl	8005e20 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	71fb      	strb	r3, [r7, #7]
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	2b07      	cmp	r3, #7
 8005f96:	d9e5      	bls.n	8005f64 <ssd1306_UpdateScreen+0xc>
    }
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	2000035c 	.word	0x2000035c

08005fa8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	4603      	mov	r3, r0
 8005fb0:	71fb      	strb	r3, [r7, #7]
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	71bb      	strb	r3, [r7, #6]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	db3d      	blt.n	800603e <ssd1306_DrawPixel+0x96>
 8005fc2:	79bb      	ldrb	r3, [r7, #6]
 8005fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8005fc6:	d83a      	bhi.n	800603e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005fc8:	797b      	ldrb	r3, [r7, #5]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d11a      	bne.n	8006004 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	79bb      	ldrb	r3, [r7, #6]
 8005fd2:	08db      	lsrs	r3, r3, #3
 8005fd4:	b2d8      	uxtb	r0, r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	01db      	lsls	r3, r3, #7
 8005fda:	4413      	add	r3, r2
 8005fdc:	4a1b      	ldr	r2, [pc, #108]	; (800604c <ssd1306_DrawPixel+0xa4>)
 8005fde:	5cd3      	ldrb	r3, [r2, r3]
 8005fe0:	b25a      	sxtb	r2, r3
 8005fe2:	79bb      	ldrb	r3, [r7, #6]
 8005fe4:	f003 0307 	and.w	r3, r3, #7
 8005fe8:	2101      	movs	r1, #1
 8005fea:	fa01 f303 	lsl.w	r3, r1, r3
 8005fee:	b25b      	sxtb	r3, r3
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	b259      	sxtb	r1, r3
 8005ff4:	79fa      	ldrb	r2, [r7, #7]
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	01db      	lsls	r3, r3, #7
 8005ffa:	4413      	add	r3, r2
 8005ffc:	b2c9      	uxtb	r1, r1
 8005ffe:	4a13      	ldr	r2, [pc, #76]	; (800604c <ssd1306_DrawPixel+0xa4>)
 8006000:	54d1      	strb	r1, [r2, r3]
 8006002:	e01d      	b.n	8006040 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006004:	79fa      	ldrb	r2, [r7, #7]
 8006006:	79bb      	ldrb	r3, [r7, #6]
 8006008:	08db      	lsrs	r3, r3, #3
 800600a:	b2d8      	uxtb	r0, r3
 800600c:	4603      	mov	r3, r0
 800600e:	01db      	lsls	r3, r3, #7
 8006010:	4413      	add	r3, r2
 8006012:	4a0e      	ldr	r2, [pc, #56]	; (800604c <ssd1306_DrawPixel+0xa4>)
 8006014:	5cd3      	ldrb	r3, [r2, r3]
 8006016:	b25a      	sxtb	r2, r3
 8006018:	79bb      	ldrb	r3, [r7, #6]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2101      	movs	r1, #1
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	b25b      	sxtb	r3, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	b25b      	sxtb	r3, r3
 800602a:	4013      	ands	r3, r2
 800602c:	b259      	sxtb	r1, r3
 800602e:	79fa      	ldrb	r2, [r7, #7]
 8006030:	4603      	mov	r3, r0
 8006032:	01db      	lsls	r3, r3, #7
 8006034:	4413      	add	r3, r2
 8006036:	b2c9      	uxtb	r1, r1
 8006038:	4a04      	ldr	r2, [pc, #16]	; (800604c <ssd1306_DrawPixel+0xa4>)
 800603a:	54d1      	strb	r1, [r2, r3]
 800603c:	e000      	b.n	8006040 <ssd1306_DrawPixel+0x98>
        return;
 800603e:	bf00      	nop
    }
}
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	2000035c 	.word	0x2000035c

08006050 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	4604      	mov	r4, r0
 8006058:	4638      	mov	r0, r7
 800605a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800605e:	4623      	mov	r3, r4
 8006060:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006062:	7bfb      	ldrb	r3, [r7, #15]
 8006064:	2b1f      	cmp	r3, #31
 8006066:	d902      	bls.n	800606e <ssd1306_WriteChar+0x1e>
 8006068:	7bfb      	ldrb	r3, [r7, #15]
 800606a:	2b7e      	cmp	r3, #126	; 0x7e
 800606c:	d901      	bls.n	8006072 <ssd1306_WriteChar+0x22>
        return 0;
 800606e:	2300      	movs	r3, #0
 8006070:	e079      	b.n	8006166 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8006072:	4b3f      	ldr	r3, [pc, #252]	; (8006170 <ssd1306_WriteChar+0x120>)
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	461a      	mov	r2, r3
 8006078:	783b      	ldrb	r3, [r7, #0]
 800607a:	4413      	add	r3, r2
 800607c:	2b80      	cmp	r3, #128	; 0x80
 800607e:	dc06      	bgt.n	800608e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8006080:	4b3b      	ldr	r3, [pc, #236]	; (8006170 <ssd1306_WriteChar+0x120>)
 8006082:	885b      	ldrh	r3, [r3, #2]
 8006084:	461a      	mov	r2, r3
 8006086:	787b      	ldrb	r3, [r7, #1]
 8006088:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	dd01      	ble.n	8006092 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800608e:	2300      	movs	r3, #0
 8006090:	e069      	b.n	8006166 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8006092:	2300      	movs	r3, #0
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e04e      	b.n	8006136 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	7bfb      	ldrb	r3, [r7, #15]
 800609c:	3b20      	subs	r3, #32
 800609e:	7879      	ldrb	r1, [r7, #1]
 80060a0:	fb01 f303 	mul.w	r3, r1, r3
 80060a4:	4619      	mov	r1, r3
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	440b      	add	r3, r1
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	4413      	add	r3, r2
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80060b2:	2300      	movs	r3, #0
 80060b4:	61bb      	str	r3, [r7, #24]
 80060b6:	e036      	b.n	8006126 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d013      	beq.n	80060f0 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80060c8:	4b29      	ldr	r3, [pc, #164]	; (8006170 <ssd1306_WriteChar+0x120>)
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	4413      	add	r3, r2
 80060d4:	b2d8      	uxtb	r0, r3
 80060d6:	4b26      	ldr	r3, [pc, #152]	; (8006170 <ssd1306_WriteChar+0x120>)
 80060d8:	885b      	ldrh	r3, [r3, #2]
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	4413      	add	r3, r2
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80060e8:	4619      	mov	r1, r3
 80060ea:	f7ff ff5d 	bl	8005fa8 <ssd1306_DrawPixel>
 80060ee:	e017      	b.n	8006120 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80060f0:	4b1f      	ldr	r3, [pc, #124]	; (8006170 <ssd1306_WriteChar+0x120>)
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	4413      	add	r3, r2
 80060fc:	b2d8      	uxtb	r0, r3
 80060fe:	4b1c      	ldr	r3, [pc, #112]	; (8006170 <ssd1306_WriteChar+0x120>)
 8006100:	885b      	ldrh	r3, [r3, #2]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	4413      	add	r3, r2
 800610a:	b2d9      	uxtb	r1, r3
 800610c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8006110:	2b00      	cmp	r3, #0
 8006112:	bf0c      	ite	eq
 8006114:	2301      	moveq	r3, #1
 8006116:	2300      	movne	r3, #0
 8006118:	b2db      	uxtb	r3, r3
 800611a:	461a      	mov	r2, r3
 800611c:	f7ff ff44 	bl	8005fa8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	3301      	adds	r3, #1
 8006124:	61bb      	str	r3, [r7, #24]
 8006126:	783b      	ldrb	r3, [r7, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	4293      	cmp	r3, r2
 800612e:	d3c3      	bcc.n	80060b8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	3301      	adds	r3, #1
 8006134:	61fb      	str	r3, [r7, #28]
 8006136:	787b      	ldrb	r3, [r7, #1]
 8006138:	461a      	mov	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	4293      	cmp	r3, r2
 800613e:	d3ab      	bcc.n	8006098 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8006140:	4b0b      	ldr	r3, [pc, #44]	; (8006170 <ssd1306_WriteChar+0x120>)
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d006      	beq.n	8006158 <ssd1306_WriteChar+0x108>
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	3b20      	subs	r3, #32
 8006150:	440b      	add	r3, r1
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	b29b      	uxth	r3, r3
 8006156:	e001      	b.n	800615c <ssd1306_WriteChar+0x10c>
 8006158:	783b      	ldrb	r3, [r7, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	4413      	add	r3, r2
 800615e:	b29a      	uxth	r2, r3
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <ssd1306_WriteChar+0x120>)
 8006162:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3724      	adds	r7, #36	; 0x24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd90      	pop	{r4, r7, pc}
 800616e:	bf00      	nop
 8006170:	2000075c 	.word	0x2000075c

08006174 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	4638      	mov	r0, r7
 800617e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8006182:	e013      	b.n	80061ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	7818      	ldrb	r0, [r3, #0]
 8006188:	7e3b      	ldrb	r3, [r7, #24]
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	463b      	mov	r3, r7
 800618e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006190:	f7ff ff5e 	bl	8006050 <ssd1306_WriteChar>
 8006194:	4603      	mov	r3, r0
 8006196:	461a      	mov	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d002      	beq.n	80061a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	e008      	b.n	80061b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	3301      	adds	r3, #1
 80061aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d1e7      	bne.n	8006184 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	781b      	ldrb	r3, [r3, #0]
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	4603      	mov	r3, r0
 80061c8:	460a      	mov	r2, r1
 80061ca:	71fb      	strb	r3, [r7, #7]
 80061cc:	4613      	mov	r3, r2
 80061ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80061d0:	79fb      	ldrb	r3, [r7, #7]
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	4b05      	ldr	r3, [pc, #20]	; (80061ec <ssd1306_SetCursor+0x2c>)
 80061d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80061d8:	79bb      	ldrb	r3, [r7, #6]
 80061da:	b29a      	uxth	r2, r3
 80061dc:	4b03      	ldr	r3, [pc, #12]	; (80061ec <ssd1306_SetCursor+0x2c>)
 80061de:	805a      	strh	r2, [r3, #2]
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	2000075c 	.word	0x2000075c

080061f0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	4603      	mov	r3, r0
 80061f8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80061fa:	2381      	movs	r3, #129	; 0x81
 80061fc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
 8006200:	4618      	mov	r0, r3
 8006202:	f7ff fdf5 	bl	8005df0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff fdf1 	bl	8005df0 <ssd1306_WriteCommand>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006222:	79fb      	ldrb	r3, [r7, #7]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006228:	23af      	movs	r3, #175	; 0xaf
 800622a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800622c:	4b08      	ldr	r3, [pc, #32]	; (8006250 <ssd1306_SetDisplayOn+0x38>)
 800622e:	2201      	movs	r2, #1
 8006230:	715a      	strb	r2, [r3, #5]
 8006232:	e004      	b.n	800623e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006234:	23ae      	movs	r3, #174	; 0xae
 8006236:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <ssd1306_SetDisplayOn+0x38>)
 800623a:	2200      	movs	r2, #0
 800623c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800623e:	7bfb      	ldrb	r3, [r7, #15]
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff fdd5 	bl	8005df0 <ssd1306_WriteCommand>
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	2000075c 	.word	0x2000075c

08006254 <__cvt>:
 8006254:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	ec55 4b10 	vmov	r4, r5, d0
 800625c:	2d00      	cmp	r5, #0
 800625e:	460e      	mov	r6, r1
 8006260:	4619      	mov	r1, r3
 8006262:	462b      	mov	r3, r5
 8006264:	bfbb      	ittet	lt
 8006266:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800626a:	461d      	movlt	r5, r3
 800626c:	2300      	movge	r3, #0
 800626e:	232d      	movlt	r3, #45	; 0x2d
 8006270:	700b      	strb	r3, [r1, #0]
 8006272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006274:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006278:	4691      	mov	r9, r2
 800627a:	f023 0820 	bic.w	r8, r3, #32
 800627e:	bfbc      	itt	lt
 8006280:	4622      	movlt	r2, r4
 8006282:	4614      	movlt	r4, r2
 8006284:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006288:	d005      	beq.n	8006296 <__cvt+0x42>
 800628a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800628e:	d100      	bne.n	8006292 <__cvt+0x3e>
 8006290:	3601      	adds	r6, #1
 8006292:	2102      	movs	r1, #2
 8006294:	e000      	b.n	8006298 <__cvt+0x44>
 8006296:	2103      	movs	r1, #3
 8006298:	ab03      	add	r3, sp, #12
 800629a:	9301      	str	r3, [sp, #4]
 800629c:	ab02      	add	r3, sp, #8
 800629e:	9300      	str	r3, [sp, #0]
 80062a0:	ec45 4b10 	vmov	d0, r4, r5
 80062a4:	4653      	mov	r3, sl
 80062a6:	4632      	mov	r2, r6
 80062a8:	f000 fe76 	bl	8006f98 <_dtoa_r>
 80062ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80062b0:	4607      	mov	r7, r0
 80062b2:	d102      	bne.n	80062ba <__cvt+0x66>
 80062b4:	f019 0f01 	tst.w	r9, #1
 80062b8:	d022      	beq.n	8006300 <__cvt+0xac>
 80062ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80062be:	eb07 0906 	add.w	r9, r7, r6
 80062c2:	d110      	bne.n	80062e6 <__cvt+0x92>
 80062c4:	783b      	ldrb	r3, [r7, #0]
 80062c6:	2b30      	cmp	r3, #48	; 0x30
 80062c8:	d10a      	bne.n	80062e0 <__cvt+0x8c>
 80062ca:	2200      	movs	r2, #0
 80062cc:	2300      	movs	r3, #0
 80062ce:	4620      	mov	r0, r4
 80062d0:	4629      	mov	r1, r5
 80062d2:	f7fa fc21 	bl	8000b18 <__aeabi_dcmpeq>
 80062d6:	b918      	cbnz	r0, 80062e0 <__cvt+0x8c>
 80062d8:	f1c6 0601 	rsb	r6, r6, #1
 80062dc:	f8ca 6000 	str.w	r6, [sl]
 80062e0:	f8da 3000 	ldr.w	r3, [sl]
 80062e4:	4499      	add	r9, r3
 80062e6:	2200      	movs	r2, #0
 80062e8:	2300      	movs	r3, #0
 80062ea:	4620      	mov	r0, r4
 80062ec:	4629      	mov	r1, r5
 80062ee:	f7fa fc13 	bl	8000b18 <__aeabi_dcmpeq>
 80062f2:	b108      	cbz	r0, 80062f8 <__cvt+0xa4>
 80062f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80062f8:	2230      	movs	r2, #48	; 0x30
 80062fa:	9b03      	ldr	r3, [sp, #12]
 80062fc:	454b      	cmp	r3, r9
 80062fe:	d307      	bcc.n	8006310 <__cvt+0xbc>
 8006300:	9b03      	ldr	r3, [sp, #12]
 8006302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006304:	1bdb      	subs	r3, r3, r7
 8006306:	4638      	mov	r0, r7
 8006308:	6013      	str	r3, [r2, #0]
 800630a:	b004      	add	sp, #16
 800630c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	9103      	str	r1, [sp, #12]
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e7f0      	b.n	80062fa <__cvt+0xa6>

08006318 <__exponent>:
 8006318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800631a:	4603      	mov	r3, r0
 800631c:	2900      	cmp	r1, #0
 800631e:	bfb8      	it	lt
 8006320:	4249      	neglt	r1, r1
 8006322:	f803 2b02 	strb.w	r2, [r3], #2
 8006326:	bfb4      	ite	lt
 8006328:	222d      	movlt	r2, #45	; 0x2d
 800632a:	222b      	movge	r2, #43	; 0x2b
 800632c:	2909      	cmp	r1, #9
 800632e:	7042      	strb	r2, [r0, #1]
 8006330:	dd2a      	ble.n	8006388 <__exponent+0x70>
 8006332:	f10d 0207 	add.w	r2, sp, #7
 8006336:	4617      	mov	r7, r2
 8006338:	260a      	movs	r6, #10
 800633a:	4694      	mov	ip, r2
 800633c:	fb91 f5f6 	sdiv	r5, r1, r6
 8006340:	fb06 1415 	mls	r4, r6, r5, r1
 8006344:	3430      	adds	r4, #48	; 0x30
 8006346:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800634a:	460c      	mov	r4, r1
 800634c:	2c63      	cmp	r4, #99	; 0x63
 800634e:	f102 32ff 	add.w	r2, r2, #4294967295
 8006352:	4629      	mov	r1, r5
 8006354:	dcf1      	bgt.n	800633a <__exponent+0x22>
 8006356:	3130      	adds	r1, #48	; 0x30
 8006358:	f1ac 0402 	sub.w	r4, ip, #2
 800635c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006360:	1c41      	adds	r1, r0, #1
 8006362:	4622      	mov	r2, r4
 8006364:	42ba      	cmp	r2, r7
 8006366:	d30a      	bcc.n	800637e <__exponent+0x66>
 8006368:	f10d 0209 	add.w	r2, sp, #9
 800636c:	eba2 020c 	sub.w	r2, r2, ip
 8006370:	42bc      	cmp	r4, r7
 8006372:	bf88      	it	hi
 8006374:	2200      	movhi	r2, #0
 8006376:	4413      	add	r3, r2
 8006378:	1a18      	subs	r0, r3, r0
 800637a:	b003      	add	sp, #12
 800637c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006382:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006386:	e7ed      	b.n	8006364 <__exponent+0x4c>
 8006388:	2330      	movs	r3, #48	; 0x30
 800638a:	3130      	adds	r1, #48	; 0x30
 800638c:	7083      	strb	r3, [r0, #2]
 800638e:	70c1      	strb	r1, [r0, #3]
 8006390:	1d03      	adds	r3, r0, #4
 8006392:	e7f1      	b.n	8006378 <__exponent+0x60>

08006394 <_printf_float>:
 8006394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	ed2d 8b02 	vpush	{d8}
 800639c:	b08d      	sub	sp, #52	; 0x34
 800639e:	460c      	mov	r4, r1
 80063a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80063a4:	4616      	mov	r6, r2
 80063a6:	461f      	mov	r7, r3
 80063a8:	4605      	mov	r5, r0
 80063aa:	f000 fce7 	bl	8006d7c <_localeconv_r>
 80063ae:	f8d0 a000 	ldr.w	sl, [r0]
 80063b2:	4650      	mov	r0, sl
 80063b4:	f7f9 ff84 	bl	80002c0 <strlen>
 80063b8:	2300      	movs	r3, #0
 80063ba:	930a      	str	r3, [sp, #40]	; 0x28
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	9305      	str	r3, [sp, #20]
 80063c0:	f8d8 3000 	ldr.w	r3, [r8]
 80063c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80063c8:	3307      	adds	r3, #7
 80063ca:	f023 0307 	bic.w	r3, r3, #7
 80063ce:	f103 0208 	add.w	r2, r3, #8
 80063d2:	f8c8 2000 	str.w	r2, [r8]
 80063d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80063da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80063de:	9307      	str	r3, [sp, #28]
 80063e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80063e4:	ee08 0a10 	vmov	s16, r0
 80063e8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80063ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80063f0:	4b9e      	ldr	r3, [pc, #632]	; (800666c <_printf_float+0x2d8>)
 80063f2:	f04f 32ff 	mov.w	r2, #4294967295
 80063f6:	f7fa fbc1 	bl	8000b7c <__aeabi_dcmpun>
 80063fa:	bb88      	cbnz	r0, 8006460 <_printf_float+0xcc>
 80063fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006400:	4b9a      	ldr	r3, [pc, #616]	; (800666c <_printf_float+0x2d8>)
 8006402:	f04f 32ff 	mov.w	r2, #4294967295
 8006406:	f7fa fb9b 	bl	8000b40 <__aeabi_dcmple>
 800640a:	bb48      	cbnz	r0, 8006460 <_printf_float+0xcc>
 800640c:	2200      	movs	r2, #0
 800640e:	2300      	movs	r3, #0
 8006410:	4640      	mov	r0, r8
 8006412:	4649      	mov	r1, r9
 8006414:	f7fa fb8a 	bl	8000b2c <__aeabi_dcmplt>
 8006418:	b110      	cbz	r0, 8006420 <_printf_float+0x8c>
 800641a:	232d      	movs	r3, #45	; 0x2d
 800641c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006420:	4a93      	ldr	r2, [pc, #588]	; (8006670 <_printf_float+0x2dc>)
 8006422:	4b94      	ldr	r3, [pc, #592]	; (8006674 <_printf_float+0x2e0>)
 8006424:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006428:	bf94      	ite	ls
 800642a:	4690      	movls	r8, r2
 800642c:	4698      	movhi	r8, r3
 800642e:	2303      	movs	r3, #3
 8006430:	6123      	str	r3, [r4, #16]
 8006432:	9b05      	ldr	r3, [sp, #20]
 8006434:	f023 0304 	bic.w	r3, r3, #4
 8006438:	6023      	str	r3, [r4, #0]
 800643a:	f04f 0900 	mov.w	r9, #0
 800643e:	9700      	str	r7, [sp, #0]
 8006440:	4633      	mov	r3, r6
 8006442:	aa0b      	add	r2, sp, #44	; 0x2c
 8006444:	4621      	mov	r1, r4
 8006446:	4628      	mov	r0, r5
 8006448:	f000 f9da 	bl	8006800 <_printf_common>
 800644c:	3001      	adds	r0, #1
 800644e:	f040 8090 	bne.w	8006572 <_printf_float+0x1de>
 8006452:	f04f 30ff 	mov.w	r0, #4294967295
 8006456:	b00d      	add	sp, #52	; 0x34
 8006458:	ecbd 8b02 	vpop	{d8}
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	4642      	mov	r2, r8
 8006462:	464b      	mov	r3, r9
 8006464:	4640      	mov	r0, r8
 8006466:	4649      	mov	r1, r9
 8006468:	f7fa fb88 	bl	8000b7c <__aeabi_dcmpun>
 800646c:	b140      	cbz	r0, 8006480 <_printf_float+0xec>
 800646e:	464b      	mov	r3, r9
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfbc      	itt	lt
 8006474:	232d      	movlt	r3, #45	; 0x2d
 8006476:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800647a:	4a7f      	ldr	r2, [pc, #508]	; (8006678 <_printf_float+0x2e4>)
 800647c:	4b7f      	ldr	r3, [pc, #508]	; (800667c <_printf_float+0x2e8>)
 800647e:	e7d1      	b.n	8006424 <_printf_float+0x90>
 8006480:	6863      	ldr	r3, [r4, #4]
 8006482:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006486:	9206      	str	r2, [sp, #24]
 8006488:	1c5a      	adds	r2, r3, #1
 800648a:	d13f      	bne.n	800650c <_printf_float+0x178>
 800648c:	2306      	movs	r3, #6
 800648e:	6063      	str	r3, [r4, #4]
 8006490:	9b05      	ldr	r3, [sp, #20]
 8006492:	6861      	ldr	r1, [r4, #4]
 8006494:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006498:	2300      	movs	r3, #0
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	ab0a      	add	r3, sp, #40	; 0x28
 800649e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80064a2:	ab09      	add	r3, sp, #36	; 0x24
 80064a4:	ec49 8b10 	vmov	d0, r8, r9
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064b0:	4628      	mov	r0, r5
 80064b2:	f7ff fecf 	bl	8006254 <__cvt>
 80064b6:	9b06      	ldr	r3, [sp, #24]
 80064b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064ba:	2b47      	cmp	r3, #71	; 0x47
 80064bc:	4680      	mov	r8, r0
 80064be:	d108      	bne.n	80064d2 <_printf_float+0x13e>
 80064c0:	1cc8      	adds	r0, r1, #3
 80064c2:	db02      	blt.n	80064ca <_printf_float+0x136>
 80064c4:	6863      	ldr	r3, [r4, #4]
 80064c6:	4299      	cmp	r1, r3
 80064c8:	dd41      	ble.n	800654e <_printf_float+0x1ba>
 80064ca:	f1ab 0302 	sub.w	r3, fp, #2
 80064ce:	fa5f fb83 	uxtb.w	fp, r3
 80064d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80064d6:	d820      	bhi.n	800651a <_printf_float+0x186>
 80064d8:	3901      	subs	r1, #1
 80064da:	465a      	mov	r2, fp
 80064dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064e0:	9109      	str	r1, [sp, #36]	; 0x24
 80064e2:	f7ff ff19 	bl	8006318 <__exponent>
 80064e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064e8:	1813      	adds	r3, r2, r0
 80064ea:	2a01      	cmp	r2, #1
 80064ec:	4681      	mov	r9, r0
 80064ee:	6123      	str	r3, [r4, #16]
 80064f0:	dc02      	bgt.n	80064f8 <_printf_float+0x164>
 80064f2:	6822      	ldr	r2, [r4, #0]
 80064f4:	07d2      	lsls	r2, r2, #31
 80064f6:	d501      	bpl.n	80064fc <_printf_float+0x168>
 80064f8:	3301      	adds	r3, #1
 80064fa:	6123      	str	r3, [r4, #16]
 80064fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006500:	2b00      	cmp	r3, #0
 8006502:	d09c      	beq.n	800643e <_printf_float+0xaa>
 8006504:	232d      	movs	r3, #45	; 0x2d
 8006506:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800650a:	e798      	b.n	800643e <_printf_float+0xaa>
 800650c:	9a06      	ldr	r2, [sp, #24]
 800650e:	2a47      	cmp	r2, #71	; 0x47
 8006510:	d1be      	bne.n	8006490 <_printf_float+0xfc>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1bc      	bne.n	8006490 <_printf_float+0xfc>
 8006516:	2301      	movs	r3, #1
 8006518:	e7b9      	b.n	800648e <_printf_float+0xfa>
 800651a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800651e:	d118      	bne.n	8006552 <_printf_float+0x1be>
 8006520:	2900      	cmp	r1, #0
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	dd0b      	ble.n	800653e <_printf_float+0x1aa>
 8006526:	6121      	str	r1, [r4, #16]
 8006528:	b913      	cbnz	r3, 8006530 <_printf_float+0x19c>
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	07d0      	lsls	r0, r2, #31
 800652e:	d502      	bpl.n	8006536 <_printf_float+0x1a2>
 8006530:	3301      	adds	r3, #1
 8006532:	440b      	add	r3, r1
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	65a1      	str	r1, [r4, #88]	; 0x58
 8006538:	f04f 0900 	mov.w	r9, #0
 800653c:	e7de      	b.n	80064fc <_printf_float+0x168>
 800653e:	b913      	cbnz	r3, 8006546 <_printf_float+0x1b2>
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	07d2      	lsls	r2, r2, #31
 8006544:	d501      	bpl.n	800654a <_printf_float+0x1b6>
 8006546:	3302      	adds	r3, #2
 8006548:	e7f4      	b.n	8006534 <_printf_float+0x1a0>
 800654a:	2301      	movs	r3, #1
 800654c:	e7f2      	b.n	8006534 <_printf_float+0x1a0>
 800654e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006554:	4299      	cmp	r1, r3
 8006556:	db05      	blt.n	8006564 <_printf_float+0x1d0>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	6121      	str	r1, [r4, #16]
 800655c:	07d8      	lsls	r0, r3, #31
 800655e:	d5ea      	bpl.n	8006536 <_printf_float+0x1a2>
 8006560:	1c4b      	adds	r3, r1, #1
 8006562:	e7e7      	b.n	8006534 <_printf_float+0x1a0>
 8006564:	2900      	cmp	r1, #0
 8006566:	bfd4      	ite	le
 8006568:	f1c1 0202 	rsble	r2, r1, #2
 800656c:	2201      	movgt	r2, #1
 800656e:	4413      	add	r3, r2
 8006570:	e7e0      	b.n	8006534 <_printf_float+0x1a0>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	055a      	lsls	r2, r3, #21
 8006576:	d407      	bmi.n	8006588 <_printf_float+0x1f4>
 8006578:	6923      	ldr	r3, [r4, #16]
 800657a:	4642      	mov	r2, r8
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	d12c      	bne.n	80065e0 <_printf_float+0x24c>
 8006586:	e764      	b.n	8006452 <_printf_float+0xbe>
 8006588:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800658c:	f240 80e0 	bls.w	8006750 <_printf_float+0x3bc>
 8006590:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006594:	2200      	movs	r2, #0
 8006596:	2300      	movs	r3, #0
 8006598:	f7fa fabe 	bl	8000b18 <__aeabi_dcmpeq>
 800659c:	2800      	cmp	r0, #0
 800659e:	d034      	beq.n	800660a <_printf_float+0x276>
 80065a0:	4a37      	ldr	r2, [pc, #220]	; (8006680 <_printf_float+0x2ec>)
 80065a2:	2301      	movs	r3, #1
 80065a4:	4631      	mov	r1, r6
 80065a6:	4628      	mov	r0, r5
 80065a8:	47b8      	blx	r7
 80065aa:	3001      	adds	r0, #1
 80065ac:	f43f af51 	beq.w	8006452 <_printf_float+0xbe>
 80065b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	db02      	blt.n	80065be <_printf_float+0x22a>
 80065b8:	6823      	ldr	r3, [r4, #0]
 80065ba:	07d8      	lsls	r0, r3, #31
 80065bc:	d510      	bpl.n	80065e0 <_printf_float+0x24c>
 80065be:	ee18 3a10 	vmov	r3, s16
 80065c2:	4652      	mov	r2, sl
 80065c4:	4631      	mov	r1, r6
 80065c6:	4628      	mov	r0, r5
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	f43f af41 	beq.w	8006452 <_printf_float+0xbe>
 80065d0:	f04f 0800 	mov.w	r8, #0
 80065d4:	f104 091a 	add.w	r9, r4, #26
 80065d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065da:	3b01      	subs	r3, #1
 80065dc:	4543      	cmp	r3, r8
 80065de:	dc09      	bgt.n	80065f4 <_printf_float+0x260>
 80065e0:	6823      	ldr	r3, [r4, #0]
 80065e2:	079b      	lsls	r3, r3, #30
 80065e4:	f100 8107 	bmi.w	80067f6 <_printf_float+0x462>
 80065e8:	68e0      	ldr	r0, [r4, #12]
 80065ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065ec:	4298      	cmp	r0, r3
 80065ee:	bfb8      	it	lt
 80065f0:	4618      	movlt	r0, r3
 80065f2:	e730      	b.n	8006456 <_printf_float+0xc2>
 80065f4:	2301      	movs	r3, #1
 80065f6:	464a      	mov	r2, r9
 80065f8:	4631      	mov	r1, r6
 80065fa:	4628      	mov	r0, r5
 80065fc:	47b8      	blx	r7
 80065fe:	3001      	adds	r0, #1
 8006600:	f43f af27 	beq.w	8006452 <_printf_float+0xbe>
 8006604:	f108 0801 	add.w	r8, r8, #1
 8006608:	e7e6      	b.n	80065d8 <_printf_float+0x244>
 800660a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	dc39      	bgt.n	8006684 <_printf_float+0x2f0>
 8006610:	4a1b      	ldr	r2, [pc, #108]	; (8006680 <_printf_float+0x2ec>)
 8006612:	2301      	movs	r3, #1
 8006614:	4631      	mov	r1, r6
 8006616:	4628      	mov	r0, r5
 8006618:	47b8      	blx	r7
 800661a:	3001      	adds	r0, #1
 800661c:	f43f af19 	beq.w	8006452 <_printf_float+0xbe>
 8006620:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006624:	4313      	orrs	r3, r2
 8006626:	d102      	bne.n	800662e <_printf_float+0x29a>
 8006628:	6823      	ldr	r3, [r4, #0]
 800662a:	07d9      	lsls	r1, r3, #31
 800662c:	d5d8      	bpl.n	80065e0 <_printf_float+0x24c>
 800662e:	ee18 3a10 	vmov	r3, s16
 8006632:	4652      	mov	r2, sl
 8006634:	4631      	mov	r1, r6
 8006636:	4628      	mov	r0, r5
 8006638:	47b8      	blx	r7
 800663a:	3001      	adds	r0, #1
 800663c:	f43f af09 	beq.w	8006452 <_printf_float+0xbe>
 8006640:	f04f 0900 	mov.w	r9, #0
 8006644:	f104 0a1a 	add.w	sl, r4, #26
 8006648:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800664a:	425b      	negs	r3, r3
 800664c:	454b      	cmp	r3, r9
 800664e:	dc01      	bgt.n	8006654 <_printf_float+0x2c0>
 8006650:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006652:	e792      	b.n	800657a <_printf_float+0x1e6>
 8006654:	2301      	movs	r3, #1
 8006656:	4652      	mov	r2, sl
 8006658:	4631      	mov	r1, r6
 800665a:	4628      	mov	r0, r5
 800665c:	47b8      	blx	r7
 800665e:	3001      	adds	r0, #1
 8006660:	f43f aef7 	beq.w	8006452 <_printf_float+0xbe>
 8006664:	f109 0901 	add.w	r9, r9, #1
 8006668:	e7ee      	b.n	8006648 <_printf_float+0x2b4>
 800666a:	bf00      	nop
 800666c:	7fefffff 	.word	0x7fefffff
 8006670:	08009d2c 	.word	0x08009d2c
 8006674:	08009d30 	.word	0x08009d30
 8006678:	08009d34 	.word	0x08009d34
 800667c:	08009d38 	.word	0x08009d38
 8006680:	08009d3c 	.word	0x08009d3c
 8006684:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006686:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006688:	429a      	cmp	r2, r3
 800668a:	bfa8      	it	ge
 800668c:	461a      	movge	r2, r3
 800668e:	2a00      	cmp	r2, #0
 8006690:	4691      	mov	r9, r2
 8006692:	dc37      	bgt.n	8006704 <_printf_float+0x370>
 8006694:	f04f 0b00 	mov.w	fp, #0
 8006698:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800669c:	f104 021a 	add.w	r2, r4, #26
 80066a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066a2:	9305      	str	r3, [sp, #20]
 80066a4:	eba3 0309 	sub.w	r3, r3, r9
 80066a8:	455b      	cmp	r3, fp
 80066aa:	dc33      	bgt.n	8006714 <_printf_float+0x380>
 80066ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066b0:	429a      	cmp	r2, r3
 80066b2:	db3b      	blt.n	800672c <_printf_float+0x398>
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	07da      	lsls	r2, r3, #31
 80066b8:	d438      	bmi.n	800672c <_printf_float+0x398>
 80066ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066be:	eba2 0903 	sub.w	r9, r2, r3
 80066c2:	9b05      	ldr	r3, [sp, #20]
 80066c4:	1ad2      	subs	r2, r2, r3
 80066c6:	4591      	cmp	r9, r2
 80066c8:	bfa8      	it	ge
 80066ca:	4691      	movge	r9, r2
 80066cc:	f1b9 0f00 	cmp.w	r9, #0
 80066d0:	dc35      	bgt.n	800673e <_printf_float+0x3aa>
 80066d2:	f04f 0800 	mov.w	r8, #0
 80066d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066da:	f104 0a1a 	add.w	sl, r4, #26
 80066de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e2:	1a9b      	subs	r3, r3, r2
 80066e4:	eba3 0309 	sub.w	r3, r3, r9
 80066e8:	4543      	cmp	r3, r8
 80066ea:	f77f af79 	ble.w	80065e0 <_printf_float+0x24c>
 80066ee:	2301      	movs	r3, #1
 80066f0:	4652      	mov	r2, sl
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f aeaa 	beq.w	8006452 <_printf_float+0xbe>
 80066fe:	f108 0801 	add.w	r8, r8, #1
 8006702:	e7ec      	b.n	80066de <_printf_float+0x34a>
 8006704:	4613      	mov	r3, r2
 8006706:	4631      	mov	r1, r6
 8006708:	4642      	mov	r2, r8
 800670a:	4628      	mov	r0, r5
 800670c:	47b8      	blx	r7
 800670e:	3001      	adds	r0, #1
 8006710:	d1c0      	bne.n	8006694 <_printf_float+0x300>
 8006712:	e69e      	b.n	8006452 <_printf_float+0xbe>
 8006714:	2301      	movs	r3, #1
 8006716:	4631      	mov	r1, r6
 8006718:	4628      	mov	r0, r5
 800671a:	9205      	str	r2, [sp, #20]
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f ae97 	beq.w	8006452 <_printf_float+0xbe>
 8006724:	9a05      	ldr	r2, [sp, #20]
 8006726:	f10b 0b01 	add.w	fp, fp, #1
 800672a:	e7b9      	b.n	80066a0 <_printf_float+0x30c>
 800672c:	ee18 3a10 	vmov	r3, s16
 8006730:	4652      	mov	r2, sl
 8006732:	4631      	mov	r1, r6
 8006734:	4628      	mov	r0, r5
 8006736:	47b8      	blx	r7
 8006738:	3001      	adds	r0, #1
 800673a:	d1be      	bne.n	80066ba <_printf_float+0x326>
 800673c:	e689      	b.n	8006452 <_printf_float+0xbe>
 800673e:	9a05      	ldr	r2, [sp, #20]
 8006740:	464b      	mov	r3, r9
 8006742:	4442      	add	r2, r8
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	47b8      	blx	r7
 800674a:	3001      	adds	r0, #1
 800674c:	d1c1      	bne.n	80066d2 <_printf_float+0x33e>
 800674e:	e680      	b.n	8006452 <_printf_float+0xbe>
 8006750:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006752:	2a01      	cmp	r2, #1
 8006754:	dc01      	bgt.n	800675a <_printf_float+0x3c6>
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d53a      	bpl.n	80067d0 <_printf_float+0x43c>
 800675a:	2301      	movs	r3, #1
 800675c:	4642      	mov	r2, r8
 800675e:	4631      	mov	r1, r6
 8006760:	4628      	mov	r0, r5
 8006762:	47b8      	blx	r7
 8006764:	3001      	adds	r0, #1
 8006766:	f43f ae74 	beq.w	8006452 <_printf_float+0xbe>
 800676a:	ee18 3a10 	vmov	r3, s16
 800676e:	4652      	mov	r2, sl
 8006770:	4631      	mov	r1, r6
 8006772:	4628      	mov	r0, r5
 8006774:	47b8      	blx	r7
 8006776:	3001      	adds	r0, #1
 8006778:	f43f ae6b 	beq.w	8006452 <_printf_float+0xbe>
 800677c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006780:	2200      	movs	r2, #0
 8006782:	2300      	movs	r3, #0
 8006784:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006788:	f7fa f9c6 	bl	8000b18 <__aeabi_dcmpeq>
 800678c:	b9d8      	cbnz	r0, 80067c6 <_printf_float+0x432>
 800678e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006792:	f108 0201 	add.w	r2, r8, #1
 8006796:	4631      	mov	r1, r6
 8006798:	4628      	mov	r0, r5
 800679a:	47b8      	blx	r7
 800679c:	3001      	adds	r0, #1
 800679e:	d10e      	bne.n	80067be <_printf_float+0x42a>
 80067a0:	e657      	b.n	8006452 <_printf_float+0xbe>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4652      	mov	r2, sl
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f ae50 	beq.w	8006452 <_printf_float+0xbe>
 80067b2:	f108 0801 	add.w	r8, r8, #1
 80067b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067b8:	3b01      	subs	r3, #1
 80067ba:	4543      	cmp	r3, r8
 80067bc:	dcf1      	bgt.n	80067a2 <_printf_float+0x40e>
 80067be:	464b      	mov	r3, r9
 80067c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067c4:	e6da      	b.n	800657c <_printf_float+0x1e8>
 80067c6:	f04f 0800 	mov.w	r8, #0
 80067ca:	f104 0a1a 	add.w	sl, r4, #26
 80067ce:	e7f2      	b.n	80067b6 <_printf_float+0x422>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4642      	mov	r2, r8
 80067d4:	e7df      	b.n	8006796 <_printf_float+0x402>
 80067d6:	2301      	movs	r3, #1
 80067d8:	464a      	mov	r2, r9
 80067da:	4631      	mov	r1, r6
 80067dc:	4628      	mov	r0, r5
 80067de:	47b8      	blx	r7
 80067e0:	3001      	adds	r0, #1
 80067e2:	f43f ae36 	beq.w	8006452 <_printf_float+0xbe>
 80067e6:	f108 0801 	add.w	r8, r8, #1
 80067ea:	68e3      	ldr	r3, [r4, #12]
 80067ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ee:	1a5b      	subs	r3, r3, r1
 80067f0:	4543      	cmp	r3, r8
 80067f2:	dcf0      	bgt.n	80067d6 <_printf_float+0x442>
 80067f4:	e6f8      	b.n	80065e8 <_printf_float+0x254>
 80067f6:	f04f 0800 	mov.w	r8, #0
 80067fa:	f104 0919 	add.w	r9, r4, #25
 80067fe:	e7f4      	b.n	80067ea <_printf_float+0x456>

08006800 <_printf_common>:
 8006800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006804:	4616      	mov	r6, r2
 8006806:	4699      	mov	r9, r3
 8006808:	688a      	ldr	r2, [r1, #8]
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006810:	4293      	cmp	r3, r2
 8006812:	bfb8      	it	lt
 8006814:	4613      	movlt	r3, r2
 8006816:	6033      	str	r3, [r6, #0]
 8006818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800681c:	4607      	mov	r7, r0
 800681e:	460c      	mov	r4, r1
 8006820:	b10a      	cbz	r2, 8006826 <_printf_common+0x26>
 8006822:	3301      	adds	r3, #1
 8006824:	6033      	str	r3, [r6, #0]
 8006826:	6823      	ldr	r3, [r4, #0]
 8006828:	0699      	lsls	r1, r3, #26
 800682a:	bf42      	ittt	mi
 800682c:	6833      	ldrmi	r3, [r6, #0]
 800682e:	3302      	addmi	r3, #2
 8006830:	6033      	strmi	r3, [r6, #0]
 8006832:	6825      	ldr	r5, [r4, #0]
 8006834:	f015 0506 	ands.w	r5, r5, #6
 8006838:	d106      	bne.n	8006848 <_printf_common+0x48>
 800683a:	f104 0a19 	add.w	sl, r4, #25
 800683e:	68e3      	ldr	r3, [r4, #12]
 8006840:	6832      	ldr	r2, [r6, #0]
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ab      	cmp	r3, r5
 8006846:	dc26      	bgt.n	8006896 <_printf_common+0x96>
 8006848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800684c:	1e13      	subs	r3, r2, #0
 800684e:	6822      	ldr	r2, [r4, #0]
 8006850:	bf18      	it	ne
 8006852:	2301      	movne	r3, #1
 8006854:	0692      	lsls	r2, r2, #26
 8006856:	d42b      	bmi.n	80068b0 <_printf_common+0xb0>
 8006858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800685c:	4649      	mov	r1, r9
 800685e:	4638      	mov	r0, r7
 8006860:	47c0      	blx	r8
 8006862:	3001      	adds	r0, #1
 8006864:	d01e      	beq.n	80068a4 <_printf_common+0xa4>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	6922      	ldr	r2, [r4, #16]
 800686a:	f003 0306 	and.w	r3, r3, #6
 800686e:	2b04      	cmp	r3, #4
 8006870:	bf02      	ittt	eq
 8006872:	68e5      	ldreq	r5, [r4, #12]
 8006874:	6833      	ldreq	r3, [r6, #0]
 8006876:	1aed      	subeq	r5, r5, r3
 8006878:	68a3      	ldr	r3, [r4, #8]
 800687a:	bf0c      	ite	eq
 800687c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006880:	2500      	movne	r5, #0
 8006882:	4293      	cmp	r3, r2
 8006884:	bfc4      	itt	gt
 8006886:	1a9b      	subgt	r3, r3, r2
 8006888:	18ed      	addgt	r5, r5, r3
 800688a:	2600      	movs	r6, #0
 800688c:	341a      	adds	r4, #26
 800688e:	42b5      	cmp	r5, r6
 8006890:	d11a      	bne.n	80068c8 <_printf_common+0xc8>
 8006892:	2000      	movs	r0, #0
 8006894:	e008      	b.n	80068a8 <_printf_common+0xa8>
 8006896:	2301      	movs	r3, #1
 8006898:	4652      	mov	r2, sl
 800689a:	4649      	mov	r1, r9
 800689c:	4638      	mov	r0, r7
 800689e:	47c0      	blx	r8
 80068a0:	3001      	adds	r0, #1
 80068a2:	d103      	bne.n	80068ac <_printf_common+0xac>
 80068a4:	f04f 30ff 	mov.w	r0, #4294967295
 80068a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ac:	3501      	adds	r5, #1
 80068ae:	e7c6      	b.n	800683e <_printf_common+0x3e>
 80068b0:	18e1      	adds	r1, r4, r3
 80068b2:	1c5a      	adds	r2, r3, #1
 80068b4:	2030      	movs	r0, #48	; 0x30
 80068b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068ba:	4422      	add	r2, r4
 80068bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80068c4:	3302      	adds	r3, #2
 80068c6:	e7c7      	b.n	8006858 <_printf_common+0x58>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4622      	mov	r2, r4
 80068cc:	4649      	mov	r1, r9
 80068ce:	4638      	mov	r0, r7
 80068d0:	47c0      	blx	r8
 80068d2:	3001      	adds	r0, #1
 80068d4:	d0e6      	beq.n	80068a4 <_printf_common+0xa4>
 80068d6:	3601      	adds	r6, #1
 80068d8:	e7d9      	b.n	800688e <_printf_common+0x8e>
	...

080068dc <_printf_i>:
 80068dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068e0:	7e0f      	ldrb	r7, [r1, #24]
 80068e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80068e4:	2f78      	cmp	r7, #120	; 0x78
 80068e6:	4691      	mov	r9, r2
 80068e8:	4680      	mov	r8, r0
 80068ea:	460c      	mov	r4, r1
 80068ec:	469a      	mov	sl, r3
 80068ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80068f2:	d807      	bhi.n	8006904 <_printf_i+0x28>
 80068f4:	2f62      	cmp	r7, #98	; 0x62
 80068f6:	d80a      	bhi.n	800690e <_printf_i+0x32>
 80068f8:	2f00      	cmp	r7, #0
 80068fa:	f000 80d4 	beq.w	8006aa6 <_printf_i+0x1ca>
 80068fe:	2f58      	cmp	r7, #88	; 0x58
 8006900:	f000 80c0 	beq.w	8006a84 <_printf_i+0x1a8>
 8006904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800690c:	e03a      	b.n	8006984 <_printf_i+0xa8>
 800690e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006912:	2b15      	cmp	r3, #21
 8006914:	d8f6      	bhi.n	8006904 <_printf_i+0x28>
 8006916:	a101      	add	r1, pc, #4	; (adr r1, 800691c <_printf_i+0x40>)
 8006918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800691c:	08006975 	.word	0x08006975
 8006920:	08006989 	.word	0x08006989
 8006924:	08006905 	.word	0x08006905
 8006928:	08006905 	.word	0x08006905
 800692c:	08006905 	.word	0x08006905
 8006930:	08006905 	.word	0x08006905
 8006934:	08006989 	.word	0x08006989
 8006938:	08006905 	.word	0x08006905
 800693c:	08006905 	.word	0x08006905
 8006940:	08006905 	.word	0x08006905
 8006944:	08006905 	.word	0x08006905
 8006948:	08006a8d 	.word	0x08006a8d
 800694c:	080069b5 	.word	0x080069b5
 8006950:	08006a47 	.word	0x08006a47
 8006954:	08006905 	.word	0x08006905
 8006958:	08006905 	.word	0x08006905
 800695c:	08006aaf 	.word	0x08006aaf
 8006960:	08006905 	.word	0x08006905
 8006964:	080069b5 	.word	0x080069b5
 8006968:	08006905 	.word	0x08006905
 800696c:	08006905 	.word	0x08006905
 8006970:	08006a4f 	.word	0x08006a4f
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	1d1a      	adds	r2, r3, #4
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	602a      	str	r2, [r5, #0]
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006984:	2301      	movs	r3, #1
 8006986:	e09f      	b.n	8006ac8 <_printf_i+0x1ec>
 8006988:	6820      	ldr	r0, [r4, #0]
 800698a:	682b      	ldr	r3, [r5, #0]
 800698c:	0607      	lsls	r7, r0, #24
 800698e:	f103 0104 	add.w	r1, r3, #4
 8006992:	6029      	str	r1, [r5, #0]
 8006994:	d501      	bpl.n	800699a <_printf_i+0xbe>
 8006996:	681e      	ldr	r6, [r3, #0]
 8006998:	e003      	b.n	80069a2 <_printf_i+0xc6>
 800699a:	0646      	lsls	r6, r0, #25
 800699c:	d5fb      	bpl.n	8006996 <_printf_i+0xba>
 800699e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80069a2:	2e00      	cmp	r6, #0
 80069a4:	da03      	bge.n	80069ae <_printf_i+0xd2>
 80069a6:	232d      	movs	r3, #45	; 0x2d
 80069a8:	4276      	negs	r6, r6
 80069aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069ae:	485a      	ldr	r0, [pc, #360]	; (8006b18 <_printf_i+0x23c>)
 80069b0:	230a      	movs	r3, #10
 80069b2:	e012      	b.n	80069da <_printf_i+0xfe>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	6820      	ldr	r0, [r4, #0]
 80069b8:	1d19      	adds	r1, r3, #4
 80069ba:	6029      	str	r1, [r5, #0]
 80069bc:	0605      	lsls	r5, r0, #24
 80069be:	d501      	bpl.n	80069c4 <_printf_i+0xe8>
 80069c0:	681e      	ldr	r6, [r3, #0]
 80069c2:	e002      	b.n	80069ca <_printf_i+0xee>
 80069c4:	0641      	lsls	r1, r0, #25
 80069c6:	d5fb      	bpl.n	80069c0 <_printf_i+0xe4>
 80069c8:	881e      	ldrh	r6, [r3, #0]
 80069ca:	4853      	ldr	r0, [pc, #332]	; (8006b18 <_printf_i+0x23c>)
 80069cc:	2f6f      	cmp	r7, #111	; 0x6f
 80069ce:	bf0c      	ite	eq
 80069d0:	2308      	moveq	r3, #8
 80069d2:	230a      	movne	r3, #10
 80069d4:	2100      	movs	r1, #0
 80069d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069da:	6865      	ldr	r5, [r4, #4]
 80069dc:	60a5      	str	r5, [r4, #8]
 80069de:	2d00      	cmp	r5, #0
 80069e0:	bfa2      	ittt	ge
 80069e2:	6821      	ldrge	r1, [r4, #0]
 80069e4:	f021 0104 	bicge.w	r1, r1, #4
 80069e8:	6021      	strge	r1, [r4, #0]
 80069ea:	b90e      	cbnz	r6, 80069f0 <_printf_i+0x114>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	d04b      	beq.n	8006a88 <_printf_i+0x1ac>
 80069f0:	4615      	mov	r5, r2
 80069f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80069f6:	fb03 6711 	mls	r7, r3, r1, r6
 80069fa:	5dc7      	ldrb	r7, [r0, r7]
 80069fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a00:	4637      	mov	r7, r6
 8006a02:	42bb      	cmp	r3, r7
 8006a04:	460e      	mov	r6, r1
 8006a06:	d9f4      	bls.n	80069f2 <_printf_i+0x116>
 8006a08:	2b08      	cmp	r3, #8
 8006a0a:	d10b      	bne.n	8006a24 <_printf_i+0x148>
 8006a0c:	6823      	ldr	r3, [r4, #0]
 8006a0e:	07de      	lsls	r6, r3, #31
 8006a10:	d508      	bpl.n	8006a24 <_printf_i+0x148>
 8006a12:	6923      	ldr	r3, [r4, #16]
 8006a14:	6861      	ldr	r1, [r4, #4]
 8006a16:	4299      	cmp	r1, r3
 8006a18:	bfde      	ittt	le
 8006a1a:	2330      	movle	r3, #48	; 0x30
 8006a1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a24:	1b52      	subs	r2, r2, r5
 8006a26:	6122      	str	r2, [r4, #16]
 8006a28:	f8cd a000 	str.w	sl, [sp]
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	aa03      	add	r2, sp, #12
 8006a30:	4621      	mov	r1, r4
 8006a32:	4640      	mov	r0, r8
 8006a34:	f7ff fee4 	bl	8006800 <_printf_common>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d14a      	bne.n	8006ad2 <_printf_i+0x1f6>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	b004      	add	sp, #16
 8006a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	f043 0320 	orr.w	r3, r3, #32
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	4833      	ldr	r0, [pc, #204]	; (8006b1c <_printf_i+0x240>)
 8006a50:	2778      	movs	r7, #120	; 0x78
 8006a52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	6829      	ldr	r1, [r5, #0]
 8006a5a:	061f      	lsls	r7, r3, #24
 8006a5c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006a60:	d402      	bmi.n	8006a68 <_printf_i+0x18c>
 8006a62:	065f      	lsls	r7, r3, #25
 8006a64:	bf48      	it	mi
 8006a66:	b2b6      	uxthmi	r6, r6
 8006a68:	07df      	lsls	r7, r3, #31
 8006a6a:	bf48      	it	mi
 8006a6c:	f043 0320 	orrmi.w	r3, r3, #32
 8006a70:	6029      	str	r1, [r5, #0]
 8006a72:	bf48      	it	mi
 8006a74:	6023      	strmi	r3, [r4, #0]
 8006a76:	b91e      	cbnz	r6, 8006a80 <_printf_i+0x1a4>
 8006a78:	6823      	ldr	r3, [r4, #0]
 8006a7a:	f023 0320 	bic.w	r3, r3, #32
 8006a7e:	6023      	str	r3, [r4, #0]
 8006a80:	2310      	movs	r3, #16
 8006a82:	e7a7      	b.n	80069d4 <_printf_i+0xf8>
 8006a84:	4824      	ldr	r0, [pc, #144]	; (8006b18 <_printf_i+0x23c>)
 8006a86:	e7e4      	b.n	8006a52 <_printf_i+0x176>
 8006a88:	4615      	mov	r5, r2
 8006a8a:	e7bd      	b.n	8006a08 <_printf_i+0x12c>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	6826      	ldr	r6, [r4, #0]
 8006a90:	6961      	ldr	r1, [r4, #20]
 8006a92:	1d18      	adds	r0, r3, #4
 8006a94:	6028      	str	r0, [r5, #0]
 8006a96:	0635      	lsls	r5, r6, #24
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	d501      	bpl.n	8006aa0 <_printf_i+0x1c4>
 8006a9c:	6019      	str	r1, [r3, #0]
 8006a9e:	e002      	b.n	8006aa6 <_printf_i+0x1ca>
 8006aa0:	0670      	lsls	r0, r6, #25
 8006aa2:	d5fb      	bpl.n	8006a9c <_printf_i+0x1c0>
 8006aa4:	8019      	strh	r1, [r3, #0]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	4615      	mov	r5, r2
 8006aac:	e7bc      	b.n	8006a28 <_printf_i+0x14c>
 8006aae:	682b      	ldr	r3, [r5, #0]
 8006ab0:	1d1a      	adds	r2, r3, #4
 8006ab2:	602a      	str	r2, [r5, #0]
 8006ab4:	681d      	ldr	r5, [r3, #0]
 8006ab6:	6862      	ldr	r2, [r4, #4]
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4628      	mov	r0, r5
 8006abc:	f7f9 fbb0 	bl	8000220 <memchr>
 8006ac0:	b108      	cbz	r0, 8006ac6 <_printf_i+0x1ea>
 8006ac2:	1b40      	subs	r0, r0, r5
 8006ac4:	6060      	str	r0, [r4, #4]
 8006ac6:	6863      	ldr	r3, [r4, #4]
 8006ac8:	6123      	str	r3, [r4, #16]
 8006aca:	2300      	movs	r3, #0
 8006acc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ad0:	e7aa      	b.n	8006a28 <_printf_i+0x14c>
 8006ad2:	6923      	ldr	r3, [r4, #16]
 8006ad4:	462a      	mov	r2, r5
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	4640      	mov	r0, r8
 8006ada:	47d0      	blx	sl
 8006adc:	3001      	adds	r0, #1
 8006ade:	d0ad      	beq.n	8006a3c <_printf_i+0x160>
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	079b      	lsls	r3, r3, #30
 8006ae4:	d413      	bmi.n	8006b0e <_printf_i+0x232>
 8006ae6:	68e0      	ldr	r0, [r4, #12]
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	4298      	cmp	r0, r3
 8006aec:	bfb8      	it	lt
 8006aee:	4618      	movlt	r0, r3
 8006af0:	e7a6      	b.n	8006a40 <_printf_i+0x164>
 8006af2:	2301      	movs	r3, #1
 8006af4:	4632      	mov	r2, r6
 8006af6:	4649      	mov	r1, r9
 8006af8:	4640      	mov	r0, r8
 8006afa:	47d0      	blx	sl
 8006afc:	3001      	adds	r0, #1
 8006afe:	d09d      	beq.n	8006a3c <_printf_i+0x160>
 8006b00:	3501      	adds	r5, #1
 8006b02:	68e3      	ldr	r3, [r4, #12]
 8006b04:	9903      	ldr	r1, [sp, #12]
 8006b06:	1a5b      	subs	r3, r3, r1
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	dcf2      	bgt.n	8006af2 <_printf_i+0x216>
 8006b0c:	e7eb      	b.n	8006ae6 <_printf_i+0x20a>
 8006b0e:	2500      	movs	r5, #0
 8006b10:	f104 0619 	add.w	r6, r4, #25
 8006b14:	e7f5      	b.n	8006b02 <_printf_i+0x226>
 8006b16:	bf00      	nop
 8006b18:	08009d3e 	.word	0x08009d3e
 8006b1c:	08009d4f 	.word	0x08009d4f

08006b20 <std>:
 8006b20:	2300      	movs	r3, #0
 8006b22:	b510      	push	{r4, lr}
 8006b24:	4604      	mov	r4, r0
 8006b26:	e9c0 3300 	strd	r3, r3, [r0]
 8006b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2e:	6083      	str	r3, [r0, #8]
 8006b30:	8181      	strh	r1, [r0, #12]
 8006b32:	6643      	str	r3, [r0, #100]	; 0x64
 8006b34:	81c2      	strh	r2, [r0, #14]
 8006b36:	6183      	str	r3, [r0, #24]
 8006b38:	4619      	mov	r1, r3
 8006b3a:	2208      	movs	r2, #8
 8006b3c:	305c      	adds	r0, #92	; 0x5c
 8006b3e:	f000 f914 	bl	8006d6a <memset>
 8006b42:	4b0d      	ldr	r3, [pc, #52]	; (8006b78 <std+0x58>)
 8006b44:	6263      	str	r3, [r4, #36]	; 0x24
 8006b46:	4b0d      	ldr	r3, [pc, #52]	; (8006b7c <std+0x5c>)
 8006b48:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	; (8006b80 <std+0x60>)
 8006b4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	; (8006b84 <std+0x64>)
 8006b50:	6323      	str	r3, [r4, #48]	; 0x30
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <std+0x68>)
 8006b54:	6224      	str	r4, [r4, #32]
 8006b56:	429c      	cmp	r4, r3
 8006b58:	d006      	beq.n	8006b68 <std+0x48>
 8006b5a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006b5e:	4294      	cmp	r4, r2
 8006b60:	d002      	beq.n	8006b68 <std+0x48>
 8006b62:	33d0      	adds	r3, #208	; 0xd0
 8006b64:	429c      	cmp	r4, r3
 8006b66:	d105      	bne.n	8006b74 <std+0x54>
 8006b68:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b70:	f000 b978 	b.w	8006e64 <__retarget_lock_init_recursive>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	bf00      	nop
 8006b78:	08006ce5 	.word	0x08006ce5
 8006b7c:	08006d07 	.word	0x08006d07
 8006b80:	08006d3f 	.word	0x08006d3f
 8006b84:	08006d63 	.word	0x08006d63
 8006b88:	20000764 	.word	0x20000764

08006b8c <stdio_exit_handler>:
 8006b8c:	4a02      	ldr	r2, [pc, #8]	; (8006b98 <stdio_exit_handler+0xc>)
 8006b8e:	4903      	ldr	r1, [pc, #12]	; (8006b9c <stdio_exit_handler+0x10>)
 8006b90:	4803      	ldr	r0, [pc, #12]	; (8006ba0 <stdio_exit_handler+0x14>)
 8006b92:	f000 b869 	b.w	8006c68 <_fwalk_sglue>
 8006b96:	bf00      	nop
 8006b98:	2000000c 	.word	0x2000000c
 8006b9c:	08008831 	.word	0x08008831
 8006ba0:	20000018 	.word	0x20000018

08006ba4 <cleanup_stdio>:
 8006ba4:	6841      	ldr	r1, [r0, #4]
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <cleanup_stdio+0x34>)
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	b510      	push	{r4, lr}
 8006bac:	4604      	mov	r4, r0
 8006bae:	d001      	beq.n	8006bb4 <cleanup_stdio+0x10>
 8006bb0:	f001 fe3e 	bl	8008830 <_fflush_r>
 8006bb4:	68a1      	ldr	r1, [r4, #8]
 8006bb6:	4b09      	ldr	r3, [pc, #36]	; (8006bdc <cleanup_stdio+0x38>)
 8006bb8:	4299      	cmp	r1, r3
 8006bba:	d002      	beq.n	8006bc2 <cleanup_stdio+0x1e>
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f001 fe37 	bl	8008830 <_fflush_r>
 8006bc2:	68e1      	ldr	r1, [r4, #12]
 8006bc4:	4b06      	ldr	r3, [pc, #24]	; (8006be0 <cleanup_stdio+0x3c>)
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	d004      	beq.n	8006bd4 <cleanup_stdio+0x30>
 8006bca:	4620      	mov	r0, r4
 8006bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bd0:	f001 be2e 	b.w	8008830 <_fflush_r>
 8006bd4:	bd10      	pop	{r4, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20000764 	.word	0x20000764
 8006bdc:	200007cc 	.word	0x200007cc
 8006be0:	20000834 	.word	0x20000834

08006be4 <global_stdio_init.part.0>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <global_stdio_init.part.0+0x30>)
 8006be8:	4c0b      	ldr	r4, [pc, #44]	; (8006c18 <global_stdio_init.part.0+0x34>)
 8006bea:	4a0c      	ldr	r2, [pc, #48]	; (8006c1c <global_stdio_init.part.0+0x38>)
 8006bec:	601a      	str	r2, [r3, #0]
 8006bee:	4620      	mov	r0, r4
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2104      	movs	r1, #4
 8006bf4:	f7ff ff94 	bl	8006b20 <std>
 8006bf8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	2109      	movs	r1, #9
 8006c00:	f7ff ff8e 	bl	8006b20 <std>
 8006c04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006c08:	2202      	movs	r2, #2
 8006c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0e:	2112      	movs	r1, #18
 8006c10:	f7ff bf86 	b.w	8006b20 <std>
 8006c14:	2000089c 	.word	0x2000089c
 8006c18:	20000764 	.word	0x20000764
 8006c1c:	08006b8d 	.word	0x08006b8d

08006c20 <__sfp_lock_acquire>:
 8006c20:	4801      	ldr	r0, [pc, #4]	; (8006c28 <__sfp_lock_acquire+0x8>)
 8006c22:	f000 b920 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8006c26:	bf00      	nop
 8006c28:	200008a5 	.word	0x200008a5

08006c2c <__sfp_lock_release>:
 8006c2c:	4801      	ldr	r0, [pc, #4]	; (8006c34 <__sfp_lock_release+0x8>)
 8006c2e:	f000 b91b 	b.w	8006e68 <__retarget_lock_release_recursive>
 8006c32:	bf00      	nop
 8006c34:	200008a5 	.word	0x200008a5

08006c38 <__sinit>:
 8006c38:	b510      	push	{r4, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	f7ff fff0 	bl	8006c20 <__sfp_lock_acquire>
 8006c40:	6a23      	ldr	r3, [r4, #32]
 8006c42:	b11b      	cbz	r3, 8006c4c <__sinit+0x14>
 8006c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c48:	f7ff bff0 	b.w	8006c2c <__sfp_lock_release>
 8006c4c:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <__sinit+0x28>)
 8006c4e:	6223      	str	r3, [r4, #32]
 8006c50:	4b04      	ldr	r3, [pc, #16]	; (8006c64 <__sinit+0x2c>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f5      	bne.n	8006c44 <__sinit+0xc>
 8006c58:	f7ff ffc4 	bl	8006be4 <global_stdio_init.part.0>
 8006c5c:	e7f2      	b.n	8006c44 <__sinit+0xc>
 8006c5e:	bf00      	nop
 8006c60:	08006ba5 	.word	0x08006ba5
 8006c64:	2000089c 	.word	0x2000089c

08006c68 <_fwalk_sglue>:
 8006c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	4688      	mov	r8, r1
 8006c70:	4614      	mov	r4, r2
 8006c72:	2600      	movs	r6, #0
 8006c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c78:	f1b9 0901 	subs.w	r9, r9, #1
 8006c7c:	d505      	bpl.n	8006c8a <_fwalk_sglue+0x22>
 8006c7e:	6824      	ldr	r4, [r4, #0]
 8006c80:	2c00      	cmp	r4, #0
 8006c82:	d1f7      	bne.n	8006c74 <_fwalk_sglue+0xc>
 8006c84:	4630      	mov	r0, r6
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	89ab      	ldrh	r3, [r5, #12]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d907      	bls.n	8006ca0 <_fwalk_sglue+0x38>
 8006c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c94:	3301      	adds	r3, #1
 8006c96:	d003      	beq.n	8006ca0 <_fwalk_sglue+0x38>
 8006c98:	4629      	mov	r1, r5
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	47c0      	blx	r8
 8006c9e:	4306      	orrs	r6, r0
 8006ca0:	3568      	adds	r5, #104	; 0x68
 8006ca2:	e7e9      	b.n	8006c78 <_fwalk_sglue+0x10>

08006ca4 <siprintf>:
 8006ca4:	b40e      	push	{r1, r2, r3}
 8006ca6:	b500      	push	{lr}
 8006ca8:	b09c      	sub	sp, #112	; 0x70
 8006caa:	ab1d      	add	r3, sp, #116	; 0x74
 8006cac:	9002      	str	r0, [sp, #8]
 8006cae:	9006      	str	r0, [sp, #24]
 8006cb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cb4:	4809      	ldr	r0, [pc, #36]	; (8006cdc <siprintf+0x38>)
 8006cb6:	9107      	str	r1, [sp, #28]
 8006cb8:	9104      	str	r1, [sp, #16]
 8006cba:	4909      	ldr	r1, [pc, #36]	; (8006ce0 <siprintf+0x3c>)
 8006cbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cc0:	9105      	str	r1, [sp, #20]
 8006cc2:	6800      	ldr	r0, [r0, #0]
 8006cc4:	9301      	str	r3, [sp, #4]
 8006cc6:	a902      	add	r1, sp, #8
 8006cc8:	f001 fc2e 	bl	8008528 <_svfiprintf_r>
 8006ccc:	9b02      	ldr	r3, [sp, #8]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
 8006cd2:	b01c      	add	sp, #112	; 0x70
 8006cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cd8:	b003      	add	sp, #12
 8006cda:	4770      	bx	lr
 8006cdc:	20000064 	.word	0x20000064
 8006ce0:	ffff0208 	.word	0xffff0208

08006ce4 <__sread>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	460c      	mov	r4, r1
 8006ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cec:	f000 f86c 	bl	8006dc8 <_read_r>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	bfab      	itete	ge
 8006cf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf8:	181b      	addge	r3, r3, r0
 8006cfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfe:	bfac      	ite	ge
 8006d00:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d02:	81a3      	strhlt	r3, [r4, #12]
 8006d04:	bd10      	pop	{r4, pc}

08006d06 <__swrite>:
 8006d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0a:	461f      	mov	r7, r3
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	05db      	lsls	r3, r3, #23
 8006d10:	4605      	mov	r5, r0
 8006d12:	460c      	mov	r4, r1
 8006d14:	4616      	mov	r6, r2
 8006d16:	d505      	bpl.n	8006d24 <__swrite+0x1e>
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f000 f840 	bl	8006da4 <_lseek_r>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	4632      	mov	r2, r6
 8006d32:	463b      	mov	r3, r7
 8006d34:	4628      	mov	r0, r5
 8006d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3a:	f000 b857 	b.w	8006dec <_write_r>

08006d3e <__sseek>:
 8006d3e:	b510      	push	{r4, lr}
 8006d40:	460c      	mov	r4, r1
 8006d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d46:	f000 f82d 	bl	8006da4 <_lseek_r>
 8006d4a:	1c43      	adds	r3, r0, #1
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	bf15      	itete	ne
 8006d50:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d5a:	81a3      	strheq	r3, [r4, #12]
 8006d5c:	bf18      	it	ne
 8006d5e:	81a3      	strhne	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__sclose>:
 8006d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d66:	f000 b80d 	b.w	8006d84 <_close_r>

08006d6a <memset>:
 8006d6a:	4402      	add	r2, r0
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d100      	bne.n	8006d74 <memset+0xa>
 8006d72:	4770      	bx	lr
 8006d74:	f803 1b01 	strb.w	r1, [r3], #1
 8006d78:	e7f9      	b.n	8006d6e <memset+0x4>
	...

08006d7c <_localeconv_r>:
 8006d7c:	4800      	ldr	r0, [pc, #0]	; (8006d80 <_localeconv_r+0x4>)
 8006d7e:	4770      	bx	lr
 8006d80:	20000158 	.word	0x20000158

08006d84 <_close_r>:
 8006d84:	b538      	push	{r3, r4, r5, lr}
 8006d86:	4d06      	ldr	r5, [pc, #24]	; (8006da0 <_close_r+0x1c>)
 8006d88:	2300      	movs	r3, #0
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	4608      	mov	r0, r1
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	f7fa fce9 	bl	8001766 <_close>
 8006d94:	1c43      	adds	r3, r0, #1
 8006d96:	d102      	bne.n	8006d9e <_close_r+0x1a>
 8006d98:	682b      	ldr	r3, [r5, #0]
 8006d9a:	b103      	cbz	r3, 8006d9e <_close_r+0x1a>
 8006d9c:	6023      	str	r3, [r4, #0]
 8006d9e:	bd38      	pop	{r3, r4, r5, pc}
 8006da0:	200008a0 	.word	0x200008a0

08006da4 <_lseek_r>:
 8006da4:	b538      	push	{r3, r4, r5, lr}
 8006da6:	4d07      	ldr	r5, [pc, #28]	; (8006dc4 <_lseek_r+0x20>)
 8006da8:	4604      	mov	r4, r0
 8006daa:	4608      	mov	r0, r1
 8006dac:	4611      	mov	r1, r2
 8006dae:	2200      	movs	r2, #0
 8006db0:	602a      	str	r2, [r5, #0]
 8006db2:	461a      	mov	r2, r3
 8006db4:	f7fa fcfe 	bl	80017b4 <_lseek>
 8006db8:	1c43      	adds	r3, r0, #1
 8006dba:	d102      	bne.n	8006dc2 <_lseek_r+0x1e>
 8006dbc:	682b      	ldr	r3, [r5, #0]
 8006dbe:	b103      	cbz	r3, 8006dc2 <_lseek_r+0x1e>
 8006dc0:	6023      	str	r3, [r4, #0]
 8006dc2:	bd38      	pop	{r3, r4, r5, pc}
 8006dc4:	200008a0 	.word	0x200008a0

08006dc8 <_read_r>:
 8006dc8:	b538      	push	{r3, r4, r5, lr}
 8006dca:	4d07      	ldr	r5, [pc, #28]	; (8006de8 <_read_r+0x20>)
 8006dcc:	4604      	mov	r4, r0
 8006dce:	4608      	mov	r0, r1
 8006dd0:	4611      	mov	r1, r2
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	602a      	str	r2, [r5, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f7fa fc8c 	bl	80016f4 <_read>
 8006ddc:	1c43      	adds	r3, r0, #1
 8006dde:	d102      	bne.n	8006de6 <_read_r+0x1e>
 8006de0:	682b      	ldr	r3, [r5, #0]
 8006de2:	b103      	cbz	r3, 8006de6 <_read_r+0x1e>
 8006de4:	6023      	str	r3, [r4, #0]
 8006de6:	bd38      	pop	{r3, r4, r5, pc}
 8006de8:	200008a0 	.word	0x200008a0

08006dec <_write_r>:
 8006dec:	b538      	push	{r3, r4, r5, lr}
 8006dee:	4d07      	ldr	r5, [pc, #28]	; (8006e0c <_write_r+0x20>)
 8006df0:	4604      	mov	r4, r0
 8006df2:	4608      	mov	r0, r1
 8006df4:	4611      	mov	r1, r2
 8006df6:	2200      	movs	r2, #0
 8006df8:	602a      	str	r2, [r5, #0]
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	f7fa fc97 	bl	800172e <_write>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d102      	bne.n	8006e0a <_write_r+0x1e>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	b103      	cbz	r3, 8006e0a <_write_r+0x1e>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd38      	pop	{r3, r4, r5, pc}
 8006e0c:	200008a0 	.word	0x200008a0

08006e10 <__errno>:
 8006e10:	4b01      	ldr	r3, [pc, #4]	; (8006e18 <__errno+0x8>)
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	20000064 	.word	0x20000064

08006e1c <__libc_init_array>:
 8006e1c:	b570      	push	{r4, r5, r6, lr}
 8006e1e:	4d0d      	ldr	r5, [pc, #52]	; (8006e54 <__libc_init_array+0x38>)
 8006e20:	4c0d      	ldr	r4, [pc, #52]	; (8006e58 <__libc_init_array+0x3c>)
 8006e22:	1b64      	subs	r4, r4, r5
 8006e24:	10a4      	asrs	r4, r4, #2
 8006e26:	2600      	movs	r6, #0
 8006e28:	42a6      	cmp	r6, r4
 8006e2a:	d109      	bne.n	8006e40 <__libc_init_array+0x24>
 8006e2c:	4d0b      	ldr	r5, [pc, #44]	; (8006e5c <__libc_init_array+0x40>)
 8006e2e:	4c0c      	ldr	r4, [pc, #48]	; (8006e60 <__libc_init_array+0x44>)
 8006e30:	f002 f894 	bl	8008f5c <_init>
 8006e34:	1b64      	subs	r4, r4, r5
 8006e36:	10a4      	asrs	r4, r4, #2
 8006e38:	2600      	movs	r6, #0
 8006e3a:	42a6      	cmp	r6, r4
 8006e3c:	d105      	bne.n	8006e4a <__libc_init_array+0x2e>
 8006e3e:	bd70      	pop	{r4, r5, r6, pc}
 8006e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e44:	4798      	blx	r3
 8006e46:	3601      	adds	r6, #1
 8006e48:	e7ee      	b.n	8006e28 <__libc_init_array+0xc>
 8006e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4e:	4798      	blx	r3
 8006e50:	3601      	adds	r6, #1
 8006e52:	e7f2      	b.n	8006e3a <__libc_init_array+0x1e>
 8006e54:	0800a0a4 	.word	0x0800a0a4
 8006e58:	0800a0a4 	.word	0x0800a0a4
 8006e5c:	0800a0a4 	.word	0x0800a0a4
 8006e60:	0800a0a8 	.word	0x0800a0a8

08006e64 <__retarget_lock_init_recursive>:
 8006e64:	4770      	bx	lr

08006e66 <__retarget_lock_acquire_recursive>:
 8006e66:	4770      	bx	lr

08006e68 <__retarget_lock_release_recursive>:
 8006e68:	4770      	bx	lr

08006e6a <memcpy>:
 8006e6a:	440a      	add	r2, r1
 8006e6c:	4291      	cmp	r1, r2
 8006e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e72:	d100      	bne.n	8006e76 <memcpy+0xc>
 8006e74:	4770      	bx	lr
 8006e76:	b510      	push	{r4, lr}
 8006e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e80:	4291      	cmp	r1, r2
 8006e82:	d1f9      	bne.n	8006e78 <memcpy+0xe>
 8006e84:	bd10      	pop	{r4, pc}

08006e86 <quorem>:
 8006e86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	6903      	ldr	r3, [r0, #16]
 8006e8c:	690c      	ldr	r4, [r1, #16]
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	4607      	mov	r7, r0
 8006e92:	db7e      	blt.n	8006f92 <quorem+0x10c>
 8006e94:	3c01      	subs	r4, #1
 8006e96:	f101 0814 	add.w	r8, r1, #20
 8006e9a:	f100 0514 	add.w	r5, r0, #20
 8006e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ea2:	9301      	str	r3, [sp, #4]
 8006ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006eac:	3301      	adds	r3, #1
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006eb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ebc:	d331      	bcc.n	8006f22 <quorem+0x9c>
 8006ebe:	f04f 0e00 	mov.w	lr, #0
 8006ec2:	4640      	mov	r0, r8
 8006ec4:	46ac      	mov	ip, r5
 8006ec6:	46f2      	mov	sl, lr
 8006ec8:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ecc:	b293      	uxth	r3, r2
 8006ece:	fb06 e303 	mla	r3, r6, r3, lr
 8006ed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ed6:	0c1a      	lsrs	r2, r3, #16
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	ebaa 0303 	sub.w	r3, sl, r3
 8006ede:	f8dc a000 	ldr.w	sl, [ip]
 8006ee2:	fa13 f38a 	uxtah	r3, r3, sl
 8006ee6:	fb06 220e 	mla	r2, r6, lr, r2
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	9b00      	ldr	r3, [sp, #0]
 8006eee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006ef8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006efc:	f8bd 3000 	ldrh.w	r3, [sp]
 8006f00:	4581      	cmp	r9, r0
 8006f02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f06:	f84c 3b04 	str.w	r3, [ip], #4
 8006f0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f0e:	d2db      	bcs.n	8006ec8 <quorem+0x42>
 8006f10:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f14:	b92b      	cbnz	r3, 8006f22 <quorem+0x9c>
 8006f16:	9b01      	ldr	r3, [sp, #4]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	429d      	cmp	r5, r3
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	d32c      	bcc.n	8006f7a <quorem+0xf4>
 8006f20:	613c      	str	r4, [r7, #16]
 8006f22:	4638      	mov	r0, r7
 8006f24:	f001 f9a6 	bl	8008274 <__mcmp>
 8006f28:	2800      	cmp	r0, #0
 8006f2a:	db22      	blt.n	8006f72 <quorem+0xec>
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	4629      	mov	r1, r5
 8006f30:	2000      	movs	r0, #0
 8006f32:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f36:	f8d1 c000 	ldr.w	ip, [r1]
 8006f3a:	b293      	uxth	r3, r2
 8006f3c:	1ac3      	subs	r3, r0, r3
 8006f3e:	0c12      	lsrs	r2, r2, #16
 8006f40:	fa13 f38c 	uxtah	r3, r3, ip
 8006f44:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f52:	45c1      	cmp	r9, r8
 8006f54:	f841 3b04 	str.w	r3, [r1], #4
 8006f58:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f5c:	d2e9      	bcs.n	8006f32 <quorem+0xac>
 8006f5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f66:	b922      	cbnz	r2, 8006f72 <quorem+0xec>
 8006f68:	3b04      	subs	r3, #4
 8006f6a:	429d      	cmp	r5, r3
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	d30a      	bcc.n	8006f86 <quorem+0x100>
 8006f70:	613c      	str	r4, [r7, #16]
 8006f72:	4630      	mov	r0, r6
 8006f74:	b003      	add	sp, #12
 8006f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d1ce      	bne.n	8006f20 <quorem+0x9a>
 8006f82:	3c01      	subs	r4, #1
 8006f84:	e7c9      	b.n	8006f1a <quorem+0x94>
 8006f86:	6812      	ldr	r2, [r2, #0]
 8006f88:	3b04      	subs	r3, #4
 8006f8a:	2a00      	cmp	r2, #0
 8006f8c:	d1f0      	bne.n	8006f70 <quorem+0xea>
 8006f8e:	3c01      	subs	r4, #1
 8006f90:	e7eb      	b.n	8006f6a <quorem+0xe4>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7ee      	b.n	8006f74 <quorem+0xee>
	...

08006f98 <_dtoa_r>:
 8006f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f9c:	ed2d 8b04 	vpush	{d8-d9}
 8006fa0:	69c5      	ldr	r5, [r0, #28]
 8006fa2:	b093      	sub	sp, #76	; 0x4c
 8006fa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fa8:	ec57 6b10 	vmov	r6, r7, d0
 8006fac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fb0:	9107      	str	r1, [sp, #28]
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	920a      	str	r2, [sp, #40]	; 0x28
 8006fb6:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb8:	b975      	cbnz	r5, 8006fd8 <_dtoa_r+0x40>
 8006fba:	2010      	movs	r0, #16
 8006fbc:	f000 fe2a 	bl	8007c14 <malloc>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	61e0      	str	r0, [r4, #28]
 8006fc4:	b920      	cbnz	r0, 8006fd0 <_dtoa_r+0x38>
 8006fc6:	4bae      	ldr	r3, [pc, #696]	; (8007280 <_dtoa_r+0x2e8>)
 8006fc8:	21ef      	movs	r1, #239	; 0xef
 8006fca:	48ae      	ldr	r0, [pc, #696]	; (8007284 <_dtoa_r+0x2ec>)
 8006fcc:	f001 fc82 	bl	80088d4 <__assert_func>
 8006fd0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fd4:	6005      	str	r5, [r0, #0]
 8006fd6:	60c5      	str	r5, [r0, #12]
 8006fd8:	69e3      	ldr	r3, [r4, #28]
 8006fda:	6819      	ldr	r1, [r3, #0]
 8006fdc:	b151      	cbz	r1, 8006ff4 <_dtoa_r+0x5c>
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	604a      	str	r2, [r1, #4]
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	4093      	lsls	r3, r2
 8006fe6:	608b      	str	r3, [r1, #8]
 8006fe8:	4620      	mov	r0, r4
 8006fea:	f000 ff07 	bl	8007dfc <_Bfree>
 8006fee:	69e3      	ldr	r3, [r4, #28]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	601a      	str	r2, [r3, #0]
 8006ff4:	1e3b      	subs	r3, r7, #0
 8006ff6:	bfbb      	ittet	lt
 8006ff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ffc:	9303      	strlt	r3, [sp, #12]
 8006ffe:	2300      	movge	r3, #0
 8007000:	2201      	movlt	r2, #1
 8007002:	bfac      	ite	ge
 8007004:	f8c8 3000 	strge.w	r3, [r8]
 8007008:	f8c8 2000 	strlt.w	r2, [r8]
 800700c:	4b9e      	ldr	r3, [pc, #632]	; (8007288 <_dtoa_r+0x2f0>)
 800700e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007012:	ea33 0308 	bics.w	r3, r3, r8
 8007016:	d11b      	bne.n	8007050 <_dtoa_r+0xb8>
 8007018:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800701a:	f242 730f 	movw	r3, #9999	; 0x270f
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007024:	4333      	orrs	r3, r6
 8007026:	f000 8593 	beq.w	8007b50 <_dtoa_r+0xbb8>
 800702a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800702c:	b963      	cbnz	r3, 8007048 <_dtoa_r+0xb0>
 800702e:	4b97      	ldr	r3, [pc, #604]	; (800728c <_dtoa_r+0x2f4>)
 8007030:	e027      	b.n	8007082 <_dtoa_r+0xea>
 8007032:	4b97      	ldr	r3, [pc, #604]	; (8007290 <_dtoa_r+0x2f8>)
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	9800      	ldr	r0, [sp, #0]
 800703e:	b013      	add	sp, #76	; 0x4c
 8007040:	ecbd 8b04 	vpop	{d8-d9}
 8007044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007048:	4b90      	ldr	r3, [pc, #576]	; (800728c <_dtoa_r+0x2f4>)
 800704a:	9300      	str	r3, [sp, #0]
 800704c:	3303      	adds	r3, #3
 800704e:	e7f3      	b.n	8007038 <_dtoa_r+0xa0>
 8007050:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007054:	2200      	movs	r2, #0
 8007056:	ec51 0b17 	vmov	r0, r1, d7
 800705a:	eeb0 8a47 	vmov.f32	s16, s14
 800705e:	eef0 8a67 	vmov.f32	s17, s15
 8007062:	2300      	movs	r3, #0
 8007064:	f7f9 fd58 	bl	8000b18 <__aeabi_dcmpeq>
 8007068:	4681      	mov	r9, r0
 800706a:	b160      	cbz	r0, 8007086 <_dtoa_r+0xee>
 800706c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800706e:	2301      	movs	r3, #1
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8568 	beq.w	8007b4a <_dtoa_r+0xbb2>
 800707a:	4b86      	ldr	r3, [pc, #536]	; (8007294 <_dtoa_r+0x2fc>)
 800707c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	3b01      	subs	r3, #1
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	e7da      	b.n	800703c <_dtoa_r+0xa4>
 8007086:	aa10      	add	r2, sp, #64	; 0x40
 8007088:	a911      	add	r1, sp, #68	; 0x44
 800708a:	4620      	mov	r0, r4
 800708c:	eeb0 0a48 	vmov.f32	s0, s16
 8007090:	eef0 0a68 	vmov.f32	s1, s17
 8007094:	f001 f994 	bl	80083c0 <__d2b>
 8007098:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800709c:	4682      	mov	sl, r0
 800709e:	2d00      	cmp	r5, #0
 80070a0:	d07f      	beq.n	80071a2 <_dtoa_r+0x20a>
 80070a2:	ee18 3a90 	vmov	r3, s17
 80070a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070ae:	ec51 0b18 	vmov	r0, r1, d8
 80070b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80070be:	4619      	mov	r1, r3
 80070c0:	2200      	movs	r2, #0
 80070c2:	4b75      	ldr	r3, [pc, #468]	; (8007298 <_dtoa_r+0x300>)
 80070c4:	f7f9 f908 	bl	80002d8 <__aeabi_dsub>
 80070c8:	a367      	add	r3, pc, #412	; (adr r3, 8007268 <_dtoa_r+0x2d0>)
 80070ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ce:	f7f9 fabb 	bl	8000648 <__aeabi_dmul>
 80070d2:	a367      	add	r3, pc, #412	; (adr r3, 8007270 <_dtoa_r+0x2d8>)
 80070d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d8:	f7f9 f900 	bl	80002dc <__adddf3>
 80070dc:	4606      	mov	r6, r0
 80070de:	4628      	mov	r0, r5
 80070e0:	460f      	mov	r7, r1
 80070e2:	f7f9 fa47 	bl	8000574 <__aeabi_i2d>
 80070e6:	a364      	add	r3, pc, #400	; (adr r3, 8007278 <_dtoa_r+0x2e0>)
 80070e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ec:	f7f9 faac 	bl	8000648 <__aeabi_dmul>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4630      	mov	r0, r6
 80070f6:	4639      	mov	r1, r7
 80070f8:	f7f9 f8f0 	bl	80002dc <__adddf3>
 80070fc:	4606      	mov	r6, r0
 80070fe:	460f      	mov	r7, r1
 8007100:	f7f9 fd52 	bl	8000ba8 <__aeabi_d2iz>
 8007104:	2200      	movs	r2, #0
 8007106:	4683      	mov	fp, r0
 8007108:	2300      	movs	r3, #0
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 fd0d 	bl	8000b2c <__aeabi_dcmplt>
 8007112:	b148      	cbz	r0, 8007128 <_dtoa_r+0x190>
 8007114:	4658      	mov	r0, fp
 8007116:	f7f9 fa2d 	bl	8000574 <__aeabi_i2d>
 800711a:	4632      	mov	r2, r6
 800711c:	463b      	mov	r3, r7
 800711e:	f7f9 fcfb 	bl	8000b18 <__aeabi_dcmpeq>
 8007122:	b908      	cbnz	r0, 8007128 <_dtoa_r+0x190>
 8007124:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007128:	f1bb 0f16 	cmp.w	fp, #22
 800712c:	d857      	bhi.n	80071de <_dtoa_r+0x246>
 800712e:	4b5b      	ldr	r3, [pc, #364]	; (800729c <_dtoa_r+0x304>)
 8007130:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	ec51 0b18 	vmov	r0, r1, d8
 800713c:	f7f9 fcf6 	bl	8000b2c <__aeabi_dcmplt>
 8007140:	2800      	cmp	r0, #0
 8007142:	d04e      	beq.n	80071e2 <_dtoa_r+0x24a>
 8007144:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007148:	2300      	movs	r3, #0
 800714a:	930c      	str	r3, [sp, #48]	; 0x30
 800714c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800714e:	1b5b      	subs	r3, r3, r5
 8007150:	1e5a      	subs	r2, r3, #1
 8007152:	bf45      	ittet	mi
 8007154:	f1c3 0301 	rsbmi	r3, r3, #1
 8007158:	9305      	strmi	r3, [sp, #20]
 800715a:	2300      	movpl	r3, #0
 800715c:	2300      	movmi	r3, #0
 800715e:	9206      	str	r2, [sp, #24]
 8007160:	bf54      	ite	pl
 8007162:	9305      	strpl	r3, [sp, #20]
 8007164:	9306      	strmi	r3, [sp, #24]
 8007166:	f1bb 0f00 	cmp.w	fp, #0
 800716a:	db3c      	blt.n	80071e6 <_dtoa_r+0x24e>
 800716c:	9b06      	ldr	r3, [sp, #24]
 800716e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007172:	445b      	add	r3, fp
 8007174:	9306      	str	r3, [sp, #24]
 8007176:	2300      	movs	r3, #0
 8007178:	9308      	str	r3, [sp, #32]
 800717a:	9b07      	ldr	r3, [sp, #28]
 800717c:	2b09      	cmp	r3, #9
 800717e:	d868      	bhi.n	8007252 <_dtoa_r+0x2ba>
 8007180:	2b05      	cmp	r3, #5
 8007182:	bfc4      	itt	gt
 8007184:	3b04      	subgt	r3, #4
 8007186:	9307      	strgt	r3, [sp, #28]
 8007188:	9b07      	ldr	r3, [sp, #28]
 800718a:	f1a3 0302 	sub.w	r3, r3, #2
 800718e:	bfcc      	ite	gt
 8007190:	2500      	movgt	r5, #0
 8007192:	2501      	movle	r5, #1
 8007194:	2b03      	cmp	r3, #3
 8007196:	f200 8085 	bhi.w	80072a4 <_dtoa_r+0x30c>
 800719a:	e8df f003 	tbb	[pc, r3]
 800719e:	3b2e      	.short	0x3b2e
 80071a0:	5839      	.short	0x5839
 80071a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80071a6:	441d      	add	r5, r3
 80071a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071ac:	2b20      	cmp	r3, #32
 80071ae:	bfc1      	itttt	gt
 80071b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80071b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80071bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80071c0:	bfd6      	itet	le
 80071c2:	f1c3 0320 	rsble	r3, r3, #32
 80071c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80071ca:	fa06 f003 	lslle.w	r0, r6, r3
 80071ce:	f7f9 f9c1 	bl	8000554 <__aeabi_ui2d>
 80071d2:	2201      	movs	r2, #1
 80071d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80071d8:	3d01      	subs	r5, #1
 80071da:	920e      	str	r2, [sp, #56]	; 0x38
 80071dc:	e76f      	b.n	80070be <_dtoa_r+0x126>
 80071de:	2301      	movs	r3, #1
 80071e0:	e7b3      	b.n	800714a <_dtoa_r+0x1b2>
 80071e2:	900c      	str	r0, [sp, #48]	; 0x30
 80071e4:	e7b2      	b.n	800714c <_dtoa_r+0x1b4>
 80071e6:	9b05      	ldr	r3, [sp, #20]
 80071e8:	eba3 030b 	sub.w	r3, r3, fp
 80071ec:	9305      	str	r3, [sp, #20]
 80071ee:	f1cb 0300 	rsb	r3, fp, #0
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	2300      	movs	r3, #0
 80071f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f8:	e7bf      	b.n	800717a <_dtoa_r+0x1e2>
 80071fa:	2300      	movs	r3, #0
 80071fc:	9309      	str	r3, [sp, #36]	; 0x24
 80071fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007200:	2b00      	cmp	r3, #0
 8007202:	dc52      	bgt.n	80072aa <_dtoa_r+0x312>
 8007204:	2301      	movs	r3, #1
 8007206:	9301      	str	r3, [sp, #4]
 8007208:	9304      	str	r3, [sp, #16]
 800720a:	461a      	mov	r2, r3
 800720c:	920a      	str	r2, [sp, #40]	; 0x28
 800720e:	e00b      	b.n	8007228 <_dtoa_r+0x290>
 8007210:	2301      	movs	r3, #1
 8007212:	e7f3      	b.n	80071fc <_dtoa_r+0x264>
 8007214:	2300      	movs	r3, #0
 8007216:	9309      	str	r3, [sp, #36]	; 0x24
 8007218:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800721a:	445b      	add	r3, fp
 800721c:	9301      	str	r3, [sp, #4]
 800721e:	3301      	adds	r3, #1
 8007220:	2b01      	cmp	r3, #1
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	bfb8      	it	lt
 8007226:	2301      	movlt	r3, #1
 8007228:	69e0      	ldr	r0, [r4, #28]
 800722a:	2100      	movs	r1, #0
 800722c:	2204      	movs	r2, #4
 800722e:	f102 0614 	add.w	r6, r2, #20
 8007232:	429e      	cmp	r6, r3
 8007234:	d93d      	bls.n	80072b2 <_dtoa_r+0x31a>
 8007236:	6041      	str	r1, [r0, #4]
 8007238:	4620      	mov	r0, r4
 800723a:	f000 fd9f 	bl	8007d7c <_Balloc>
 800723e:	9000      	str	r0, [sp, #0]
 8007240:	2800      	cmp	r0, #0
 8007242:	d139      	bne.n	80072b8 <_dtoa_r+0x320>
 8007244:	4b16      	ldr	r3, [pc, #88]	; (80072a0 <_dtoa_r+0x308>)
 8007246:	4602      	mov	r2, r0
 8007248:	f240 11af 	movw	r1, #431	; 0x1af
 800724c:	e6bd      	b.n	8006fca <_dtoa_r+0x32>
 800724e:	2301      	movs	r3, #1
 8007250:	e7e1      	b.n	8007216 <_dtoa_r+0x27e>
 8007252:	2501      	movs	r5, #1
 8007254:	2300      	movs	r3, #0
 8007256:	9307      	str	r3, [sp, #28]
 8007258:	9509      	str	r5, [sp, #36]	; 0x24
 800725a:	f04f 33ff 	mov.w	r3, #4294967295
 800725e:	9301      	str	r3, [sp, #4]
 8007260:	9304      	str	r3, [sp, #16]
 8007262:	2200      	movs	r2, #0
 8007264:	2312      	movs	r3, #18
 8007266:	e7d1      	b.n	800720c <_dtoa_r+0x274>
 8007268:	636f4361 	.word	0x636f4361
 800726c:	3fd287a7 	.word	0x3fd287a7
 8007270:	8b60c8b3 	.word	0x8b60c8b3
 8007274:	3fc68a28 	.word	0x3fc68a28
 8007278:	509f79fb 	.word	0x509f79fb
 800727c:	3fd34413 	.word	0x3fd34413
 8007280:	08009d6d 	.word	0x08009d6d
 8007284:	08009d84 	.word	0x08009d84
 8007288:	7ff00000 	.word	0x7ff00000
 800728c:	08009d69 	.word	0x08009d69
 8007290:	08009d60 	.word	0x08009d60
 8007294:	08009d3d 	.word	0x08009d3d
 8007298:	3ff80000 	.word	0x3ff80000
 800729c:	08009e70 	.word	0x08009e70
 80072a0:	08009ddc 	.word	0x08009ddc
 80072a4:	2301      	movs	r3, #1
 80072a6:	9309      	str	r3, [sp, #36]	; 0x24
 80072a8:	e7d7      	b.n	800725a <_dtoa_r+0x2c2>
 80072aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ac:	9301      	str	r3, [sp, #4]
 80072ae:	9304      	str	r3, [sp, #16]
 80072b0:	e7ba      	b.n	8007228 <_dtoa_r+0x290>
 80072b2:	3101      	adds	r1, #1
 80072b4:	0052      	lsls	r2, r2, #1
 80072b6:	e7ba      	b.n	800722e <_dtoa_r+0x296>
 80072b8:	69e3      	ldr	r3, [r4, #28]
 80072ba:	9a00      	ldr	r2, [sp, #0]
 80072bc:	601a      	str	r2, [r3, #0]
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	2b0e      	cmp	r3, #14
 80072c2:	f200 80a8 	bhi.w	8007416 <_dtoa_r+0x47e>
 80072c6:	2d00      	cmp	r5, #0
 80072c8:	f000 80a5 	beq.w	8007416 <_dtoa_r+0x47e>
 80072cc:	f1bb 0f00 	cmp.w	fp, #0
 80072d0:	dd38      	ble.n	8007344 <_dtoa_r+0x3ac>
 80072d2:	4bc0      	ldr	r3, [pc, #768]	; (80075d4 <_dtoa_r+0x63c>)
 80072d4:	f00b 020f 	and.w	r2, fp, #15
 80072d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80072e8:	d019      	beq.n	800731e <_dtoa_r+0x386>
 80072ea:	4bbb      	ldr	r3, [pc, #748]	; (80075d8 <_dtoa_r+0x640>)
 80072ec:	ec51 0b18 	vmov	r0, r1, d8
 80072f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072f4:	f7f9 fad2 	bl	800089c <__aeabi_ddiv>
 80072f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072fc:	f008 080f 	and.w	r8, r8, #15
 8007300:	2503      	movs	r5, #3
 8007302:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80075d8 <_dtoa_r+0x640>
 8007306:	f1b8 0f00 	cmp.w	r8, #0
 800730a:	d10a      	bne.n	8007322 <_dtoa_r+0x38a>
 800730c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007310:	4632      	mov	r2, r6
 8007312:	463b      	mov	r3, r7
 8007314:	f7f9 fac2 	bl	800089c <__aeabi_ddiv>
 8007318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800731c:	e02b      	b.n	8007376 <_dtoa_r+0x3de>
 800731e:	2502      	movs	r5, #2
 8007320:	e7ef      	b.n	8007302 <_dtoa_r+0x36a>
 8007322:	f018 0f01 	tst.w	r8, #1
 8007326:	d008      	beq.n	800733a <_dtoa_r+0x3a2>
 8007328:	4630      	mov	r0, r6
 800732a:	4639      	mov	r1, r7
 800732c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007330:	f7f9 f98a 	bl	8000648 <__aeabi_dmul>
 8007334:	3501      	adds	r5, #1
 8007336:	4606      	mov	r6, r0
 8007338:	460f      	mov	r7, r1
 800733a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800733e:	f109 0908 	add.w	r9, r9, #8
 8007342:	e7e0      	b.n	8007306 <_dtoa_r+0x36e>
 8007344:	f000 809f 	beq.w	8007486 <_dtoa_r+0x4ee>
 8007348:	f1cb 0600 	rsb	r6, fp, #0
 800734c:	4ba1      	ldr	r3, [pc, #644]	; (80075d4 <_dtoa_r+0x63c>)
 800734e:	4fa2      	ldr	r7, [pc, #648]	; (80075d8 <_dtoa_r+0x640>)
 8007350:	f006 020f 	and.w	r2, r6, #15
 8007354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735c:	ec51 0b18 	vmov	r0, r1, d8
 8007360:	f7f9 f972 	bl	8000648 <__aeabi_dmul>
 8007364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007368:	1136      	asrs	r6, r6, #4
 800736a:	2300      	movs	r3, #0
 800736c:	2502      	movs	r5, #2
 800736e:	2e00      	cmp	r6, #0
 8007370:	d17e      	bne.n	8007470 <_dtoa_r+0x4d8>
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1d0      	bne.n	8007318 <_dtoa_r+0x380>
 8007376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007378:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 8084 	beq.w	800748a <_dtoa_r+0x4f2>
 8007382:	4b96      	ldr	r3, [pc, #600]	; (80075dc <_dtoa_r+0x644>)
 8007384:	2200      	movs	r2, #0
 8007386:	4640      	mov	r0, r8
 8007388:	4649      	mov	r1, r9
 800738a:	f7f9 fbcf 	bl	8000b2c <__aeabi_dcmplt>
 800738e:	2800      	cmp	r0, #0
 8007390:	d07b      	beq.n	800748a <_dtoa_r+0x4f2>
 8007392:	9b04      	ldr	r3, [sp, #16]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d078      	beq.n	800748a <_dtoa_r+0x4f2>
 8007398:	9b01      	ldr	r3, [sp, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	dd39      	ble.n	8007412 <_dtoa_r+0x47a>
 800739e:	4b90      	ldr	r3, [pc, #576]	; (80075e0 <_dtoa_r+0x648>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	4640      	mov	r0, r8
 80073a4:	4649      	mov	r1, r9
 80073a6:	f7f9 f94f 	bl	8000648 <__aeabi_dmul>
 80073aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073ae:	9e01      	ldr	r6, [sp, #4]
 80073b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80073b4:	3501      	adds	r5, #1
 80073b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7f9 f8da 	bl	8000574 <__aeabi_i2d>
 80073c0:	4642      	mov	r2, r8
 80073c2:	464b      	mov	r3, r9
 80073c4:	f7f9 f940 	bl	8000648 <__aeabi_dmul>
 80073c8:	4b86      	ldr	r3, [pc, #536]	; (80075e4 <_dtoa_r+0x64c>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	f7f8 ff86 	bl	80002dc <__adddf3>
 80073d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d8:	9303      	str	r3, [sp, #12]
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d158      	bne.n	8007490 <_dtoa_r+0x4f8>
 80073de:	4b82      	ldr	r3, [pc, #520]	; (80075e8 <_dtoa_r+0x650>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	4640      	mov	r0, r8
 80073e4:	4649      	mov	r1, r9
 80073e6:	f7f8 ff77 	bl	80002d8 <__aeabi_dsub>
 80073ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073ee:	4680      	mov	r8, r0
 80073f0:	4689      	mov	r9, r1
 80073f2:	f7f9 fbb9 	bl	8000b68 <__aeabi_dcmpgt>
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f040 8296 	bne.w	8007928 <_dtoa_r+0x990>
 80073fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007400:	4640      	mov	r0, r8
 8007402:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007406:	4649      	mov	r1, r9
 8007408:	f7f9 fb90 	bl	8000b2c <__aeabi_dcmplt>
 800740c:	2800      	cmp	r0, #0
 800740e:	f040 8289 	bne.w	8007924 <_dtoa_r+0x98c>
 8007412:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007416:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007418:	2b00      	cmp	r3, #0
 800741a:	f2c0 814e 	blt.w	80076ba <_dtoa_r+0x722>
 800741e:	f1bb 0f0e 	cmp.w	fp, #14
 8007422:	f300 814a 	bgt.w	80076ba <_dtoa_r+0x722>
 8007426:	4b6b      	ldr	r3, [pc, #428]	; (80075d4 <_dtoa_r+0x63c>)
 8007428:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800742c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007432:	2b00      	cmp	r3, #0
 8007434:	f280 80dc 	bge.w	80075f0 <_dtoa_r+0x658>
 8007438:	9b04      	ldr	r3, [sp, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	f300 80d8 	bgt.w	80075f0 <_dtoa_r+0x658>
 8007440:	f040 826f 	bne.w	8007922 <_dtoa_r+0x98a>
 8007444:	4b68      	ldr	r3, [pc, #416]	; (80075e8 <_dtoa_r+0x650>)
 8007446:	2200      	movs	r2, #0
 8007448:	4640      	mov	r0, r8
 800744a:	4649      	mov	r1, r9
 800744c:	f7f9 f8fc 	bl	8000648 <__aeabi_dmul>
 8007450:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007454:	f7f9 fb7e 	bl	8000b54 <__aeabi_dcmpge>
 8007458:	9e04      	ldr	r6, [sp, #16]
 800745a:	4637      	mov	r7, r6
 800745c:	2800      	cmp	r0, #0
 800745e:	f040 8245 	bne.w	80078ec <_dtoa_r+0x954>
 8007462:	9d00      	ldr	r5, [sp, #0]
 8007464:	2331      	movs	r3, #49	; 0x31
 8007466:	f805 3b01 	strb.w	r3, [r5], #1
 800746a:	f10b 0b01 	add.w	fp, fp, #1
 800746e:	e241      	b.n	80078f4 <_dtoa_r+0x95c>
 8007470:	07f2      	lsls	r2, r6, #31
 8007472:	d505      	bpl.n	8007480 <_dtoa_r+0x4e8>
 8007474:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007478:	f7f9 f8e6 	bl	8000648 <__aeabi_dmul>
 800747c:	3501      	adds	r5, #1
 800747e:	2301      	movs	r3, #1
 8007480:	1076      	asrs	r6, r6, #1
 8007482:	3708      	adds	r7, #8
 8007484:	e773      	b.n	800736e <_dtoa_r+0x3d6>
 8007486:	2502      	movs	r5, #2
 8007488:	e775      	b.n	8007376 <_dtoa_r+0x3de>
 800748a:	9e04      	ldr	r6, [sp, #16]
 800748c:	465f      	mov	r7, fp
 800748e:	e792      	b.n	80073b6 <_dtoa_r+0x41e>
 8007490:	9900      	ldr	r1, [sp, #0]
 8007492:	4b50      	ldr	r3, [pc, #320]	; (80075d4 <_dtoa_r+0x63c>)
 8007494:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007498:	4431      	add	r1, r6
 800749a:	9102      	str	r1, [sp, #8]
 800749c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800749e:	eeb0 9a47 	vmov.f32	s18, s14
 80074a2:	eef0 9a67 	vmov.f32	s19, s15
 80074a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ae:	2900      	cmp	r1, #0
 80074b0:	d044      	beq.n	800753c <_dtoa_r+0x5a4>
 80074b2:	494e      	ldr	r1, [pc, #312]	; (80075ec <_dtoa_r+0x654>)
 80074b4:	2000      	movs	r0, #0
 80074b6:	f7f9 f9f1 	bl	800089c <__aeabi_ddiv>
 80074ba:	ec53 2b19 	vmov	r2, r3, d9
 80074be:	f7f8 ff0b 	bl	80002d8 <__aeabi_dsub>
 80074c2:	9d00      	ldr	r5, [sp, #0]
 80074c4:	ec41 0b19 	vmov	d9, r0, r1
 80074c8:	4649      	mov	r1, r9
 80074ca:	4640      	mov	r0, r8
 80074cc:	f7f9 fb6c 	bl	8000ba8 <__aeabi_d2iz>
 80074d0:	4606      	mov	r6, r0
 80074d2:	f7f9 f84f 	bl	8000574 <__aeabi_i2d>
 80074d6:	4602      	mov	r2, r0
 80074d8:	460b      	mov	r3, r1
 80074da:	4640      	mov	r0, r8
 80074dc:	4649      	mov	r1, r9
 80074de:	f7f8 fefb 	bl	80002d8 <__aeabi_dsub>
 80074e2:	3630      	adds	r6, #48	; 0x30
 80074e4:	f805 6b01 	strb.w	r6, [r5], #1
 80074e8:	ec53 2b19 	vmov	r2, r3, d9
 80074ec:	4680      	mov	r8, r0
 80074ee:	4689      	mov	r9, r1
 80074f0:	f7f9 fb1c 	bl	8000b2c <__aeabi_dcmplt>
 80074f4:	2800      	cmp	r0, #0
 80074f6:	d164      	bne.n	80075c2 <_dtoa_r+0x62a>
 80074f8:	4642      	mov	r2, r8
 80074fa:	464b      	mov	r3, r9
 80074fc:	4937      	ldr	r1, [pc, #220]	; (80075dc <_dtoa_r+0x644>)
 80074fe:	2000      	movs	r0, #0
 8007500:	f7f8 feea 	bl	80002d8 <__aeabi_dsub>
 8007504:	ec53 2b19 	vmov	r2, r3, d9
 8007508:	f7f9 fb10 	bl	8000b2c <__aeabi_dcmplt>
 800750c:	2800      	cmp	r0, #0
 800750e:	f040 80b6 	bne.w	800767e <_dtoa_r+0x6e6>
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	429d      	cmp	r5, r3
 8007516:	f43f af7c 	beq.w	8007412 <_dtoa_r+0x47a>
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <_dtoa_r+0x648>)
 800751c:	ec51 0b19 	vmov	r0, r1, d9
 8007520:	2200      	movs	r2, #0
 8007522:	f7f9 f891 	bl	8000648 <__aeabi_dmul>
 8007526:	4b2e      	ldr	r3, [pc, #184]	; (80075e0 <_dtoa_r+0x648>)
 8007528:	ec41 0b19 	vmov	d9, r0, r1
 800752c:	2200      	movs	r2, #0
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 f889 	bl	8000648 <__aeabi_dmul>
 8007536:	4680      	mov	r8, r0
 8007538:	4689      	mov	r9, r1
 800753a:	e7c5      	b.n	80074c8 <_dtoa_r+0x530>
 800753c:	ec51 0b17 	vmov	r0, r1, d7
 8007540:	f7f9 f882 	bl	8000648 <__aeabi_dmul>
 8007544:	9b02      	ldr	r3, [sp, #8]
 8007546:	9d00      	ldr	r5, [sp, #0]
 8007548:	930f      	str	r3, [sp, #60]	; 0x3c
 800754a:	ec41 0b19 	vmov	d9, r0, r1
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	f7f9 fb29 	bl	8000ba8 <__aeabi_d2iz>
 8007556:	4606      	mov	r6, r0
 8007558:	f7f9 f80c 	bl	8000574 <__aeabi_i2d>
 800755c:	3630      	adds	r6, #48	; 0x30
 800755e:	4602      	mov	r2, r0
 8007560:	460b      	mov	r3, r1
 8007562:	4640      	mov	r0, r8
 8007564:	4649      	mov	r1, r9
 8007566:	f7f8 feb7 	bl	80002d8 <__aeabi_dsub>
 800756a:	f805 6b01 	strb.w	r6, [r5], #1
 800756e:	9b02      	ldr	r3, [sp, #8]
 8007570:	429d      	cmp	r5, r3
 8007572:	4680      	mov	r8, r0
 8007574:	4689      	mov	r9, r1
 8007576:	f04f 0200 	mov.w	r2, #0
 800757a:	d124      	bne.n	80075c6 <_dtoa_r+0x62e>
 800757c:	4b1b      	ldr	r3, [pc, #108]	; (80075ec <_dtoa_r+0x654>)
 800757e:	ec51 0b19 	vmov	r0, r1, d9
 8007582:	f7f8 feab 	bl	80002dc <__adddf3>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	4640      	mov	r0, r8
 800758c:	4649      	mov	r1, r9
 800758e:	f7f9 faeb 	bl	8000b68 <__aeabi_dcmpgt>
 8007592:	2800      	cmp	r0, #0
 8007594:	d173      	bne.n	800767e <_dtoa_r+0x6e6>
 8007596:	ec53 2b19 	vmov	r2, r3, d9
 800759a:	4914      	ldr	r1, [pc, #80]	; (80075ec <_dtoa_r+0x654>)
 800759c:	2000      	movs	r0, #0
 800759e:	f7f8 fe9b 	bl	80002d8 <__aeabi_dsub>
 80075a2:	4602      	mov	r2, r0
 80075a4:	460b      	mov	r3, r1
 80075a6:	4640      	mov	r0, r8
 80075a8:	4649      	mov	r1, r9
 80075aa:	f7f9 fabf 	bl	8000b2c <__aeabi_dcmplt>
 80075ae:	2800      	cmp	r0, #0
 80075b0:	f43f af2f 	beq.w	8007412 <_dtoa_r+0x47a>
 80075b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075b6:	1e6b      	subs	r3, r5, #1
 80075b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80075ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075be:	2b30      	cmp	r3, #48	; 0x30
 80075c0:	d0f8      	beq.n	80075b4 <_dtoa_r+0x61c>
 80075c2:	46bb      	mov	fp, r7
 80075c4:	e04a      	b.n	800765c <_dtoa_r+0x6c4>
 80075c6:	4b06      	ldr	r3, [pc, #24]	; (80075e0 <_dtoa_r+0x648>)
 80075c8:	f7f9 f83e 	bl	8000648 <__aeabi_dmul>
 80075cc:	4680      	mov	r8, r0
 80075ce:	4689      	mov	r9, r1
 80075d0:	e7bd      	b.n	800754e <_dtoa_r+0x5b6>
 80075d2:	bf00      	nop
 80075d4:	08009e70 	.word	0x08009e70
 80075d8:	08009e48 	.word	0x08009e48
 80075dc:	3ff00000 	.word	0x3ff00000
 80075e0:	40240000 	.word	0x40240000
 80075e4:	401c0000 	.word	0x401c0000
 80075e8:	40140000 	.word	0x40140000
 80075ec:	3fe00000 	.word	0x3fe00000
 80075f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075f4:	9d00      	ldr	r5, [sp, #0]
 80075f6:	4642      	mov	r2, r8
 80075f8:	464b      	mov	r3, r9
 80075fa:	4630      	mov	r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	f7f9 f94d 	bl	800089c <__aeabi_ddiv>
 8007602:	f7f9 fad1 	bl	8000ba8 <__aeabi_d2iz>
 8007606:	9001      	str	r0, [sp, #4]
 8007608:	f7f8 ffb4 	bl	8000574 <__aeabi_i2d>
 800760c:	4642      	mov	r2, r8
 800760e:	464b      	mov	r3, r9
 8007610:	f7f9 f81a 	bl	8000648 <__aeabi_dmul>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fe5c 	bl	80002d8 <__aeabi_dsub>
 8007620:	9e01      	ldr	r6, [sp, #4]
 8007622:	9f04      	ldr	r7, [sp, #16]
 8007624:	3630      	adds	r6, #48	; 0x30
 8007626:	f805 6b01 	strb.w	r6, [r5], #1
 800762a:	9e00      	ldr	r6, [sp, #0]
 800762c:	1bae      	subs	r6, r5, r6
 800762e:	42b7      	cmp	r7, r6
 8007630:	4602      	mov	r2, r0
 8007632:	460b      	mov	r3, r1
 8007634:	d134      	bne.n	80076a0 <_dtoa_r+0x708>
 8007636:	f7f8 fe51 	bl	80002dc <__adddf3>
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	4606      	mov	r6, r0
 8007640:	460f      	mov	r7, r1
 8007642:	f7f9 fa91 	bl	8000b68 <__aeabi_dcmpgt>
 8007646:	b9c8      	cbnz	r0, 800767c <_dtoa_r+0x6e4>
 8007648:	4642      	mov	r2, r8
 800764a:	464b      	mov	r3, r9
 800764c:	4630      	mov	r0, r6
 800764e:	4639      	mov	r1, r7
 8007650:	f7f9 fa62 	bl	8000b18 <__aeabi_dcmpeq>
 8007654:	b110      	cbz	r0, 800765c <_dtoa_r+0x6c4>
 8007656:	9b01      	ldr	r3, [sp, #4]
 8007658:	07db      	lsls	r3, r3, #31
 800765a:	d40f      	bmi.n	800767c <_dtoa_r+0x6e4>
 800765c:	4651      	mov	r1, sl
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fbcc 	bl	8007dfc <_Bfree>
 8007664:	2300      	movs	r3, #0
 8007666:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007668:	702b      	strb	r3, [r5, #0]
 800766a:	f10b 0301 	add.w	r3, fp, #1
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007672:	2b00      	cmp	r3, #0
 8007674:	f43f ace2 	beq.w	800703c <_dtoa_r+0xa4>
 8007678:	601d      	str	r5, [r3, #0]
 800767a:	e4df      	b.n	800703c <_dtoa_r+0xa4>
 800767c:	465f      	mov	r7, fp
 800767e:	462b      	mov	r3, r5
 8007680:	461d      	mov	r5, r3
 8007682:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007686:	2a39      	cmp	r2, #57	; 0x39
 8007688:	d106      	bne.n	8007698 <_dtoa_r+0x700>
 800768a:	9a00      	ldr	r2, [sp, #0]
 800768c:	429a      	cmp	r2, r3
 800768e:	d1f7      	bne.n	8007680 <_dtoa_r+0x6e8>
 8007690:	9900      	ldr	r1, [sp, #0]
 8007692:	2230      	movs	r2, #48	; 0x30
 8007694:	3701      	adds	r7, #1
 8007696:	700a      	strb	r2, [r1, #0]
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	3201      	adds	r2, #1
 800769c:	701a      	strb	r2, [r3, #0]
 800769e:	e790      	b.n	80075c2 <_dtoa_r+0x62a>
 80076a0:	4ba3      	ldr	r3, [pc, #652]	; (8007930 <_dtoa_r+0x998>)
 80076a2:	2200      	movs	r2, #0
 80076a4:	f7f8 ffd0 	bl	8000648 <__aeabi_dmul>
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	4606      	mov	r6, r0
 80076ae:	460f      	mov	r7, r1
 80076b0:	f7f9 fa32 	bl	8000b18 <__aeabi_dcmpeq>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d09e      	beq.n	80075f6 <_dtoa_r+0x65e>
 80076b8:	e7d0      	b.n	800765c <_dtoa_r+0x6c4>
 80076ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076bc:	2a00      	cmp	r2, #0
 80076be:	f000 80ca 	beq.w	8007856 <_dtoa_r+0x8be>
 80076c2:	9a07      	ldr	r2, [sp, #28]
 80076c4:	2a01      	cmp	r2, #1
 80076c6:	f300 80ad 	bgt.w	8007824 <_dtoa_r+0x88c>
 80076ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076cc:	2a00      	cmp	r2, #0
 80076ce:	f000 80a5 	beq.w	800781c <_dtoa_r+0x884>
 80076d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076d6:	9e08      	ldr	r6, [sp, #32]
 80076d8:	9d05      	ldr	r5, [sp, #20]
 80076da:	9a05      	ldr	r2, [sp, #20]
 80076dc:	441a      	add	r2, r3
 80076de:	9205      	str	r2, [sp, #20]
 80076e0:	9a06      	ldr	r2, [sp, #24]
 80076e2:	2101      	movs	r1, #1
 80076e4:	441a      	add	r2, r3
 80076e6:	4620      	mov	r0, r4
 80076e8:	9206      	str	r2, [sp, #24]
 80076ea:	f000 fc3d 	bl	8007f68 <__i2b>
 80076ee:	4607      	mov	r7, r0
 80076f0:	b165      	cbz	r5, 800770c <_dtoa_r+0x774>
 80076f2:	9b06      	ldr	r3, [sp, #24]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	dd09      	ble.n	800770c <_dtoa_r+0x774>
 80076f8:	42ab      	cmp	r3, r5
 80076fa:	9a05      	ldr	r2, [sp, #20]
 80076fc:	bfa8      	it	ge
 80076fe:	462b      	movge	r3, r5
 8007700:	1ad2      	subs	r2, r2, r3
 8007702:	9205      	str	r2, [sp, #20]
 8007704:	9a06      	ldr	r2, [sp, #24]
 8007706:	1aed      	subs	r5, r5, r3
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	9306      	str	r3, [sp, #24]
 800770c:	9b08      	ldr	r3, [sp, #32]
 800770e:	b1f3      	cbz	r3, 800774e <_dtoa_r+0x7b6>
 8007710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007712:	2b00      	cmp	r3, #0
 8007714:	f000 80a3 	beq.w	800785e <_dtoa_r+0x8c6>
 8007718:	2e00      	cmp	r6, #0
 800771a:	dd10      	ble.n	800773e <_dtoa_r+0x7a6>
 800771c:	4639      	mov	r1, r7
 800771e:	4632      	mov	r2, r6
 8007720:	4620      	mov	r0, r4
 8007722:	f000 fce1 	bl	80080e8 <__pow5mult>
 8007726:	4652      	mov	r2, sl
 8007728:	4601      	mov	r1, r0
 800772a:	4607      	mov	r7, r0
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fc31 	bl	8007f94 <__multiply>
 8007732:	4651      	mov	r1, sl
 8007734:	4680      	mov	r8, r0
 8007736:	4620      	mov	r0, r4
 8007738:	f000 fb60 	bl	8007dfc <_Bfree>
 800773c:	46c2      	mov	sl, r8
 800773e:	9b08      	ldr	r3, [sp, #32]
 8007740:	1b9a      	subs	r2, r3, r6
 8007742:	d004      	beq.n	800774e <_dtoa_r+0x7b6>
 8007744:	4651      	mov	r1, sl
 8007746:	4620      	mov	r0, r4
 8007748:	f000 fcce 	bl	80080e8 <__pow5mult>
 800774c:	4682      	mov	sl, r0
 800774e:	2101      	movs	r1, #1
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fc09 	bl	8007f68 <__i2b>
 8007756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007758:	2b00      	cmp	r3, #0
 800775a:	4606      	mov	r6, r0
 800775c:	f340 8081 	ble.w	8007862 <_dtoa_r+0x8ca>
 8007760:	461a      	mov	r2, r3
 8007762:	4601      	mov	r1, r0
 8007764:	4620      	mov	r0, r4
 8007766:	f000 fcbf 	bl	80080e8 <__pow5mult>
 800776a:	9b07      	ldr	r3, [sp, #28]
 800776c:	2b01      	cmp	r3, #1
 800776e:	4606      	mov	r6, r0
 8007770:	dd7a      	ble.n	8007868 <_dtoa_r+0x8d0>
 8007772:	f04f 0800 	mov.w	r8, #0
 8007776:	6933      	ldr	r3, [r6, #16]
 8007778:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800777c:	6918      	ldr	r0, [r3, #16]
 800777e:	f000 fba5 	bl	8007ecc <__hi0bits>
 8007782:	f1c0 0020 	rsb	r0, r0, #32
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	4418      	add	r0, r3
 800778a:	f010 001f 	ands.w	r0, r0, #31
 800778e:	f000 8094 	beq.w	80078ba <_dtoa_r+0x922>
 8007792:	f1c0 0320 	rsb	r3, r0, #32
 8007796:	2b04      	cmp	r3, #4
 8007798:	f340 8085 	ble.w	80078a6 <_dtoa_r+0x90e>
 800779c:	9b05      	ldr	r3, [sp, #20]
 800779e:	f1c0 001c 	rsb	r0, r0, #28
 80077a2:	4403      	add	r3, r0
 80077a4:	9305      	str	r3, [sp, #20]
 80077a6:	9b06      	ldr	r3, [sp, #24]
 80077a8:	4403      	add	r3, r0
 80077aa:	4405      	add	r5, r0
 80077ac:	9306      	str	r3, [sp, #24]
 80077ae:	9b05      	ldr	r3, [sp, #20]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dd05      	ble.n	80077c0 <_dtoa_r+0x828>
 80077b4:	4651      	mov	r1, sl
 80077b6:	461a      	mov	r2, r3
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 fcef 	bl	800819c <__lshift>
 80077be:	4682      	mov	sl, r0
 80077c0:	9b06      	ldr	r3, [sp, #24]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	dd05      	ble.n	80077d2 <_dtoa_r+0x83a>
 80077c6:	4631      	mov	r1, r6
 80077c8:	461a      	mov	r2, r3
 80077ca:	4620      	mov	r0, r4
 80077cc:	f000 fce6 	bl	800819c <__lshift>
 80077d0:	4606      	mov	r6, r0
 80077d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d072      	beq.n	80078be <_dtoa_r+0x926>
 80077d8:	4631      	mov	r1, r6
 80077da:	4650      	mov	r0, sl
 80077dc:	f000 fd4a 	bl	8008274 <__mcmp>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	da6c      	bge.n	80078be <_dtoa_r+0x926>
 80077e4:	2300      	movs	r3, #0
 80077e6:	4651      	mov	r1, sl
 80077e8:	220a      	movs	r2, #10
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 fb28 	bl	8007e40 <__multadd>
 80077f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077f6:	4682      	mov	sl, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	f000 81b0 	beq.w	8007b5e <_dtoa_r+0xbc6>
 80077fe:	2300      	movs	r3, #0
 8007800:	4639      	mov	r1, r7
 8007802:	220a      	movs	r2, #10
 8007804:	4620      	mov	r0, r4
 8007806:	f000 fb1b 	bl	8007e40 <__multadd>
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	4607      	mov	r7, r0
 8007810:	f300 8096 	bgt.w	8007940 <_dtoa_r+0x9a8>
 8007814:	9b07      	ldr	r3, [sp, #28]
 8007816:	2b02      	cmp	r3, #2
 8007818:	dc59      	bgt.n	80078ce <_dtoa_r+0x936>
 800781a:	e091      	b.n	8007940 <_dtoa_r+0x9a8>
 800781c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800781e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007822:	e758      	b.n	80076d6 <_dtoa_r+0x73e>
 8007824:	9b04      	ldr	r3, [sp, #16]
 8007826:	1e5e      	subs	r6, r3, #1
 8007828:	9b08      	ldr	r3, [sp, #32]
 800782a:	42b3      	cmp	r3, r6
 800782c:	bfbf      	itttt	lt
 800782e:	9b08      	ldrlt	r3, [sp, #32]
 8007830:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007832:	9608      	strlt	r6, [sp, #32]
 8007834:	1af3      	sublt	r3, r6, r3
 8007836:	bfb4      	ite	lt
 8007838:	18d2      	addlt	r2, r2, r3
 800783a:	1b9e      	subge	r6, r3, r6
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	bfbc      	itt	lt
 8007840:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007842:	2600      	movlt	r6, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	bfb7      	itett	lt
 8007848:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800784c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007850:	1a9d      	sublt	r5, r3, r2
 8007852:	2300      	movlt	r3, #0
 8007854:	e741      	b.n	80076da <_dtoa_r+0x742>
 8007856:	9e08      	ldr	r6, [sp, #32]
 8007858:	9d05      	ldr	r5, [sp, #20]
 800785a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800785c:	e748      	b.n	80076f0 <_dtoa_r+0x758>
 800785e:	9a08      	ldr	r2, [sp, #32]
 8007860:	e770      	b.n	8007744 <_dtoa_r+0x7ac>
 8007862:	9b07      	ldr	r3, [sp, #28]
 8007864:	2b01      	cmp	r3, #1
 8007866:	dc19      	bgt.n	800789c <_dtoa_r+0x904>
 8007868:	9b02      	ldr	r3, [sp, #8]
 800786a:	b9bb      	cbnz	r3, 800789c <_dtoa_r+0x904>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007872:	b99b      	cbnz	r3, 800789c <_dtoa_r+0x904>
 8007874:	9b03      	ldr	r3, [sp, #12]
 8007876:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800787a:	0d1b      	lsrs	r3, r3, #20
 800787c:	051b      	lsls	r3, r3, #20
 800787e:	b183      	cbz	r3, 80078a2 <_dtoa_r+0x90a>
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	3301      	adds	r3, #1
 8007884:	9305      	str	r3, [sp, #20]
 8007886:	9b06      	ldr	r3, [sp, #24]
 8007888:	3301      	adds	r3, #1
 800788a:	9306      	str	r3, [sp, #24]
 800788c:	f04f 0801 	mov.w	r8, #1
 8007890:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	f47f af6f 	bne.w	8007776 <_dtoa_r+0x7de>
 8007898:	2001      	movs	r0, #1
 800789a:	e774      	b.n	8007786 <_dtoa_r+0x7ee>
 800789c:	f04f 0800 	mov.w	r8, #0
 80078a0:	e7f6      	b.n	8007890 <_dtoa_r+0x8f8>
 80078a2:	4698      	mov	r8, r3
 80078a4:	e7f4      	b.n	8007890 <_dtoa_r+0x8f8>
 80078a6:	d082      	beq.n	80077ae <_dtoa_r+0x816>
 80078a8:	9a05      	ldr	r2, [sp, #20]
 80078aa:	331c      	adds	r3, #28
 80078ac:	441a      	add	r2, r3
 80078ae:	9205      	str	r2, [sp, #20]
 80078b0:	9a06      	ldr	r2, [sp, #24]
 80078b2:	441a      	add	r2, r3
 80078b4:	441d      	add	r5, r3
 80078b6:	9206      	str	r2, [sp, #24]
 80078b8:	e779      	b.n	80077ae <_dtoa_r+0x816>
 80078ba:	4603      	mov	r3, r0
 80078bc:	e7f4      	b.n	80078a8 <_dtoa_r+0x910>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dc37      	bgt.n	8007934 <_dtoa_r+0x99c>
 80078c4:	9b07      	ldr	r3, [sp, #28]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	dd34      	ble.n	8007934 <_dtoa_r+0x99c>
 80078ca:	9b04      	ldr	r3, [sp, #16]
 80078cc:	9301      	str	r3, [sp, #4]
 80078ce:	9b01      	ldr	r3, [sp, #4]
 80078d0:	b963      	cbnz	r3, 80078ec <_dtoa_r+0x954>
 80078d2:	4631      	mov	r1, r6
 80078d4:	2205      	movs	r2, #5
 80078d6:	4620      	mov	r0, r4
 80078d8:	f000 fab2 	bl	8007e40 <__multadd>
 80078dc:	4601      	mov	r1, r0
 80078de:	4606      	mov	r6, r0
 80078e0:	4650      	mov	r0, sl
 80078e2:	f000 fcc7 	bl	8008274 <__mcmp>
 80078e6:	2800      	cmp	r0, #0
 80078e8:	f73f adbb 	bgt.w	8007462 <_dtoa_r+0x4ca>
 80078ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ee:	9d00      	ldr	r5, [sp, #0]
 80078f0:	ea6f 0b03 	mvn.w	fp, r3
 80078f4:	f04f 0800 	mov.w	r8, #0
 80078f8:	4631      	mov	r1, r6
 80078fa:	4620      	mov	r0, r4
 80078fc:	f000 fa7e 	bl	8007dfc <_Bfree>
 8007900:	2f00      	cmp	r7, #0
 8007902:	f43f aeab 	beq.w	800765c <_dtoa_r+0x6c4>
 8007906:	f1b8 0f00 	cmp.w	r8, #0
 800790a:	d005      	beq.n	8007918 <_dtoa_r+0x980>
 800790c:	45b8      	cmp	r8, r7
 800790e:	d003      	beq.n	8007918 <_dtoa_r+0x980>
 8007910:	4641      	mov	r1, r8
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fa72 	bl	8007dfc <_Bfree>
 8007918:	4639      	mov	r1, r7
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fa6e 	bl	8007dfc <_Bfree>
 8007920:	e69c      	b.n	800765c <_dtoa_r+0x6c4>
 8007922:	2600      	movs	r6, #0
 8007924:	4637      	mov	r7, r6
 8007926:	e7e1      	b.n	80078ec <_dtoa_r+0x954>
 8007928:	46bb      	mov	fp, r7
 800792a:	4637      	mov	r7, r6
 800792c:	e599      	b.n	8007462 <_dtoa_r+0x4ca>
 800792e:	bf00      	nop
 8007930:	40240000 	.word	0x40240000
 8007934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 80c8 	beq.w	8007acc <_dtoa_r+0xb34>
 800793c:	9b04      	ldr	r3, [sp, #16]
 800793e:	9301      	str	r3, [sp, #4]
 8007940:	2d00      	cmp	r5, #0
 8007942:	dd05      	ble.n	8007950 <_dtoa_r+0x9b8>
 8007944:	4639      	mov	r1, r7
 8007946:	462a      	mov	r2, r5
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fc27 	bl	800819c <__lshift>
 800794e:	4607      	mov	r7, r0
 8007950:	f1b8 0f00 	cmp.w	r8, #0
 8007954:	d05b      	beq.n	8007a0e <_dtoa_r+0xa76>
 8007956:	6879      	ldr	r1, [r7, #4]
 8007958:	4620      	mov	r0, r4
 800795a:	f000 fa0f 	bl	8007d7c <_Balloc>
 800795e:	4605      	mov	r5, r0
 8007960:	b928      	cbnz	r0, 800796e <_dtoa_r+0x9d6>
 8007962:	4b83      	ldr	r3, [pc, #524]	; (8007b70 <_dtoa_r+0xbd8>)
 8007964:	4602      	mov	r2, r0
 8007966:	f240 21ef 	movw	r1, #751	; 0x2ef
 800796a:	f7ff bb2e 	b.w	8006fca <_dtoa_r+0x32>
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	3202      	adds	r2, #2
 8007972:	0092      	lsls	r2, r2, #2
 8007974:	f107 010c 	add.w	r1, r7, #12
 8007978:	300c      	adds	r0, #12
 800797a:	f7ff fa76 	bl	8006e6a <memcpy>
 800797e:	2201      	movs	r2, #1
 8007980:	4629      	mov	r1, r5
 8007982:	4620      	mov	r0, r4
 8007984:	f000 fc0a 	bl	800819c <__lshift>
 8007988:	9b00      	ldr	r3, [sp, #0]
 800798a:	3301      	adds	r3, #1
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007992:	4413      	add	r3, r2
 8007994:	9308      	str	r3, [sp, #32]
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	46b8      	mov	r8, r7
 800799e:	9306      	str	r3, [sp, #24]
 80079a0:	4607      	mov	r7, r0
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	4631      	mov	r1, r6
 80079a6:	3b01      	subs	r3, #1
 80079a8:	4650      	mov	r0, sl
 80079aa:	9301      	str	r3, [sp, #4]
 80079ac:	f7ff fa6b 	bl	8006e86 <quorem>
 80079b0:	4641      	mov	r1, r8
 80079b2:	9002      	str	r0, [sp, #8]
 80079b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079b8:	4650      	mov	r0, sl
 80079ba:	f000 fc5b 	bl	8008274 <__mcmp>
 80079be:	463a      	mov	r2, r7
 80079c0:	9005      	str	r0, [sp, #20]
 80079c2:	4631      	mov	r1, r6
 80079c4:	4620      	mov	r0, r4
 80079c6:	f000 fc71 	bl	80082ac <__mdiff>
 80079ca:	68c2      	ldr	r2, [r0, #12]
 80079cc:	4605      	mov	r5, r0
 80079ce:	bb02      	cbnz	r2, 8007a12 <_dtoa_r+0xa7a>
 80079d0:	4601      	mov	r1, r0
 80079d2:	4650      	mov	r0, sl
 80079d4:	f000 fc4e 	bl	8008274 <__mcmp>
 80079d8:	4602      	mov	r2, r0
 80079da:	4629      	mov	r1, r5
 80079dc:	4620      	mov	r0, r4
 80079de:	9209      	str	r2, [sp, #36]	; 0x24
 80079e0:	f000 fa0c 	bl	8007dfc <_Bfree>
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e8:	9d04      	ldr	r5, [sp, #16]
 80079ea:	ea43 0102 	orr.w	r1, r3, r2
 80079ee:	9b06      	ldr	r3, [sp, #24]
 80079f0:	4319      	orrs	r1, r3
 80079f2:	d110      	bne.n	8007a16 <_dtoa_r+0xa7e>
 80079f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80079f8:	d029      	beq.n	8007a4e <_dtoa_r+0xab6>
 80079fa:	9b05      	ldr	r3, [sp, #20]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	dd02      	ble.n	8007a06 <_dtoa_r+0xa6e>
 8007a00:	9b02      	ldr	r3, [sp, #8]
 8007a02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8007a06:	9b01      	ldr	r3, [sp, #4]
 8007a08:	f883 9000 	strb.w	r9, [r3]
 8007a0c:	e774      	b.n	80078f8 <_dtoa_r+0x960>
 8007a0e:	4638      	mov	r0, r7
 8007a10:	e7ba      	b.n	8007988 <_dtoa_r+0x9f0>
 8007a12:	2201      	movs	r2, #1
 8007a14:	e7e1      	b.n	80079da <_dtoa_r+0xa42>
 8007a16:	9b05      	ldr	r3, [sp, #20]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	db04      	blt.n	8007a26 <_dtoa_r+0xa8e>
 8007a1c:	9907      	ldr	r1, [sp, #28]
 8007a1e:	430b      	orrs	r3, r1
 8007a20:	9906      	ldr	r1, [sp, #24]
 8007a22:	430b      	orrs	r3, r1
 8007a24:	d120      	bne.n	8007a68 <_dtoa_r+0xad0>
 8007a26:	2a00      	cmp	r2, #0
 8007a28:	dded      	ble.n	8007a06 <_dtoa_r+0xa6e>
 8007a2a:	4651      	mov	r1, sl
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f000 fbb4 	bl	800819c <__lshift>
 8007a34:	4631      	mov	r1, r6
 8007a36:	4682      	mov	sl, r0
 8007a38:	f000 fc1c 	bl	8008274 <__mcmp>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	dc03      	bgt.n	8007a48 <_dtoa_r+0xab0>
 8007a40:	d1e1      	bne.n	8007a06 <_dtoa_r+0xa6e>
 8007a42:	f019 0f01 	tst.w	r9, #1
 8007a46:	d0de      	beq.n	8007a06 <_dtoa_r+0xa6e>
 8007a48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a4c:	d1d8      	bne.n	8007a00 <_dtoa_r+0xa68>
 8007a4e:	9a01      	ldr	r2, [sp, #4]
 8007a50:	2339      	movs	r3, #57	; 0x39
 8007a52:	7013      	strb	r3, [r2, #0]
 8007a54:	462b      	mov	r3, r5
 8007a56:	461d      	mov	r5, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a5e:	2a39      	cmp	r2, #57	; 0x39
 8007a60:	d06c      	beq.n	8007b3c <_dtoa_r+0xba4>
 8007a62:	3201      	adds	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
 8007a66:	e747      	b.n	80078f8 <_dtoa_r+0x960>
 8007a68:	2a00      	cmp	r2, #0
 8007a6a:	dd07      	ble.n	8007a7c <_dtoa_r+0xae4>
 8007a6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a70:	d0ed      	beq.n	8007a4e <_dtoa_r+0xab6>
 8007a72:	9a01      	ldr	r2, [sp, #4]
 8007a74:	f109 0301 	add.w	r3, r9, #1
 8007a78:	7013      	strb	r3, [r2, #0]
 8007a7a:	e73d      	b.n	80078f8 <_dtoa_r+0x960>
 8007a7c:	9b04      	ldr	r3, [sp, #16]
 8007a7e:	9a08      	ldr	r2, [sp, #32]
 8007a80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d043      	beq.n	8007b10 <_dtoa_r+0xb78>
 8007a88:	4651      	mov	r1, sl
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	220a      	movs	r2, #10
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f9d6 	bl	8007e40 <__multadd>
 8007a94:	45b8      	cmp	r8, r7
 8007a96:	4682      	mov	sl, r0
 8007a98:	f04f 0300 	mov.w	r3, #0
 8007a9c:	f04f 020a 	mov.w	r2, #10
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	d107      	bne.n	8007ab6 <_dtoa_r+0xb1e>
 8007aa6:	f000 f9cb 	bl	8007e40 <__multadd>
 8007aaa:	4680      	mov	r8, r0
 8007aac:	4607      	mov	r7, r0
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	e775      	b.n	80079a2 <_dtoa_r+0xa0a>
 8007ab6:	f000 f9c3 	bl	8007e40 <__multadd>
 8007aba:	4639      	mov	r1, r7
 8007abc:	4680      	mov	r8, r0
 8007abe:	2300      	movs	r3, #0
 8007ac0:	220a      	movs	r2, #10
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f9bc 	bl	8007e40 <__multadd>
 8007ac8:	4607      	mov	r7, r0
 8007aca:	e7f0      	b.n	8007aae <_dtoa_r+0xb16>
 8007acc:	9b04      	ldr	r3, [sp, #16]
 8007ace:	9301      	str	r3, [sp, #4]
 8007ad0:	9d00      	ldr	r5, [sp, #0]
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4650      	mov	r0, sl
 8007ad6:	f7ff f9d6 	bl	8006e86 <quorem>
 8007ada:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	f805 9b01 	strb.w	r9, [r5], #1
 8007ae4:	1aea      	subs	r2, r5, r3
 8007ae6:	9b01      	ldr	r3, [sp, #4]
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	dd07      	ble.n	8007afc <_dtoa_r+0xb64>
 8007aec:	4651      	mov	r1, sl
 8007aee:	2300      	movs	r3, #0
 8007af0:	220a      	movs	r2, #10
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 f9a4 	bl	8007e40 <__multadd>
 8007af8:	4682      	mov	sl, r0
 8007afa:	e7ea      	b.n	8007ad2 <_dtoa_r+0xb3a>
 8007afc:	9b01      	ldr	r3, [sp, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bfc8      	it	gt
 8007b02:	461d      	movgt	r5, r3
 8007b04:	9b00      	ldr	r3, [sp, #0]
 8007b06:	bfd8      	it	le
 8007b08:	2501      	movle	r5, #1
 8007b0a:	441d      	add	r5, r3
 8007b0c:	f04f 0800 	mov.w	r8, #0
 8007b10:	4651      	mov	r1, sl
 8007b12:	2201      	movs	r2, #1
 8007b14:	4620      	mov	r0, r4
 8007b16:	f000 fb41 	bl	800819c <__lshift>
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4682      	mov	sl, r0
 8007b1e:	f000 fba9 	bl	8008274 <__mcmp>
 8007b22:	2800      	cmp	r0, #0
 8007b24:	dc96      	bgt.n	8007a54 <_dtoa_r+0xabc>
 8007b26:	d102      	bne.n	8007b2e <_dtoa_r+0xb96>
 8007b28:	f019 0f01 	tst.w	r9, #1
 8007b2c:	d192      	bne.n	8007a54 <_dtoa_r+0xabc>
 8007b2e:	462b      	mov	r3, r5
 8007b30:	461d      	mov	r5, r3
 8007b32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b36:	2a30      	cmp	r2, #48	; 0x30
 8007b38:	d0fa      	beq.n	8007b30 <_dtoa_r+0xb98>
 8007b3a:	e6dd      	b.n	80078f8 <_dtoa_r+0x960>
 8007b3c:	9a00      	ldr	r2, [sp, #0]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d189      	bne.n	8007a56 <_dtoa_r+0xabe>
 8007b42:	f10b 0b01 	add.w	fp, fp, #1
 8007b46:	2331      	movs	r3, #49	; 0x31
 8007b48:	e796      	b.n	8007a78 <_dtoa_r+0xae0>
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <_dtoa_r+0xbdc>)
 8007b4c:	f7ff ba99 	b.w	8007082 <_dtoa_r+0xea>
 8007b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f47f aa6d 	bne.w	8007032 <_dtoa_r+0x9a>
 8007b58:	4b07      	ldr	r3, [pc, #28]	; (8007b78 <_dtoa_r+0xbe0>)
 8007b5a:	f7ff ba92 	b.w	8007082 <_dtoa_r+0xea>
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dcb5      	bgt.n	8007ad0 <_dtoa_r+0xb38>
 8007b64:	9b07      	ldr	r3, [sp, #28]
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	f73f aeb1 	bgt.w	80078ce <_dtoa_r+0x936>
 8007b6c:	e7b0      	b.n	8007ad0 <_dtoa_r+0xb38>
 8007b6e:	bf00      	nop
 8007b70:	08009ddc 	.word	0x08009ddc
 8007b74:	08009d3c 	.word	0x08009d3c
 8007b78:	08009d60 	.word	0x08009d60

08007b7c <_free_r>:
 8007b7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b7e:	2900      	cmp	r1, #0
 8007b80:	d044      	beq.n	8007c0c <_free_r+0x90>
 8007b82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b86:	9001      	str	r0, [sp, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b8e:	bfb8      	it	lt
 8007b90:	18e4      	addlt	r4, r4, r3
 8007b92:	f000 f8e7 	bl	8007d64 <__malloc_lock>
 8007b96:	4a1e      	ldr	r2, [pc, #120]	; (8007c10 <_free_r+0x94>)
 8007b98:	9801      	ldr	r0, [sp, #4]
 8007b9a:	6813      	ldr	r3, [r2, #0]
 8007b9c:	b933      	cbnz	r3, 8007bac <_free_r+0x30>
 8007b9e:	6063      	str	r3, [r4, #4]
 8007ba0:	6014      	str	r4, [r2, #0]
 8007ba2:	b003      	add	sp, #12
 8007ba4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba8:	f000 b8e2 	b.w	8007d70 <__malloc_unlock>
 8007bac:	42a3      	cmp	r3, r4
 8007bae:	d908      	bls.n	8007bc2 <_free_r+0x46>
 8007bb0:	6825      	ldr	r5, [r4, #0]
 8007bb2:	1961      	adds	r1, r4, r5
 8007bb4:	428b      	cmp	r3, r1
 8007bb6:	bf01      	itttt	eq
 8007bb8:	6819      	ldreq	r1, [r3, #0]
 8007bba:	685b      	ldreq	r3, [r3, #4]
 8007bbc:	1949      	addeq	r1, r1, r5
 8007bbe:	6021      	streq	r1, [r4, #0]
 8007bc0:	e7ed      	b.n	8007b9e <_free_r+0x22>
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	b10b      	cbz	r3, 8007bcc <_free_r+0x50>
 8007bc8:	42a3      	cmp	r3, r4
 8007bca:	d9fa      	bls.n	8007bc2 <_free_r+0x46>
 8007bcc:	6811      	ldr	r1, [r2, #0]
 8007bce:	1855      	adds	r5, r2, r1
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d10b      	bne.n	8007bec <_free_r+0x70>
 8007bd4:	6824      	ldr	r4, [r4, #0]
 8007bd6:	4421      	add	r1, r4
 8007bd8:	1854      	adds	r4, r2, r1
 8007bda:	42a3      	cmp	r3, r4
 8007bdc:	6011      	str	r1, [r2, #0]
 8007bde:	d1e0      	bne.n	8007ba2 <_free_r+0x26>
 8007be0:	681c      	ldr	r4, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	6053      	str	r3, [r2, #4]
 8007be6:	440c      	add	r4, r1
 8007be8:	6014      	str	r4, [r2, #0]
 8007bea:	e7da      	b.n	8007ba2 <_free_r+0x26>
 8007bec:	d902      	bls.n	8007bf4 <_free_r+0x78>
 8007bee:	230c      	movs	r3, #12
 8007bf0:	6003      	str	r3, [r0, #0]
 8007bf2:	e7d6      	b.n	8007ba2 <_free_r+0x26>
 8007bf4:	6825      	ldr	r5, [r4, #0]
 8007bf6:	1961      	adds	r1, r4, r5
 8007bf8:	428b      	cmp	r3, r1
 8007bfa:	bf04      	itt	eq
 8007bfc:	6819      	ldreq	r1, [r3, #0]
 8007bfe:	685b      	ldreq	r3, [r3, #4]
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	bf04      	itt	eq
 8007c04:	1949      	addeq	r1, r1, r5
 8007c06:	6021      	streq	r1, [r4, #0]
 8007c08:	6054      	str	r4, [r2, #4]
 8007c0a:	e7ca      	b.n	8007ba2 <_free_r+0x26>
 8007c0c:	b003      	add	sp, #12
 8007c0e:	bd30      	pop	{r4, r5, pc}
 8007c10:	200008a8 	.word	0x200008a8

08007c14 <malloc>:
 8007c14:	4b02      	ldr	r3, [pc, #8]	; (8007c20 <malloc+0xc>)
 8007c16:	4601      	mov	r1, r0
 8007c18:	6818      	ldr	r0, [r3, #0]
 8007c1a:	f000 b823 	b.w	8007c64 <_malloc_r>
 8007c1e:	bf00      	nop
 8007c20:	20000064 	.word	0x20000064

08007c24 <sbrk_aligned>:
 8007c24:	b570      	push	{r4, r5, r6, lr}
 8007c26:	4e0e      	ldr	r6, [pc, #56]	; (8007c60 <sbrk_aligned+0x3c>)
 8007c28:	460c      	mov	r4, r1
 8007c2a:	6831      	ldr	r1, [r6, #0]
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	b911      	cbnz	r1, 8007c36 <sbrk_aligned+0x12>
 8007c30:	f000 fe40 	bl	80088b4 <_sbrk_r>
 8007c34:	6030      	str	r0, [r6, #0]
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	f000 fe3b 	bl	80088b4 <_sbrk_r>
 8007c3e:	1c43      	adds	r3, r0, #1
 8007c40:	d00a      	beq.n	8007c58 <sbrk_aligned+0x34>
 8007c42:	1cc4      	adds	r4, r0, #3
 8007c44:	f024 0403 	bic.w	r4, r4, #3
 8007c48:	42a0      	cmp	r0, r4
 8007c4a:	d007      	beq.n	8007c5c <sbrk_aligned+0x38>
 8007c4c:	1a21      	subs	r1, r4, r0
 8007c4e:	4628      	mov	r0, r5
 8007c50:	f000 fe30 	bl	80088b4 <_sbrk_r>
 8007c54:	3001      	adds	r0, #1
 8007c56:	d101      	bne.n	8007c5c <sbrk_aligned+0x38>
 8007c58:	f04f 34ff 	mov.w	r4, #4294967295
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	bd70      	pop	{r4, r5, r6, pc}
 8007c60:	200008ac 	.word	0x200008ac

08007c64 <_malloc_r>:
 8007c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c68:	1ccd      	adds	r5, r1, #3
 8007c6a:	f025 0503 	bic.w	r5, r5, #3
 8007c6e:	3508      	adds	r5, #8
 8007c70:	2d0c      	cmp	r5, #12
 8007c72:	bf38      	it	cc
 8007c74:	250c      	movcc	r5, #12
 8007c76:	2d00      	cmp	r5, #0
 8007c78:	4607      	mov	r7, r0
 8007c7a:	db01      	blt.n	8007c80 <_malloc_r+0x1c>
 8007c7c:	42a9      	cmp	r1, r5
 8007c7e:	d905      	bls.n	8007c8c <_malloc_r+0x28>
 8007c80:	230c      	movs	r3, #12
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	2600      	movs	r6, #0
 8007c86:	4630      	mov	r0, r6
 8007c88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d60 <_malloc_r+0xfc>
 8007c90:	f000 f868 	bl	8007d64 <__malloc_lock>
 8007c94:	f8d8 3000 	ldr.w	r3, [r8]
 8007c98:	461c      	mov	r4, r3
 8007c9a:	bb5c      	cbnz	r4, 8007cf4 <_malloc_r+0x90>
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	4638      	mov	r0, r7
 8007ca0:	f7ff ffc0 	bl	8007c24 <sbrk_aligned>
 8007ca4:	1c43      	adds	r3, r0, #1
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	d155      	bne.n	8007d56 <_malloc_r+0xf2>
 8007caa:	f8d8 4000 	ldr.w	r4, [r8]
 8007cae:	4626      	mov	r6, r4
 8007cb0:	2e00      	cmp	r6, #0
 8007cb2:	d145      	bne.n	8007d40 <_malloc_r+0xdc>
 8007cb4:	2c00      	cmp	r4, #0
 8007cb6:	d048      	beq.n	8007d4a <_malloc_r+0xe6>
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	4631      	mov	r1, r6
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	eb04 0903 	add.w	r9, r4, r3
 8007cc2:	f000 fdf7 	bl	80088b4 <_sbrk_r>
 8007cc6:	4581      	cmp	r9, r0
 8007cc8:	d13f      	bne.n	8007d4a <_malloc_r+0xe6>
 8007cca:	6821      	ldr	r1, [r4, #0]
 8007ccc:	1a6d      	subs	r5, r5, r1
 8007cce:	4629      	mov	r1, r5
 8007cd0:	4638      	mov	r0, r7
 8007cd2:	f7ff ffa7 	bl	8007c24 <sbrk_aligned>
 8007cd6:	3001      	adds	r0, #1
 8007cd8:	d037      	beq.n	8007d4a <_malloc_r+0xe6>
 8007cda:	6823      	ldr	r3, [r4, #0]
 8007cdc:	442b      	add	r3, r5
 8007cde:	6023      	str	r3, [r4, #0]
 8007ce0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d038      	beq.n	8007d5a <_malloc_r+0xf6>
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	42a2      	cmp	r2, r4
 8007cec:	d12b      	bne.n	8007d46 <_malloc_r+0xe2>
 8007cee:	2200      	movs	r2, #0
 8007cf0:	605a      	str	r2, [r3, #4]
 8007cf2:	e00f      	b.n	8007d14 <_malloc_r+0xb0>
 8007cf4:	6822      	ldr	r2, [r4, #0]
 8007cf6:	1b52      	subs	r2, r2, r5
 8007cf8:	d41f      	bmi.n	8007d3a <_malloc_r+0xd6>
 8007cfa:	2a0b      	cmp	r2, #11
 8007cfc:	d917      	bls.n	8007d2e <_malloc_r+0xca>
 8007cfe:	1961      	adds	r1, r4, r5
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	6025      	str	r5, [r4, #0]
 8007d04:	bf18      	it	ne
 8007d06:	6059      	strne	r1, [r3, #4]
 8007d08:	6863      	ldr	r3, [r4, #4]
 8007d0a:	bf08      	it	eq
 8007d0c:	f8c8 1000 	streq.w	r1, [r8]
 8007d10:	5162      	str	r2, [r4, r5]
 8007d12:	604b      	str	r3, [r1, #4]
 8007d14:	4638      	mov	r0, r7
 8007d16:	f104 060b 	add.w	r6, r4, #11
 8007d1a:	f000 f829 	bl	8007d70 <__malloc_unlock>
 8007d1e:	f026 0607 	bic.w	r6, r6, #7
 8007d22:	1d23      	adds	r3, r4, #4
 8007d24:	1af2      	subs	r2, r6, r3
 8007d26:	d0ae      	beq.n	8007c86 <_malloc_r+0x22>
 8007d28:	1b9b      	subs	r3, r3, r6
 8007d2a:	50a3      	str	r3, [r4, r2]
 8007d2c:	e7ab      	b.n	8007c86 <_malloc_r+0x22>
 8007d2e:	42a3      	cmp	r3, r4
 8007d30:	6862      	ldr	r2, [r4, #4]
 8007d32:	d1dd      	bne.n	8007cf0 <_malloc_r+0x8c>
 8007d34:	f8c8 2000 	str.w	r2, [r8]
 8007d38:	e7ec      	b.n	8007d14 <_malloc_r+0xb0>
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	6864      	ldr	r4, [r4, #4]
 8007d3e:	e7ac      	b.n	8007c9a <_malloc_r+0x36>
 8007d40:	4634      	mov	r4, r6
 8007d42:	6876      	ldr	r6, [r6, #4]
 8007d44:	e7b4      	b.n	8007cb0 <_malloc_r+0x4c>
 8007d46:	4613      	mov	r3, r2
 8007d48:	e7cc      	b.n	8007ce4 <_malloc_r+0x80>
 8007d4a:	230c      	movs	r3, #12
 8007d4c:	603b      	str	r3, [r7, #0]
 8007d4e:	4638      	mov	r0, r7
 8007d50:	f000 f80e 	bl	8007d70 <__malloc_unlock>
 8007d54:	e797      	b.n	8007c86 <_malloc_r+0x22>
 8007d56:	6025      	str	r5, [r4, #0]
 8007d58:	e7dc      	b.n	8007d14 <_malloc_r+0xb0>
 8007d5a:	605b      	str	r3, [r3, #4]
 8007d5c:	deff      	udf	#255	; 0xff
 8007d5e:	bf00      	nop
 8007d60:	200008a8 	.word	0x200008a8

08007d64 <__malloc_lock>:
 8007d64:	4801      	ldr	r0, [pc, #4]	; (8007d6c <__malloc_lock+0x8>)
 8007d66:	f7ff b87e 	b.w	8006e66 <__retarget_lock_acquire_recursive>
 8007d6a:	bf00      	nop
 8007d6c:	200008a4 	.word	0x200008a4

08007d70 <__malloc_unlock>:
 8007d70:	4801      	ldr	r0, [pc, #4]	; (8007d78 <__malloc_unlock+0x8>)
 8007d72:	f7ff b879 	b.w	8006e68 <__retarget_lock_release_recursive>
 8007d76:	bf00      	nop
 8007d78:	200008a4 	.word	0x200008a4

08007d7c <_Balloc>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	69c6      	ldr	r6, [r0, #28]
 8007d80:	4604      	mov	r4, r0
 8007d82:	460d      	mov	r5, r1
 8007d84:	b976      	cbnz	r6, 8007da4 <_Balloc+0x28>
 8007d86:	2010      	movs	r0, #16
 8007d88:	f7ff ff44 	bl	8007c14 <malloc>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	61e0      	str	r0, [r4, #28]
 8007d90:	b920      	cbnz	r0, 8007d9c <_Balloc+0x20>
 8007d92:	4b18      	ldr	r3, [pc, #96]	; (8007df4 <_Balloc+0x78>)
 8007d94:	4818      	ldr	r0, [pc, #96]	; (8007df8 <_Balloc+0x7c>)
 8007d96:	216b      	movs	r1, #107	; 0x6b
 8007d98:	f000 fd9c 	bl	80088d4 <__assert_func>
 8007d9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007da0:	6006      	str	r6, [r0, #0]
 8007da2:	60c6      	str	r6, [r0, #12]
 8007da4:	69e6      	ldr	r6, [r4, #28]
 8007da6:	68f3      	ldr	r3, [r6, #12]
 8007da8:	b183      	cbz	r3, 8007dcc <_Balloc+0x50>
 8007daa:	69e3      	ldr	r3, [r4, #28]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007db2:	b9b8      	cbnz	r0, 8007de4 <_Balloc+0x68>
 8007db4:	2101      	movs	r1, #1
 8007db6:	fa01 f605 	lsl.w	r6, r1, r5
 8007dba:	1d72      	adds	r2, r6, #5
 8007dbc:	0092      	lsls	r2, r2, #2
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	f000 fda6 	bl	8008910 <_calloc_r>
 8007dc4:	b160      	cbz	r0, 8007de0 <_Balloc+0x64>
 8007dc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dca:	e00e      	b.n	8007dea <_Balloc+0x6e>
 8007dcc:	2221      	movs	r2, #33	; 0x21
 8007dce:	2104      	movs	r1, #4
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 fd9d 	bl	8008910 <_calloc_r>
 8007dd6:	69e3      	ldr	r3, [r4, #28]
 8007dd8:	60f0      	str	r0, [r6, #12]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d1e4      	bne.n	8007daa <_Balloc+0x2e>
 8007de0:	2000      	movs	r0, #0
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	6802      	ldr	r2, [r0, #0]
 8007de6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007dea:	2300      	movs	r3, #0
 8007dec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007df0:	e7f7      	b.n	8007de2 <_Balloc+0x66>
 8007df2:	bf00      	nop
 8007df4:	08009d6d 	.word	0x08009d6d
 8007df8:	08009ded 	.word	0x08009ded

08007dfc <_Bfree>:
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	69c6      	ldr	r6, [r0, #28]
 8007e00:	4605      	mov	r5, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	b976      	cbnz	r6, 8007e24 <_Bfree+0x28>
 8007e06:	2010      	movs	r0, #16
 8007e08:	f7ff ff04 	bl	8007c14 <malloc>
 8007e0c:	4602      	mov	r2, r0
 8007e0e:	61e8      	str	r0, [r5, #28]
 8007e10:	b920      	cbnz	r0, 8007e1c <_Bfree+0x20>
 8007e12:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <_Bfree+0x3c>)
 8007e14:	4809      	ldr	r0, [pc, #36]	; (8007e3c <_Bfree+0x40>)
 8007e16:	218f      	movs	r1, #143	; 0x8f
 8007e18:	f000 fd5c 	bl	80088d4 <__assert_func>
 8007e1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e20:	6006      	str	r6, [r0, #0]
 8007e22:	60c6      	str	r6, [r0, #12]
 8007e24:	b13c      	cbz	r4, 8007e36 <_Bfree+0x3a>
 8007e26:	69eb      	ldr	r3, [r5, #28]
 8007e28:	6862      	ldr	r2, [r4, #4]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e30:	6021      	str	r1, [r4, #0]
 8007e32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
 8007e38:	08009d6d 	.word	0x08009d6d
 8007e3c:	08009ded 	.word	0x08009ded

08007e40 <__multadd>:
 8007e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e44:	690d      	ldr	r5, [r1, #16]
 8007e46:	4607      	mov	r7, r0
 8007e48:	460c      	mov	r4, r1
 8007e4a:	461e      	mov	r6, r3
 8007e4c:	f101 0c14 	add.w	ip, r1, #20
 8007e50:	2000      	movs	r0, #0
 8007e52:	f8dc 3000 	ldr.w	r3, [ip]
 8007e56:	b299      	uxth	r1, r3
 8007e58:	fb02 6101 	mla	r1, r2, r1, r6
 8007e5c:	0c1e      	lsrs	r6, r3, #16
 8007e5e:	0c0b      	lsrs	r3, r1, #16
 8007e60:	fb02 3306 	mla	r3, r2, r6, r3
 8007e64:	b289      	uxth	r1, r1
 8007e66:	3001      	adds	r0, #1
 8007e68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e6c:	4285      	cmp	r5, r0
 8007e6e:	f84c 1b04 	str.w	r1, [ip], #4
 8007e72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e76:	dcec      	bgt.n	8007e52 <__multadd+0x12>
 8007e78:	b30e      	cbz	r6, 8007ebe <__multadd+0x7e>
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	42ab      	cmp	r3, r5
 8007e7e:	dc19      	bgt.n	8007eb4 <__multadd+0x74>
 8007e80:	6861      	ldr	r1, [r4, #4]
 8007e82:	4638      	mov	r0, r7
 8007e84:	3101      	adds	r1, #1
 8007e86:	f7ff ff79 	bl	8007d7c <_Balloc>
 8007e8a:	4680      	mov	r8, r0
 8007e8c:	b928      	cbnz	r0, 8007e9a <__multadd+0x5a>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <__multadd+0x84>)
 8007e92:	480d      	ldr	r0, [pc, #52]	; (8007ec8 <__multadd+0x88>)
 8007e94:	21ba      	movs	r1, #186	; 0xba
 8007e96:	f000 fd1d 	bl	80088d4 <__assert_func>
 8007e9a:	6922      	ldr	r2, [r4, #16]
 8007e9c:	3202      	adds	r2, #2
 8007e9e:	f104 010c 	add.w	r1, r4, #12
 8007ea2:	0092      	lsls	r2, r2, #2
 8007ea4:	300c      	adds	r0, #12
 8007ea6:	f7fe ffe0 	bl	8006e6a <memcpy>
 8007eaa:	4621      	mov	r1, r4
 8007eac:	4638      	mov	r0, r7
 8007eae:	f7ff ffa5 	bl	8007dfc <_Bfree>
 8007eb2:	4644      	mov	r4, r8
 8007eb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eb8:	3501      	adds	r5, #1
 8007eba:	615e      	str	r6, [r3, #20]
 8007ebc:	6125      	str	r5, [r4, #16]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec4:	08009ddc 	.word	0x08009ddc
 8007ec8:	08009ded 	.word	0x08009ded

08007ecc <__hi0bits>:
 8007ecc:	0c03      	lsrs	r3, r0, #16
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	b9d3      	cbnz	r3, 8007f08 <__hi0bits+0x3c>
 8007ed2:	0400      	lsls	r0, r0, #16
 8007ed4:	2310      	movs	r3, #16
 8007ed6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007eda:	bf04      	itt	eq
 8007edc:	0200      	lsleq	r0, r0, #8
 8007ede:	3308      	addeq	r3, #8
 8007ee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ee4:	bf04      	itt	eq
 8007ee6:	0100      	lsleq	r0, r0, #4
 8007ee8:	3304      	addeq	r3, #4
 8007eea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007eee:	bf04      	itt	eq
 8007ef0:	0080      	lsleq	r0, r0, #2
 8007ef2:	3302      	addeq	r3, #2
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	db05      	blt.n	8007f04 <__hi0bits+0x38>
 8007ef8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007efc:	f103 0301 	add.w	r3, r3, #1
 8007f00:	bf08      	it	eq
 8007f02:	2320      	moveq	r3, #32
 8007f04:	4618      	mov	r0, r3
 8007f06:	4770      	bx	lr
 8007f08:	2300      	movs	r3, #0
 8007f0a:	e7e4      	b.n	8007ed6 <__hi0bits+0xa>

08007f0c <__lo0bits>:
 8007f0c:	6803      	ldr	r3, [r0, #0]
 8007f0e:	f013 0207 	ands.w	r2, r3, #7
 8007f12:	d00c      	beq.n	8007f2e <__lo0bits+0x22>
 8007f14:	07d9      	lsls	r1, r3, #31
 8007f16:	d422      	bmi.n	8007f5e <__lo0bits+0x52>
 8007f18:	079a      	lsls	r2, r3, #30
 8007f1a:	bf49      	itett	mi
 8007f1c:	085b      	lsrmi	r3, r3, #1
 8007f1e:	089b      	lsrpl	r3, r3, #2
 8007f20:	6003      	strmi	r3, [r0, #0]
 8007f22:	2201      	movmi	r2, #1
 8007f24:	bf5c      	itt	pl
 8007f26:	6003      	strpl	r3, [r0, #0]
 8007f28:	2202      	movpl	r2, #2
 8007f2a:	4610      	mov	r0, r2
 8007f2c:	4770      	bx	lr
 8007f2e:	b299      	uxth	r1, r3
 8007f30:	b909      	cbnz	r1, 8007f36 <__lo0bits+0x2a>
 8007f32:	0c1b      	lsrs	r3, r3, #16
 8007f34:	2210      	movs	r2, #16
 8007f36:	b2d9      	uxtb	r1, r3
 8007f38:	b909      	cbnz	r1, 8007f3e <__lo0bits+0x32>
 8007f3a:	3208      	adds	r2, #8
 8007f3c:	0a1b      	lsrs	r3, r3, #8
 8007f3e:	0719      	lsls	r1, r3, #28
 8007f40:	bf04      	itt	eq
 8007f42:	091b      	lsreq	r3, r3, #4
 8007f44:	3204      	addeq	r2, #4
 8007f46:	0799      	lsls	r1, r3, #30
 8007f48:	bf04      	itt	eq
 8007f4a:	089b      	lsreq	r3, r3, #2
 8007f4c:	3202      	addeq	r2, #2
 8007f4e:	07d9      	lsls	r1, r3, #31
 8007f50:	d403      	bmi.n	8007f5a <__lo0bits+0x4e>
 8007f52:	085b      	lsrs	r3, r3, #1
 8007f54:	f102 0201 	add.w	r2, r2, #1
 8007f58:	d003      	beq.n	8007f62 <__lo0bits+0x56>
 8007f5a:	6003      	str	r3, [r0, #0]
 8007f5c:	e7e5      	b.n	8007f2a <__lo0bits+0x1e>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	e7e3      	b.n	8007f2a <__lo0bits+0x1e>
 8007f62:	2220      	movs	r2, #32
 8007f64:	e7e1      	b.n	8007f2a <__lo0bits+0x1e>
	...

08007f68 <__i2b>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	f7ff ff05 	bl	8007d7c <_Balloc>
 8007f72:	4602      	mov	r2, r0
 8007f74:	b928      	cbnz	r0, 8007f82 <__i2b+0x1a>
 8007f76:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <__i2b+0x24>)
 8007f78:	4805      	ldr	r0, [pc, #20]	; (8007f90 <__i2b+0x28>)
 8007f7a:	f240 1145 	movw	r1, #325	; 0x145
 8007f7e:	f000 fca9 	bl	80088d4 <__assert_func>
 8007f82:	2301      	movs	r3, #1
 8007f84:	6144      	str	r4, [r0, #20]
 8007f86:	6103      	str	r3, [r0, #16]
 8007f88:	bd10      	pop	{r4, pc}
 8007f8a:	bf00      	nop
 8007f8c:	08009ddc 	.word	0x08009ddc
 8007f90:	08009ded 	.word	0x08009ded

08007f94 <__multiply>:
 8007f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4691      	mov	r9, r2
 8007f9a:	690a      	ldr	r2, [r1, #16]
 8007f9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	bfb8      	it	lt
 8007fa4:	460b      	movlt	r3, r1
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	bfbc      	itt	lt
 8007faa:	464c      	movlt	r4, r9
 8007fac:	4699      	movlt	r9, r3
 8007fae:	6927      	ldr	r7, [r4, #16]
 8007fb0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fb4:	68a3      	ldr	r3, [r4, #8]
 8007fb6:	6861      	ldr	r1, [r4, #4]
 8007fb8:	eb07 060a 	add.w	r6, r7, sl
 8007fbc:	42b3      	cmp	r3, r6
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	bfb8      	it	lt
 8007fc2:	3101      	addlt	r1, #1
 8007fc4:	f7ff feda 	bl	8007d7c <_Balloc>
 8007fc8:	b930      	cbnz	r0, 8007fd8 <__multiply+0x44>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	4b44      	ldr	r3, [pc, #272]	; (80080e0 <__multiply+0x14c>)
 8007fce:	4845      	ldr	r0, [pc, #276]	; (80080e4 <__multiply+0x150>)
 8007fd0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007fd4:	f000 fc7e 	bl	80088d4 <__assert_func>
 8007fd8:	f100 0514 	add.w	r5, r0, #20
 8007fdc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	4543      	cmp	r3, r8
 8007fe6:	d321      	bcc.n	800802c <__multiply+0x98>
 8007fe8:	f104 0314 	add.w	r3, r4, #20
 8007fec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ff0:	f109 0314 	add.w	r3, r9, #20
 8007ff4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ff8:	9202      	str	r2, [sp, #8]
 8007ffa:	1b3a      	subs	r2, r7, r4
 8007ffc:	3a15      	subs	r2, #21
 8007ffe:	f022 0203 	bic.w	r2, r2, #3
 8008002:	3204      	adds	r2, #4
 8008004:	f104 0115 	add.w	r1, r4, #21
 8008008:	428f      	cmp	r7, r1
 800800a:	bf38      	it	cc
 800800c:	2204      	movcc	r2, #4
 800800e:	9201      	str	r2, [sp, #4]
 8008010:	9a02      	ldr	r2, [sp, #8]
 8008012:	9303      	str	r3, [sp, #12]
 8008014:	429a      	cmp	r2, r3
 8008016:	d80c      	bhi.n	8008032 <__multiply+0x9e>
 8008018:	2e00      	cmp	r6, #0
 800801a:	dd03      	ble.n	8008024 <__multiply+0x90>
 800801c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008020:	2b00      	cmp	r3, #0
 8008022:	d05b      	beq.n	80080dc <__multiply+0x148>
 8008024:	6106      	str	r6, [r0, #16]
 8008026:	b005      	add	sp, #20
 8008028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800802c:	f843 2b04 	str.w	r2, [r3], #4
 8008030:	e7d8      	b.n	8007fe4 <__multiply+0x50>
 8008032:	f8b3 a000 	ldrh.w	sl, [r3]
 8008036:	f1ba 0f00 	cmp.w	sl, #0
 800803a:	d024      	beq.n	8008086 <__multiply+0xf2>
 800803c:	f104 0e14 	add.w	lr, r4, #20
 8008040:	46a9      	mov	r9, r5
 8008042:	f04f 0c00 	mov.w	ip, #0
 8008046:	f85e 2b04 	ldr.w	r2, [lr], #4
 800804a:	f8d9 1000 	ldr.w	r1, [r9]
 800804e:	fa1f fb82 	uxth.w	fp, r2
 8008052:	b289      	uxth	r1, r1
 8008054:	fb0a 110b 	mla	r1, sl, fp, r1
 8008058:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800805c:	f8d9 2000 	ldr.w	r2, [r9]
 8008060:	4461      	add	r1, ip
 8008062:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008066:	fb0a c20b 	mla	r2, sl, fp, ip
 800806a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800806e:	b289      	uxth	r1, r1
 8008070:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008074:	4577      	cmp	r7, lr
 8008076:	f849 1b04 	str.w	r1, [r9], #4
 800807a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800807e:	d8e2      	bhi.n	8008046 <__multiply+0xb2>
 8008080:	9a01      	ldr	r2, [sp, #4]
 8008082:	f845 c002 	str.w	ip, [r5, r2]
 8008086:	9a03      	ldr	r2, [sp, #12]
 8008088:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800808c:	3304      	adds	r3, #4
 800808e:	f1b9 0f00 	cmp.w	r9, #0
 8008092:	d021      	beq.n	80080d8 <__multiply+0x144>
 8008094:	6829      	ldr	r1, [r5, #0]
 8008096:	f104 0c14 	add.w	ip, r4, #20
 800809a:	46ae      	mov	lr, r5
 800809c:	f04f 0a00 	mov.w	sl, #0
 80080a0:	f8bc b000 	ldrh.w	fp, [ip]
 80080a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080a8:	fb09 220b 	mla	r2, r9, fp, r2
 80080ac:	4452      	add	r2, sl
 80080ae:	b289      	uxth	r1, r1
 80080b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080b4:	f84e 1b04 	str.w	r1, [lr], #4
 80080b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80080bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080c0:	f8be 1000 	ldrh.w	r1, [lr]
 80080c4:	fb09 110a 	mla	r1, r9, sl, r1
 80080c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80080cc:	4567      	cmp	r7, ip
 80080ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080d2:	d8e5      	bhi.n	80080a0 <__multiply+0x10c>
 80080d4:	9a01      	ldr	r2, [sp, #4]
 80080d6:	50a9      	str	r1, [r5, r2]
 80080d8:	3504      	adds	r5, #4
 80080da:	e799      	b.n	8008010 <__multiply+0x7c>
 80080dc:	3e01      	subs	r6, #1
 80080de:	e79b      	b.n	8008018 <__multiply+0x84>
 80080e0:	08009ddc 	.word	0x08009ddc
 80080e4:	08009ded 	.word	0x08009ded

080080e8 <__pow5mult>:
 80080e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080ec:	4615      	mov	r5, r2
 80080ee:	f012 0203 	ands.w	r2, r2, #3
 80080f2:	4606      	mov	r6, r0
 80080f4:	460f      	mov	r7, r1
 80080f6:	d007      	beq.n	8008108 <__pow5mult+0x20>
 80080f8:	4c25      	ldr	r4, [pc, #148]	; (8008190 <__pow5mult+0xa8>)
 80080fa:	3a01      	subs	r2, #1
 80080fc:	2300      	movs	r3, #0
 80080fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008102:	f7ff fe9d 	bl	8007e40 <__multadd>
 8008106:	4607      	mov	r7, r0
 8008108:	10ad      	asrs	r5, r5, #2
 800810a:	d03d      	beq.n	8008188 <__pow5mult+0xa0>
 800810c:	69f4      	ldr	r4, [r6, #28]
 800810e:	b97c      	cbnz	r4, 8008130 <__pow5mult+0x48>
 8008110:	2010      	movs	r0, #16
 8008112:	f7ff fd7f 	bl	8007c14 <malloc>
 8008116:	4602      	mov	r2, r0
 8008118:	61f0      	str	r0, [r6, #28]
 800811a:	b928      	cbnz	r0, 8008128 <__pow5mult+0x40>
 800811c:	4b1d      	ldr	r3, [pc, #116]	; (8008194 <__pow5mult+0xac>)
 800811e:	481e      	ldr	r0, [pc, #120]	; (8008198 <__pow5mult+0xb0>)
 8008120:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008124:	f000 fbd6 	bl	80088d4 <__assert_func>
 8008128:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800812c:	6004      	str	r4, [r0, #0]
 800812e:	60c4      	str	r4, [r0, #12]
 8008130:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008134:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008138:	b94c      	cbnz	r4, 800814e <__pow5mult+0x66>
 800813a:	f240 2171 	movw	r1, #625	; 0x271
 800813e:	4630      	mov	r0, r6
 8008140:	f7ff ff12 	bl	8007f68 <__i2b>
 8008144:	2300      	movs	r3, #0
 8008146:	f8c8 0008 	str.w	r0, [r8, #8]
 800814a:	4604      	mov	r4, r0
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	f04f 0900 	mov.w	r9, #0
 8008152:	07eb      	lsls	r3, r5, #31
 8008154:	d50a      	bpl.n	800816c <__pow5mult+0x84>
 8008156:	4639      	mov	r1, r7
 8008158:	4622      	mov	r2, r4
 800815a:	4630      	mov	r0, r6
 800815c:	f7ff ff1a 	bl	8007f94 <__multiply>
 8008160:	4639      	mov	r1, r7
 8008162:	4680      	mov	r8, r0
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff fe49 	bl	8007dfc <_Bfree>
 800816a:	4647      	mov	r7, r8
 800816c:	106d      	asrs	r5, r5, #1
 800816e:	d00b      	beq.n	8008188 <__pow5mult+0xa0>
 8008170:	6820      	ldr	r0, [r4, #0]
 8008172:	b938      	cbnz	r0, 8008184 <__pow5mult+0x9c>
 8008174:	4622      	mov	r2, r4
 8008176:	4621      	mov	r1, r4
 8008178:	4630      	mov	r0, r6
 800817a:	f7ff ff0b 	bl	8007f94 <__multiply>
 800817e:	6020      	str	r0, [r4, #0]
 8008180:	f8c0 9000 	str.w	r9, [r0]
 8008184:	4604      	mov	r4, r0
 8008186:	e7e4      	b.n	8008152 <__pow5mult+0x6a>
 8008188:	4638      	mov	r0, r7
 800818a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800818e:	bf00      	nop
 8008190:	08009f38 	.word	0x08009f38
 8008194:	08009d6d 	.word	0x08009d6d
 8008198:	08009ded 	.word	0x08009ded

0800819c <__lshift>:
 800819c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081a0:	460c      	mov	r4, r1
 80081a2:	6849      	ldr	r1, [r1, #4]
 80081a4:	6923      	ldr	r3, [r4, #16]
 80081a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081aa:	68a3      	ldr	r3, [r4, #8]
 80081ac:	4607      	mov	r7, r0
 80081ae:	4691      	mov	r9, r2
 80081b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081b4:	f108 0601 	add.w	r6, r8, #1
 80081b8:	42b3      	cmp	r3, r6
 80081ba:	db0b      	blt.n	80081d4 <__lshift+0x38>
 80081bc:	4638      	mov	r0, r7
 80081be:	f7ff fddd 	bl	8007d7c <_Balloc>
 80081c2:	4605      	mov	r5, r0
 80081c4:	b948      	cbnz	r0, 80081da <__lshift+0x3e>
 80081c6:	4602      	mov	r2, r0
 80081c8:	4b28      	ldr	r3, [pc, #160]	; (800826c <__lshift+0xd0>)
 80081ca:	4829      	ldr	r0, [pc, #164]	; (8008270 <__lshift+0xd4>)
 80081cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80081d0:	f000 fb80 	bl	80088d4 <__assert_func>
 80081d4:	3101      	adds	r1, #1
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	e7ee      	b.n	80081b8 <__lshift+0x1c>
 80081da:	2300      	movs	r3, #0
 80081dc:	f100 0114 	add.w	r1, r0, #20
 80081e0:	f100 0210 	add.w	r2, r0, #16
 80081e4:	4618      	mov	r0, r3
 80081e6:	4553      	cmp	r3, sl
 80081e8:	db33      	blt.n	8008252 <__lshift+0xb6>
 80081ea:	6920      	ldr	r0, [r4, #16]
 80081ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081f0:	f104 0314 	add.w	r3, r4, #20
 80081f4:	f019 091f 	ands.w	r9, r9, #31
 80081f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008200:	d02b      	beq.n	800825a <__lshift+0xbe>
 8008202:	f1c9 0e20 	rsb	lr, r9, #32
 8008206:	468a      	mov	sl, r1
 8008208:	2200      	movs	r2, #0
 800820a:	6818      	ldr	r0, [r3, #0]
 800820c:	fa00 f009 	lsl.w	r0, r0, r9
 8008210:	4310      	orrs	r0, r2
 8008212:	f84a 0b04 	str.w	r0, [sl], #4
 8008216:	f853 2b04 	ldr.w	r2, [r3], #4
 800821a:	459c      	cmp	ip, r3
 800821c:	fa22 f20e 	lsr.w	r2, r2, lr
 8008220:	d8f3      	bhi.n	800820a <__lshift+0x6e>
 8008222:	ebac 0304 	sub.w	r3, ip, r4
 8008226:	3b15      	subs	r3, #21
 8008228:	f023 0303 	bic.w	r3, r3, #3
 800822c:	3304      	adds	r3, #4
 800822e:	f104 0015 	add.w	r0, r4, #21
 8008232:	4584      	cmp	ip, r0
 8008234:	bf38      	it	cc
 8008236:	2304      	movcc	r3, #4
 8008238:	50ca      	str	r2, [r1, r3]
 800823a:	b10a      	cbz	r2, 8008240 <__lshift+0xa4>
 800823c:	f108 0602 	add.w	r6, r8, #2
 8008240:	3e01      	subs	r6, #1
 8008242:	4638      	mov	r0, r7
 8008244:	612e      	str	r6, [r5, #16]
 8008246:	4621      	mov	r1, r4
 8008248:	f7ff fdd8 	bl	8007dfc <_Bfree>
 800824c:	4628      	mov	r0, r5
 800824e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008252:	f842 0f04 	str.w	r0, [r2, #4]!
 8008256:	3301      	adds	r3, #1
 8008258:	e7c5      	b.n	80081e6 <__lshift+0x4a>
 800825a:	3904      	subs	r1, #4
 800825c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008260:	f841 2f04 	str.w	r2, [r1, #4]!
 8008264:	459c      	cmp	ip, r3
 8008266:	d8f9      	bhi.n	800825c <__lshift+0xc0>
 8008268:	e7ea      	b.n	8008240 <__lshift+0xa4>
 800826a:	bf00      	nop
 800826c:	08009ddc 	.word	0x08009ddc
 8008270:	08009ded 	.word	0x08009ded

08008274 <__mcmp>:
 8008274:	b530      	push	{r4, r5, lr}
 8008276:	6902      	ldr	r2, [r0, #16]
 8008278:	690c      	ldr	r4, [r1, #16]
 800827a:	1b12      	subs	r2, r2, r4
 800827c:	d10e      	bne.n	800829c <__mcmp+0x28>
 800827e:	f100 0314 	add.w	r3, r0, #20
 8008282:	3114      	adds	r1, #20
 8008284:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008288:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800828c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008290:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008294:	42a5      	cmp	r5, r4
 8008296:	d003      	beq.n	80082a0 <__mcmp+0x2c>
 8008298:	d305      	bcc.n	80082a6 <__mcmp+0x32>
 800829a:	2201      	movs	r2, #1
 800829c:	4610      	mov	r0, r2
 800829e:	bd30      	pop	{r4, r5, pc}
 80082a0:	4283      	cmp	r3, r0
 80082a2:	d3f3      	bcc.n	800828c <__mcmp+0x18>
 80082a4:	e7fa      	b.n	800829c <__mcmp+0x28>
 80082a6:	f04f 32ff 	mov.w	r2, #4294967295
 80082aa:	e7f7      	b.n	800829c <__mcmp+0x28>

080082ac <__mdiff>:
 80082ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b0:	460c      	mov	r4, r1
 80082b2:	4606      	mov	r6, r0
 80082b4:	4611      	mov	r1, r2
 80082b6:	4620      	mov	r0, r4
 80082b8:	4690      	mov	r8, r2
 80082ba:	f7ff ffdb 	bl	8008274 <__mcmp>
 80082be:	1e05      	subs	r5, r0, #0
 80082c0:	d110      	bne.n	80082e4 <__mdiff+0x38>
 80082c2:	4629      	mov	r1, r5
 80082c4:	4630      	mov	r0, r6
 80082c6:	f7ff fd59 	bl	8007d7c <_Balloc>
 80082ca:	b930      	cbnz	r0, 80082da <__mdiff+0x2e>
 80082cc:	4b3a      	ldr	r3, [pc, #232]	; (80083b8 <__mdiff+0x10c>)
 80082ce:	4602      	mov	r2, r0
 80082d0:	f240 2137 	movw	r1, #567	; 0x237
 80082d4:	4839      	ldr	r0, [pc, #228]	; (80083bc <__mdiff+0x110>)
 80082d6:	f000 fafd 	bl	80088d4 <__assert_func>
 80082da:	2301      	movs	r3, #1
 80082dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082e4:	bfa4      	itt	ge
 80082e6:	4643      	movge	r3, r8
 80082e8:	46a0      	movge	r8, r4
 80082ea:	4630      	mov	r0, r6
 80082ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082f0:	bfa6      	itte	ge
 80082f2:	461c      	movge	r4, r3
 80082f4:	2500      	movge	r5, #0
 80082f6:	2501      	movlt	r5, #1
 80082f8:	f7ff fd40 	bl	8007d7c <_Balloc>
 80082fc:	b920      	cbnz	r0, 8008308 <__mdiff+0x5c>
 80082fe:	4b2e      	ldr	r3, [pc, #184]	; (80083b8 <__mdiff+0x10c>)
 8008300:	4602      	mov	r2, r0
 8008302:	f240 2145 	movw	r1, #581	; 0x245
 8008306:	e7e5      	b.n	80082d4 <__mdiff+0x28>
 8008308:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800830c:	6926      	ldr	r6, [r4, #16]
 800830e:	60c5      	str	r5, [r0, #12]
 8008310:	f104 0914 	add.w	r9, r4, #20
 8008314:	f108 0514 	add.w	r5, r8, #20
 8008318:	f100 0e14 	add.w	lr, r0, #20
 800831c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008320:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008324:	f108 0210 	add.w	r2, r8, #16
 8008328:	46f2      	mov	sl, lr
 800832a:	2100      	movs	r1, #0
 800832c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008330:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008334:	fa11 f88b 	uxtah	r8, r1, fp
 8008338:	b299      	uxth	r1, r3
 800833a:	0c1b      	lsrs	r3, r3, #16
 800833c:	eba8 0801 	sub.w	r8, r8, r1
 8008340:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008344:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008348:	fa1f f888 	uxth.w	r8, r8
 800834c:	1419      	asrs	r1, r3, #16
 800834e:	454e      	cmp	r6, r9
 8008350:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008354:	f84a 3b04 	str.w	r3, [sl], #4
 8008358:	d8e8      	bhi.n	800832c <__mdiff+0x80>
 800835a:	1b33      	subs	r3, r6, r4
 800835c:	3b15      	subs	r3, #21
 800835e:	f023 0303 	bic.w	r3, r3, #3
 8008362:	3304      	adds	r3, #4
 8008364:	3415      	adds	r4, #21
 8008366:	42a6      	cmp	r6, r4
 8008368:	bf38      	it	cc
 800836a:	2304      	movcc	r3, #4
 800836c:	441d      	add	r5, r3
 800836e:	4473      	add	r3, lr
 8008370:	469e      	mov	lr, r3
 8008372:	462e      	mov	r6, r5
 8008374:	4566      	cmp	r6, ip
 8008376:	d30e      	bcc.n	8008396 <__mdiff+0xea>
 8008378:	f10c 0203 	add.w	r2, ip, #3
 800837c:	1b52      	subs	r2, r2, r5
 800837e:	f022 0203 	bic.w	r2, r2, #3
 8008382:	3d03      	subs	r5, #3
 8008384:	45ac      	cmp	ip, r5
 8008386:	bf38      	it	cc
 8008388:	2200      	movcc	r2, #0
 800838a:	4413      	add	r3, r2
 800838c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008390:	b17a      	cbz	r2, 80083b2 <__mdiff+0x106>
 8008392:	6107      	str	r7, [r0, #16]
 8008394:	e7a4      	b.n	80082e0 <__mdiff+0x34>
 8008396:	f856 8b04 	ldr.w	r8, [r6], #4
 800839a:	fa11 f288 	uxtah	r2, r1, r8
 800839e:	1414      	asrs	r4, r2, #16
 80083a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80083a4:	b292      	uxth	r2, r2
 80083a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083aa:	f84e 2b04 	str.w	r2, [lr], #4
 80083ae:	1421      	asrs	r1, r4, #16
 80083b0:	e7e0      	b.n	8008374 <__mdiff+0xc8>
 80083b2:	3f01      	subs	r7, #1
 80083b4:	e7ea      	b.n	800838c <__mdiff+0xe0>
 80083b6:	bf00      	nop
 80083b8:	08009ddc 	.word	0x08009ddc
 80083bc:	08009ded 	.word	0x08009ded

080083c0 <__d2b>:
 80083c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083c4:	460f      	mov	r7, r1
 80083c6:	2101      	movs	r1, #1
 80083c8:	ec59 8b10 	vmov	r8, r9, d0
 80083cc:	4616      	mov	r6, r2
 80083ce:	f7ff fcd5 	bl	8007d7c <_Balloc>
 80083d2:	4604      	mov	r4, r0
 80083d4:	b930      	cbnz	r0, 80083e4 <__d2b+0x24>
 80083d6:	4602      	mov	r2, r0
 80083d8:	4b24      	ldr	r3, [pc, #144]	; (800846c <__d2b+0xac>)
 80083da:	4825      	ldr	r0, [pc, #148]	; (8008470 <__d2b+0xb0>)
 80083dc:	f240 310f 	movw	r1, #783	; 0x30f
 80083e0:	f000 fa78 	bl	80088d4 <__assert_func>
 80083e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ec:	bb2d      	cbnz	r5, 800843a <__d2b+0x7a>
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	f1b8 0300 	subs.w	r3, r8, #0
 80083f4:	d026      	beq.n	8008444 <__d2b+0x84>
 80083f6:	4668      	mov	r0, sp
 80083f8:	9300      	str	r3, [sp, #0]
 80083fa:	f7ff fd87 	bl	8007f0c <__lo0bits>
 80083fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008402:	b1e8      	cbz	r0, 8008440 <__d2b+0x80>
 8008404:	f1c0 0320 	rsb	r3, r0, #32
 8008408:	fa02 f303 	lsl.w	r3, r2, r3
 800840c:	430b      	orrs	r3, r1
 800840e:	40c2      	lsrs	r2, r0
 8008410:	6163      	str	r3, [r4, #20]
 8008412:	9201      	str	r2, [sp, #4]
 8008414:	9b01      	ldr	r3, [sp, #4]
 8008416:	61a3      	str	r3, [r4, #24]
 8008418:	2b00      	cmp	r3, #0
 800841a:	bf14      	ite	ne
 800841c:	2202      	movne	r2, #2
 800841e:	2201      	moveq	r2, #1
 8008420:	6122      	str	r2, [r4, #16]
 8008422:	b1bd      	cbz	r5, 8008454 <__d2b+0x94>
 8008424:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008428:	4405      	add	r5, r0
 800842a:	603d      	str	r5, [r7, #0]
 800842c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008430:	6030      	str	r0, [r6, #0]
 8008432:	4620      	mov	r0, r4
 8008434:	b003      	add	sp, #12
 8008436:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800843a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800843e:	e7d6      	b.n	80083ee <__d2b+0x2e>
 8008440:	6161      	str	r1, [r4, #20]
 8008442:	e7e7      	b.n	8008414 <__d2b+0x54>
 8008444:	a801      	add	r0, sp, #4
 8008446:	f7ff fd61 	bl	8007f0c <__lo0bits>
 800844a:	9b01      	ldr	r3, [sp, #4]
 800844c:	6163      	str	r3, [r4, #20]
 800844e:	3020      	adds	r0, #32
 8008450:	2201      	movs	r2, #1
 8008452:	e7e5      	b.n	8008420 <__d2b+0x60>
 8008454:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008458:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800845c:	6038      	str	r0, [r7, #0]
 800845e:	6918      	ldr	r0, [r3, #16]
 8008460:	f7ff fd34 	bl	8007ecc <__hi0bits>
 8008464:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008468:	e7e2      	b.n	8008430 <__d2b+0x70>
 800846a:	bf00      	nop
 800846c:	08009ddc 	.word	0x08009ddc
 8008470:	08009ded 	.word	0x08009ded

08008474 <__ssputs_r>:
 8008474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008478:	688e      	ldr	r6, [r1, #8]
 800847a:	461f      	mov	r7, r3
 800847c:	42be      	cmp	r6, r7
 800847e:	680b      	ldr	r3, [r1, #0]
 8008480:	4682      	mov	sl, r0
 8008482:	460c      	mov	r4, r1
 8008484:	4690      	mov	r8, r2
 8008486:	d82c      	bhi.n	80084e2 <__ssputs_r+0x6e>
 8008488:	898a      	ldrh	r2, [r1, #12]
 800848a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800848e:	d026      	beq.n	80084de <__ssputs_r+0x6a>
 8008490:	6965      	ldr	r5, [r4, #20]
 8008492:	6909      	ldr	r1, [r1, #16]
 8008494:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008498:	eba3 0901 	sub.w	r9, r3, r1
 800849c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084a0:	1c7b      	adds	r3, r7, #1
 80084a2:	444b      	add	r3, r9
 80084a4:	106d      	asrs	r5, r5, #1
 80084a6:	429d      	cmp	r5, r3
 80084a8:	bf38      	it	cc
 80084aa:	461d      	movcc	r5, r3
 80084ac:	0553      	lsls	r3, r2, #21
 80084ae:	d527      	bpl.n	8008500 <__ssputs_r+0x8c>
 80084b0:	4629      	mov	r1, r5
 80084b2:	f7ff fbd7 	bl	8007c64 <_malloc_r>
 80084b6:	4606      	mov	r6, r0
 80084b8:	b360      	cbz	r0, 8008514 <__ssputs_r+0xa0>
 80084ba:	6921      	ldr	r1, [r4, #16]
 80084bc:	464a      	mov	r2, r9
 80084be:	f7fe fcd4 	bl	8006e6a <memcpy>
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	6126      	str	r6, [r4, #16]
 80084d0:	6165      	str	r5, [r4, #20]
 80084d2:	444e      	add	r6, r9
 80084d4:	eba5 0509 	sub.w	r5, r5, r9
 80084d8:	6026      	str	r6, [r4, #0]
 80084da:	60a5      	str	r5, [r4, #8]
 80084dc:	463e      	mov	r6, r7
 80084de:	42be      	cmp	r6, r7
 80084e0:	d900      	bls.n	80084e4 <__ssputs_r+0x70>
 80084e2:	463e      	mov	r6, r7
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	4632      	mov	r2, r6
 80084e8:	4641      	mov	r1, r8
 80084ea:	f000 f9c9 	bl	8008880 <memmove>
 80084ee:	68a3      	ldr	r3, [r4, #8]
 80084f0:	1b9b      	subs	r3, r3, r6
 80084f2:	60a3      	str	r3, [r4, #8]
 80084f4:	6823      	ldr	r3, [r4, #0]
 80084f6:	4433      	add	r3, r6
 80084f8:	6023      	str	r3, [r4, #0]
 80084fa:	2000      	movs	r0, #0
 80084fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008500:	462a      	mov	r2, r5
 8008502:	f000 fa2d 	bl	8008960 <_realloc_r>
 8008506:	4606      	mov	r6, r0
 8008508:	2800      	cmp	r0, #0
 800850a:	d1e0      	bne.n	80084ce <__ssputs_r+0x5a>
 800850c:	6921      	ldr	r1, [r4, #16]
 800850e:	4650      	mov	r0, sl
 8008510:	f7ff fb34 	bl	8007b7c <_free_r>
 8008514:	230c      	movs	r3, #12
 8008516:	f8ca 3000 	str.w	r3, [sl]
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008520:	81a3      	strh	r3, [r4, #12]
 8008522:	f04f 30ff 	mov.w	r0, #4294967295
 8008526:	e7e9      	b.n	80084fc <__ssputs_r+0x88>

08008528 <_svfiprintf_r>:
 8008528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800852c:	4698      	mov	r8, r3
 800852e:	898b      	ldrh	r3, [r1, #12]
 8008530:	061b      	lsls	r3, r3, #24
 8008532:	b09d      	sub	sp, #116	; 0x74
 8008534:	4607      	mov	r7, r0
 8008536:	460d      	mov	r5, r1
 8008538:	4614      	mov	r4, r2
 800853a:	d50e      	bpl.n	800855a <_svfiprintf_r+0x32>
 800853c:	690b      	ldr	r3, [r1, #16]
 800853e:	b963      	cbnz	r3, 800855a <_svfiprintf_r+0x32>
 8008540:	2140      	movs	r1, #64	; 0x40
 8008542:	f7ff fb8f 	bl	8007c64 <_malloc_r>
 8008546:	6028      	str	r0, [r5, #0]
 8008548:	6128      	str	r0, [r5, #16]
 800854a:	b920      	cbnz	r0, 8008556 <_svfiprintf_r+0x2e>
 800854c:	230c      	movs	r3, #12
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	f04f 30ff 	mov.w	r0, #4294967295
 8008554:	e0d0      	b.n	80086f8 <_svfiprintf_r+0x1d0>
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	616b      	str	r3, [r5, #20]
 800855a:	2300      	movs	r3, #0
 800855c:	9309      	str	r3, [sp, #36]	; 0x24
 800855e:	2320      	movs	r3, #32
 8008560:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008564:	f8cd 800c 	str.w	r8, [sp, #12]
 8008568:	2330      	movs	r3, #48	; 0x30
 800856a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008710 <_svfiprintf_r+0x1e8>
 800856e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008572:	f04f 0901 	mov.w	r9, #1
 8008576:	4623      	mov	r3, r4
 8008578:	469a      	mov	sl, r3
 800857a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800857e:	b10a      	cbz	r2, 8008584 <_svfiprintf_r+0x5c>
 8008580:	2a25      	cmp	r2, #37	; 0x25
 8008582:	d1f9      	bne.n	8008578 <_svfiprintf_r+0x50>
 8008584:	ebba 0b04 	subs.w	fp, sl, r4
 8008588:	d00b      	beq.n	80085a2 <_svfiprintf_r+0x7a>
 800858a:	465b      	mov	r3, fp
 800858c:	4622      	mov	r2, r4
 800858e:	4629      	mov	r1, r5
 8008590:	4638      	mov	r0, r7
 8008592:	f7ff ff6f 	bl	8008474 <__ssputs_r>
 8008596:	3001      	adds	r0, #1
 8008598:	f000 80a9 	beq.w	80086ee <_svfiprintf_r+0x1c6>
 800859c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800859e:	445a      	add	r2, fp
 80085a0:	9209      	str	r2, [sp, #36]	; 0x24
 80085a2:	f89a 3000 	ldrb.w	r3, [sl]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 80a1 	beq.w	80086ee <_svfiprintf_r+0x1c6>
 80085ac:	2300      	movs	r3, #0
 80085ae:	f04f 32ff 	mov.w	r2, #4294967295
 80085b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085b6:	f10a 0a01 	add.w	sl, sl, #1
 80085ba:	9304      	str	r3, [sp, #16]
 80085bc:	9307      	str	r3, [sp, #28]
 80085be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085c2:	931a      	str	r3, [sp, #104]	; 0x68
 80085c4:	4654      	mov	r4, sl
 80085c6:	2205      	movs	r2, #5
 80085c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085cc:	4850      	ldr	r0, [pc, #320]	; (8008710 <_svfiprintf_r+0x1e8>)
 80085ce:	f7f7 fe27 	bl	8000220 <memchr>
 80085d2:	9a04      	ldr	r2, [sp, #16]
 80085d4:	b9d8      	cbnz	r0, 800860e <_svfiprintf_r+0xe6>
 80085d6:	06d0      	lsls	r0, r2, #27
 80085d8:	bf44      	itt	mi
 80085da:	2320      	movmi	r3, #32
 80085dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085e0:	0711      	lsls	r1, r2, #28
 80085e2:	bf44      	itt	mi
 80085e4:	232b      	movmi	r3, #43	; 0x2b
 80085e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ea:	f89a 3000 	ldrb.w	r3, [sl]
 80085ee:	2b2a      	cmp	r3, #42	; 0x2a
 80085f0:	d015      	beq.n	800861e <_svfiprintf_r+0xf6>
 80085f2:	9a07      	ldr	r2, [sp, #28]
 80085f4:	4654      	mov	r4, sl
 80085f6:	2000      	movs	r0, #0
 80085f8:	f04f 0c0a 	mov.w	ip, #10
 80085fc:	4621      	mov	r1, r4
 80085fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008602:	3b30      	subs	r3, #48	; 0x30
 8008604:	2b09      	cmp	r3, #9
 8008606:	d94d      	bls.n	80086a4 <_svfiprintf_r+0x17c>
 8008608:	b1b0      	cbz	r0, 8008638 <_svfiprintf_r+0x110>
 800860a:	9207      	str	r2, [sp, #28]
 800860c:	e014      	b.n	8008638 <_svfiprintf_r+0x110>
 800860e:	eba0 0308 	sub.w	r3, r0, r8
 8008612:	fa09 f303 	lsl.w	r3, r9, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	9304      	str	r3, [sp, #16]
 800861a:	46a2      	mov	sl, r4
 800861c:	e7d2      	b.n	80085c4 <_svfiprintf_r+0x9c>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	1d19      	adds	r1, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	9103      	str	r1, [sp, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfbb      	ittet	lt
 800862a:	425b      	neglt	r3, r3
 800862c:	f042 0202 	orrlt.w	r2, r2, #2
 8008630:	9307      	strge	r3, [sp, #28]
 8008632:	9307      	strlt	r3, [sp, #28]
 8008634:	bfb8      	it	lt
 8008636:	9204      	strlt	r2, [sp, #16]
 8008638:	7823      	ldrb	r3, [r4, #0]
 800863a:	2b2e      	cmp	r3, #46	; 0x2e
 800863c:	d10c      	bne.n	8008658 <_svfiprintf_r+0x130>
 800863e:	7863      	ldrb	r3, [r4, #1]
 8008640:	2b2a      	cmp	r3, #42	; 0x2a
 8008642:	d134      	bne.n	80086ae <_svfiprintf_r+0x186>
 8008644:	9b03      	ldr	r3, [sp, #12]
 8008646:	1d1a      	adds	r2, r3, #4
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	9203      	str	r2, [sp, #12]
 800864c:	2b00      	cmp	r3, #0
 800864e:	bfb8      	it	lt
 8008650:	f04f 33ff 	movlt.w	r3, #4294967295
 8008654:	3402      	adds	r4, #2
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008720 <_svfiprintf_r+0x1f8>
 800865c:	7821      	ldrb	r1, [r4, #0]
 800865e:	2203      	movs	r2, #3
 8008660:	4650      	mov	r0, sl
 8008662:	f7f7 fddd 	bl	8000220 <memchr>
 8008666:	b138      	cbz	r0, 8008678 <_svfiprintf_r+0x150>
 8008668:	9b04      	ldr	r3, [sp, #16]
 800866a:	eba0 000a 	sub.w	r0, r0, sl
 800866e:	2240      	movs	r2, #64	; 0x40
 8008670:	4082      	lsls	r2, r0
 8008672:	4313      	orrs	r3, r2
 8008674:	3401      	adds	r4, #1
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867c:	4825      	ldr	r0, [pc, #148]	; (8008714 <_svfiprintf_r+0x1ec>)
 800867e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008682:	2206      	movs	r2, #6
 8008684:	f7f7 fdcc 	bl	8000220 <memchr>
 8008688:	2800      	cmp	r0, #0
 800868a:	d038      	beq.n	80086fe <_svfiprintf_r+0x1d6>
 800868c:	4b22      	ldr	r3, [pc, #136]	; (8008718 <_svfiprintf_r+0x1f0>)
 800868e:	bb1b      	cbnz	r3, 80086d8 <_svfiprintf_r+0x1b0>
 8008690:	9b03      	ldr	r3, [sp, #12]
 8008692:	3307      	adds	r3, #7
 8008694:	f023 0307 	bic.w	r3, r3, #7
 8008698:	3308      	adds	r3, #8
 800869a:	9303      	str	r3, [sp, #12]
 800869c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869e:	4433      	add	r3, r6
 80086a0:	9309      	str	r3, [sp, #36]	; 0x24
 80086a2:	e768      	b.n	8008576 <_svfiprintf_r+0x4e>
 80086a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80086a8:	460c      	mov	r4, r1
 80086aa:	2001      	movs	r0, #1
 80086ac:	e7a6      	b.n	80085fc <_svfiprintf_r+0xd4>
 80086ae:	2300      	movs	r3, #0
 80086b0:	3401      	adds	r4, #1
 80086b2:	9305      	str	r3, [sp, #20]
 80086b4:	4619      	mov	r1, r3
 80086b6:	f04f 0c0a 	mov.w	ip, #10
 80086ba:	4620      	mov	r0, r4
 80086bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086c0:	3a30      	subs	r2, #48	; 0x30
 80086c2:	2a09      	cmp	r2, #9
 80086c4:	d903      	bls.n	80086ce <_svfiprintf_r+0x1a6>
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d0c6      	beq.n	8008658 <_svfiprintf_r+0x130>
 80086ca:	9105      	str	r1, [sp, #20]
 80086cc:	e7c4      	b.n	8008658 <_svfiprintf_r+0x130>
 80086ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80086d2:	4604      	mov	r4, r0
 80086d4:	2301      	movs	r3, #1
 80086d6:	e7f0      	b.n	80086ba <_svfiprintf_r+0x192>
 80086d8:	ab03      	add	r3, sp, #12
 80086da:	9300      	str	r3, [sp, #0]
 80086dc:	462a      	mov	r2, r5
 80086de:	4b0f      	ldr	r3, [pc, #60]	; (800871c <_svfiprintf_r+0x1f4>)
 80086e0:	a904      	add	r1, sp, #16
 80086e2:	4638      	mov	r0, r7
 80086e4:	f7fd fe56 	bl	8006394 <_printf_float>
 80086e8:	1c42      	adds	r2, r0, #1
 80086ea:	4606      	mov	r6, r0
 80086ec:	d1d6      	bne.n	800869c <_svfiprintf_r+0x174>
 80086ee:	89ab      	ldrh	r3, [r5, #12]
 80086f0:	065b      	lsls	r3, r3, #25
 80086f2:	f53f af2d 	bmi.w	8008550 <_svfiprintf_r+0x28>
 80086f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086f8:	b01d      	add	sp, #116	; 0x74
 80086fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fe:	ab03      	add	r3, sp, #12
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	462a      	mov	r2, r5
 8008704:	4b05      	ldr	r3, [pc, #20]	; (800871c <_svfiprintf_r+0x1f4>)
 8008706:	a904      	add	r1, sp, #16
 8008708:	4638      	mov	r0, r7
 800870a:	f7fe f8e7 	bl	80068dc <_printf_i>
 800870e:	e7eb      	b.n	80086e8 <_svfiprintf_r+0x1c0>
 8008710:	08009f44 	.word	0x08009f44
 8008714:	08009f4e 	.word	0x08009f4e
 8008718:	08006395 	.word	0x08006395
 800871c:	08008475 	.word	0x08008475
 8008720:	08009f4a 	.word	0x08009f4a

08008724 <__sflush_r>:
 8008724:	898a      	ldrh	r2, [r1, #12]
 8008726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800872a:	4605      	mov	r5, r0
 800872c:	0710      	lsls	r0, r2, #28
 800872e:	460c      	mov	r4, r1
 8008730:	d458      	bmi.n	80087e4 <__sflush_r+0xc0>
 8008732:	684b      	ldr	r3, [r1, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	dc05      	bgt.n	8008744 <__sflush_r+0x20>
 8008738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc02      	bgt.n	8008744 <__sflush_r+0x20>
 800873e:	2000      	movs	r0, #0
 8008740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008746:	2e00      	cmp	r6, #0
 8008748:	d0f9      	beq.n	800873e <__sflush_r+0x1a>
 800874a:	2300      	movs	r3, #0
 800874c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008750:	682f      	ldr	r7, [r5, #0]
 8008752:	6a21      	ldr	r1, [r4, #32]
 8008754:	602b      	str	r3, [r5, #0]
 8008756:	d032      	beq.n	80087be <__sflush_r+0x9a>
 8008758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	075a      	lsls	r2, r3, #29
 800875e:	d505      	bpl.n	800876c <__sflush_r+0x48>
 8008760:	6863      	ldr	r3, [r4, #4]
 8008762:	1ac0      	subs	r0, r0, r3
 8008764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008766:	b10b      	cbz	r3, 800876c <__sflush_r+0x48>
 8008768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800876a:	1ac0      	subs	r0, r0, r3
 800876c:	2300      	movs	r3, #0
 800876e:	4602      	mov	r2, r0
 8008770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008772:	6a21      	ldr	r1, [r4, #32]
 8008774:	4628      	mov	r0, r5
 8008776:	47b0      	blx	r6
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	d106      	bne.n	800878c <__sflush_r+0x68>
 800877e:	6829      	ldr	r1, [r5, #0]
 8008780:	291d      	cmp	r1, #29
 8008782:	d82b      	bhi.n	80087dc <__sflush_r+0xb8>
 8008784:	4a29      	ldr	r2, [pc, #164]	; (800882c <__sflush_r+0x108>)
 8008786:	410a      	asrs	r2, r1
 8008788:	07d6      	lsls	r6, r2, #31
 800878a:	d427      	bmi.n	80087dc <__sflush_r+0xb8>
 800878c:	2200      	movs	r2, #0
 800878e:	6062      	str	r2, [r4, #4]
 8008790:	04d9      	lsls	r1, r3, #19
 8008792:	6922      	ldr	r2, [r4, #16]
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	d504      	bpl.n	80087a2 <__sflush_r+0x7e>
 8008798:	1c42      	adds	r2, r0, #1
 800879a:	d101      	bne.n	80087a0 <__sflush_r+0x7c>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b903      	cbnz	r3, 80087a2 <__sflush_r+0x7e>
 80087a0:	6560      	str	r0, [r4, #84]	; 0x54
 80087a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087a4:	602f      	str	r7, [r5, #0]
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d0c9      	beq.n	800873e <__sflush_r+0x1a>
 80087aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087ae:	4299      	cmp	r1, r3
 80087b0:	d002      	beq.n	80087b8 <__sflush_r+0x94>
 80087b2:	4628      	mov	r0, r5
 80087b4:	f7ff f9e2 	bl	8007b7c <_free_r>
 80087b8:	2000      	movs	r0, #0
 80087ba:	6360      	str	r0, [r4, #52]	; 0x34
 80087bc:	e7c0      	b.n	8008740 <__sflush_r+0x1c>
 80087be:	2301      	movs	r3, #1
 80087c0:	4628      	mov	r0, r5
 80087c2:	47b0      	blx	r6
 80087c4:	1c41      	adds	r1, r0, #1
 80087c6:	d1c8      	bne.n	800875a <__sflush_r+0x36>
 80087c8:	682b      	ldr	r3, [r5, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d0c5      	beq.n	800875a <__sflush_r+0x36>
 80087ce:	2b1d      	cmp	r3, #29
 80087d0:	d001      	beq.n	80087d6 <__sflush_r+0xb2>
 80087d2:	2b16      	cmp	r3, #22
 80087d4:	d101      	bne.n	80087da <__sflush_r+0xb6>
 80087d6:	602f      	str	r7, [r5, #0]
 80087d8:	e7b1      	b.n	800873e <__sflush_r+0x1a>
 80087da:	89a3      	ldrh	r3, [r4, #12]
 80087dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087e0:	81a3      	strh	r3, [r4, #12]
 80087e2:	e7ad      	b.n	8008740 <__sflush_r+0x1c>
 80087e4:	690f      	ldr	r7, [r1, #16]
 80087e6:	2f00      	cmp	r7, #0
 80087e8:	d0a9      	beq.n	800873e <__sflush_r+0x1a>
 80087ea:	0793      	lsls	r3, r2, #30
 80087ec:	680e      	ldr	r6, [r1, #0]
 80087ee:	bf08      	it	eq
 80087f0:	694b      	ldreq	r3, [r1, #20]
 80087f2:	600f      	str	r7, [r1, #0]
 80087f4:	bf18      	it	ne
 80087f6:	2300      	movne	r3, #0
 80087f8:	eba6 0807 	sub.w	r8, r6, r7
 80087fc:	608b      	str	r3, [r1, #8]
 80087fe:	f1b8 0f00 	cmp.w	r8, #0
 8008802:	dd9c      	ble.n	800873e <__sflush_r+0x1a>
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008808:	4643      	mov	r3, r8
 800880a:	463a      	mov	r2, r7
 800880c:	4628      	mov	r0, r5
 800880e:	47b0      	blx	r6
 8008810:	2800      	cmp	r0, #0
 8008812:	dc06      	bgt.n	8008822 <__sflush_r+0xfe>
 8008814:	89a3      	ldrh	r3, [r4, #12]
 8008816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	f04f 30ff 	mov.w	r0, #4294967295
 8008820:	e78e      	b.n	8008740 <__sflush_r+0x1c>
 8008822:	4407      	add	r7, r0
 8008824:	eba8 0800 	sub.w	r8, r8, r0
 8008828:	e7e9      	b.n	80087fe <__sflush_r+0xda>
 800882a:	bf00      	nop
 800882c:	dfbffffe 	.word	0xdfbffffe

08008830 <_fflush_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	690b      	ldr	r3, [r1, #16]
 8008834:	4605      	mov	r5, r0
 8008836:	460c      	mov	r4, r1
 8008838:	b913      	cbnz	r3, 8008840 <_fflush_r+0x10>
 800883a:	2500      	movs	r5, #0
 800883c:	4628      	mov	r0, r5
 800883e:	bd38      	pop	{r3, r4, r5, pc}
 8008840:	b118      	cbz	r0, 800884a <_fflush_r+0x1a>
 8008842:	6a03      	ldr	r3, [r0, #32]
 8008844:	b90b      	cbnz	r3, 800884a <_fflush_r+0x1a>
 8008846:	f7fe f9f7 	bl	8006c38 <__sinit>
 800884a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0f3      	beq.n	800883a <_fflush_r+0xa>
 8008852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008854:	07d0      	lsls	r0, r2, #31
 8008856:	d404      	bmi.n	8008862 <_fflush_r+0x32>
 8008858:	0599      	lsls	r1, r3, #22
 800885a:	d402      	bmi.n	8008862 <_fflush_r+0x32>
 800885c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800885e:	f7fe fb02 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8008862:	4628      	mov	r0, r5
 8008864:	4621      	mov	r1, r4
 8008866:	f7ff ff5d 	bl	8008724 <__sflush_r>
 800886a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800886c:	07da      	lsls	r2, r3, #31
 800886e:	4605      	mov	r5, r0
 8008870:	d4e4      	bmi.n	800883c <_fflush_r+0xc>
 8008872:	89a3      	ldrh	r3, [r4, #12]
 8008874:	059b      	lsls	r3, r3, #22
 8008876:	d4e1      	bmi.n	800883c <_fflush_r+0xc>
 8008878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800887a:	f7fe faf5 	bl	8006e68 <__retarget_lock_release_recursive>
 800887e:	e7dd      	b.n	800883c <_fflush_r+0xc>

08008880 <memmove>:
 8008880:	4288      	cmp	r0, r1
 8008882:	b510      	push	{r4, lr}
 8008884:	eb01 0402 	add.w	r4, r1, r2
 8008888:	d902      	bls.n	8008890 <memmove+0x10>
 800888a:	4284      	cmp	r4, r0
 800888c:	4623      	mov	r3, r4
 800888e:	d807      	bhi.n	80088a0 <memmove+0x20>
 8008890:	1e43      	subs	r3, r0, #1
 8008892:	42a1      	cmp	r1, r4
 8008894:	d008      	beq.n	80088a8 <memmove+0x28>
 8008896:	f811 2b01 	ldrb.w	r2, [r1], #1
 800889a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800889e:	e7f8      	b.n	8008892 <memmove+0x12>
 80088a0:	4402      	add	r2, r0
 80088a2:	4601      	mov	r1, r0
 80088a4:	428a      	cmp	r2, r1
 80088a6:	d100      	bne.n	80088aa <memmove+0x2a>
 80088a8:	bd10      	pop	{r4, pc}
 80088aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80088b2:	e7f7      	b.n	80088a4 <memmove+0x24>

080088b4 <_sbrk_r>:
 80088b4:	b538      	push	{r3, r4, r5, lr}
 80088b6:	4d06      	ldr	r5, [pc, #24]	; (80088d0 <_sbrk_r+0x1c>)
 80088b8:	2300      	movs	r3, #0
 80088ba:	4604      	mov	r4, r0
 80088bc:	4608      	mov	r0, r1
 80088be:	602b      	str	r3, [r5, #0]
 80088c0:	f7f8 ff86 	bl	80017d0 <_sbrk>
 80088c4:	1c43      	adds	r3, r0, #1
 80088c6:	d102      	bne.n	80088ce <_sbrk_r+0x1a>
 80088c8:	682b      	ldr	r3, [r5, #0]
 80088ca:	b103      	cbz	r3, 80088ce <_sbrk_r+0x1a>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	bd38      	pop	{r3, r4, r5, pc}
 80088d0:	200008a0 	.word	0x200008a0

080088d4 <__assert_func>:
 80088d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d6:	4614      	mov	r4, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	4b09      	ldr	r3, [pc, #36]	; (8008900 <__assert_func+0x2c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4605      	mov	r5, r0
 80088e0:	68d8      	ldr	r0, [r3, #12]
 80088e2:	b14c      	cbz	r4, 80088f8 <__assert_func+0x24>
 80088e4:	4b07      	ldr	r3, [pc, #28]	; (8008904 <__assert_func+0x30>)
 80088e6:	9100      	str	r1, [sp, #0]
 80088e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088ec:	4906      	ldr	r1, [pc, #24]	; (8008908 <__assert_func+0x34>)
 80088ee:	462b      	mov	r3, r5
 80088f0:	f000 f872 	bl	80089d8 <fiprintf>
 80088f4:	f000 f882 	bl	80089fc <abort>
 80088f8:	4b04      	ldr	r3, [pc, #16]	; (800890c <__assert_func+0x38>)
 80088fa:	461c      	mov	r4, r3
 80088fc:	e7f3      	b.n	80088e6 <__assert_func+0x12>
 80088fe:	bf00      	nop
 8008900:	20000064 	.word	0x20000064
 8008904:	08009f5f 	.word	0x08009f5f
 8008908:	08009f6c 	.word	0x08009f6c
 800890c:	08009f9a 	.word	0x08009f9a

08008910 <_calloc_r>:
 8008910:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008912:	fba1 2402 	umull	r2, r4, r1, r2
 8008916:	b94c      	cbnz	r4, 800892c <_calloc_r+0x1c>
 8008918:	4611      	mov	r1, r2
 800891a:	9201      	str	r2, [sp, #4]
 800891c:	f7ff f9a2 	bl	8007c64 <_malloc_r>
 8008920:	9a01      	ldr	r2, [sp, #4]
 8008922:	4605      	mov	r5, r0
 8008924:	b930      	cbnz	r0, 8008934 <_calloc_r+0x24>
 8008926:	4628      	mov	r0, r5
 8008928:	b003      	add	sp, #12
 800892a:	bd30      	pop	{r4, r5, pc}
 800892c:	220c      	movs	r2, #12
 800892e:	6002      	str	r2, [r0, #0]
 8008930:	2500      	movs	r5, #0
 8008932:	e7f8      	b.n	8008926 <_calloc_r+0x16>
 8008934:	4621      	mov	r1, r4
 8008936:	f7fe fa18 	bl	8006d6a <memset>
 800893a:	e7f4      	b.n	8008926 <_calloc_r+0x16>

0800893c <__ascii_mbtowc>:
 800893c:	b082      	sub	sp, #8
 800893e:	b901      	cbnz	r1, 8008942 <__ascii_mbtowc+0x6>
 8008940:	a901      	add	r1, sp, #4
 8008942:	b142      	cbz	r2, 8008956 <__ascii_mbtowc+0x1a>
 8008944:	b14b      	cbz	r3, 800895a <__ascii_mbtowc+0x1e>
 8008946:	7813      	ldrb	r3, [r2, #0]
 8008948:	600b      	str	r3, [r1, #0]
 800894a:	7812      	ldrb	r2, [r2, #0]
 800894c:	1e10      	subs	r0, r2, #0
 800894e:	bf18      	it	ne
 8008950:	2001      	movne	r0, #1
 8008952:	b002      	add	sp, #8
 8008954:	4770      	bx	lr
 8008956:	4610      	mov	r0, r2
 8008958:	e7fb      	b.n	8008952 <__ascii_mbtowc+0x16>
 800895a:	f06f 0001 	mvn.w	r0, #1
 800895e:	e7f8      	b.n	8008952 <__ascii_mbtowc+0x16>

08008960 <_realloc_r>:
 8008960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008964:	4680      	mov	r8, r0
 8008966:	4614      	mov	r4, r2
 8008968:	460e      	mov	r6, r1
 800896a:	b921      	cbnz	r1, 8008976 <_realloc_r+0x16>
 800896c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	4611      	mov	r1, r2
 8008972:	f7ff b977 	b.w	8007c64 <_malloc_r>
 8008976:	b92a      	cbnz	r2, 8008984 <_realloc_r+0x24>
 8008978:	f7ff f900 	bl	8007b7c <_free_r>
 800897c:	4625      	mov	r5, r4
 800897e:	4628      	mov	r0, r5
 8008980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008984:	f000 f841 	bl	8008a0a <_malloc_usable_size_r>
 8008988:	4284      	cmp	r4, r0
 800898a:	4607      	mov	r7, r0
 800898c:	d802      	bhi.n	8008994 <_realloc_r+0x34>
 800898e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008992:	d812      	bhi.n	80089ba <_realloc_r+0x5a>
 8008994:	4621      	mov	r1, r4
 8008996:	4640      	mov	r0, r8
 8008998:	f7ff f964 	bl	8007c64 <_malloc_r>
 800899c:	4605      	mov	r5, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	d0ed      	beq.n	800897e <_realloc_r+0x1e>
 80089a2:	42bc      	cmp	r4, r7
 80089a4:	4622      	mov	r2, r4
 80089a6:	4631      	mov	r1, r6
 80089a8:	bf28      	it	cs
 80089aa:	463a      	movcs	r2, r7
 80089ac:	f7fe fa5d 	bl	8006e6a <memcpy>
 80089b0:	4631      	mov	r1, r6
 80089b2:	4640      	mov	r0, r8
 80089b4:	f7ff f8e2 	bl	8007b7c <_free_r>
 80089b8:	e7e1      	b.n	800897e <_realloc_r+0x1e>
 80089ba:	4635      	mov	r5, r6
 80089bc:	e7df      	b.n	800897e <_realloc_r+0x1e>

080089be <__ascii_wctomb>:
 80089be:	b149      	cbz	r1, 80089d4 <__ascii_wctomb+0x16>
 80089c0:	2aff      	cmp	r2, #255	; 0xff
 80089c2:	bf85      	ittet	hi
 80089c4:	238a      	movhi	r3, #138	; 0x8a
 80089c6:	6003      	strhi	r3, [r0, #0]
 80089c8:	700a      	strbls	r2, [r1, #0]
 80089ca:	f04f 30ff 	movhi.w	r0, #4294967295
 80089ce:	bf98      	it	ls
 80089d0:	2001      	movls	r0, #1
 80089d2:	4770      	bx	lr
 80089d4:	4608      	mov	r0, r1
 80089d6:	4770      	bx	lr

080089d8 <fiprintf>:
 80089d8:	b40e      	push	{r1, r2, r3}
 80089da:	b503      	push	{r0, r1, lr}
 80089dc:	4601      	mov	r1, r0
 80089de:	ab03      	add	r3, sp, #12
 80089e0:	4805      	ldr	r0, [pc, #20]	; (80089f8 <fiprintf+0x20>)
 80089e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089e6:	6800      	ldr	r0, [r0, #0]
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	f000 f83f 	bl	8008a6c <_vfiprintf_r>
 80089ee:	b002      	add	sp, #8
 80089f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089f4:	b003      	add	sp, #12
 80089f6:	4770      	bx	lr
 80089f8:	20000064 	.word	0x20000064

080089fc <abort>:
 80089fc:	b508      	push	{r3, lr}
 80089fe:	2006      	movs	r0, #6
 8008a00:	f000 fa0c 	bl	8008e1c <raise>
 8008a04:	2001      	movs	r0, #1
 8008a06:	f7f8 fe6b 	bl	80016e0 <_exit>

08008a0a <_malloc_usable_size_r>:
 8008a0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a0e:	1f18      	subs	r0, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	bfbc      	itt	lt
 8008a14:	580b      	ldrlt	r3, [r1, r0]
 8008a16:	18c0      	addlt	r0, r0, r3
 8008a18:	4770      	bx	lr

08008a1a <__sfputc_r>:
 8008a1a:	6893      	ldr	r3, [r2, #8]
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	b410      	push	{r4}
 8008a22:	6093      	str	r3, [r2, #8]
 8008a24:	da08      	bge.n	8008a38 <__sfputc_r+0x1e>
 8008a26:	6994      	ldr	r4, [r2, #24]
 8008a28:	42a3      	cmp	r3, r4
 8008a2a:	db01      	blt.n	8008a30 <__sfputc_r+0x16>
 8008a2c:	290a      	cmp	r1, #10
 8008a2e:	d103      	bne.n	8008a38 <__sfputc_r+0x1e>
 8008a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a34:	f000 b934 	b.w	8008ca0 <__swbuf_r>
 8008a38:	6813      	ldr	r3, [r2, #0]
 8008a3a:	1c58      	adds	r0, r3, #1
 8008a3c:	6010      	str	r0, [r2, #0]
 8008a3e:	7019      	strb	r1, [r3, #0]
 8008a40:	4608      	mov	r0, r1
 8008a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a46:	4770      	bx	lr

08008a48 <__sfputs_r>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	460f      	mov	r7, r1
 8008a4e:	4614      	mov	r4, r2
 8008a50:	18d5      	adds	r5, r2, r3
 8008a52:	42ac      	cmp	r4, r5
 8008a54:	d101      	bne.n	8008a5a <__sfputs_r+0x12>
 8008a56:	2000      	movs	r0, #0
 8008a58:	e007      	b.n	8008a6a <__sfputs_r+0x22>
 8008a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a5e:	463a      	mov	r2, r7
 8008a60:	4630      	mov	r0, r6
 8008a62:	f7ff ffda 	bl	8008a1a <__sfputc_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d1f3      	bne.n	8008a52 <__sfputs_r+0xa>
 8008a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a6c <_vfiprintf_r>:
 8008a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a70:	460d      	mov	r5, r1
 8008a72:	b09d      	sub	sp, #116	; 0x74
 8008a74:	4614      	mov	r4, r2
 8008a76:	4698      	mov	r8, r3
 8008a78:	4606      	mov	r6, r0
 8008a7a:	b118      	cbz	r0, 8008a84 <_vfiprintf_r+0x18>
 8008a7c:	6a03      	ldr	r3, [r0, #32]
 8008a7e:	b90b      	cbnz	r3, 8008a84 <_vfiprintf_r+0x18>
 8008a80:	f7fe f8da 	bl	8006c38 <__sinit>
 8008a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a86:	07d9      	lsls	r1, r3, #31
 8008a88:	d405      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a8a:	89ab      	ldrh	r3, [r5, #12]
 8008a8c:	059a      	lsls	r2, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_vfiprintf_r+0x2a>
 8008a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a92:	f7fe f9e8 	bl	8006e66 <__retarget_lock_acquire_recursive>
 8008a96:	89ab      	ldrh	r3, [r5, #12]
 8008a98:	071b      	lsls	r3, r3, #28
 8008a9a:	d501      	bpl.n	8008aa0 <_vfiprintf_r+0x34>
 8008a9c:	692b      	ldr	r3, [r5, #16]
 8008a9e:	b99b      	cbnz	r3, 8008ac8 <_vfiprintf_r+0x5c>
 8008aa0:	4629      	mov	r1, r5
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	f000 f93a 	bl	8008d1c <__swsetup_r>
 8008aa8:	b170      	cbz	r0, 8008ac8 <_vfiprintf_r+0x5c>
 8008aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008aac:	07dc      	lsls	r4, r3, #31
 8008aae:	d504      	bpl.n	8008aba <_vfiprintf_r+0x4e>
 8008ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ab4:	b01d      	add	sp, #116	; 0x74
 8008ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	89ab      	ldrh	r3, [r5, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d4f7      	bmi.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ac2:	f7fe f9d1 	bl	8006e68 <__retarget_lock_release_recursive>
 8008ac6:	e7f3      	b.n	8008ab0 <_vfiprintf_r+0x44>
 8008ac8:	2300      	movs	r3, #0
 8008aca:	9309      	str	r3, [sp, #36]	; 0x24
 8008acc:	2320      	movs	r3, #32
 8008ace:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ad6:	2330      	movs	r3, #48	; 0x30
 8008ad8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008c8c <_vfiprintf_r+0x220>
 8008adc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ae0:	f04f 0901 	mov.w	r9, #1
 8008ae4:	4623      	mov	r3, r4
 8008ae6:	469a      	mov	sl, r3
 8008ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aec:	b10a      	cbz	r2, 8008af2 <_vfiprintf_r+0x86>
 8008aee:	2a25      	cmp	r2, #37	; 0x25
 8008af0:	d1f9      	bne.n	8008ae6 <_vfiprintf_r+0x7a>
 8008af2:	ebba 0b04 	subs.w	fp, sl, r4
 8008af6:	d00b      	beq.n	8008b10 <_vfiprintf_r+0xa4>
 8008af8:	465b      	mov	r3, fp
 8008afa:	4622      	mov	r2, r4
 8008afc:	4629      	mov	r1, r5
 8008afe:	4630      	mov	r0, r6
 8008b00:	f7ff ffa2 	bl	8008a48 <__sfputs_r>
 8008b04:	3001      	adds	r0, #1
 8008b06:	f000 80a9 	beq.w	8008c5c <_vfiprintf_r+0x1f0>
 8008b0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b0c:	445a      	add	r2, fp
 8008b0e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b10:	f89a 3000 	ldrb.w	r3, [sl]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80a1 	beq.w	8008c5c <_vfiprintf_r+0x1f0>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b24:	f10a 0a01 	add.w	sl, sl, #1
 8008b28:	9304      	str	r3, [sp, #16]
 8008b2a:	9307      	str	r3, [sp, #28]
 8008b2c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b30:	931a      	str	r3, [sp, #104]	; 0x68
 8008b32:	4654      	mov	r4, sl
 8008b34:	2205      	movs	r2, #5
 8008b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b3a:	4854      	ldr	r0, [pc, #336]	; (8008c8c <_vfiprintf_r+0x220>)
 8008b3c:	f7f7 fb70 	bl	8000220 <memchr>
 8008b40:	9a04      	ldr	r2, [sp, #16]
 8008b42:	b9d8      	cbnz	r0, 8008b7c <_vfiprintf_r+0x110>
 8008b44:	06d1      	lsls	r1, r2, #27
 8008b46:	bf44      	itt	mi
 8008b48:	2320      	movmi	r3, #32
 8008b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b4e:	0713      	lsls	r3, r2, #28
 8008b50:	bf44      	itt	mi
 8008b52:	232b      	movmi	r3, #43	; 0x2b
 8008b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b58:	f89a 3000 	ldrb.w	r3, [sl]
 8008b5c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b5e:	d015      	beq.n	8008b8c <_vfiprintf_r+0x120>
 8008b60:	9a07      	ldr	r2, [sp, #28]
 8008b62:	4654      	mov	r4, sl
 8008b64:	2000      	movs	r0, #0
 8008b66:	f04f 0c0a 	mov.w	ip, #10
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b70:	3b30      	subs	r3, #48	; 0x30
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d94d      	bls.n	8008c12 <_vfiprintf_r+0x1a6>
 8008b76:	b1b0      	cbz	r0, 8008ba6 <_vfiprintf_r+0x13a>
 8008b78:	9207      	str	r2, [sp, #28]
 8008b7a:	e014      	b.n	8008ba6 <_vfiprintf_r+0x13a>
 8008b7c:	eba0 0308 	sub.w	r3, r0, r8
 8008b80:	fa09 f303 	lsl.w	r3, r9, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	9304      	str	r3, [sp, #16]
 8008b88:	46a2      	mov	sl, r4
 8008b8a:	e7d2      	b.n	8008b32 <_vfiprintf_r+0xc6>
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	1d19      	adds	r1, r3, #4
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	9103      	str	r1, [sp, #12]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	bfbb      	ittet	lt
 8008b98:	425b      	neglt	r3, r3
 8008b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b9e:	9307      	strge	r3, [sp, #28]
 8008ba0:	9307      	strlt	r3, [sp, #28]
 8008ba2:	bfb8      	it	lt
 8008ba4:	9204      	strlt	r2, [sp, #16]
 8008ba6:	7823      	ldrb	r3, [r4, #0]
 8008ba8:	2b2e      	cmp	r3, #46	; 0x2e
 8008baa:	d10c      	bne.n	8008bc6 <_vfiprintf_r+0x15a>
 8008bac:	7863      	ldrb	r3, [r4, #1]
 8008bae:	2b2a      	cmp	r3, #42	; 0x2a
 8008bb0:	d134      	bne.n	8008c1c <_vfiprintf_r+0x1b0>
 8008bb2:	9b03      	ldr	r3, [sp, #12]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	9203      	str	r2, [sp, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	bfb8      	it	lt
 8008bbe:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bc2:	3402      	adds	r4, #2
 8008bc4:	9305      	str	r3, [sp, #20]
 8008bc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008c9c <_vfiprintf_r+0x230>
 8008bca:	7821      	ldrb	r1, [r4, #0]
 8008bcc:	2203      	movs	r2, #3
 8008bce:	4650      	mov	r0, sl
 8008bd0:	f7f7 fb26 	bl	8000220 <memchr>
 8008bd4:	b138      	cbz	r0, 8008be6 <_vfiprintf_r+0x17a>
 8008bd6:	9b04      	ldr	r3, [sp, #16]
 8008bd8:	eba0 000a 	sub.w	r0, r0, sl
 8008bdc:	2240      	movs	r2, #64	; 0x40
 8008bde:	4082      	lsls	r2, r0
 8008be0:	4313      	orrs	r3, r2
 8008be2:	3401      	adds	r4, #1
 8008be4:	9304      	str	r3, [sp, #16]
 8008be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bea:	4829      	ldr	r0, [pc, #164]	; (8008c90 <_vfiprintf_r+0x224>)
 8008bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bf0:	2206      	movs	r2, #6
 8008bf2:	f7f7 fb15 	bl	8000220 <memchr>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	d03f      	beq.n	8008c7a <_vfiprintf_r+0x20e>
 8008bfa:	4b26      	ldr	r3, [pc, #152]	; (8008c94 <_vfiprintf_r+0x228>)
 8008bfc:	bb1b      	cbnz	r3, 8008c46 <_vfiprintf_r+0x1da>
 8008bfe:	9b03      	ldr	r3, [sp, #12]
 8008c00:	3307      	adds	r3, #7
 8008c02:	f023 0307 	bic.w	r3, r3, #7
 8008c06:	3308      	adds	r3, #8
 8008c08:	9303      	str	r3, [sp, #12]
 8008c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c0c:	443b      	add	r3, r7
 8008c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c10:	e768      	b.n	8008ae4 <_vfiprintf_r+0x78>
 8008c12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c16:	460c      	mov	r4, r1
 8008c18:	2001      	movs	r0, #1
 8008c1a:	e7a6      	b.n	8008b6a <_vfiprintf_r+0xfe>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	3401      	adds	r4, #1
 8008c20:	9305      	str	r3, [sp, #20]
 8008c22:	4619      	mov	r1, r3
 8008c24:	f04f 0c0a 	mov.w	ip, #10
 8008c28:	4620      	mov	r0, r4
 8008c2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c2e:	3a30      	subs	r2, #48	; 0x30
 8008c30:	2a09      	cmp	r2, #9
 8008c32:	d903      	bls.n	8008c3c <_vfiprintf_r+0x1d0>
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d0c6      	beq.n	8008bc6 <_vfiprintf_r+0x15a>
 8008c38:	9105      	str	r1, [sp, #20]
 8008c3a:	e7c4      	b.n	8008bc6 <_vfiprintf_r+0x15a>
 8008c3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c40:	4604      	mov	r4, r0
 8008c42:	2301      	movs	r3, #1
 8008c44:	e7f0      	b.n	8008c28 <_vfiprintf_r+0x1bc>
 8008c46:	ab03      	add	r3, sp, #12
 8008c48:	9300      	str	r3, [sp, #0]
 8008c4a:	462a      	mov	r2, r5
 8008c4c:	4b12      	ldr	r3, [pc, #72]	; (8008c98 <_vfiprintf_r+0x22c>)
 8008c4e:	a904      	add	r1, sp, #16
 8008c50:	4630      	mov	r0, r6
 8008c52:	f7fd fb9f 	bl	8006394 <_printf_float>
 8008c56:	4607      	mov	r7, r0
 8008c58:	1c78      	adds	r0, r7, #1
 8008c5a:	d1d6      	bne.n	8008c0a <_vfiprintf_r+0x19e>
 8008c5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	d405      	bmi.n	8008c6e <_vfiprintf_r+0x202>
 8008c62:	89ab      	ldrh	r3, [r5, #12]
 8008c64:	059a      	lsls	r2, r3, #22
 8008c66:	d402      	bmi.n	8008c6e <_vfiprintf_r+0x202>
 8008c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008c6a:	f7fe f8fd 	bl	8006e68 <__retarget_lock_release_recursive>
 8008c6e:	89ab      	ldrh	r3, [r5, #12]
 8008c70:	065b      	lsls	r3, r3, #25
 8008c72:	f53f af1d 	bmi.w	8008ab0 <_vfiprintf_r+0x44>
 8008c76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c78:	e71c      	b.n	8008ab4 <_vfiprintf_r+0x48>
 8008c7a:	ab03      	add	r3, sp, #12
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	462a      	mov	r2, r5
 8008c80:	4b05      	ldr	r3, [pc, #20]	; (8008c98 <_vfiprintf_r+0x22c>)
 8008c82:	a904      	add	r1, sp, #16
 8008c84:	4630      	mov	r0, r6
 8008c86:	f7fd fe29 	bl	80068dc <_printf_i>
 8008c8a:	e7e4      	b.n	8008c56 <_vfiprintf_r+0x1ea>
 8008c8c:	08009f44 	.word	0x08009f44
 8008c90:	08009f4e 	.word	0x08009f4e
 8008c94:	08006395 	.word	0x08006395
 8008c98:	08008a49 	.word	0x08008a49
 8008c9c:	08009f4a 	.word	0x08009f4a

08008ca0 <__swbuf_r>:
 8008ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca2:	460e      	mov	r6, r1
 8008ca4:	4614      	mov	r4, r2
 8008ca6:	4605      	mov	r5, r0
 8008ca8:	b118      	cbz	r0, 8008cb2 <__swbuf_r+0x12>
 8008caa:	6a03      	ldr	r3, [r0, #32]
 8008cac:	b90b      	cbnz	r3, 8008cb2 <__swbuf_r+0x12>
 8008cae:	f7fd ffc3 	bl	8006c38 <__sinit>
 8008cb2:	69a3      	ldr	r3, [r4, #24]
 8008cb4:	60a3      	str	r3, [r4, #8]
 8008cb6:	89a3      	ldrh	r3, [r4, #12]
 8008cb8:	071a      	lsls	r2, r3, #28
 8008cba:	d525      	bpl.n	8008d08 <__swbuf_r+0x68>
 8008cbc:	6923      	ldr	r3, [r4, #16]
 8008cbe:	b31b      	cbz	r3, 8008d08 <__swbuf_r+0x68>
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	6922      	ldr	r2, [r4, #16]
 8008cc4:	1a98      	subs	r0, r3, r2
 8008cc6:	6963      	ldr	r3, [r4, #20]
 8008cc8:	b2f6      	uxtb	r6, r6
 8008cca:	4283      	cmp	r3, r0
 8008ccc:	4637      	mov	r7, r6
 8008cce:	dc04      	bgt.n	8008cda <__swbuf_r+0x3a>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f7ff fdac 	bl	8008830 <_fflush_r>
 8008cd8:	b9e0      	cbnz	r0, 8008d14 <__swbuf_r+0x74>
 8008cda:	68a3      	ldr	r3, [r4, #8]
 8008cdc:	3b01      	subs	r3, #1
 8008cde:	60a3      	str	r3, [r4, #8]
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	6022      	str	r2, [r4, #0]
 8008ce6:	701e      	strb	r6, [r3, #0]
 8008ce8:	6962      	ldr	r2, [r4, #20]
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d004      	beq.n	8008cfa <__swbuf_r+0x5a>
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	07db      	lsls	r3, r3, #31
 8008cf4:	d506      	bpl.n	8008d04 <__swbuf_r+0x64>
 8008cf6:	2e0a      	cmp	r6, #10
 8008cf8:	d104      	bne.n	8008d04 <__swbuf_r+0x64>
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	4628      	mov	r0, r5
 8008cfe:	f7ff fd97 	bl	8008830 <_fflush_r>
 8008d02:	b938      	cbnz	r0, 8008d14 <__swbuf_r+0x74>
 8008d04:	4638      	mov	r0, r7
 8008d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 f806 	bl	8008d1c <__swsetup_r>
 8008d10:	2800      	cmp	r0, #0
 8008d12:	d0d5      	beq.n	8008cc0 <__swbuf_r+0x20>
 8008d14:	f04f 37ff 	mov.w	r7, #4294967295
 8008d18:	e7f4      	b.n	8008d04 <__swbuf_r+0x64>
	...

08008d1c <__swsetup_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4b2a      	ldr	r3, [pc, #168]	; (8008dc8 <__swsetup_r+0xac>)
 8008d20:	4605      	mov	r5, r0
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	460c      	mov	r4, r1
 8008d26:	b118      	cbz	r0, 8008d30 <__swsetup_r+0x14>
 8008d28:	6a03      	ldr	r3, [r0, #32]
 8008d2a:	b90b      	cbnz	r3, 8008d30 <__swsetup_r+0x14>
 8008d2c:	f7fd ff84 	bl	8006c38 <__sinit>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d36:	0718      	lsls	r0, r3, #28
 8008d38:	d422      	bmi.n	8008d80 <__swsetup_r+0x64>
 8008d3a:	06d9      	lsls	r1, r3, #27
 8008d3c:	d407      	bmi.n	8008d4e <__swsetup_r+0x32>
 8008d3e:	2309      	movs	r3, #9
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008d46:	81a3      	strh	r3, [r4, #12]
 8008d48:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4c:	e034      	b.n	8008db8 <__swsetup_r+0x9c>
 8008d4e:	0758      	lsls	r0, r3, #29
 8008d50:	d512      	bpl.n	8008d78 <__swsetup_r+0x5c>
 8008d52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d54:	b141      	cbz	r1, 8008d68 <__swsetup_r+0x4c>
 8008d56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	d002      	beq.n	8008d64 <__swsetup_r+0x48>
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f7fe ff0c 	bl	8007b7c <_free_r>
 8008d64:	2300      	movs	r3, #0
 8008d66:	6363      	str	r3, [r4, #52]	; 0x34
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	2300      	movs	r3, #0
 8008d72:	6063      	str	r3, [r4, #4]
 8008d74:	6923      	ldr	r3, [r4, #16]
 8008d76:	6023      	str	r3, [r4, #0]
 8008d78:	89a3      	ldrh	r3, [r4, #12]
 8008d7a:	f043 0308 	orr.w	r3, r3, #8
 8008d7e:	81a3      	strh	r3, [r4, #12]
 8008d80:	6923      	ldr	r3, [r4, #16]
 8008d82:	b94b      	cbnz	r3, 8008d98 <__swsetup_r+0x7c>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008d8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d8e:	d003      	beq.n	8008d98 <__swsetup_r+0x7c>
 8008d90:	4621      	mov	r1, r4
 8008d92:	4628      	mov	r0, r5
 8008d94:	f000 f884 	bl	8008ea0 <__smakebuf_r>
 8008d98:	89a0      	ldrh	r0, [r4, #12]
 8008d9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d9e:	f010 0301 	ands.w	r3, r0, #1
 8008da2:	d00a      	beq.n	8008dba <__swsetup_r+0x9e>
 8008da4:	2300      	movs	r3, #0
 8008da6:	60a3      	str	r3, [r4, #8]
 8008da8:	6963      	ldr	r3, [r4, #20]
 8008daa:	425b      	negs	r3, r3
 8008dac:	61a3      	str	r3, [r4, #24]
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	b943      	cbnz	r3, 8008dc4 <__swsetup_r+0xa8>
 8008db2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008db6:	d1c4      	bne.n	8008d42 <__swsetup_r+0x26>
 8008db8:	bd38      	pop	{r3, r4, r5, pc}
 8008dba:	0781      	lsls	r1, r0, #30
 8008dbc:	bf58      	it	pl
 8008dbe:	6963      	ldrpl	r3, [r4, #20]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	e7f4      	b.n	8008dae <__swsetup_r+0x92>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e7f7      	b.n	8008db8 <__swsetup_r+0x9c>
 8008dc8:	20000064 	.word	0x20000064

08008dcc <_raise_r>:
 8008dcc:	291f      	cmp	r1, #31
 8008dce:	b538      	push	{r3, r4, r5, lr}
 8008dd0:	4604      	mov	r4, r0
 8008dd2:	460d      	mov	r5, r1
 8008dd4:	d904      	bls.n	8008de0 <_raise_r+0x14>
 8008dd6:	2316      	movs	r3, #22
 8008dd8:	6003      	str	r3, [r0, #0]
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008de2:	b112      	cbz	r2, 8008dea <_raise_r+0x1e>
 8008de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008de8:	b94b      	cbnz	r3, 8008dfe <_raise_r+0x32>
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 f830 	bl	8008e50 <_getpid_r>
 8008df0:	462a      	mov	r2, r5
 8008df2:	4601      	mov	r1, r0
 8008df4:	4620      	mov	r0, r4
 8008df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008dfa:	f000 b817 	b.w	8008e2c <_kill_r>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d00a      	beq.n	8008e18 <_raise_r+0x4c>
 8008e02:	1c59      	adds	r1, r3, #1
 8008e04:	d103      	bne.n	8008e0e <_raise_r+0x42>
 8008e06:	2316      	movs	r3, #22
 8008e08:	6003      	str	r3, [r0, #0]
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	e7e7      	b.n	8008dde <_raise_r+0x12>
 8008e0e:	2400      	movs	r4, #0
 8008e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008e14:	4628      	mov	r0, r5
 8008e16:	4798      	blx	r3
 8008e18:	2000      	movs	r0, #0
 8008e1a:	e7e0      	b.n	8008dde <_raise_r+0x12>

08008e1c <raise>:
 8008e1c:	4b02      	ldr	r3, [pc, #8]	; (8008e28 <raise+0xc>)
 8008e1e:	4601      	mov	r1, r0
 8008e20:	6818      	ldr	r0, [r3, #0]
 8008e22:	f7ff bfd3 	b.w	8008dcc <_raise_r>
 8008e26:	bf00      	nop
 8008e28:	20000064 	.word	0x20000064

08008e2c <_kill_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	; (8008e4c <_kill_r+0x20>)
 8008e30:	2300      	movs	r3, #0
 8008e32:	4604      	mov	r4, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	4611      	mov	r1, r2
 8008e38:	602b      	str	r3, [r5, #0]
 8008e3a:	f7f8 fc41 	bl	80016c0 <_kill>
 8008e3e:	1c43      	adds	r3, r0, #1
 8008e40:	d102      	bne.n	8008e48 <_kill_r+0x1c>
 8008e42:	682b      	ldr	r3, [r5, #0]
 8008e44:	b103      	cbz	r3, 8008e48 <_kill_r+0x1c>
 8008e46:	6023      	str	r3, [r4, #0]
 8008e48:	bd38      	pop	{r3, r4, r5, pc}
 8008e4a:	bf00      	nop
 8008e4c:	200008a0 	.word	0x200008a0

08008e50 <_getpid_r>:
 8008e50:	f7f8 bc2e 	b.w	80016b0 <_getpid>

08008e54 <__swhatbuf_r>:
 8008e54:	b570      	push	{r4, r5, r6, lr}
 8008e56:	460c      	mov	r4, r1
 8008e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	b096      	sub	sp, #88	; 0x58
 8008e60:	4615      	mov	r5, r2
 8008e62:	461e      	mov	r6, r3
 8008e64:	da0d      	bge.n	8008e82 <__swhatbuf_r+0x2e>
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008e6c:	f04f 0100 	mov.w	r1, #0
 8008e70:	bf0c      	ite	eq
 8008e72:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008e76:	2340      	movne	r3, #64	; 0x40
 8008e78:	2000      	movs	r0, #0
 8008e7a:	6031      	str	r1, [r6, #0]
 8008e7c:	602b      	str	r3, [r5, #0]
 8008e7e:	b016      	add	sp, #88	; 0x58
 8008e80:	bd70      	pop	{r4, r5, r6, pc}
 8008e82:	466a      	mov	r2, sp
 8008e84:	f000 f848 	bl	8008f18 <_fstat_r>
 8008e88:	2800      	cmp	r0, #0
 8008e8a:	dbec      	blt.n	8008e66 <__swhatbuf_r+0x12>
 8008e8c:	9901      	ldr	r1, [sp, #4]
 8008e8e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008e92:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008e96:	4259      	negs	r1, r3
 8008e98:	4159      	adcs	r1, r3
 8008e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e9e:	e7eb      	b.n	8008e78 <__swhatbuf_r+0x24>

08008ea0 <__smakebuf_r>:
 8008ea0:	898b      	ldrh	r3, [r1, #12]
 8008ea2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ea4:	079d      	lsls	r5, r3, #30
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460c      	mov	r4, r1
 8008eaa:	d507      	bpl.n	8008ebc <__smakebuf_r+0x1c>
 8008eac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	6123      	str	r3, [r4, #16]
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	6163      	str	r3, [r4, #20]
 8008eb8:	b002      	add	sp, #8
 8008eba:	bd70      	pop	{r4, r5, r6, pc}
 8008ebc:	ab01      	add	r3, sp, #4
 8008ebe:	466a      	mov	r2, sp
 8008ec0:	f7ff ffc8 	bl	8008e54 <__swhatbuf_r>
 8008ec4:	9900      	ldr	r1, [sp, #0]
 8008ec6:	4605      	mov	r5, r0
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7fe fecb 	bl	8007c64 <_malloc_r>
 8008ece:	b948      	cbnz	r0, 8008ee4 <__smakebuf_r+0x44>
 8008ed0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ed4:	059a      	lsls	r2, r3, #22
 8008ed6:	d4ef      	bmi.n	8008eb8 <__smakebuf_r+0x18>
 8008ed8:	f023 0303 	bic.w	r3, r3, #3
 8008edc:	f043 0302 	orr.w	r3, r3, #2
 8008ee0:	81a3      	strh	r3, [r4, #12]
 8008ee2:	e7e3      	b.n	8008eac <__smakebuf_r+0xc>
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	6020      	str	r0, [r4, #0]
 8008ee8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eec:	81a3      	strh	r3, [r4, #12]
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	6163      	str	r3, [r4, #20]
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	6120      	str	r0, [r4, #16]
 8008ef6:	b15b      	cbz	r3, 8008f10 <__smakebuf_r+0x70>
 8008ef8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 f81d 	bl	8008f3c <_isatty_r>
 8008f02:	b128      	cbz	r0, 8008f10 <__smakebuf_r+0x70>
 8008f04:	89a3      	ldrh	r3, [r4, #12]
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	f043 0301 	orr.w	r3, r3, #1
 8008f0e:	81a3      	strh	r3, [r4, #12]
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	431d      	orrs	r5, r3
 8008f14:	81a5      	strh	r5, [r4, #12]
 8008f16:	e7cf      	b.n	8008eb8 <__smakebuf_r+0x18>

08008f18 <_fstat_r>:
 8008f18:	b538      	push	{r3, r4, r5, lr}
 8008f1a:	4d07      	ldr	r5, [pc, #28]	; (8008f38 <_fstat_r+0x20>)
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	4604      	mov	r4, r0
 8008f20:	4608      	mov	r0, r1
 8008f22:	4611      	mov	r1, r2
 8008f24:	602b      	str	r3, [r5, #0]
 8008f26:	f7f8 fc2a 	bl	800177e <_fstat>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d102      	bne.n	8008f34 <_fstat_r+0x1c>
 8008f2e:	682b      	ldr	r3, [r5, #0]
 8008f30:	b103      	cbz	r3, 8008f34 <_fstat_r+0x1c>
 8008f32:	6023      	str	r3, [r4, #0]
 8008f34:	bd38      	pop	{r3, r4, r5, pc}
 8008f36:	bf00      	nop
 8008f38:	200008a0 	.word	0x200008a0

08008f3c <_isatty_r>:
 8008f3c:	b538      	push	{r3, r4, r5, lr}
 8008f3e:	4d06      	ldr	r5, [pc, #24]	; (8008f58 <_isatty_r+0x1c>)
 8008f40:	2300      	movs	r3, #0
 8008f42:	4604      	mov	r4, r0
 8008f44:	4608      	mov	r0, r1
 8008f46:	602b      	str	r3, [r5, #0]
 8008f48:	f7f8 fc29 	bl	800179e <_isatty>
 8008f4c:	1c43      	adds	r3, r0, #1
 8008f4e:	d102      	bne.n	8008f56 <_isatty_r+0x1a>
 8008f50:	682b      	ldr	r3, [r5, #0]
 8008f52:	b103      	cbz	r3, 8008f56 <_isatty_r+0x1a>
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	200008a0 	.word	0x200008a0

08008f5c <_init>:
 8008f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f5e:	bf00      	nop
 8008f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f62:	bc08      	pop	{r3}
 8008f64:	469e      	mov	lr, r3
 8008f66:	4770      	bx	lr

08008f68 <_fini>:
 8008f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6a:	bf00      	nop
 8008f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f6e:	bc08      	pop	{r3}
 8008f70:	469e      	mov	lr, r3
 8008f72:	4770      	bx	lr
