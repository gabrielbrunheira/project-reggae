
poc_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005338  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e0c  08005518  08005518  00015518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006324  08006324  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800632c  0800632c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800632c  0800632c  0001632c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006330  08006330  00016330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000005c  08006390  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08006390  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014102  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b46  00000000  00000000  000341d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001090  00000000  00000000  00036d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc9  00000000  00000000  00037da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e34  00000000  00000000  00038a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015434  00000000  00000000  0005f8a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f43c9  00000000  00000000  00074cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000049c4  00000000  00000000  001690a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  0016da68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005500 	.word	0x08005500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005500 	.word	0x08005500

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fc76 	bl	8000eb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f887 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 fa07 	bl	80009dc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ce:	f000 f91d 	bl	800080c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d2:	f000 f8db 	bl	800078c <MX_I2C1_Init>
  MX_RTC_Init();
 80005d6:	f000 f963 	bl	80008a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005da:	f004 f8ef 	bl	80047bc <ssd1306_Init>
  ssd1306_Fill(Black);
 80005de:	2000      	movs	r0, #0
 80005e0:	f004 f956 	bl	8004890 <ssd1306_Fill>

  rtc_date = (RTC_DateTypeDef){.WeekDay = 3, .Date = 7, .Month = 11, .Year = 24};
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <main+0xf8>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <main+0xf8>)
 80005ec:	220b      	movs	r2, #11
 80005ee:	705a      	strb	r2, [r3, #1]
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <main+0xf8>)
 80005f2:	2207      	movs	r2, #7
 80005f4:	709a      	strb	r2, [r3, #2]
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0xf8>)
 80005f8:	2218      	movs	r2, #24
 80005fa:	70da      	strb	r2, [r3, #3]
  rtc_time = (RTC_TimeTypeDef){.Hours = 23, .Minutes = 11, .Seconds= 0};
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <main+0xfc>)
 80005fe:	461a      	mov	r2, r3
 8000600:	2300      	movs	r3, #0
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	6053      	str	r3, [r2, #4]
 8000606:	6093      	str	r3, [r2, #8]
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	6113      	str	r3, [r2, #16]
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <main+0xfc>)
 800060e:	2217      	movs	r2, #23
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <main+0xfc>)
 8000614:	220b      	movs	r2, #11
 8000616:	705a      	strb	r2, [r3, #1]

  HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000618:	2200      	movs	r2, #0
 800061a:	4926      	ldr	r1, [pc, #152]	; (80006b4 <main+0xf8>)
 800061c:	4827      	ldr	r0, [pc, #156]	; (80006bc <main+0x100>)
 800061e:	f002 fe0d 	bl	800323c <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000622:	2200      	movs	r2, #0
 8000624:	4924      	ldr	r1, [pc, #144]	; (80006b8 <main+0xfc>)
 8000626:	4825      	ldr	r0, [pc, #148]	; (80006bc <main+0x100>)
 8000628:	f002 fd0f 	bl	800304a <HAL_RTC_SetTime>
  while (1)
  {
	  /** As stated in its comment, HAL_RTC_GetTime() should be called before
	   * HAL_RTC_GetDate() to maintain consistency
	   */
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800062c:	2200      	movs	r2, #0
 800062e:	4922      	ldr	r1, [pc, #136]	; (80006b8 <main+0xfc>)
 8000630:	4822      	ldr	r0, [pc, #136]	; (80006bc <main+0x100>)
 8000632:	f002 fda7 	bl	8003184 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000636:	2200      	movs	r2, #0
 8000638:	491e      	ldr	r1, [pc, #120]	; (80006b4 <main+0xf8>)
 800063a:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0x100>)
 800063c:	f002 fe85 	bl	800334a <HAL_RTC_GetDate>

	  //HAL_RTCEx_GetTimeStamp(&hrtc, &rtc_time, &rtc_date, RTC_FORMAT_BIN);

	  sprintf(sData, "%02d/%02d/%02d", rtc_date.Date, rtc_date.Month, rtc_date.Year);
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <main+0xf8>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	461a      	mov	r2, r3
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <main+0xf8>)
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	4619      	mov	r1, r3
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0xf8>)
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	491a      	ldr	r1, [pc, #104]	; (80006c0 <main+0x104>)
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <main+0x108>)
 8000658:	f004 faae 	bl	8004bb8 <siprintf>
	  sprintf(sTime, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <main+0xfc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <main+0xfc>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	4619      	mov	r1, r3
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <main+0xfc>)
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	460b      	mov	r3, r1
 8000670:	4915      	ldr	r1, [pc, #84]	; (80006c8 <main+0x10c>)
 8000672:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0x110>)
 8000674:	f004 faa0 	bl	8004bb8 <siprintf>

	  ssd1306_SetCursor(2, 3);
 8000678:	2103      	movs	r1, #3
 800067a:	2002      	movs	r0, #2
 800067c:	f004 fa52 	bl	8004b24 <ssd1306_SetCursor>
	  ssd1306_WriteString(sData, Font_7x10, White);
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0x114>)
 8000682:	2201      	movs	r2, #1
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0x108>)
 800068a:	f004 fa25 	bl	8004ad8 <ssd1306_WriteString>

	  ssd1306_SetCursor(2, 20);
 800068e:	2114      	movs	r1, #20
 8000690:	2002      	movs	r0, #2
 8000692:	f004 fa47 	bl	8004b24 <ssd1306_SetCursor>
	  ssd1306_WriteString(sTime, Font_6x8, White);
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <main+0x118>)
 8000698:	2201      	movs	r2, #1
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <main+0x110>)
 80006a0:	f004 fa1a 	bl	8004ad8 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 80006a4:	f004 f90c 	bl	80048c0 <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fc72 	bl	8000f94 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80006b0:	e7bc      	b.n	800062c <main+0x70>
 80006b2:	bf00      	nop
 80006b4:	20000188 	.word	0x20000188
 80006b8:	2000018c 	.word	0x2000018c
 80006bc:	20000160 	.word	0x20000160
 80006c0:	08005518 	.word	0x08005518
 80006c4:	200001a0 	.word	0x200001a0
 80006c8:	08005528 	.word	0x08005528
 80006cc:	200001ac 	.word	0x200001ac
 80006d0:	080062e4 	.word	0x080062e4
 80006d4:	080062d8 	.word	0x080062d8

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f004 fa86 	bl	8004bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 fbf6 	bl	8001eec <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000700:	f001 fbe4 	bl	8001ecc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xb0>)
 8000706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <SystemClock_Config+0xb0>)
 800070c:	f023 0318 	bic.w	r3, r3, #24
 8000710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000714:	2306      	movs	r3, #6
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000732:	2355      	movs	r3, #85	; 0x55
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fc84 	bl	8002054 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000752:	f000 f9e9 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2303      	movs	r3, #3
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2104      	movs	r1, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff82 	bl	8002678 <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077a:	f000 f9d5 	bl	8000b28 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	f000 feca 	bl	8001560 <HAL_I2C_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 f9a9 	bl	8000b28 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_I2C1_Init+0x74>)
 80007da:	f001 fadf 	bl	8001d9c <HAL_I2CEx_ConfigAnalogFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 f9a0 	bl	8000b28 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ec:	f001 fb21 	bl	8001e32 <HAL_I2CEx_ConfigDigitalFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f997 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000078 	.word	0x20000078
 8000804:	40005400 	.word	0x40005400
 8000808:	30a0a7fb 	.word	0x30a0a7fb

0800080c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	f003 f90b 	bl	8003a6a <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f965 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	f003 fea7 	bl	80045b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800086c:	f000 f95c 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f003 fedc 	bl	8004630 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087e:	f000 f953 	bl	8000b28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	f003 fe5d 	bl	8004542 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088e:	f000 f94b 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000cc 	.word	0x200000cc
 800089c:	40008000 	.word	0x40008000

080008a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b090      	sub	sp, #64	; 0x40
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008b6:	2300      	movs	r3, #0
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2228      	movs	r2, #40	; 0x28
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f004 f999 	bl	8004bf8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008c6:	4b42      	ldr	r3, [pc, #264]	; (80009d0 <MX_RTC_Init+0x130>)
 80008c8:	4a42      	ldr	r2, [pc, #264]	; (80009d4 <MX_RTC_Init+0x134>)
 80008ca:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008cc:	4b40      	ldr	r3, [pc, #256]	; (80009d0 <MX_RTC_Init+0x130>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008d2:	4b3f      	ldr	r3, [pc, #252]	; (80009d0 <MX_RTC_Init+0x130>)
 80008d4:	227f      	movs	r2, #127	; 0x7f
 80008d6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008d8:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_RTC_Init+0x130>)
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <MX_RTC_Init+0x130>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <MX_RTC_Init+0x130>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008ea:	4b39      	ldr	r3, [pc, #228]	; (80009d0 <MX_RTC_Init+0x130>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008f0:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_RTC_Init+0x130>)
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008f8:	4b35      	ldr	r3, [pc, #212]	; (80009d0 <MX_RTC_Init+0x130>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008fe:	4834      	ldr	r0, [pc, #208]	; (80009d0 <MX_RTC_Init+0x130>)
 8000900:	f002 fb24 	bl	8002f4c <HAL_RTC_Init>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f90d 	bl	8000b28 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 800090e:	2323      	movs	r3, #35	; 0x23
 8000910:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x32;
 8000914:	2332      	movs	r3, #50	; 0x32
 8000916:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800091a:	2300      	movs	r3, #0
 800091c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0x0;
 8000920:	2300      	movs	r3, #0
 8000922:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000924:	2300      	movs	r3, #0
 8000926:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000928:	2300      	movs	r3, #0
 800092a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800092c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000930:	2201      	movs	r2, #1
 8000932:	4619      	mov	r1, r3
 8000934:	4826      	ldr	r0, [pc, #152]	; (80009d0 <MX_RTC_Init+0x130>)
 8000936:	f002 fb88 	bl	800304a <HAL_RTC_SetTime>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8000940:	f000 f8f2 	bl	8000b28 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000944:	2302      	movs	r3, #2
 8000946:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_NOVEMBER;
 800094a:	2311      	movs	r3, #17
 800094c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x5;
 8000950:	2305      	movs	r3, #5
 8000952:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x24;
 8000956:	2324      	movs	r3, #36	; 0x24
 8000958:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800095c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000960:	2201      	movs	r2, #1
 8000962:	4619      	mov	r1, r3
 8000964:	481a      	ldr	r0, [pc, #104]	; (80009d0 <MX_RTC_Init+0x130>)
 8000966:	f002 fc69 	bl	800323c <HAL_RTC_SetDate>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8000970:	f000 f8da 	bl	8000b28 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000974:	2300      	movs	r3, #0
 8000976:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000978:	2300      	movs	r3, #0
 800097a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x13;
 800097c:	2313      	movs	r3, #19
 800097e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_RTC_Init+0x138>)
 8000986:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000990:	2301      	movs	r3, #1
 8000992:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2201      	movs	r2, #1
 80009a0:	4619      	mov	r1, r3
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <MX_RTC_Init+0x130>)
 80009a4:	f002 fd1e 	bl	80033e4 <HAL_RTC_SetAlarm_IT>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_RTC_Init+0x112>
  {
    Error_Handler();
 80009ae:	f000 f8bb 	bl	8000b28 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_FALLING, RTC_TIMESTAMPPIN_DEFAULT) != HAL_OK)
 80009b2:	2200      	movs	r2, #0
 80009b4:	2108      	movs	r1, #8
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <MX_RTC_Init+0x130>)
 80009b8:	f003 f809 	bl	80039ce <HAL_RTCEx_SetTimeStamp>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 80009c2:	f000 f8b1 	bl	8000b28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80009c6:	bf00      	nop
 80009c8:	3740      	adds	r7, #64	; 0x40
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000160 	.word	0x20000160
 80009d4:	40002800 	.word	0x40002800
 80009d8:	80808000 	.word	0x80808000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b24      	ldr	r3, [pc, #144]	; (8000a84 <MX_GPIO_Init+0xa8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a23      	ldr	r2, [pc, #140]	; (8000a84 <MX_GPIO_Init+0xa8>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b21      	ldr	r3, [pc, #132]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a17      	ldr	r2, [pc, #92]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a11      	ldr	r2, [pc, #68]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_GPIO_Init+0xa8>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a52:	2200      	movs	r2, #0
 8000a54:	2120      	movs	r1, #32
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fd4f 	bl	80014fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2320      	movs	r3, #32
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 0314 	add.w	r3, r7, #20
 8000a72:	4619      	mov	r1, r3
 8000a74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a78:	f000 fbbe 	bl	80011f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3728      	adds	r7, #40	; 0x28
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40021000 	.word	0x40021000

08000a88 <HAL_RTC_AlarmAEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b092      	sub	sp, #72	; 0x48
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	6078      	str	r0, [r7, #4]

  RTC_AlarmTypeDef sAlarm;
  char sTime_Alarm[9], scnt[2];

  HAL_RTC_GetAlarm(hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8000a90:	f107 0118 	add.w	r1, r7, #24
 8000a94:	2300      	movs	r3, #0
 8000a96:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f002 fdcc 	bl	8003638 <HAL_RTC_GetAlarm>

  sprintf(sTime_Alarm, "%02d:%02d:%02d", sAlarm.AlarmTime.Hours,
 8000aa0:	7e3b      	ldrb	r3, [r7, #24]
 8000aa2:	461a      	mov	r2, r3
		  sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 8000aa4:	7e7b      	ldrb	r3, [r7, #25]
  sprintf(sTime_Alarm, "%02d:%02d:%02d", sAlarm.AlarmTime.Hours,
 8000aa6:	4619      	mov	r1, r3
		  sAlarm.AlarmTime.Minutes, sAlarm.AlarmTime.Seconds);
 8000aa8:	7ebb      	ldrb	r3, [r7, #26]
  sprintf(sTime_Alarm, "%02d:%02d:%02d", sAlarm.AlarmTime.Hours,
 8000aaa:	f107 000c 	add.w	r0, r7, #12
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	460b      	mov	r3, r1
 8000ab2:	4919      	ldr	r1, [pc, #100]	; (8000b18 <HAL_RTC_AlarmAEventCallback+0x90>)
 8000ab4:	f004 f880 	bl	8004bb8 <siprintf>
  sprintf(scnt, "%d", cnt++);
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <HAL_RTC_AlarmAEventCallback+0x94>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	1c5a      	adds	r2, r3, #1
 8000abe:	b2d1      	uxtb	r1, r2
 8000ac0:	4a16      	ldr	r2, [pc, #88]	; (8000b1c <HAL_RTC_AlarmAEventCallback+0x94>)
 8000ac2:	7011      	strb	r1, [r2, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	f107 0308 	add.w	r3, r7, #8
 8000aca:	4915      	ldr	r1, [pc, #84]	; (8000b20 <HAL_RTC_AlarmAEventCallback+0x98>)
 8000acc:	4618      	mov	r0, r3
 8000ace:	f004 f873 	bl	8004bb8 <siprintf>

  ssd1306_SetCursor(2, 35);
 8000ad2:	2123      	movs	r1, #35	; 0x23
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	f004 f825 	bl	8004b24 <ssd1306_SetCursor>
  ssd1306_WriteString(sTime_Alarm, Font_6x8, White);
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8000adc:	f107 000c 	add.w	r0, r7, #12
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	9200      	str	r2, [sp, #0]
 8000ae4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000ae6:	f003 fff7 	bl	8004ad8 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 45);
 8000aea:	212d      	movs	r1, #45	; 0x2d
 8000aec:	2002      	movs	r0, #2
 8000aee:	f004 f819 	bl	8004b24 <ssd1306_SetCursor>
  ssd1306_WriteString(scnt, Font_6x8, White);
 8000af2:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <HAL_RTC_AlarmAEventCallback+0x9c>)
 8000af4:	f107 0008 	add.w	r0, r7, #8
 8000af8:	2201      	movs	r2, #1
 8000afa:	9200      	str	r2, [sp, #0]
 8000afc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000afe:	f003 ffeb 	bl	8004ad8 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000b02:	f003 fedd 	bl	80048c0 <ssd1306_UpdateScreen>
    sAlarm.AlarmTime.Seconds=0;
  }else{
    sAlarm.AlarmTime.Seconds=sAlarm.AlarmTime.Seconds+1;
  }
    while(HAL_RTC_SetAlarm_IT(hrtc, &sAlarm, FORMAT_BIN)!=HAL_OK){}*/
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000b06:	2120      	movs	r1, #32
 8000b08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b0c:	f000 fd0e 	bl	800152c <HAL_GPIO_TogglePin>
}
 8000b10:	bf00      	nop
 8000b12:	3740      	adds	r7, #64	; 0x40
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	08005528 	.word	0x08005528
 8000b1c:	200001b5 	.word	0x200001b5
 8000b20:	08005538 	.word	0x08005538
 8000b24:	080062d8 	.word	0x080062d8

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b3e:	4a0e      	ldr	r2, [pc, #56]	; (8000b78 <HAL_MspInit+0x44>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6613      	str	r3, [r2, #96]	; 0x60
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <HAL_MspInit+0x44>)
 8000b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <HAL_MspInit+0x44>)
 8000b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b6a:	f001 fa63 	bl	8002034 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000

08000b7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b09e      	sub	sp, #120	; 0x78
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b88:	2200      	movs	r2, #0
 8000b8a:	601a      	str	r2, [r3, #0]
 8000b8c:	605a      	str	r2, [r3, #4]
 8000b8e:	609a      	str	r2, [r3, #8]
 8000b90:	60da      	str	r2, [r3, #12]
 8000b92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b94:	f107 0310 	add.w	r3, r7, #16
 8000b98:	2254      	movs	r2, #84	; 0x54
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f004 f82b 	bl	8004bf8 <memset>
  if(hi2c->Instance==I2C1)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a1f      	ldr	r2, [pc, #124]	; (8000c24 <HAL_I2C_MspInit+0xa8>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d136      	bne.n	8000c1a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bac:	2340      	movs	r3, #64	; 0x40
 8000bae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 ff79 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000bc4:	f7ff ffb0 	bl	8000b28 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000bce:	f043 0302 	orr.w	r3, r3, #2
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be6:	2312      	movs	r3, #18
 8000be8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_I2C_MspInit+0xb0>)
 8000bfe:	f000 fafb 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_I2C_MspInit+0xac>)
 8000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c16:	60bb      	str	r3, [r7, #8]
 8000c18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c1a:	bf00      	nop
 8000c1c:	3778      	adds	r7, #120	; 0x78
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b09e      	sub	sp, #120	; 0x78
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2254      	movs	r2, #84	; 0x54
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f003 ffd1 	bl	8004bf8 <memset>
  if(huart->Instance==LPUART1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a1f      	ldr	r2, [pc, #124]	; (8000cd8 <HAL_UART_MspInit+0xa8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d136      	bne.n	8000cce <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000c60:	2320      	movs	r3, #32
 8000c62:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000c64:	2300      	movs	r3, #0
 8000c66:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c68:	f107 0310 	add.w	r3, r7, #16
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f001 ff1f 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c78:	f7ff ff56 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c82:	f043 0301 	orr.w	r3, r3, #1
 8000c86:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000c88:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000c8c:	f003 0301 	and.w	r3, r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	4a10      	ldr	r2, [pc, #64]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000c9a:	f043 0301 	orr.w	r3, r3, #1
 8000c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <HAL_UART_MspInit+0xac>)
 8000ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca4:	f003 0301 	and.w	r3, r3, #1
 8000ca8:	60bb      	str	r3, [r7, #8]
 8000caa:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000cac:	230c      	movs	r3, #12
 8000cae:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cca:	f000 fa95 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	3778      	adds	r7, #120	; 0x78
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40008000 	.word	0x40008000
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b098      	sub	sp, #96	; 0x60
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	2254      	movs	r2, #84	; 0x54
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 ff81 	bl	8004bf8 <memset>
  if(hrtc->Instance==RTC)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_RTC_MspInit+0x80>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d12b      	bne.n	8000d58 <HAL_RTC_MspInit+0x78>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d00:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000d04:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4618      	mov	r0, r3
 8000d12:	f001 fecd 	bl	8002ab0 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000d1c:	f7ff ff04 	bl	8000b28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d20:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_RTC_MspInit+0x84>)
 8000d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_RTC_MspInit+0x84>)
 8000d28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <HAL_RTC_MspInit+0x84>)
 8000d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d34:	4a0b      	ldr	r2, [pc, #44]	; (8000d64 <HAL_RTC_MspInit+0x84>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_RTC_MspInit+0x84>)
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d44:	60bb      	str	r3, [r7, #8]
 8000d46:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2029      	movs	r0, #41	; 0x29
 8000d4e:	f000 fa1e 	bl	800118e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000d52:	2029      	movs	r0, #41	; 0x29
 8000d54:	f000 fa35 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3760      	adds	r7, #96	; 0x60
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40002800 	.word	0x40002800
 8000d64:	40021000 	.word	0x40021000

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000db4:	f000 f8d0 	bl	8000f58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000dc0:	4802      	ldr	r0, [pc, #8]	; (8000dcc <RTC_Alarm_IRQHandler+0x10>)
 8000dc2:	f002 fcf9 	bl	80037b8 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000160 	.word	0x20000160

08000dd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <_sbrk+0x5c>)
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <_sbrk+0x60>)
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000de4:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <_sbrk+0x64>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d102      	bne.n	8000df2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <_sbrk+0x64>)
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <_sbrk+0x68>)
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000df2:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <_sbrk+0x64>)
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4413      	add	r3, r2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d207      	bcs.n	8000e10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e00:	f003 ff02 	bl	8004c08 <__errno>
 8000e04:	4603      	mov	r3, r0
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	e009      	b.n	8000e24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e10:	4b08      	ldr	r3, [pc, #32]	; (8000e34 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e16:	4b07      	ldr	r3, [pc, #28]	; (8000e34 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <_sbrk+0x64>)
 8000e20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20020000 	.word	0x20020000
 8000e30:	00000400 	.word	0x00000400
 8000e34:	200001b8 	.word	0x200001b8
 8000e38:	20000510 	.word	0x20000510

08000e3c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <SystemInit+0x20>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <SystemInit+0x20>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e60:	480d      	ldr	r0, [pc, #52]	; (8000e98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e64:	f7ff ffea 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e6a:	490d      	ldr	r1, [pc, #52]	; (8000ea0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LoopForever+0xe>)
  movs r3, #0
 8000e6e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e70:	e002      	b.n	8000e78 <LoopCopyDataInit>

08000e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e76:	3304      	adds	r3, #4

08000e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e7c:	d3f9      	bcc.n	8000e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7e:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e80:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <LoopForever+0x16>)
  movs r3, #0
 8000e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e84:	e001      	b.n	8000e8a <LoopFillZerobss>

08000e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e88:	3204      	adds	r2, #4

08000e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e8c:	d3fb      	bcc.n	8000e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f003 fec1 	bl	8004c14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e92:	f7ff fb93 	bl	80005bc <main>

08000e96 <LoopForever>:

LoopForever:
    b LoopForever
 8000e96:	e7fe      	b.n	8000e96 <LoopForever>
  ldr   r0, =_estack
 8000e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ea4:	08006334 	.word	0x08006334
  ldr r2, =_sbss
 8000ea8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000eac:	20000510 	.word	0x20000510

08000eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000eb0:	e7fe      	b.n	8000eb0 <ADC1_2_IRQHandler>

08000eb2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b082      	sub	sp, #8
 8000eb6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f95b 	bl	8001178 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f000 f80e 	bl	8000ee4 <HAL_InitTick>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d002      	beq.n	8000ed4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	71fb      	strb	r3, [r7, #7]
 8000ed2:	e001      	b.n	8000ed8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ed4:	f7ff fe2e 	bl	8000b34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed8:	79fb      	ldrb	r3, [r7, #7]

}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eec:	2300      	movs	r3, #0
 8000eee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <HAL_InitTick+0x68>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d022      	beq.n	8000f3e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <HAL_InitTick+0x6c>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b13      	ldr	r3, [pc, #76]	; (8000f4c <HAL_InitTick+0x68>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f04:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f966 	bl	80011de <HAL_SYSTICK_Config>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d10f      	bne.n	8000f38 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d809      	bhi.n	8000f32 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	f04f 30ff 	mov.w	r0, #4294967295
 8000f26:	f000 f932 	bl	800118e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0x70>)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6013      	str	r3, [r2, #0]
 8000f30:	e007      	b.n	8000f42 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	e004      	b.n	8000f42 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
 8000f3c:	e001      	b.n	8000f42 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3710      	adds	r7, #16
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000004 	.word	0x20000004

08000f58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f5c:	4b05      	ldr	r3, [pc, #20]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <HAL_IncTick+0x20>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a03      	ldr	r2, [pc, #12]	; (8000f74 <HAL_IncTick+0x1c>)
 8000f68:	6013      	str	r3, [r2, #0]
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	200001bc 	.word	0x200001bc
 8000f78:	20000008 	.word	0x20000008

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	200001bc 	.word	0x200001bc

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d004      	beq.n	8000fb8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b09      	ldr	r3, [pc, #36]	; (8000fd4 <HAL_Delay+0x40>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fb8:	bf00      	nop
 8000fba:	f7ff ffdf 	bl	8000f7c <HAL_GetTick>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	1ad3      	subs	r3, r2, r3
 8000fc4:	68fa      	ldr	r2, [r7, #12]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d8f7      	bhi.n	8000fba <HAL_Delay+0x26>
  {
  }
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000008 	.word	0x20000008

08000fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe8:	4b0c      	ldr	r3, [pc, #48]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001000:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001008:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100a:	4a04      	ldr	r2, [pc, #16]	; (800101c <__NVIC_SetPriorityGrouping+0x44>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	60d3      	str	r3, [r2, #12]
}
 8001010:	bf00      	nop
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4907      	ldr	r1, [pc, #28]	; (8001074 <__NVIC_EnableIRQ+0x38>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e100 	.word	0xe000e100

08001078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	6039      	str	r1, [r7, #0]
 8001082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	2b00      	cmp	r3, #0
 800108a:	db0a      	blt.n	80010a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	490c      	ldr	r1, [pc, #48]	; (80010c4 <__NVIC_SetPriority+0x4c>)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	0112      	lsls	r2, r2, #4
 8001098:	b2d2      	uxtb	r2, r2
 800109a:	440b      	add	r3, r1
 800109c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a0:	e00a      	b.n	80010b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	b2da      	uxtb	r2, r3
 80010a6:	4908      	ldr	r1, [pc, #32]	; (80010c8 <__NVIC_SetPriority+0x50>)
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	f003 030f 	and.w	r3, r3, #15
 80010ae:	3b04      	subs	r3, #4
 80010b0:	0112      	lsls	r2, r2, #4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	440b      	add	r3, r1
 80010b6:	761a      	strb	r2, [r3, #24]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	e000e100 	.word	0xe000e100
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b089      	sub	sp, #36	; 0x24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60f8      	str	r0, [r7, #12]
 80010d4:	60b9      	str	r1, [r7, #8]
 80010d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	f1c3 0307 	rsb	r3, r3, #7
 80010e6:	2b04      	cmp	r3, #4
 80010e8:	bf28      	it	cs
 80010ea:	2304      	movcs	r3, #4
 80010ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	3304      	adds	r3, #4
 80010f2:	2b06      	cmp	r3, #6
 80010f4:	d902      	bls.n	80010fc <NVIC_EncodePriority+0x30>
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3b03      	subs	r3, #3
 80010fa:	e000      	b.n	80010fe <NVIC_EncodePriority+0x32>
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43da      	mvns	r2, r3
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	401a      	ands	r2, r3
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001114:	f04f 31ff 	mov.w	r1, #4294967295
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa01 f303 	lsl.w	r3, r1, r3
 800111e:	43d9      	mvns	r1, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001124:	4313      	orrs	r3, r2
         );
}
 8001126:	4618      	mov	r0, r3
 8001128:	3724      	adds	r7, #36	; 0x24
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001144:	d301      	bcc.n	800114a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001146:	2301      	movs	r3, #1
 8001148:	e00f      	b.n	800116a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <SysTick_Config+0x40>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3b01      	subs	r3, #1
 8001150:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001152:	210f      	movs	r1, #15
 8001154:	f04f 30ff 	mov.w	r0, #4294967295
 8001158:	f7ff ff8e 	bl	8001078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800115c:	4b05      	ldr	r3, [pc, #20]	; (8001174 <SysTick_Config+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001162:	4b04      	ldr	r3, [pc, #16]	; (8001174 <SysTick_Config+0x40>)
 8001164:	2207      	movs	r2, #7
 8001166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	e000e010 	.word	0xe000e010

08001178 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff ff29 	bl	8000fd8 <__NVIC_SetPriorityGrouping>
}
 8001186:	bf00      	nop
 8001188:	3708      	adds	r7, #8
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b086      	sub	sp, #24
 8001192:	af00      	add	r7, sp, #0
 8001194:	4603      	mov	r3, r0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff40 	bl	8001020 <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff90 	bl	80010cc <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5f 	bl	8001078 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff33 	bl	800103c <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa4 	bl	8001134 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
	...

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b087      	sub	sp, #28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001206:	e15a      	b.n	80014be <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	2101      	movs	r1, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa01 f303 	lsl.w	r3, r1, r3
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	f000 814c 	beq.w	80014b8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b01      	cmp	r3, #1
 800122a:	d005      	beq.n	8001238 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001234:	2b02      	cmp	r3, #2
 8001236:	d130      	bne.n	800129a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2203      	movs	r2, #3
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	4013      	ands	r3, r2
 800124e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800126e:	2201      	movs	r2, #1
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	091b      	lsrs	r3, r3, #4
 8001284:	f003 0201 	and.w	r2, r3, #1
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	fa02 f303 	lsl.w	r3, r2, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f003 0303 	and.w	r3, r3, #3
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d017      	beq.n	80012d6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	2203      	movs	r2, #3
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43db      	mvns	r3, r3
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4013      	ands	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d123      	bne.n	800132a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	08da      	lsrs	r2, r3, #3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3208      	adds	r2, #8
 80012ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	220f      	movs	r2, #15
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	691a      	ldr	r2, [r3, #16]
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	08da      	lsrs	r2, r3, #3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3208      	adds	r2, #8
 8001324:	6939      	ldr	r1, [r7, #16]
 8001326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	2203      	movs	r2, #3
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 0203 	and.w	r2, r3, #3
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 80a6 	beq.w	80014b8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136c:	4b5b      	ldr	r3, [pc, #364]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 800136e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001370:	4a5a      	ldr	r2, [pc, #360]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 8001372:	f043 0301 	orr.w	r3, r3, #1
 8001376:	6613      	str	r3, [r2, #96]	; 0x60
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 800137a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001384:	4a56      	ldr	r2, [pc, #344]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3302      	adds	r3, #2
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ae:	d01f      	beq.n	80013f0 <HAL_GPIO_Init+0x1f8>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4c      	ldr	r2, [pc, #304]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d019      	beq.n	80013ec <HAL_GPIO_Init+0x1f4>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4b      	ldr	r2, [pc, #300]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1f0>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4a      	ldr	r2, [pc, #296]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1ec>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a49      	ldr	r2, [pc, #292]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1e8>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a48      	ldr	r2, [pc, #288]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1e4>
 80013d8:	2305      	movs	r3, #5
 80013da:	e00a      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013dc:	2306      	movs	r3, #6
 80013de:	e008      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e0:	2304      	movs	r3, #4
 80013e2:	e006      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e4:	2303      	movs	r3, #3
 80013e6:	e004      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013e8:	2302      	movs	r3, #2
 80013ea:	e002      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013f0:	2300      	movs	r3, #0
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	f002 0203 	and.w	r2, r2, #3
 80013f8:	0092      	lsls	r2, r2, #2
 80013fa:	4093      	lsls	r3, r2
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001402:	4937      	ldr	r1, [pc, #220]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	089b      	lsrs	r3, r3, #2
 8001408:	3302      	adds	r3, #2
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001410:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	43db      	mvns	r3, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4313      	orrs	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001434:	4a30      	ldr	r2, [pc, #192]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800143a:	4b2f      	ldr	r3, [pc, #188]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4313      	orrs	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800145e:	4a26      	ldr	r2, [pc, #152]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001464:	4b24      	ldr	r3, [pc, #144]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001488:	4a1b      	ldr	r2, [pc, #108]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800148e:	4b1a      	ldr	r3, [pc, #104]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	43db      	mvns	r3, r3
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4013      	ands	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014b2:	4a11      	ldr	r2, [pc, #68]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f47f ae9d 	bne.w	8001208 <HAL_GPIO_Init+0x10>
  }
}
 80014ce:	bf00      	nop
 80014d0:	bf00      	nop
 80014d2:	371c      	adds	r7, #28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40021000 	.word	0x40021000
 80014e0:	40010000 	.word	0x40010000
 80014e4:	48000400 	.word	0x48000400
 80014e8:	48000800 	.word	0x48000800
 80014ec:	48000c00 	.word	0x48000c00
 80014f0:	48001000 	.word	0x48001000
 80014f4:	48001400 	.word	0x48001400
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800150c:	787b      	ldrb	r3, [r7, #1]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001518:	e002      	b.n	8001520 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	4013      	ands	r3, r2
 8001544:	041a      	lsls	r2, r3, #16
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43d9      	mvns	r1, r3
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	400b      	ands	r3, r1
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	619a      	str	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e08d      	b.n	800168e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d106      	bne.n	800158c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff faf8 	bl	8000b7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2224      	movs	r2, #36	; 0x24
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f022 0201 	bic.w	r2, r2, #1
 80015a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d107      	bne.n	80015da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	e006      	b.n	80015e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689a      	ldr	r2, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80015e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d108      	bne.n	8001602 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	685a      	ldr	r2, [r3, #4]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015fe:	605a      	str	r2, [r3, #4]
 8001600:	e007      	b.n	8001612 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001610:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001634:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691a      	ldr	r2, [r3, #16]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69d9      	ldr	r1, [r3, #28]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	430a      	orrs	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2220      	movs	r2, #32
 800167a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	817b      	strh	r3, [r7, #10]
 80016aa:	460b      	mov	r3, r1
 80016ac:	813b      	strh	r3, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b20      	cmp	r3, #32
 80016bc:	f040 80f9 	bne.w	80018b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d002      	beq.n	80016cc <HAL_I2C_Mem_Write+0x34>
 80016c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0ed      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d101      	bne.n	80016e6 <HAL_I2C_Mem_Write+0x4e>
 80016e2:	2302      	movs	r3, #2
 80016e4:	e0e6      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2201      	movs	r2, #1
 80016ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016ee:	f7ff fc45 	bl	8000f7c <HAL_GetTick>
 80016f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	2319      	movs	r3, #25
 80016fa:	2201      	movs	r2, #1
 80016fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f955 	bl	80019b0 <I2C_WaitOnFlagUntilTimeout>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0d1      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2221      	movs	r2, #33	; 0x21
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2240      	movs	r2, #64	; 0x40
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	6a3a      	ldr	r2, [r7, #32]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001738:	88f8      	ldrh	r0, [r7, #6]
 800173a:	893a      	ldrh	r2, [r7, #8]
 800173c:	8979      	ldrh	r1, [r7, #10]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	9301      	str	r3, [sp, #4]
 8001742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4603      	mov	r3, r0
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f000 f8b9 	bl	80018c0 <I2C_RequestMemoryWrite>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0a9      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001764:	b29b      	uxth	r3, r3
 8001766:	2bff      	cmp	r3, #255	; 0xff
 8001768:	d90e      	bls.n	8001788 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001774:	b2da      	uxtb	r2, r3
 8001776:	8979      	ldrh	r1, [r7, #10]
 8001778:	2300      	movs	r3, #0
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f000 fad9 	bl	8001d38 <I2C_TransferConfig>
 8001786:	e00f      	b.n	80017a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800178c:	b29a      	uxth	r2, r3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001796:	b2da      	uxtb	r2, r3
 8001798:	8979      	ldrh	r1, [r7, #10]
 800179a:	2300      	movs	r3, #0
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 fac8 	bl	8001d38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f000 f958 	bl	8001a62 <I2C_WaitOnTXISFlagUntilTimeout>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e07b      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	3b01      	subs	r3, #1
 80017da:	b29a      	uxth	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	3b01      	subs	r3, #1
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d034      	beq.n	8001860 <HAL_I2C_Mem_Write+0x1c8>
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d130      	bne.n	8001860 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	2200      	movs	r2, #0
 8001806:	2180      	movs	r1, #128	; 0x80
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 f8d1 	bl	80019b0 <I2C_WaitOnFlagUntilTimeout>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e04d      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800181c:	b29b      	uxth	r3, r3
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d90e      	bls.n	8001840 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	22ff      	movs	r2, #255	; 0xff
 8001826:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800182c:	b2da      	uxtb	r2, r3
 800182e:	8979      	ldrh	r1, [r7, #10]
 8001830:	2300      	movs	r3, #0
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001838:	68f8      	ldr	r0, [r7, #12]
 800183a:	f000 fa7d 	bl	8001d38 <I2C_TransferConfig>
 800183e:	e00f      	b.n	8001860 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	2300      	movs	r3, #0
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fa6c 	bl	8001d38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001864:	b29b      	uxth	r3, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	d19e      	bne.n	80017a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 f93e 	bl	8001af0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e01a      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2220      	movs	r2, #32
 8001884:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6859      	ldr	r1, [r3, #4]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b0a      	ldr	r3, [pc, #40]	; (80018bc <HAL_I2C_Mem_Write+0x224>)
 8001892:	400b      	ands	r3, r1
 8001894:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	2200      	movs	r2, #0
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80018b2:	2302      	movs	r3, #2
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	fe00e800 	.word	0xfe00e800

080018c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	4608      	mov	r0, r1
 80018ca:	4611      	mov	r1, r2
 80018cc:	461a      	mov	r2, r3
 80018ce:	4603      	mov	r3, r0
 80018d0:	817b      	strh	r3, [r7, #10]
 80018d2:	460b      	mov	r3, r1
 80018d4:	813b      	strh	r3, [r7, #8]
 80018d6:	4613      	mov	r3, r2
 80018d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	8979      	ldrh	r1, [r7, #10]
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <I2C_RequestMemoryWrite+0xa4>)
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 fa25 	bl	8001d38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	69b9      	ldr	r1, [r7, #24]
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f8b5 	bl	8001a62 <I2C_WaitOnTXISFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e02c      	b.n	800195c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001902:	88fb      	ldrh	r3, [r7, #6]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	629a      	str	r2, [r3, #40]	; 0x28
 8001912:	e015      	b.n	8001940 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001914:	893b      	ldrh	r3, [r7, #8]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2da      	uxtb	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	69b9      	ldr	r1, [r7, #24]
 8001926:	68f8      	ldr	r0, [r7, #12]
 8001928:	f000 f89b 	bl	8001a62 <I2C_WaitOnTXISFlagUntilTimeout>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e012      	b.n	800195c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001936:	893b      	ldrh	r3, [r7, #8]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2200      	movs	r2, #0
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	68f8      	ldr	r0, [r7, #12]
 800194c:	f000 f830 	bl	80019b0 <I2C_WaitOnFlagUntilTimeout>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	80002000 	.word	0x80002000

08001968 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b02      	cmp	r3, #2
 800197c:	d103      	bne.n	8001986 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	2b01      	cmp	r3, #1
 8001992:	d007      	beq.n	80019a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f042 0201 	orr.w	r2, r2, #1
 80019a2:	619a      	str	r2, [r3, #24]
  }
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	603b      	str	r3, [r7, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80019c0:	e03b      	b.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	6839      	ldr	r1, [r7, #0]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	f000 f8d6 	bl	8001b78 <I2C_IsErrorOccurred>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e041      	b.n	8001a5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d02d      	beq.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019de:	f7ff facd 	bl	8000f7c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d302      	bcc.n	80019f4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d122      	bne.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	699a      	ldr	r2, [r3, #24]
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	4013      	ands	r3, r2
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d113      	bne.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f043 0220 	orr.w	r2, r3, #32
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2220      	movs	r2, #32
 8001a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e00f      	b.n	8001a5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	699a      	ldr	r2, [r3, #24]
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4013      	ands	r3, r2
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	bf0c      	ite	eq
 8001a4a:	2301      	moveq	r3, #1
 8001a4c:	2300      	movne	r3, #0
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	79fb      	ldrb	r3, [r7, #7]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d0b4      	beq.n	80019c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b084      	sub	sp, #16
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a6e:	e033      	b.n	8001ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f87f 	bl	8001b78 <I2C_IsErrorOccurred>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e031      	b.n	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a8a:	d025      	beq.n	8001ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a8c:	f7ff fa76 	bl	8000f7c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d302      	bcc.n	8001aa2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d11a      	bne.n	8001ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b02      	cmp	r3, #2
 8001aae:	d013      	beq.n	8001ad8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e007      	b.n	8001ae8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d1c4      	bne.n	8001a70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001ae6:	2300      	movs	r3, #0
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001afc:	e02f      	b.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68b9      	ldr	r1, [r7, #8]
 8001b02:	68f8      	ldr	r0, [r7, #12]
 8001b04:	f000 f838 	bl	8001b78 <I2C_IsErrorOccurred>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e02d      	b.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fa33 	bl	8000f7c <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d302      	bcc.n	8001b28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d11a      	bne.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	d013      	beq.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f043 0220 	orr.w	r2, r3, #32
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e007      	b.n	8001b6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699b      	ldr	r3, [r3, #24]
 8001b64:	f003 0320 	and.w	r3, r3, #32
 8001b68:	2b20      	cmp	r3, #32
 8001b6a:	d1c8      	bne.n	8001afe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d068      	beq.n	8001c76 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2210      	movs	r2, #16
 8001baa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bac:	e049      	b.n	8001c42 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bb4:	d045      	beq.n	8001c42 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bb6:	f7ff f9e1 	bl	8000f7c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d302      	bcc.n	8001bcc <I2C_IsErrorOccurred+0x54>
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d13a      	bne.n	8001c42 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bee:	d121      	bne.n	8001c34 <I2C_IsErrorOccurred+0xbc>
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001bf6:	d01d      	beq.n	8001c34 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001bf8:	7cfb      	ldrb	r3, [r7, #19]
 8001bfa:	2b20      	cmp	r3, #32
 8001bfc:	d01a      	beq.n	8001c34 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c0c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c0e:	f7ff f9b5 	bl	8000f7c <HAL_GetTick>
 8001c12:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c14:	e00e      	b.n	8001c34 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c16:	f7ff f9b1 	bl	8000f7c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b19      	cmp	r3, #25
 8001c22:	d907      	bls.n	8001c34 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001c24:	6a3b      	ldr	r3, [r7, #32]
 8001c26:	f043 0320 	orr.w	r3, r3, #32
 8001c2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001c32:	e006      	b.n	8001c42 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f003 0320 	and.w	r3, r3, #32
 8001c3e:	2b20      	cmp	r3, #32
 8001c40:	d1e9      	bne.n	8001c16 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	f003 0320 	and.w	r3, r3, #32
 8001c4c:	2b20      	cmp	r3, #32
 8001c4e:	d003      	beq.n	8001c58 <I2C_IsErrorOccurred+0xe0>
 8001c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d0aa      	beq.n	8001bae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d103      	bne.n	8001c68 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2220      	movs	r2, #32
 8001c66:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c68:	6a3b      	ldr	r3, [r7, #32]
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001c7e:	69bb      	ldr	r3, [r7, #24]
 8001c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00b      	beq.n	8001ca0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001c88:	6a3b      	ldr	r3, [r7, #32]
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c98:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00b      	beq.n	8001cc2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	f043 0308 	orr.w	r3, r3, #8
 8001cb0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d01c      	beq.n	8001d26 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fe3b 	bl	8001968 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6859      	ldr	r1, [r3, #4]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <I2C_IsErrorOccurred+0x1bc>)
 8001cfe:	400b      	ands	r3, r1
 8001d00:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3728      	adds	r7, #40	; 0x28
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	fe00e800 	.word	0xfe00e800

08001d38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b087      	sub	sp, #28
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	460b      	mov	r3, r1
 8001d44:	817b      	strh	r3, [r7, #10]
 8001d46:	4613      	mov	r3, r2
 8001d48:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d4a:	897b      	ldrh	r3, [r7, #10]
 8001d4c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	041b      	lsls	r3, r3, #16
 8001d54:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d58:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d66:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	0d5b      	lsrs	r3, r3, #21
 8001d72:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <I2C_TransferConfig+0x60>)
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	ea02 0103 	and.w	r1, r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001d8a:	bf00      	nop
 8001d8c:	371c      	adds	r7, #28
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	03ff63ff 	.word	0x03ff63ff

08001d9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b20      	cmp	r3, #32
 8001db0:	d138      	bne.n	8001e24 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e032      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	; 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6819      	ldr	r1, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2220      	movs	r2, #32
 8001e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b085      	sub	sp, #20
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
 8001e3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b20      	cmp	r3, #32
 8001e46:	d139      	bne.n	8001ebc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e033      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2224      	movs	r2, #36	; 0x24
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0201 	bic.w	r2, r2, #1
 8001e74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e84:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2220      	movs	r2, #32
 8001eac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
	...

08001ecc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed0:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40007000 	.word	0x40007000

08001eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b085      	sub	sp, #20
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d141      	bne.n	8001f7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001efa:	4b4b      	ldr	r3, [pc, #300]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d131      	bne.n	8001f6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f08:	4b47      	ldr	r3, [pc, #284]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f0e:	4a46      	ldr	r2, [pc, #280]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f20:	4a41      	ldr	r2, [pc, #260]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f28:	4b40      	ldr	r3, [pc, #256]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2232      	movs	r2, #50	; 0x32
 8001f2e:	fb02 f303 	mul.w	r3, r2, r3
 8001f32:	4a3f      	ldr	r2, [pc, #252]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f34:	fba2 2303 	umull	r2, r3, r2, r3
 8001f38:	0c9b      	lsrs	r3, r3, #18
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f3e:	e002      	b.n	8001f46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f52:	d102      	bne.n	8001f5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d1f2      	bne.n	8001f40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f5a:	4b33      	ldr	r3, [pc, #204]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f66:	d158      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e057      	b.n	800201c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f6c:	4b2e      	ldr	r3, [pc, #184]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f72:	4a2d      	ldr	r2, [pc, #180]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f7c:	e04d      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f84:	d141      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f92:	d131      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f94:	4b24      	ldr	r3, [pc, #144]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9a:	4a23      	ldr	r2, [pc, #140]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fac:	4a1e      	ldr	r2, [pc, #120]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	; (800202c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2232      	movs	r2, #50	; 0x32
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a1c      	ldr	r2, [pc, #112]	; (8002030 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	0c9b      	lsrs	r3, r3, #18
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fca:	e002      	b.n	8001fd2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd2:	4b15      	ldr	r3, [pc, #84]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fde:	d102      	bne.n	8001fe6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f2      	bne.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fe6:	4b10      	ldr	r3, [pc, #64]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff2:	d112      	bne.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e011      	b.n	800201c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002008:	e007      	b.n	800201a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800200a:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002012:	4a05      	ldr	r2, [pc, #20]	; (8002028 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002014:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002018:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800201a:	2300      	movs	r3, #0
}
 800201c:	4618      	mov	r0, r3
 800201e:	3714      	adds	r7, #20
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40007000 	.word	0x40007000
 800202c:	20000000 	.word	0x20000000
 8002030:	431bde83 	.word	0x431bde83

08002034 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002038:	4b05      	ldr	r3, [pc, #20]	; (8002050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800203e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002042:	6093      	str	r3, [r2, #8]
}
 8002044:	bf00      	nop
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40007000 	.word	0x40007000

08002054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b088      	sub	sp, #32
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e2fe      	b.n	8002664 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	2b00      	cmp	r3, #0
 8002070:	d075      	beq.n	800215e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002072:	4b97      	ldr	r3, [pc, #604]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800207c:	4b94      	ldr	r3, [pc, #592]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d102      	bne.n	8002092 <HAL_RCC_OscConfig+0x3e>
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	2b03      	cmp	r3, #3
 8002090:	d002      	beq.n	8002098 <HAL_RCC_OscConfig+0x44>
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b08      	cmp	r3, #8
 8002096:	d10b      	bne.n	80020b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	4b8d      	ldr	r3, [pc, #564]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d05b      	beq.n	800215c <HAL_RCC_OscConfig+0x108>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d157      	bne.n	800215c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e2d9      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b8:	d106      	bne.n	80020c8 <HAL_RCC_OscConfig+0x74>
 80020ba:	4b85      	ldr	r3, [pc, #532]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a84      	ldr	r2, [pc, #528]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e01d      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020d0:	d10c      	bne.n	80020ec <HAL_RCC_OscConfig+0x98>
 80020d2:	4b7f      	ldr	r3, [pc, #508]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	4b7c      	ldr	r3, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a7b      	ldr	r2, [pc, #492]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020e8:	6013      	str	r3, [r2, #0]
 80020ea:	e00b      	b.n	8002104 <HAL_RCC_OscConfig+0xb0>
 80020ec:	4b78      	ldr	r3, [pc, #480]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a77      	ldr	r2, [pc, #476]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020f6:	6013      	str	r3, [r2, #0]
 80020f8:	4b75      	ldr	r3, [pc, #468]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a74      	ldr	r2, [pc, #464]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002102:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d013      	beq.n	8002134 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe ff36 	bl	8000f7c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe ff32 	bl	8000f7c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e29e      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002126:	4b6a      	ldr	r3, [pc, #424]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCC_OscConfig+0xc0>
 8002132:	e014      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002134:	f7fe ff22 	bl	8000f7c <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800213c:	f7fe ff1e 	bl	8000f7c <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b64      	cmp	r3, #100	; 0x64
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e28a      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800214e:	4b60      	ldr	r3, [pc, #384]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0xe8>
 800215a:	e000      	b.n	800215e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800215c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d075      	beq.n	8002256 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800216a:	4b59      	ldr	r3, [pc, #356]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	2b0c      	cmp	r3, #12
 8002182:	d102      	bne.n	800218a <HAL_RCC_OscConfig+0x136>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d002      	beq.n	8002190 <HAL_RCC_OscConfig+0x13c>
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11f      	bne.n	80021d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002190:	4b4f      	ldr	r3, [pc, #316]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_OscConfig+0x154>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e25d      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021a8:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	061b      	lsls	r3, r3, #24
 80021b6:	4946      	ldr	r1, [pc, #280]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80021bc:	4b45      	ldr	r3, [pc, #276]	; (80022d4 <HAL_RCC_OscConfig+0x280>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fe8f 	bl	8000ee4 <HAL_InitTick>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d043      	beq.n	8002254 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e249      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe feca 	bl	8000f7c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fec6 	bl	8000f7c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e232      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220a:	4b31      	ldr	r3, [pc, #196]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	061b      	lsls	r3, r3, #24
 8002218:	492d      	ldr	r1, [pc, #180]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800221a:	4313      	orrs	r3, r2
 800221c:	604b      	str	r3, [r1, #4]
 800221e:	e01a      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002220:	4b2b      	ldr	r3, [pc, #172]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a2a      	ldr	r2, [pc, #168]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222c:	f7fe fea6 	bl	8000f7c <HAL_GetTick>
 8002230:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002234:	f7fe fea2 	bl	8000f7c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e20e      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x1e0>
 8002252:	e000      	b.n	8002256 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002254:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d041      	beq.n	80022e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01c      	beq.n	80022a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800226a:	4b19      	ldr	r3, [pc, #100]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 800226c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002270:	4a17      	ldr	r2, [pc, #92]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227a:	f7fe fe7f 	bl	8000f7c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002280:	e008      	b.n	8002294 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002282:	f7fe fe7b 	bl	8000f7c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d901      	bls.n	8002294 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	e1e7      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 8002296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800229a:	f003 0302 	and.w	r3, r3, #2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d0ef      	beq.n	8002282 <HAL_RCC_OscConfig+0x22e>
 80022a2:	e020      	b.n	80022e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a4:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022aa:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f023 0301 	bic.w	r3, r3, #1
 80022b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7fe fe62 	bl	8000f7c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7fe fe5e 	bl	8000f7c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d906      	bls.n	80022d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e1ca      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
 80022ce:	bf00      	nop
 80022d0:	40021000 	.word	0x40021000
 80022d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022d8:	4b8c      	ldr	r3, [pc, #560]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80022da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ea      	bne.n	80022bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0304 	and.w	r3, r3, #4
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a6 	beq.w	8002440 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022f4:	2300      	movs	r3, #0
 80022f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022f8:	4b84      	ldr	r3, [pc, #528]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_RCC_OscConfig+0x2b4>
 8002304:	2301      	movs	r3, #1
 8002306:	e000      	b.n	800230a <HAL_RCC_OscConfig+0x2b6>
 8002308:	2300      	movs	r3, #0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00d      	beq.n	800232a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a7e      	ldr	r2, [pc, #504]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b7c      	ldr	r3, [pc, #496]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800232a:	4b79      	ldr	r3, [pc, #484]	; (8002510 <HAL_RCC_OscConfig+0x4bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d118      	bne.n	8002368 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002336:	4b76      	ldr	r3, [pc, #472]	; (8002510 <HAL_RCC_OscConfig+0x4bc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a75      	ldr	r2, [pc, #468]	; (8002510 <HAL_RCC_OscConfig+0x4bc>)
 800233c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002342:	f7fe fe1b 	bl	8000f7c <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234a:	f7fe fe17 	bl	8000f7c <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e183      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800235c:	4b6c      	ldr	r3, [pc, #432]	; (8002510 <HAL_RCC_OscConfig+0x4bc>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d108      	bne.n	8002382 <HAL_RCC_OscConfig+0x32e>
 8002370:	4b66      	ldr	r3, [pc, #408]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002376:	4a65      	ldr	r2, [pc, #404]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002380:	e024      	b.n	80023cc <HAL_RCC_OscConfig+0x378>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	2b05      	cmp	r3, #5
 8002388:	d110      	bne.n	80023ac <HAL_RCC_OscConfig+0x358>
 800238a:	4b60      	ldr	r3, [pc, #384]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 800238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002390:	4a5e      	ldr	r2, [pc, #376]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239a:	4b5c      	ldr	r3, [pc, #368]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 800239c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a0:	4a5a      	ldr	r2, [pc, #360]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023aa:	e00f      	b.n	80023cc <HAL_RCC_OscConfig+0x378>
 80023ac:	4b57      	ldr	r3, [pc, #348]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	4a56      	ldr	r2, [pc, #344]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023b4:	f023 0301 	bic.w	r3, r3, #1
 80023b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c2:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d016      	beq.n	8002402 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d4:	f7fe fdd2 	bl	8000f7c <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023dc:	f7fe fdce 	bl	8000f7c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e138      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023f2:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ed      	beq.n	80023dc <HAL_RCC_OscConfig+0x388>
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7fe fdbb 	bl	8000f7c <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7fe fdb7 	bl	8000f7c <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e121      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1ed      	bne.n	800240a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242e:	7ffb      	ldrb	r3, [r7, #31]
 8002430:	2b01      	cmp	r3, #1
 8002432:	d105      	bne.n	8002440 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002434:	4b35      	ldr	r3, [pc, #212]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	4a34      	ldr	r2, [pc, #208]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 800243a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d03c      	beq.n	80024c6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01c      	beq.n	800248e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800245a:	4a2c      	ldr	r2, [pc, #176]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 800245c:	f043 0301 	orr.w	r3, r3, #1
 8002460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002464:	f7fe fd8a 	bl	8000f7c <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800246c:	f7fe fd86 	bl	8000f7c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e0f2      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ef      	beq.n	800246c <HAL_RCC_OscConfig+0x418>
 800248c:	e01b      	b.n	80024c6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800248e:	4b1f      	ldr	r3, [pc, #124]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002494:	4a1d      	ldr	r2, [pc, #116]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 8002496:	f023 0301 	bic.w	r3, r3, #1
 800249a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fd6d 	bl	8000f7c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024a6:	f7fe fd69 	bl	8000f7c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0d5      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024b8:	4b14      	ldr	r3, [pc, #80]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80c9 	beq.w	8002662 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80024d0:	4b0e      	ldr	r3, [pc, #56]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	2b0c      	cmp	r3, #12
 80024da:	f000 8083 	beq.w	80025e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69db      	ldr	r3, [r3, #28]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d15e      	bne.n	80025a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e6:	4b09      	ldr	r3, [pc, #36]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a08      	ldr	r2, [pc, #32]	; (800250c <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fd43 	bl	8000f7c <HAL_GetTick>
 80024f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024f8:	e00c      	b.n	8002514 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024fa:	f7fe fd3f 	bl	8000f7c <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d905      	bls.n	8002514 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0ab      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002514:	4b55      	ldr	r3, [pc, #340]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1ec      	bne.n	80024fa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002520:	4b52      	ldr	r3, [pc, #328]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x61c>)
 8002526:	4013      	ands	r3, r2
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6a11      	ldr	r1, [r2, #32]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002530:	3a01      	subs	r2, #1
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	4311      	orrs	r1, r2
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800253a:	0212      	lsls	r2, r2, #8
 800253c:	4311      	orrs	r1, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002542:	0852      	lsrs	r2, r2, #1
 8002544:	3a01      	subs	r2, #1
 8002546:	0552      	lsls	r2, r2, #21
 8002548:	4311      	orrs	r1, r2
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800254e:	0852      	lsrs	r2, r2, #1
 8002550:	3a01      	subs	r2, #1
 8002552:	0652      	lsls	r2, r2, #25
 8002554:	4311      	orrs	r1, r2
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800255a:	06d2      	lsls	r2, r2, #27
 800255c:	430a      	orrs	r2, r1
 800255e:	4943      	ldr	r1, [pc, #268]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002560:	4313      	orrs	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002564:	4b41      	ldr	r3, [pc, #260]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a40      	ldr	r2, [pc, #256]	; (800266c <HAL_RCC_OscConfig+0x618>)
 800256a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002570:	4b3e      	ldr	r3, [pc, #248]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	4a3d      	ldr	r2, [pc, #244]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fcfe 	bl	8000f7c <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fcfa 	bl	8000f7c <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e066      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002596:	4b35      	ldr	r3, [pc, #212]	; (800266c <HAL_RCC_OscConfig+0x618>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0x530>
 80025a2:	e05e      	b.n	8002662 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a4:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a30      	ldr	r2, [pc, #192]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fce4 	bl	8000f7c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025b8:	f7fe fce0 	bl	8000f7c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e04c      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025d8:	68da      	ldr	r2, [r3, #12]
 80025da:	4924      	ldr	r1, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <HAL_RCC_OscConfig+0x620>)
 80025de:	4013      	ands	r3, r2
 80025e0:	60cb      	str	r3, [r1, #12]
 80025e2:	e03e      	b.n	8002662 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e039      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	; (800266c <HAL_RCC_OscConfig+0x618>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f003 0203 	and.w	r2, r3, #3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	429a      	cmp	r2, r3
 8002602:	d12c      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260e:	3b01      	subs	r3, #1
 8002610:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002612:	429a      	cmp	r2, r3
 8002614:	d123      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002620:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002622:	429a      	cmp	r2, r3
 8002624:	d11b      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002630:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002632:	429a      	cmp	r2, r3
 8002634:	d113      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	085b      	lsrs	r3, r3, #1
 8002642:	3b01      	subs	r3, #1
 8002644:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002646:	429a      	cmp	r2, r3
 8002648:	d109      	bne.n	800265e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002654:	085b      	lsrs	r3, r3, #1
 8002656:	3b01      	subs	r3, #1
 8002658:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3720      	adds	r7, #32
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	019f800c 	.word	0x019f800c
 8002674:	feeefffc 	.word	0xfeeefffc

08002678 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b086      	sub	sp, #24
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e11e      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002690:	4b91      	ldr	r3, [pc, #580]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d910      	bls.n	80026c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b8e      	ldr	r3, [pc, #568]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 020f 	bic.w	r2, r3, #15
 80026a6:	498c      	ldr	r1, [pc, #560]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ae:	4b8a      	ldr	r3, [pc, #552]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 030f 	and.w	r3, r3, #15
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d001      	beq.n	80026c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e106      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d073      	beq.n	80027b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d129      	bne.n	8002728 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d4:	4b81      	ldr	r3, [pc, #516]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0f4      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80026e4:	f000 f99e 	bl	8002a24 <RCC_GetSysClockFreqFromPLLSource>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	4a7c      	ldr	r2, [pc, #496]	; (80028e0 <HAL_RCC_ClockConfig+0x268>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d93f      	bls.n	8002772 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026f2:	4b7a      	ldr	r3, [pc, #488]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d009      	beq.n	8002712 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	d033      	beq.n	8002772 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800270e:	2b00      	cmp	r3, #0
 8002710:	d12f      	bne.n	8002772 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002712:	4b72      	ldr	r3, [pc, #456]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800271a:	4a70      	ldr	r2, [pc, #448]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002720:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	e024      	b.n	8002772 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	2b02      	cmp	r3, #2
 800272e:	d107      	bne.n	8002740 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002730:	4b6a      	ldr	r3, [pc, #424]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d109      	bne.n	8002750 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0c6      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0be      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002750:	f000 f8ce 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8002754:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	4a61      	ldr	r2, [pc, #388]	; (80028e0 <HAL_RCC_ClockConfig+0x268>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d909      	bls.n	8002772 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002766:	4a5d      	ldr	r2, [pc, #372]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800276c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002772:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f023 0203 	bic.w	r2, r3, #3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4957      	ldr	r1, [pc, #348]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002780:	4313      	orrs	r3, r2
 8002782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002784:	f7fe fbfa 	bl	8000f7c <HAL_GetTick>
 8002788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800278a:	e00a      	b.n	80027a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278c:	f7fe fbf6 	bl	8000f7c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	f241 3288 	movw	r2, #5000	; 0x1388
 800279a:	4293      	cmp	r3, r2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e095      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	4b4e      	ldr	r3, [pc, #312]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 020c 	and.w	r2, r3, #12
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d1eb      	bne.n	800278c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d023      	beq.n	8002808 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027cc:	4b43      	ldr	r3, [pc, #268]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4a42      	ldr	r2, [pc, #264]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d007      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80027e4:	4b3d      	ldr	r3, [pc, #244]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80027ec:	4a3b      	ldr	r2, [pc, #236]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b39      	ldr	r3, [pc, #228]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	4936      	ldr	r1, [pc, #216]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
 8002806:	e008      	b.n	800281a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	2b80      	cmp	r3, #128	; 0x80
 800280c:	d105      	bne.n	800281a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800280e:	4b33      	ldr	r3, [pc, #204]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	4a32      	ldr	r2, [pc, #200]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002818:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281a:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d21d      	bcs.n	8002864 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002828:	4b2b      	ldr	r3, [pc, #172]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 020f 	bic.w	r2, r3, #15
 8002830:	4929      	ldr	r1, [pc, #164]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002838:	f7fe fba0 	bl	8000f7c <HAL_GetTick>
 800283c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	e00a      	b.n	8002856 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002840:	f7fe fb9c 	bl	8000f7c <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	f241 3288 	movw	r2, #5000	; 0x1388
 800284e:	4293      	cmp	r3, r2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e03b      	b.n	80028ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <HAL_RCC_ClockConfig+0x260>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 030f 	and.w	r3, r3, #15
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	429a      	cmp	r2, r3
 8002862:	d1ed      	bne.n	8002840 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d008      	beq.n	8002882 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002870:	4b1a      	ldr	r3, [pc, #104]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4917      	ldr	r1, [pc, #92]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d009      	beq.n	80028a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800288e:	4b13      	ldr	r3, [pc, #76]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	00db      	lsls	r3, r3, #3
 800289c:	490f      	ldr	r1, [pc, #60]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a2:	f000 f825 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028a6:	4602      	mov	r2, r0
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <HAL_RCC_ClockConfig+0x264>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	091b      	lsrs	r3, r3, #4
 80028ae:	f003 030f 	and.w	r3, r3, #15
 80028b2:	490c      	ldr	r1, [pc, #48]	; (80028e4 <HAL_RCC_ClockConfig+0x26c>)
 80028b4:	5ccb      	ldrb	r3, [r1, r3]
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	fa22 f303 	lsr.w	r3, r2, r3
 80028be:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x270>)
 80028c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_ClockConfig+0x274>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe fb0c 	bl	8000ee4 <HAL_InitTick>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40021000 	.word	0x40021000
 80028e0:	04c4b400 	.word	0x04c4b400
 80028e4:	0800553c 	.word	0x0800553c
 80028e8:	20000000 	.word	0x20000000
 80028ec:	20000004 	.word	0x20000004

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028f6:	4b2c      	ldr	r3, [pc, #176]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b04      	cmp	r3, #4
 8002900:	d102      	bne.n	8002908 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002902:	4b2a      	ldr	r3, [pc, #168]	; (80029ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002904:	613b      	str	r3, [r7, #16]
 8002906:	e047      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	2b08      	cmp	r3, #8
 8002912:	d102      	bne.n	800291a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002914:	4b26      	ldr	r3, [pc, #152]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	e03e      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800291a:	4b23      	ldr	r3, [pc, #140]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d136      	bne.n	8002994 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3301      	adds	r3, #1
 800293c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d10c      	bne.n	800295e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	fbb2 f3f3 	udiv	r3, r2, r3
 800294c:	4a16      	ldr	r2, [pc, #88]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800294e:	68d2      	ldr	r2, [r2, #12]
 8002950:	0a12      	lsrs	r2, r2, #8
 8002952:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002956:	fb02 f303 	mul.w	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
      break;
 800295c:	e00c      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295e:	4a13      	ldr	r2, [pc, #76]	; (80029ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002968:	68d2      	ldr	r2, [r2, #12]
 800296a:	0a12      	lsrs	r2, r2, #8
 800296c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002970:	fb02 f303 	mul.w	r3, r2, r3
 8002974:	617b      	str	r3, [r7, #20]
      break;
 8002976:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002978:	4b0b      	ldr	r3, [pc, #44]	; (80029a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	0e5b      	lsrs	r3, r3, #25
 800297e:	f003 0303 	and.w	r3, r3, #3
 8002982:	3301      	adds	r3, #1
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	e001      	b.n	8002998 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002998:	693b      	ldr	r3, [r7, #16]
}
 800299a:	4618      	mov	r0, r3
 800299c:	371c      	adds	r7, #28
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
 80029a6:	bf00      	nop
 80029a8:	40021000 	.word	0x40021000
 80029ac:	00f42400 	.word	0x00f42400
 80029b0:	016e3600 	.word	0x016e3600

080029b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029b8:	4b03      	ldr	r3, [pc, #12]	; (80029c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000000 	.word	0x20000000

080029cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80029d0:	f7ff fff0 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 80029d4:	4602      	mov	r2, r0
 80029d6:	4b06      	ldr	r3, [pc, #24]	; (80029f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	0a1b      	lsrs	r3, r3, #8
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	4904      	ldr	r1, [pc, #16]	; (80029f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029e2:	5ccb      	ldrb	r3, [r1, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000
 80029f4:	0800554c 	.word	0x0800554c

080029f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029fc:	f7ff ffda 	bl	80029b4 <HAL_RCC_GetHCLKFreq>
 8002a00:	4602      	mov	r2, r0
 8002a02:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	0adb      	lsrs	r3, r3, #11
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	4904      	ldr	r1, [pc, #16]	; (8002a20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a0e:	5ccb      	ldrb	r3, [r1, r3]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	0800554c 	.word	0x0800554c

08002a24 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b087      	sub	sp, #28
 8002a28:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a2a:	4b1e      	ldr	r3, [pc, #120]	; (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 030f 	and.w	r3, r3, #15
 8002a3e:	3301      	adds	r3, #1
 8002a40:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d10c      	bne.n	8002a62 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a52:	68d2      	ldr	r2, [r2, #12]
 8002a54:	0a12      	lsrs	r2, r2, #8
 8002a56:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a5a:	fb02 f303 	mul.w	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
    break;
 8002a60:	e00c      	b.n	8002a7c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a62:	4a12      	ldr	r2, [pc, #72]	; (8002aac <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4a0e      	ldr	r2, [pc, #56]	; (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a6c:	68d2      	ldr	r2, [r2, #12]
 8002a6e:	0a12      	lsrs	r2, r2, #8
 8002a70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a74:	fb02 f303 	mul.w	r3, r2, r3
 8002a78:	617b      	str	r3, [r7, #20]
    break;
 8002a7a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a7c:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0e5b      	lsrs	r3, r3, #25
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	3301      	adds	r3, #1
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a94:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a96:	687b      	ldr	r3, [r7, #4]
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	371c      	adds	r7, #28
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	016e3600 	.word	0x016e3600
 8002aac:	00f42400 	.word	0x00f42400

08002ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ab8:	2300      	movs	r3, #0
 8002aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2300      	movs	r3, #0
 8002abe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8098 	beq.w	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad2:	4b43      	ldr	r3, [pc, #268]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d10d      	bne.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60bb      	str	r3, [r7, #8]
 8002af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002afa:	4b3a      	ldr	r3, [pc, #232]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a39      	ldr	r2, [pc, #228]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b06:	f7fe fa39 	bl	8000f7c <HAL_GetTick>
 8002b0a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0e:	f7fe fa35 	bl	8000f7c <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d902      	bls.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	74fb      	strb	r3, [r7, #19]
        break;
 8002b20:	e005      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b22:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ef      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d159      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b34:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01e      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d019      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b5a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b5c:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	4a1f      	ldr	r2, [pc, #124]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b72:	4a1b      	ldr	r2, [pc, #108]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b7c:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b8e:	f7fe f9f5 	bl	8000f7c <HAL_GetTick>
 8002b92:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b94:	e00b      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe f9f1 	bl	8000f7c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d902      	bls.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	74fb      	strb	r3, [r7, #19]
            break;
 8002bac:	e006      	b.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d0ec      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd0:	4903      	ldr	r1, [pc, #12]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bd8:	e008      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bda:	7cfb      	ldrb	r3, [r7, #19]
 8002bdc:	74bb      	strb	r3, [r7, #18]
 8002bde:	e005      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002be0:	40021000 	.word	0x40021000
 8002be4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bec:	7c7b      	ldrb	r3, [r7, #17]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bf2:	4ba7      	ldr	r3, [pc, #668]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	4aa6      	ldr	r2, [pc, #664]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c0a:	4ba1      	ldr	r3, [pc, #644]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c10:	f023 0203 	bic.w	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	499d      	ldr	r1, [pc, #628]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0302 	and.w	r3, r3, #2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00a      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c2c:	4b98      	ldr	r3, [pc, #608]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 020c 	bic.w	r2, r3, #12
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4995      	ldr	r1, [pc, #596]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0304 	and.w	r3, r3, #4
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00a      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c4e:	4b90      	ldr	r3, [pc, #576]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	498c      	ldr	r1, [pc, #560]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0308 	and.w	r3, r3, #8
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00a      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c70:	4b87      	ldr	r3, [pc, #540]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	4984      	ldr	r1, [pc, #528]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00a      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c92:	4b7f      	ldr	r3, [pc, #508]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	497b      	ldr	r1, [pc, #492]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00a      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cb4:	4b76      	ldr	r3, [pc, #472]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	4973      	ldr	r1, [pc, #460]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00a      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cd6:	4b6e      	ldr	r3, [pc, #440]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	496a      	ldr	r1, [pc, #424]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cf8:	4b65      	ldr	r3, [pc, #404]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4962      	ldr	r1, [pc, #392]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00a      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d1a:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	4959      	ldr	r1, [pc, #356]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d3c:	4b54      	ldr	r3, [pc, #336]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4a:	4951      	ldr	r1, [pc, #324]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	4948      	ldr	r1, [pc, #288]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8e:	4940      	ldr	r1, [pc, #256]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b3b      	ldr	r3, [pc, #236]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a3a      	ldr	r2, [pc, #232]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002db8:	4b35      	ldr	r3, [pc, #212]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	4932      	ldr	r1, [pc, #200]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a2c      	ldr	r2, [pc, #176]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002df0:	4b27      	ldr	r3, [pc, #156]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	4924      	ldr	r1, [pc, #144]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b1f      	ldr	r3, [pc, #124]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a1e      	ldr	r2, [pc, #120]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e28:	4b19      	ldr	r3, [pc, #100]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	4916      	ldr	r1, [pc, #88]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b11      	ldr	r3, [pc, #68]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a10      	ldr	r2, [pc, #64]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d019      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e60:	4b0b      	ldr	r3, [pc, #44]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	4908      	ldr	r1, [pc, #32]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7e:	d109      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e80:	4b03      	ldr	r3, [pc, #12]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a02      	ldr	r2, [pc, #8]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e8a:	60d3      	str	r3, [r2, #12]
 8002e8c:	e002      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d015      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4926      	ldr	r1, [pc, #152]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ebe:	d105      	bne.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	4a20      	ldr	r2, [pc, #128]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eca:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee6:	4918      	ldr	r1, [pc, #96]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a12      	ldr	r2, [pc, #72]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d015      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f10:	4b0d      	ldr	r3, [pc, #52]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f1e:	490a      	ldr	r1, [pc, #40]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f2e:	d105      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d070      	beq.n	8003040 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7fd feb4 	bl	8000ce0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	f003 0310 	and.w	r3, r3, #16
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d04f      	beq.n	800302e <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	22ca      	movs	r2, #202	; 0xca
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2253      	movs	r2, #83	; 0x53
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 fc60 	bl	8003864 <RTC_EnterInitMode>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002fa8:	7bfb      	ldrb	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d126      	bne.n	8002ffc <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002fbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fc0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6999      	ldr	r1, [r3, #24]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	431a      	orrs	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	430a      	orrs	r2, r1
 8002fde:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68d9      	ldr	r1, [r3, #12]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	041a      	lsls	r2, r3, #16
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fc6c 	bl	80038d0 <RTC_ExitInitMode>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d110      	bne.n	8003024 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1a      	ldr	r2, [r3, #32]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	22ff      	movs	r2, #255	; 0xff
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
 800302c:	e001      	b.n	8003032 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800304a:	b590      	push	{r4, r7, lr}
 800304c:	b087      	sub	sp, #28
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_RTC_SetTime+0x1a>
 8003060:	2302      	movs	r3, #2
 8003062:	e08b      	b.n	800317c <HAL_RTC_SetTime+0x132>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	22ca      	movs	r2, #202	; 0xca
 800307a:	625a      	str	r2, [r3, #36]	; 0x24
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2253      	movs	r2, #83	; 0x53
 8003082:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 fbed 	bl	8003864 <RTC_EnterInitMode>
 800308a:	4603      	mov	r3, r0
 800308c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800308e:	7cfb      	ldrb	r3, [r7, #19]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d163      	bne.n	800315c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d126      	bne.n	80030e8 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d102      	bne.n	80030ae <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fc4f 	bl	8003956 <RTC_ByteToBcd2>
 80030b8:	4603      	mov	r3, r0
 80030ba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	785b      	ldrb	r3, [r3, #1]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fc48 	bl	8003956 <RTC_ByteToBcd2>
 80030c6:	4603      	mov	r3, r0
 80030c8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030ca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	789b      	ldrb	r3, [r3, #2]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fc40 	bl	8003956 <RTC_ByteToBcd2>
 80030d6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030d8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	78db      	ldrb	r3, [r3, #3]
 80030e0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e018      	b.n	800311a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2200      	movs	r2, #0
 80030fa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	785b      	ldrb	r3, [r3, #1]
 8003106:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003108:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800310a:	68ba      	ldr	r2, [r7, #8]
 800310c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800310e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	78db      	ldrb	r3, [r3, #3]
 8003114:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003124:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003128:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	699a      	ldr	r2, [r3, #24]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003138:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6999      	ldr	r1, [r3, #24]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 fbbc 	bl	80038d0 <RTC_ExitInitMode>
 8003158:	4603      	mov	r3, r0
 800315a:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	22ff      	movs	r2, #255	; 0xff
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003164:	7cfb      	ldrb	r3, [r7, #19]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d103      	bne.n	8003172 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800317a:	7cfb      	ldrb	r3, [r7, #19]
}
 800317c:	4618      	mov	r0, r3
 800317e:	371c      	adds	r7, #28
 8003180:	46bd      	mov	sp, r7
 8003182:	bd90      	pop	{r4, r7, pc}

08003184 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	0c1b      	lsrs	r3, r3, #16
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	0d9b      	lsrs	r3, r3, #22
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	b2da      	uxtb	r2, r3
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d11a      	bne.n	8003232 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fbc8 	bl	8003996 <RTC_Bcd2ToByte>
 8003206:	4603      	mov	r3, r0
 8003208:	461a      	mov	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	785b      	ldrb	r3, [r3, #1]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fbbf 	bl	8003996 <RTC_Bcd2ToByte>
 8003218:	4603      	mov	r3, r0
 800321a:	461a      	mov	r2, r3
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	789b      	ldrb	r3, [r3, #2]
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fbb6 	bl	8003996 <RTC_Bcd2ToByte>
 800322a:	4603      	mov	r3, r0
 800322c:	461a      	mov	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800323c:	b590      	push	{r4, r7, lr}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_RTC_SetDate+0x1a>
 8003252:	2302      	movs	r3, #2
 8003254:	e075      	b.n	8003342 <HAL_RTC_SetDate+0x106>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10e      	bne.n	800328a <HAL_RTC_SetDate+0x4e>
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	785b      	ldrb	r3, [r3, #1]
 8003270:	f003 0310 	and.w	r3, r3, #16
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	785b      	ldrb	r3, [r3, #1]
 800327c:	f023 0310 	bic.w	r3, r3, #16
 8003280:	b2db      	uxtb	r3, r3
 8003282:	330a      	adds	r3, #10
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d11c      	bne.n	80032ca <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	78db      	ldrb	r3, [r3, #3]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fb5e 	bl	8003956 <RTC_ByteToBcd2>
 800329a:	4603      	mov	r3, r0
 800329c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	785b      	ldrb	r3, [r3, #1]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fb57 	bl	8003956 <RTC_ByteToBcd2>
 80032a8:	4603      	mov	r3, r0
 80032aa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032ac:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	789b      	ldrb	r3, [r3, #2]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f000 fb4f 	bl	8003956 <RTC_ByteToBcd2>
 80032b8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032ba:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
 80032c8:	e00e      	b.n	80032e8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	78db      	ldrb	r3, [r3, #3]
 80032ce:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	785b      	ldrb	r3, [r3, #1]
 80032d4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032d6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80032dc:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032e4:	4313      	orrs	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	22ca      	movs	r2, #202	; 0xca
 80032ee:	625a      	str	r2, [r3, #36]	; 0x24
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2253      	movs	r2, #83	; 0x53
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fab3 	bl	8003864 <RTC_EnterInitMode>
 80032fe:	4603      	mov	r3, r0
 8003300:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003302:	7cfb      	ldrb	r3, [r7, #19]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10c      	bne.n	8003322 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003312:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003316:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 fad9 	bl	80038d0 <RTC_ExitInitMode>
 800331e:	4603      	mov	r3, r0
 8003320:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800332a:	7cfb      	ldrb	r3, [r7, #19]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d103      	bne.n	8003338 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2201      	movs	r2, #1
 8003334:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
}
 8003342:	4618      	mov	r0, r3
 8003344:	371c      	adds	r7, #28
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b086      	sub	sp, #24
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003360:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003364:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	0c1b      	lsrs	r3, r3, #16
 800336a:	b2da      	uxtb	r2, r3
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	b2da      	uxtb	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	b2db      	uxtb	r3, r3
 8003384:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003388:	b2da      	uxtb	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	0b5b      	lsrs	r3, r3, #13
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11a      	bne.n	80033da <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	78db      	ldrb	r3, [r3, #3]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 faf4 	bl	8003996 <RTC_Bcd2ToByte>
 80033ae:	4603      	mov	r3, r0
 80033b0:	461a      	mov	r2, r3
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	785b      	ldrb	r3, [r3, #1]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 faeb 	bl	8003996 <RTC_Bcd2ToByte>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	789b      	ldrb	r3, [r3, #2]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fae2 	bl	8003996 <RTC_Bcd2ToByte>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3718      	adds	r7, #24
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80033e4:	b590      	push	{r4, r7, lr}
 80033e6:	b089      	sub	sp, #36	; 0x24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d101      	bne.n	80033fe <HAL_RTC_SetAlarm_IT+0x1a>
 80033fa:	2302      	movs	r3, #2
 80033fc:	e115      	b.n	800362a <HAL_RTC_SetAlarm_IT+0x246>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2202      	movs	r2, #2
 800340a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d137      	bne.n	8003484 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2200      	movs	r2, #0
 8003426:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f000 fa92 	bl	8003956 <RTC_ByteToBcd2>
 8003432:	4603      	mov	r3, r0
 8003434:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	785b      	ldrb	r3, [r3, #1]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fa8b 	bl	8003956 <RTC_ByteToBcd2>
 8003440:	4603      	mov	r3, r0
 8003442:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003444:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	789b      	ldrb	r3, [r3, #2]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 fa83 	bl	8003956 <RTC_ByteToBcd2>
 8003450:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003452:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	78db      	ldrb	r3, [r3, #3]
 800345a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800345c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003466:	4618      	mov	r0, r3
 8003468:	f000 fa75 	bl	8003956 <RTC_ByteToBcd2>
 800346c:	4603      	mov	r3, r0
 800346e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003470:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003478:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800347e:	4313      	orrs	r3, r2
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	e023      	b.n	80034cc <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else /* Format BCD */
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d102      	bne.n	8003498 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	2200      	movs	r2, #0
 8003496:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034a4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80034aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	78db      	ldrb	r3, [r3, #3]
 80034b0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80034b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80034bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80034c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	22ca      	movs	r2, #202	; 0xca
 80034de:	625a      	str	r2, [r3, #36]	; 0x24
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2253      	movs	r2, #83	; 0x53
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f0:	d141      	bne.n	8003576 <HAL_RTC_SetAlarm_IT+0x192>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699a      	ldr	r2, [r3, #24]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8003500:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2201      	movs	r2, #1
 8003508:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 800350a:	4b4a      	ldr	r3, [pc, #296]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 800350c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003510:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 8003512:	f7fd fd33 	bl	8000f7c <HAL_GetTick>
 8003516:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8003518:	e015      	b.n	8003546 <HAL_RTC_SetAlarm_IT+0x162>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800351a:	f7fd fd2f 	bl	8000f7c <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003528:	d90d      	bls.n	8003546 <HAL_RTC_SetAlarm_IT+0x162>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	22ff      	movs	r2, #255	; 0xff
 8003530:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2203      	movs	r2, #3
 8003536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e071      	b.n	800362a <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0e2      	beq.n	800351a <HAL_RTC_SetAlarm_IT+0x136>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMAR, tmpreg);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMASSR, subsecondtmpreg);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8003572:	619a      	str	r2, [r3, #24]
 8003574:	e040      	b.n	80035f8 <HAL_RTC_SetAlarm_IT+0x214>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8003584:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2202      	movs	r2, #2
 800358c:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 800358e:	4b29      	ldr	r3, [pc, #164]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 8003590:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003594:	615a      	str	r2, [r3, #20]

    tickstart = HAL_GetTick();
 8003596:	f7fd fcf1 	bl	8000f7c <HAL_GetTick>
 800359a:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 800359c:	e015      	b.n	80035ca <HAL_RTC_SetAlarm_IT+0x1e6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800359e:	f7fd fced 	bl	8000f7c <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035ac:	d90d      	bls.n	80035ca <HAL_RTC_SetAlarm_IT+0x1e6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	22ff      	movs	r2, #255	; 0xff
 80035b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2203      	movs	r2, #3
 80035ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e02f      	b.n	800362a <HAL_RTC_SetAlarm_IT+0x246>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0e2      	beq.n	800359e <HAL_RTC_SetAlarm_IT+0x1ba>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMBR, tmpreg);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMBSSR, subsecondtmpreg);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm B interrupt : Enable Alarm */
    SET_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80035f6:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80035f8:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 80035fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003602:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_RISING_IT();
 8003604:	4b0b      	ldr	r3, [pc, #44]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	4a0a      	ldr	r2, [pc, #40]	; (8003634 <HAL_RTC_SetAlarm_IT+0x250>)
 800360a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800360e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3724      	adds	r7, #36	; 0x24
 800362e:	46bd      	mov	sp, r7
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	bf00      	nop
 8003634:	40010400 	.word	0x40010400

08003638 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b086      	sub	sp, #24
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
 8003644:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  if (Alarm == RTC_ALARM_A)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d143      	bne.n	80036d6 <HAL_RTC_GetAlarm+0x9e>
  {
    /* AlarmA */
    sAlarm->Alarm = RTC_ALARM_A;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003654:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = READ_REG(hrtc->Instance->ALRMAR);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003668:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMAR_HT | RTC_ALRMAR_HU)) >> RTC_ALRMAR_HU_Pos);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	b2db      	uxtb	r3, r3
 8003670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003674:	b2da      	uxtb	r2, r3
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	0a1b      	lsrs	r3, r3, #8
 800367e:	b2db      	uxtb	r3, r3
 8003680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMAR_ST | RTC_ALRMAR_SU)) >> RTC_ALRMAR_SU_Pos);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003692:	b2da      	uxtb	r2, r3
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMAR_PM) >> RTC_ALRMAR_PM_Pos);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	0d9b      	lsrs	r3, r3, #22
 800369c:	b2db      	uxtb	r3, r3
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	b2da      	uxtb	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMAR_DT | RTC_ALRMAR_DU)) >> RTC_ALRMAR_DU_Pos);
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	0e1b      	lsrs	r3, r3, #24
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMAR_WDSEL);
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	615a      	str	r2, [r3, #20]
 80036d4:	e042      	b.n	800375c <HAL_RTC_GetAlarm+0x124>
  }
  else
  {
    sAlarm->Alarm = RTC_ALARM_B;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

    tmpreg = READ_REG(hrtc->Instance->ALRMBR);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	617b      	str	r3, [r7, #20]
    subsecondtmpreg = (uint32_t)(READ_REG(hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80036f0:	613b      	str	r3, [r7, #16]

    /* Fill the structure with the read parameters */
    sAlarm->AlarmTime.Hours = (uint8_t)((tmpreg & (RTC_ALRMBR_HT | RTC_ALRMBR_HU)) >> RTC_ALRMBR_HU_Pos);
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_ALRMBR_MNU_Pos);
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370c:	b2da      	uxtb	r2, r3
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = (uint8_t)((tmpreg & (RTC_ALRMBR_ST | RTC_ALRMBR_SU)) >> RTC_ALRMBR_SU_Pos);
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg & RTC_ALRMBR_PM) >> RTC_ALRMBR_PM_Pos);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	0d9b      	lsrs	r3, r3, #22
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	b2da      	uxtb	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	70da      	strb	r2, [r3, #3]
    sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	605a      	str	r2, [r3, #4]
    sAlarm->AlarmDateWeekDay = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU)) >> RTC_ALRMBR_DU_Pos);
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	0e1b      	lsrs	r3, r3, #24
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003740:	b2da      	uxtb	r2, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f883 2020 	strb.w	r2, [r3, #32]
    sAlarm->AlarmDateWeekDaySel = (uint32_t)(tmpreg & RTC_ALRMBR_WDSEL);
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	61da      	str	r2, [r3, #28]
    sAlarm->AlarmMask = (uint32_t)(tmpreg & RTC_ALARMMASK_ALL);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 3280 	and.w	r2, r3, #2155905152	; 0x80808080
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	615a      	str	r2, [r3, #20]
  }

  if (Format == RTC_FORMAT_BIN)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d125      	bne.n	80037ae <HAL_RTC_GetAlarm+0x176>
  {
    sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f000 f915 	bl	8003996 <RTC_Bcd2ToByte>
 800376c:	4603      	mov	r3, r0
 800376e:	461a      	mov	r2, r3
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	785b      	ldrb	r3, [r3, #1]
 8003778:	4618      	mov	r0, r3
 800377a:	f000 f90c 	bl	8003996 <RTC_Bcd2ToByte>
 800377e:	4603      	mov	r3, r0
 8003780:	461a      	mov	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	789b      	ldrb	r3, [r3, #2]
 800378a:	4618      	mov	r0, r3
 800378c:	f000 f903 	bl	8003996 <RTC_Bcd2ToByte>
 8003790:	4603      	mov	r3, r0
 8003792:	461a      	mov	r2, r3
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379e:	4618      	mov	r0, r3
 80037a0:	f000 f8f9 	bl	8003996 <RTC_Bcd2ToByte>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]
  }

  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Get interrupt status */
  uint32_t tmp = READ_REG(hrtc->Instance->MISR);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c6:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RTC_AlarmIRQHandler+0x30>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2201      	movs	r2, #1
 80037d8:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 80037da:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <HAL_RTC_AlarmIRQHandler+0x60>)
 80037dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037e0:	615a      	str	r2, [r3, #20]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7fd f950 	bl	8000a88 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RTC_AlarmIRQHandler+0x50>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2202      	movs	r2, #2
 80037f8:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RTC_ALARM_EXTI_CLEAR_IT();
 80037fa:	4b07      	ldr	r3, [pc, #28]	; (8003818 <HAL_RTC_AlarmIRQHandler+0x60>)
 80037fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003800:	615a      	str	r2, [r3, #20]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f000 f927 	bl	8003a56 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0d      	ldr	r2, [pc, #52]	; (8003860 <HAL_RTC_WaitForSynchro+0x44>)
 800382a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800382c:	f7fd fba6 	bl	8000f7c <HAL_GetTick>
 8003830:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003832:	e009      	b.n	8003848 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003834:	f7fd fba2 	bl	8000f7c <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003842:	d901      	bls.n	8003848 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e007      	b.n	8003858 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0ee      	beq.n	8003834 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0001005f 	.word	0x0001005f

08003864 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d123      	bne.n	80038c6 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800388c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800388e:	f7fd fb75 	bl	8000f7c <HAL_GetTick>
 8003892:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003894:	e00d      	b.n	80038b2 <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003896:	f7fd fb71 	bl	8000f7c <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038a4:	d905      	bls.n	80038b2 <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2203      	movs	r2, #3
 80038ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <RTC_EnterInitMode+0x62>
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d1e7      	bne.n	8003896 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3710      	adds	r7, #16
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68da      	ldr	r2, [r3, #12]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10c      	bne.n	8003914 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff8e 	bl	800381c <HAL_RTC_WaitForSynchro>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d022      	beq.n	800394c <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2203      	movs	r2, #3
 800390a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	73fb      	strb	r3, [r7, #15]
 8003912:	e01b      	b.n	800394c <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f022 0220 	bic.w	r2, r2, #32
 8003922:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7ff ff79 	bl	800381c <HAL_RTC_WaitForSynchro>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699a      	ldr	r2, [r3, #24]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0220 	orr.w	r2, r2, #32
 800394a:	619a      	str	r2, [r3, #24]
  }

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003956:	b480      	push	{r7}
 8003958:	b085      	sub	sp, #20
 800395a:	af00      	add	r7, sp, #0
 800395c:	4603      	mov	r3, r0
 800395e:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003968:	e005      	b.n	8003976 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	3b0a      	subs	r3, #10
 8003974:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003976:	7afb      	ldrb	r3, [r7, #11]
 8003978:	2b09      	cmp	r3, #9
 800397a:	d8f6      	bhi.n	800396a <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	b2db      	uxtb	r3, r3
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	b2da      	uxtb	r2, r3
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	4313      	orrs	r3, r2
 8003988:	b2db      	uxtb	r3, r3
}
 800398a:	4618      	mov	r0, r3
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	4603      	mov	r3, r0
 800399e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	461a      	mov	r2, r3
 80039a8:	4613      	mov	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	f003 030f 	and.w	r3, r3, #15
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4413      	add	r3, r2
 80039c0:	b2db      	uxtb	r3, r3
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_RTCEx_SetTimeStamp>:
  *               The RTC TimeStamp Pin is per default PC13, but for reasons of
  *               compatibility, this parameter is required.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	60f8      	str	r0, [r7, #12]
 80039d6:	60b9      	str	r1, [r7, #8]
 80039d8:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));
  UNUSED(RTC_TimeStampPin);

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_RTCEx_SetTimeStamp+0x1a>
 80039e4:	2302      	movs	r3, #2
 80039e6:	e030      	b.n	8003a4a <HAL_RTCEx_SetTimeStamp+0x7c>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the RTC_CR register and clear the bits to be configured */
  CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_TSEDGE | RTC_CR_TSE));
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a06:	f023 0308 	bic.w	r3, r3, #8
 8003a0a:	6193      	str	r3, [r2, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	22ca      	movs	r2, #202	; 0xca
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	2253      	movs	r2, #83	; 0x53
 8003a1a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Time Stamp TSEDGE and Enable bits */
  SET_BIT(hrtc->Instance->CR, (uint32_t)TimeStampEdge | RTC_CR_TSE);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	699a      	ldr	r2, [r3, #24]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	431a      	orrs	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2e:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	22ff      	movs	r2, #255	; 0xff
 8003a36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b082      	sub	sp, #8
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e042      	b.n	8003b02 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd f8ce 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2224      	movs	r2, #36	; 0x24
 8003a98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fb25 	bl	8004104 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f826 	bl	8003b0c <UART_SetConfig>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e01b      	b.n	8003b02 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ad8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ae8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 fba4 	bl	8004248 <UART_CheckIdleState>
 8003b00:	4603      	mov	r3, r0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b10:	b08c      	sub	sp, #48	; 0x30
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	431a      	orrs	r2, r3
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	69db      	ldr	r3, [r3, #28]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4baa      	ldr	r3, [pc, #680]	; (8003de4 <UART_SetConfig+0x2d8>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	6812      	ldr	r2, [r2, #0]
 8003b42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a9f      	ldr	r2, [pc, #636]	; (8003de8 <UART_SetConfig+0x2dc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d004      	beq.n	8003b78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	4313      	orrs	r3, r2
 8003b76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003b82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f023 010f 	bic.w	r1, r3, #15
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a90      	ldr	r2, [pc, #576]	; (8003dec <UART_SetConfig+0x2e0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d125      	bne.n	8003bfc <UART_SetConfig+0xf0>
 8003bb0:	4b8f      	ldr	r3, [pc, #572]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b03      	cmp	r3, #3
 8003bbc:	d81a      	bhi.n	8003bf4 <UART_SetConfig+0xe8>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <UART_SetConfig+0xb8>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003bd5 	.word	0x08003bd5
 8003bc8:	08003be5 	.word	0x08003be5
 8003bcc:	08003bdd 	.word	0x08003bdd
 8003bd0:	08003bed 	.word	0x08003bed
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bda:	e116      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003be2:	e112      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003be4:	2304      	movs	r3, #4
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bea:	e10e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bec:	2308      	movs	r3, #8
 8003bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf2:	e10a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bf4:	2310      	movs	r3, #16
 8003bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bfa:	e106      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a7c      	ldr	r2, [pc, #496]	; (8003df4 <UART_SetConfig+0x2e8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d138      	bne.n	8003c78 <UART_SetConfig+0x16c>
 8003c06:	4b7a      	ldr	r3, [pc, #488]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f003 030c 	and.w	r3, r3, #12
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d82d      	bhi.n	8003c70 <UART_SetConfig+0x164>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0x110>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c51 	.word	0x08003c51
 8003c20:	08003c71 	.word	0x08003c71
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c71 	.word	0x08003c71
 8003c34:	08003c71 	.word	0x08003c71
 8003c38:	08003c71 	.word	0x08003c71
 8003c3c:	08003c59 	.word	0x08003c59
 8003c40:	08003c71 	.word	0x08003c71
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c71 	.word	0x08003c71
 8003c4c:	08003c69 	.word	0x08003c69
 8003c50:	2300      	movs	r3, #0
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e0d8      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e0d4      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c60:	2304      	movs	r3, #4
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e0d0      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c68:	2308      	movs	r3, #8
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e0cc      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c70:	2310      	movs	r3, #16
 8003c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c76:	e0c8      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a5e      	ldr	r2, [pc, #376]	; (8003df8 <UART_SetConfig+0x2ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d125      	bne.n	8003cce <UART_SetConfig+0x1c2>
 8003c82:	4b5b      	ldr	r3, [pc, #364]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c8c:	2b30      	cmp	r3, #48	; 0x30
 8003c8e:	d016      	beq.n	8003cbe <UART_SetConfig+0x1b2>
 8003c90:	2b30      	cmp	r3, #48	; 0x30
 8003c92:	d818      	bhi.n	8003cc6 <UART_SetConfig+0x1ba>
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d00a      	beq.n	8003cae <UART_SetConfig+0x1a2>
 8003c98:	2b20      	cmp	r3, #32
 8003c9a:	d814      	bhi.n	8003cc6 <UART_SetConfig+0x1ba>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <UART_SetConfig+0x19a>
 8003ca0:	2b10      	cmp	r3, #16
 8003ca2:	d008      	beq.n	8003cb6 <UART_SetConfig+0x1aa>
 8003ca4:	e00f      	b.n	8003cc6 <UART_SetConfig+0x1ba>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cac:	e0ad      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb4:	e0a9      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cb6:	2304      	movs	r3, #4
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbc:	e0a5      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cbe:	2308      	movs	r3, #8
 8003cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc4:	e0a1      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cc6:	2310      	movs	r3, #16
 8003cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ccc:	e09d      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <UART_SetConfig+0x2f0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d125      	bne.n	8003d24 <UART_SetConfig+0x218>
 8003cd8:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ce2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce4:	d016      	beq.n	8003d14 <UART_SetConfig+0x208>
 8003ce6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ce8:	d818      	bhi.n	8003d1c <UART_SetConfig+0x210>
 8003cea:	2b80      	cmp	r3, #128	; 0x80
 8003cec:	d00a      	beq.n	8003d04 <UART_SetConfig+0x1f8>
 8003cee:	2b80      	cmp	r3, #128	; 0x80
 8003cf0:	d814      	bhi.n	8003d1c <UART_SetConfig+0x210>
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <UART_SetConfig+0x1f0>
 8003cf6:	2b40      	cmp	r3, #64	; 0x40
 8003cf8:	d008      	beq.n	8003d0c <UART_SetConfig+0x200>
 8003cfa:	e00f      	b.n	8003d1c <UART_SetConfig+0x210>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e082      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d04:	2302      	movs	r3, #2
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e07e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e07a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d14:	2308      	movs	r3, #8
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e076      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d1c:	2310      	movs	r3, #16
 8003d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d22:	e072      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a35      	ldr	r2, [pc, #212]	; (8003e00 <UART_SetConfig+0x2f4>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d12a      	bne.n	8003d84 <UART_SetConfig+0x278>
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d3c:	d01a      	beq.n	8003d74 <UART_SetConfig+0x268>
 8003d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d42:	d81b      	bhi.n	8003d7c <UART_SetConfig+0x270>
 8003d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d48:	d00c      	beq.n	8003d64 <UART_SetConfig+0x258>
 8003d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d4e:	d815      	bhi.n	8003d7c <UART_SetConfig+0x270>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <UART_SetConfig+0x250>
 8003d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d58:	d008      	beq.n	8003d6c <UART_SetConfig+0x260>
 8003d5a:	e00f      	b.n	8003d7c <UART_SetConfig+0x270>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d62:	e052      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d64:	2302      	movs	r3, #2
 8003d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d6a:	e04e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d6c:	2304      	movs	r3, #4
 8003d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d72:	e04a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d74:	2308      	movs	r3, #8
 8003d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d7a:	e046      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d82:	e042      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a17      	ldr	r2, [pc, #92]	; (8003de8 <UART_SetConfig+0x2dc>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d13a      	bne.n	8003e04 <UART_SetConfig+0x2f8>
 8003d8e:	4b18      	ldr	r3, [pc, #96]	; (8003df0 <UART_SetConfig+0x2e4>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d9c:	d01a      	beq.n	8003dd4 <UART_SetConfig+0x2c8>
 8003d9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003da2:	d81b      	bhi.n	8003ddc <UART_SetConfig+0x2d0>
 8003da4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003da8:	d00c      	beq.n	8003dc4 <UART_SetConfig+0x2b8>
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dae:	d815      	bhi.n	8003ddc <UART_SetConfig+0x2d0>
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <UART_SetConfig+0x2b0>
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	d008      	beq.n	8003dcc <UART_SetConfig+0x2c0>
 8003dba:	e00f      	b.n	8003ddc <UART_SetConfig+0x2d0>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc2:	e022      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dca:	e01e      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dd2:	e01a      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dda:	e016      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003ddc:	2310      	movs	r3, #16
 8003dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x2fe>
 8003de4:	cfff69f3 	.word	0xcfff69f3
 8003de8:	40008000 	.word	0x40008000
 8003dec:	40013800 	.word	0x40013800
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40004800 	.word	0x40004800
 8003dfc:	40004c00 	.word	0x40004c00
 8003e00:	40005000 	.word	0x40005000
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4aae      	ldr	r2, [pc, #696]	; (80040c8 <UART_SetConfig+0x5bc>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f040 8097 	bne.w	8003f44 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d823      	bhi.n	8003e66 <UART_SetConfig+0x35a>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x318>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e67 	.word	0x08003e67
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e67 	.word	0x08003e67
 8003e3c:	08003e67 	.word	0x08003e67
 8003e40:	08003e67 	.word	0x08003e67
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7fe fdc0 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003e4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e4e:	e010      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <UART_SetConfig+0x5c0>)
 8003e52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e54:	e00d      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7fe fd4b 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003e5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e5c:	e009      	b.n	8003e72 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e64:	e005      	b.n	8003e72 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8130 	beq.w	80040da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	4a94      	ldr	r2, [pc, #592]	; (80040d0 <UART_SetConfig+0x5c4>)
 8003e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e84:	461a      	mov	r2, r3
 8003e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	685a      	ldr	r2, [r3, #4]
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d305      	bcc.n	8003eaa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ea4:	69ba      	ldr	r2, [r7, #24]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d903      	bls.n	8003eb2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003eb0:	e113      	b.n	80040da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	60fa      	str	r2, [r7, #12]
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	4a84      	ldr	r2, [pc, #528]	; (80040d0 <UART_SetConfig+0x5c4>)
 8003ec0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ed0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ed4:	f7fc f9f4 	bl	80002c0 <__aeabi_uldivmod>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4610      	mov	r0, r2
 8003ede:	4619      	mov	r1, r3
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	020b      	lsls	r3, r1, #8
 8003eea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003eee:	0202      	lsls	r2, r0, #8
 8003ef0:	6979      	ldr	r1, [r7, #20]
 8003ef2:	6849      	ldr	r1, [r1, #4]
 8003ef4:	0849      	lsrs	r1, r1, #1
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	4605      	mov	r5, r0
 8003efc:	eb12 0804 	adds.w	r8, r2, r4
 8003f00:	eb43 0905 	adc.w	r9, r3, r5
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	469a      	mov	sl, r3
 8003f0c:	4693      	mov	fp, r2
 8003f0e:	4652      	mov	r2, sl
 8003f10:	465b      	mov	r3, fp
 8003f12:	4640      	mov	r0, r8
 8003f14:	4649      	mov	r1, r9
 8003f16:	f7fc f9d3 	bl	80002c0 <__aeabi_uldivmod>
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4613      	mov	r3, r2
 8003f20:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f28:	d308      	bcc.n	8003f3c <UART_SetConfig+0x430>
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f30:	d204      	bcs.n	8003f3c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a3a      	ldr	r2, [r7, #32]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e0ce      	b.n	80040da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f42:	e0ca      	b.n	80040da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	d166      	bne.n	800401c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d827      	bhi.n	8003fa6 <UART_SetConfig+0x49a>
 8003f56:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x450>)
 8003f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fa7 	.word	0x08003fa7
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fa7 	.word	0x08003fa7
 8003f74:	08003fa7 	.word	0x08003fa7
 8003f78:	08003fa7 	.word	0x08003fa7
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7fe fd24 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8003f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f86:	e014      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7fe fd36 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f8e:	e010      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b4e      	ldr	r3, [pc, #312]	; (80040cc <UART_SetConfig+0x5c0>)
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f94:	e00d      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7fe fcab 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8003f9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f9c:	e009      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fa4:	e005      	b.n	8003fb2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8090 	beq.w	80040da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	4a44      	ldr	r2, [pc, #272]	; (80040d0 <UART_SetConfig+0x5c4>)
 8003fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fcc:	005a      	lsls	r2, r3, #1
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	085b      	lsrs	r3, r3, #1
 8003fd4:	441a      	add	r2, r3
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	2b0f      	cmp	r3, #15
 8003fe4:	d916      	bls.n	8004014 <UART_SetConfig+0x508>
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fec:	d212      	bcs.n	8004014 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	f023 030f 	bic.w	r3, r3, #15
 8003ff6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b29a      	uxth	r2, r3
 8004004:	8bfb      	ldrh	r3, [r7, #30]
 8004006:	4313      	orrs	r3, r2
 8004008:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	8bfa      	ldrh	r2, [r7, #30]
 8004010:	60da      	str	r2, [r3, #12]
 8004012:	e062      	b.n	80040da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800401a:	e05e      	b.n	80040da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800401c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004020:	2b08      	cmp	r3, #8
 8004022:	d828      	bhi.n	8004076 <UART_SetConfig+0x56a>
 8004024:	a201      	add	r2, pc, #4	; (adr r2, 800402c <UART_SetConfig+0x520>)
 8004026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402a:	bf00      	nop
 800402c:	08004051 	.word	0x08004051
 8004030:	08004059 	.word	0x08004059
 8004034:	08004061 	.word	0x08004061
 8004038:	08004077 	.word	0x08004077
 800403c:	08004067 	.word	0x08004067
 8004040:	08004077 	.word	0x08004077
 8004044:	08004077 	.word	0x08004077
 8004048:	08004077 	.word	0x08004077
 800404c:	0800406f 	.word	0x0800406f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004050:	f7fe fcbc 	bl	80029cc <HAL_RCC_GetPCLK1Freq>
 8004054:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004056:	e014      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004058:	f7fe fcce 	bl	80029f8 <HAL_RCC_GetPCLK2Freq>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800405e:	e010      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <UART_SetConfig+0x5c0>)
 8004062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004064:	e00d      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004066:	f7fe fc43 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 800406a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800406c:	e009      	b.n	8004082 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800406e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004074:	e005      	b.n	8004082 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004080:	bf00      	nop
    }

    if (pclk != 0U)
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d028      	beq.n	80040da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	4a10      	ldr	r2, [pc, #64]	; (80040d0 <UART_SetConfig+0x5c4>)
 800408e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004092:	461a      	mov	r2, r3
 8004094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004096:	fbb3 f2f2 	udiv	r2, r3, r2
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	085b      	lsrs	r3, r3, #1
 80040a0:	441a      	add	r2, r3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040ac:	6a3b      	ldr	r3, [r7, #32]
 80040ae:	2b0f      	cmp	r3, #15
 80040b0:	d910      	bls.n	80040d4 <UART_SetConfig+0x5c8>
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b8:	d20c      	bcs.n	80040d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	b29a      	uxth	r2, r3
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	60da      	str	r2, [r3, #12]
 80040c4:	e009      	b.n	80040da <UART_SetConfig+0x5ce>
 80040c6:	bf00      	nop
 80040c8:	40008000 	.word	0x40008000
 80040cc:	00f42400 	.word	0x00f42400
 80040d0:	08005554 	.word	0x08005554
      }
      else
      {
        ret = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	2201      	movs	r2, #1
 80040de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80040f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3730      	adds	r7, #48	; 0x30
 80040fe:	46bd      	mov	sp, r7
 8004100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004104 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004104:	b480      	push	{r7}
 8004106:	b083      	sub	sp, #12
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	f003 0308 	and.w	r3, r3, #8
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00a      	beq.n	800412e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	430a      	orrs	r2, r1
 800412c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00a      	beq.n	8004150 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	430a      	orrs	r2, r1
 800414e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f003 0302 	and.w	r3, r3, #2
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004202:	d10a      	bne.n	800421a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	430a      	orrs	r2, r1
 800423a:	605a      	str	r2, [r3, #4]
  }
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b098      	sub	sp, #96	; 0x60
 800424c:	af02      	add	r7, sp, #8
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004258:	f7fc fe90 	bl	8000f7c <HAL_GetTick>
 800425c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0308 	and.w	r3, r3, #8
 8004268:	2b08      	cmp	r3, #8
 800426a:	d12f      	bne.n	80042cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004274:	2200      	movs	r2, #0
 8004276:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f88e 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d022      	beq.n	80042cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	653b      	str	r3, [r7, #80]	; 0x50
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	461a      	mov	r2, r3
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	647b      	str	r3, [r7, #68]	; 0x44
 80042a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e6      	bne.n	8004286 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e063      	b.n	8004394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d149      	bne.n	800436e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	2200      	movs	r2, #0
 80042e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f857 	bl	800439c <UART_WaitOnFlagUntilTimeout>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d03c      	beq.n	800436e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	e853 3f00 	ldrex	r3, [r3]
 8004300:	623b      	str	r3, [r7, #32]
   return(result);
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	461a      	mov	r2, r3
 8004310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004312:	633b      	str	r3, [r7, #48]	; 0x30
 8004314:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004318:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e6      	bne.n	80042f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3308      	adds	r3, #8
 800432c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	60fb      	str	r3, [r7, #12]
   return(result);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	64bb      	str	r3, [r7, #72]	; 0x48
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3308      	adds	r3, #8
 8004344:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004346:	61fa      	str	r2, [r7, #28]
 8004348:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	617b      	str	r3, [r7, #20]
   return(result);
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e012      	b.n	8004394 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2220      	movs	r2, #32
 8004372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2220      	movs	r2, #32
 800437a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3758      	adds	r7, #88	; 0x58
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ac:	e04f      	b.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b4:	d04b      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043b6:	f7fc fde1 	bl	8000f7c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d302      	bcc.n	80043cc <UART_WaitOnFlagUntilTimeout+0x30>
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e04e      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0304 	and.w	r3, r3, #4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d037      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b80      	cmp	r3, #128	; 0x80
 80043e2:	d034      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b40      	cmp	r3, #64	; 0x40
 80043e8:	d031      	beq.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	69db      	ldr	r3, [r3, #28]
 80043f0:	f003 0308 	and.w	r3, r3, #8
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d110      	bne.n	800441a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2208      	movs	r2, #8
 80043fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 f838 	bl	8004476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2208      	movs	r2, #8
 800440a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e029      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004424:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004428:	d111      	bne.n	800444e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004432:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 f81e 	bl	8004476 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2220      	movs	r2, #32
 800443e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00f      	b.n	800446e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	69da      	ldr	r2, [r3, #28]
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4013      	ands	r3, r2
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	bf0c      	ite	eq
 800445e:	2301      	moveq	r3, #1
 8004460:	2300      	movne	r3, #0
 8004462:	b2db      	uxtb	r3, r3
 8004464:	461a      	mov	r2, r3
 8004466:	79fb      	ldrb	r3, [r7, #7]
 8004468:	429a      	cmp	r2, r3
 800446a:	d0a0      	beq.n	80043ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004476:	b480      	push	{r7}
 8004478:	b095      	sub	sp, #84	; 0x54
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004486:	e853 3f00 	ldrex	r3, [r3]
 800448a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800448c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	461a      	mov	r2, r3
 800449a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449c:	643b      	str	r3, [r7, #64]	; 0x40
 800449e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a4:	e841 2300 	strex	r3, r2, [r1]
 80044a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e6      	bne.n	800447e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	e853 3f00 	ldrex	r3, [r3]
 80044be:	61fb      	str	r3, [r7, #28]
   return(result);
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3308      	adds	r3, #8
 80044d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e3      	bne.n	80044b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d118      	bne.n	8004522 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f023 0310 	bic.w	r3, r3, #16
 8004504:	647b      	str	r3, [r7, #68]	; 0x44
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6979      	ldr	r1, [r7, #20]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	613b      	str	r3, [r7, #16]
   return(result);
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e6      	bne.n	80044f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004536:	bf00      	nop
 8004538:	3754      	adds	r7, #84	; 0x54
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004542:	b480      	push	{r7}
 8004544:	b085      	sub	sp, #20
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_UARTEx_DisableFifoMode+0x16>
 8004554:	2302      	movs	r3, #2
 8004556:	e027      	b.n	80045a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2224      	movs	r2, #36	; 0x24
 8004564:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0201 	bic.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004586:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2220      	movs	r2, #32
 800459a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3714      	adds	r7, #20
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80045c4:	2b01      	cmp	r3, #1
 80045c6:	d101      	bne.n	80045cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e02d      	b.n	8004628 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2224      	movs	r2, #36	; 0x24
 80045d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0201 	bic.w	r2, r2, #1
 80045f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	430a      	orrs	r2, r1
 8004606:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f84f 	bl	80046ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004626:	2300      	movs	r3, #0
}
 8004628:	4618      	mov	r0, r3
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004640:	2b01      	cmp	r3, #1
 8004642:	d101      	bne.n	8004648 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004644:	2302      	movs	r3, #2
 8004646:	e02d      	b.n	80046a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2224      	movs	r2, #36	; 0x24
 8004654:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f022 0201 	bic.w	r2, r2, #1
 800466e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f811 	bl	80046ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80046cc:	e031      	b.n	8004732 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80046ce:	2308      	movs	r3, #8
 80046d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80046d2:	2308      	movs	r3, #8
 80046d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	0e5b      	lsrs	r3, r3, #25
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	0f5b      	lsrs	r3, r3, #29
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80046f6:	7bbb      	ldrb	r3, [r7, #14]
 80046f8:	7b3a      	ldrb	r2, [r7, #12]
 80046fa:	4911      	ldr	r1, [pc, #68]	; (8004740 <UARTEx_SetNbDataToProcess+0x94>)
 80046fc:	5c8a      	ldrb	r2, [r1, r2]
 80046fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004702:	7b3a      	ldrb	r2, [r7, #12]
 8004704:	490f      	ldr	r1, [pc, #60]	; (8004744 <UARTEx_SetNbDataToProcess+0x98>)
 8004706:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004708:	fb93 f3f2 	sdiv	r3, r3, r2
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	7b7a      	ldrb	r2, [r7, #13]
 8004718:	4909      	ldr	r1, [pc, #36]	; (8004740 <UARTEx_SetNbDataToProcess+0x94>)
 800471a:	5c8a      	ldrb	r2, [r1, r2]
 800471c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004720:	7b7a      	ldrb	r2, [r7, #13]
 8004722:	4908      	ldr	r1, [pc, #32]	; (8004744 <UARTEx_SetNbDataToProcess+0x98>)
 8004724:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004726:	fb93 f3f2 	sdiv	r3, r3, r2
 800472a:	b29a      	uxth	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	0800556c 	.word	0x0800556c
 8004744:	08005574 	.word	0x08005574

08004748 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004748:	b480      	push	{r7}
 800474a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800474c:	bf00      	nop
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
	...

08004758 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b086      	sub	sp, #24
 800475c:	af04      	add	r7, sp, #16
 800475e:	4603      	mov	r3, r0
 8004760:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004762:	f04f 33ff 	mov.w	r3, #4294967295
 8004766:	9302      	str	r3, [sp, #8]
 8004768:	2301      	movs	r3, #1
 800476a:	9301      	str	r3, [sp, #4]
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	2301      	movs	r3, #1
 8004772:	2200      	movs	r2, #0
 8004774:	2178      	movs	r1, #120	; 0x78
 8004776:	4803      	ldr	r0, [pc, #12]	; (8004784 <ssd1306_WriteCommand+0x2c>)
 8004778:	f7fc ff8e 	bl	8001698 <HAL_I2C_Mem_Write>
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000078 	.word	0x20000078

08004788 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b086      	sub	sp, #24
 800478c:	af04      	add	r7, sp, #16
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f04f 32ff 	mov.w	r2, #4294967295
 800479a:	9202      	str	r2, [sp, #8]
 800479c:	9301      	str	r3, [sp, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	9300      	str	r3, [sp, #0]
 80047a2:	2301      	movs	r3, #1
 80047a4:	2240      	movs	r2, #64	; 0x40
 80047a6:	2178      	movs	r1, #120	; 0x78
 80047a8:	4803      	ldr	r0, [pc, #12]	; (80047b8 <ssd1306_WriteData+0x30>)
 80047aa:	f7fc ff75 	bl	8001698 <HAL_I2C_Mem_Write>
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	20000078 	.word	0x20000078

080047bc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80047c0:	f7ff ffc2 	bl	8004748 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80047c4:	2064      	movs	r0, #100	; 0x64
 80047c6:	f7fc fbe5 	bl	8000f94 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80047ca:	2000      	movs	r0, #0
 80047cc:	f000 f9d6 	bl	8004b7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80047d0:	2020      	movs	r0, #32
 80047d2:	f7ff ffc1 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80047d6:	2000      	movs	r0, #0
 80047d8:	f7ff ffbe 	bl	8004758 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80047dc:	20b0      	movs	r0, #176	; 0xb0
 80047de:	f7ff ffbb 	bl	8004758 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80047e2:	20c8      	movs	r0, #200	; 0xc8
 80047e4:	f7ff ffb8 	bl	8004758 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80047e8:	2000      	movs	r0, #0
 80047ea:	f7ff ffb5 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80047ee:	2010      	movs	r0, #16
 80047f0:	f7ff ffb2 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80047f4:	2040      	movs	r0, #64	; 0x40
 80047f6:	f7ff ffaf 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80047fa:	20ff      	movs	r0, #255	; 0xff
 80047fc:	f000 f9aa 	bl	8004b54 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004800:	20a1      	movs	r0, #161	; 0xa1
 8004802:	f7ff ffa9 	bl	8004758 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004806:	20a6      	movs	r0, #166	; 0xa6
 8004808:	f7ff ffa6 	bl	8004758 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800480c:	20a8      	movs	r0, #168	; 0xa8
 800480e:	f7ff ffa3 	bl	8004758 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004812:	203f      	movs	r0, #63	; 0x3f
 8004814:	f7ff ffa0 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004818:	20a4      	movs	r0, #164	; 0xa4
 800481a:	f7ff ff9d 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800481e:	20d3      	movs	r0, #211	; 0xd3
 8004820:	f7ff ff9a 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004824:	2000      	movs	r0, #0
 8004826:	f7ff ff97 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800482a:	20d5      	movs	r0, #213	; 0xd5
 800482c:	f7ff ff94 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004830:	20f0      	movs	r0, #240	; 0xf0
 8004832:	f7ff ff91 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004836:	20d9      	movs	r0, #217	; 0xd9
 8004838:	f7ff ff8e 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800483c:	2022      	movs	r0, #34	; 0x22
 800483e:	f7ff ff8b 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004842:	20da      	movs	r0, #218	; 0xda
 8004844:	f7ff ff88 	bl	8004758 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004848:	2012      	movs	r0, #18
 800484a:	f7ff ff85 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800484e:	20db      	movs	r0, #219	; 0xdb
 8004850:	f7ff ff82 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004854:	2020      	movs	r0, #32
 8004856:	f7ff ff7f 	bl	8004758 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800485a:	208d      	movs	r0, #141	; 0x8d
 800485c:	f7ff ff7c 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004860:	2014      	movs	r0, #20
 8004862:	f7ff ff79 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004866:	2001      	movs	r0, #1
 8004868:	f000 f988 	bl	8004b7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800486c:	2000      	movs	r0, #0
 800486e:	f000 f80f 	bl	8004890 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004872:	f000 f825 	bl	80048c0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <ssd1306_Init+0xd0>)
 8004878:	2200      	movs	r2, #0
 800487a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <ssd1306_Init+0xd0>)
 800487e:	2200      	movs	r2, #0
 8004880:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004882:	4b02      	ldr	r3, [pc, #8]	; (800488c <ssd1306_Init+0xd0>)
 8004884:	2201      	movs	r2, #1
 8004886:	711a      	strb	r2, [r3, #4]
}
 8004888:	bf00      	nop
 800488a:	bd80      	pop	{r7, pc}
 800488c:	200003c0 	.word	0x200003c0

08004890 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800489a:	79fb      	ldrb	r3, [r7, #7]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <ssd1306_Fill+0x14>
 80048a0:	2300      	movs	r3, #0
 80048a2:	e000      	b.n	80048a6 <ssd1306_Fill+0x16>
 80048a4:	23ff      	movs	r3, #255	; 0xff
 80048a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048aa:	4619      	mov	r1, r3
 80048ac:	4803      	ldr	r0, [pc, #12]	; (80048bc <ssd1306_Fill+0x2c>)
 80048ae:	f000 f9a3 	bl	8004bf8 <memset>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	200001c0 	.word	0x200001c0

080048c0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80048c6:	2300      	movs	r3, #0
 80048c8:	71fb      	strb	r3, [r7, #7]
 80048ca:	e016      	b.n	80048fa <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80048cc:	79fb      	ldrb	r3, [r7, #7]
 80048ce:	3b50      	subs	r3, #80	; 0x50
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	4618      	mov	r0, r3
 80048d4:	f7ff ff40 	bl	8004758 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80048d8:	2000      	movs	r0, #0
 80048da:	f7ff ff3d 	bl	8004758 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80048de:	2010      	movs	r0, #16
 80048e0:	f7ff ff3a 	bl	8004758 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80048e4:	79fb      	ldrb	r3, [r7, #7]
 80048e6:	019b      	lsls	r3, r3, #6
 80048e8:	4a08      	ldr	r2, [pc, #32]	; (800490c <ssd1306_UpdateScreen+0x4c>)
 80048ea:	4413      	add	r3, r2
 80048ec:	2140      	movs	r1, #64	; 0x40
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff ff4a 	bl	8004788 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	3301      	adds	r3, #1
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	79fb      	ldrb	r3, [r7, #7]
 80048fc:	2b07      	cmp	r3, #7
 80048fe:	d9e5      	bls.n	80048cc <ssd1306_UpdateScreen+0xc>
    }
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200001c0 	.word	0x200001c0

08004910 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
 800491a:	460b      	mov	r3, r1
 800491c:	71bb      	strb	r3, [r7, #6]
 800491e:	4613      	mov	r3, r2
 8004920:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004922:	79fb      	ldrb	r3, [r7, #7]
 8004924:	2b3f      	cmp	r3, #63	; 0x3f
 8004926:	d83d      	bhi.n	80049a4 <ssd1306_DrawPixel+0x94>
 8004928:	79bb      	ldrb	r3, [r7, #6]
 800492a:	2b3f      	cmp	r3, #63	; 0x3f
 800492c:	d83a      	bhi.n	80049a4 <ssd1306_DrawPixel+0x94>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800492e:	797b      	ldrb	r3, [r7, #5]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d11a      	bne.n	800496a <ssd1306_DrawPixel+0x5a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004934:	79fa      	ldrb	r2, [r7, #7]
 8004936:	79bb      	ldrb	r3, [r7, #6]
 8004938:	08db      	lsrs	r3, r3, #3
 800493a:	b2d8      	uxtb	r0, r3
 800493c:	4603      	mov	r3, r0
 800493e:	019b      	lsls	r3, r3, #6
 8004940:	4413      	add	r3, r2
 8004942:	4a1b      	ldr	r2, [pc, #108]	; (80049b0 <ssd1306_DrawPixel+0xa0>)
 8004944:	5cd3      	ldrb	r3, [r2, r3]
 8004946:	b25a      	sxtb	r2, r3
 8004948:	79bb      	ldrb	r3, [r7, #6]
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2101      	movs	r1, #1
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	b25b      	sxtb	r3, r3
 8004956:	4313      	orrs	r3, r2
 8004958:	b259      	sxtb	r1, r3
 800495a:	79fa      	ldrb	r2, [r7, #7]
 800495c:	4603      	mov	r3, r0
 800495e:	019b      	lsls	r3, r3, #6
 8004960:	4413      	add	r3, r2
 8004962:	b2c9      	uxtb	r1, r1
 8004964:	4a12      	ldr	r2, [pc, #72]	; (80049b0 <ssd1306_DrawPixel+0xa0>)
 8004966:	54d1      	strb	r1, [r2, r3]
 8004968:	e01d      	b.n	80049a6 <ssd1306_DrawPixel+0x96>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800496a:	79fa      	ldrb	r2, [r7, #7]
 800496c:	79bb      	ldrb	r3, [r7, #6]
 800496e:	08db      	lsrs	r3, r3, #3
 8004970:	b2d8      	uxtb	r0, r3
 8004972:	4603      	mov	r3, r0
 8004974:	019b      	lsls	r3, r3, #6
 8004976:	4413      	add	r3, r2
 8004978:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <ssd1306_DrawPixel+0xa0>)
 800497a:	5cd3      	ldrb	r3, [r2, r3]
 800497c:	b25a      	sxtb	r2, r3
 800497e:	79bb      	ldrb	r3, [r7, #6]
 8004980:	f003 0307 	and.w	r3, r3, #7
 8004984:	2101      	movs	r1, #1
 8004986:	fa01 f303 	lsl.w	r3, r1, r3
 800498a:	b25b      	sxtb	r3, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	b25b      	sxtb	r3, r3
 8004990:	4013      	ands	r3, r2
 8004992:	b259      	sxtb	r1, r3
 8004994:	79fa      	ldrb	r2, [r7, #7]
 8004996:	4603      	mov	r3, r0
 8004998:	019b      	lsls	r3, r3, #6
 800499a:	4413      	add	r3, r2
 800499c:	b2c9      	uxtb	r1, r1
 800499e:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <ssd1306_DrawPixel+0xa0>)
 80049a0:	54d1      	strb	r1, [r2, r3]
 80049a2:	e000      	b.n	80049a6 <ssd1306_DrawPixel+0x96>
        return;
 80049a4:	bf00      	nop
    }
}
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr
 80049b0:	200001c0 	.word	0x200001c0

080049b4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b089      	sub	sp, #36	; 0x24
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4638      	mov	r0, r7
 80049be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80049c2:	4623      	mov	r3, r4
 80049c4:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b1f      	cmp	r3, #31
 80049ca:	d902      	bls.n	80049d2 <ssd1306_WriteChar+0x1e>
 80049cc:	7bfb      	ldrb	r3, [r7, #15]
 80049ce:	2b7e      	cmp	r3, #126	; 0x7e
 80049d0:	d901      	bls.n	80049d6 <ssd1306_WriteChar+0x22>
        return 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e079      	b.n	8004aca <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80049d6:	4b3f      	ldr	r3, [pc, #252]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	783b      	ldrb	r3, [r7, #0]
 80049de:	4413      	add	r3, r2
 80049e0:	2b40      	cmp	r3, #64	; 0x40
 80049e2:	dc06      	bgt.n	80049f2 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80049e4:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 80049e6:	885b      	ldrh	r3, [r3, #2]
 80049e8:	461a      	mov	r2, r3
 80049ea:	787b      	ldrb	r3, [r7, #1]
 80049ec:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	dd01      	ble.n	80049f6 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80049f2:	2300      	movs	r3, #0
 80049f4:	e069      	b.n	8004aca <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80049f6:	2300      	movs	r3, #0
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	e04e      	b.n	8004a9a <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	7bfb      	ldrb	r3, [r7, #15]
 8004a00:	3b20      	subs	r3, #32
 8004a02:	7879      	ldrb	r1, [r7, #1]
 8004a04:	fb01 f303 	mul.w	r3, r1, r3
 8004a08:	4619      	mov	r1, r3
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	440b      	add	r3, r1
 8004a0e:	005b      	lsls	r3, r3, #1
 8004a10:	4413      	add	r3, r2
 8004a12:	881b      	ldrh	r3, [r3, #0]
 8004a14:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8004a16:	2300      	movs	r3, #0
 8004a18:	61bb      	str	r3, [r7, #24]
 8004a1a:	e036      	b.n	8004a8a <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d013      	beq.n	8004a54 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004a2c:	4b29      	ldr	r3, [pc, #164]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004a2e:	881b      	ldrh	r3, [r3, #0]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	4413      	add	r3, r2
 8004a38:	b2d8      	uxtb	r0, r3
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004a3c:	885b      	ldrh	r3, [r3, #2]
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	4413      	add	r3, r2
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	f7ff ff5f 	bl	8004910 <ssd1306_DrawPixel>
 8004a52:	e017      	b.n	8004a84 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004a54:	4b1f      	ldr	r3, [pc, #124]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004a56:	881b      	ldrh	r3, [r3, #0]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	4413      	add	r3, r2
 8004a60:	b2d8      	uxtb	r0, r3
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004a64:	885b      	ldrh	r3, [r3, #2]
 8004a66:	b2da      	uxtb	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	4413      	add	r3, r2
 8004a6e:	b2d9      	uxtb	r1, r3
 8004a70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f7ff ff46 	bl	8004910 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	3301      	adds	r3, #1
 8004a88:	61bb      	str	r3, [r7, #24]
 8004a8a:	783b      	ldrb	r3, [r7, #0]
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d3c3      	bcc.n	8004a1c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	3301      	adds	r3, #1
 8004a98:	61fb      	str	r3, [r7, #28]
 8004a9a:	787b      	ldrb	r3, [r7, #1]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d3ab      	bcc.n	80049fc <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004aa6:	881a      	ldrh	r2, [r3, #0]
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <ssd1306_WriteChar+0x108>
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	3b20      	subs	r3, #32
 8004ab4:	440b      	add	r3, r1
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	e001      	b.n	8004ac0 <ssd1306_WriteChar+0x10c>
 8004abc:	783b      	ldrb	r3, [r7, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	4b03      	ldr	r3, [pc, #12]	; (8004ad4 <ssd1306_WriteChar+0x120>)
 8004ac6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3724      	adds	r7, #36	; 0x24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd90      	pop	{r4, r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	200003c0 	.word	0x200003c0

08004ad8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af02      	add	r7, sp, #8
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	4638      	mov	r0, r7
 8004ae2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004ae6:	e013      	b.n	8004b10 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	7818      	ldrb	r0, [r3, #0]
 8004aec:	7e3b      	ldrb	r3, [r7, #24]
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	463b      	mov	r3, r7
 8004af2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004af4:	f7ff ff5e 	bl	80049b4 <ssd1306_WriteChar>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	781b      	ldrb	r3, [r3, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d002      	beq.n	8004b0a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	e008      	b.n	8004b1c <ssd1306_WriteString+0x44>
        }
        str++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e7      	bne.n	8004ae8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	781b      	ldrb	r3, [r3, #0]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3710      	adds	r7, #16
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	460a      	mov	r2, r1
 8004b2e:	71fb      	strb	r3, [r7, #7]
 8004b30:	4613      	mov	r3, r2
 8004b32:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <ssd1306_SetCursor+0x2c>)
 8004b3a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004b3c:	79bb      	ldrb	r3, [r7, #6]
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	4b03      	ldr	r3, [pc, #12]	; (8004b50 <ssd1306_SetCursor+0x2c>)
 8004b42:	805a      	strh	r2, [r3, #2]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	200003c0 	.word	0x200003c0

08004b54 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8004b5e:	2381      	movs	r3, #129	; 0x81
 8004b60:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8004b62:	7bfb      	ldrb	r3, [r7, #15]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7ff fdf7 	bl	8004758 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7ff fdf3 	bl	8004758 <ssd1306_WriteCommand>
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8004b86:	79fb      	ldrb	r3, [r7, #7]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004b8c:	23af      	movs	r3, #175	; 0xaf
 8004b8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004b90:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <ssd1306_SetDisplayOn+0x38>)
 8004b92:	2201      	movs	r2, #1
 8004b94:	715a      	strb	r2, [r3, #5]
 8004b96:	e004      	b.n	8004ba2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004b98:	23ae      	movs	r3, #174	; 0xae
 8004b9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004b9c:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <ssd1306_SetDisplayOn+0x38>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f7ff fdd7 	bl	8004758 <ssd1306_WriteCommand>
}
 8004baa:	bf00      	nop
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	200003c0 	.word	0x200003c0

08004bb8 <siprintf>:
 8004bb8:	b40e      	push	{r1, r2, r3}
 8004bba:	b500      	push	{lr}
 8004bbc:	b09c      	sub	sp, #112	; 0x70
 8004bbe:	ab1d      	add	r3, sp, #116	; 0x74
 8004bc0:	9002      	str	r0, [sp, #8]
 8004bc2:	9006      	str	r0, [sp, #24]
 8004bc4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bc8:	4809      	ldr	r0, [pc, #36]	; (8004bf0 <siprintf+0x38>)
 8004bca:	9107      	str	r1, [sp, #28]
 8004bcc:	9104      	str	r1, [sp, #16]
 8004bce:	4909      	ldr	r1, [pc, #36]	; (8004bf4 <siprintf+0x3c>)
 8004bd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004bd4:	9105      	str	r1, [sp, #20]
 8004bd6:	6800      	ldr	r0, [r0, #0]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	a902      	add	r1, sp, #8
 8004bdc:	f000 f9a0 	bl	8004f20 <_svfiprintf_r>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
 8004be6:	b01c      	add	sp, #112	; 0x70
 8004be8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bec:	b003      	add	sp, #12
 8004bee:	4770      	bx	lr
 8004bf0:	20000058 	.word	0x20000058
 8004bf4:	ffff0208 	.word	0xffff0208

08004bf8 <memset>:
 8004bf8:	4402      	add	r2, r0
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d100      	bne.n	8004c02 <memset+0xa>
 8004c00:	4770      	bx	lr
 8004c02:	f803 1b01 	strb.w	r1, [r3], #1
 8004c06:	e7f9      	b.n	8004bfc <memset+0x4>

08004c08 <__errno>:
 8004c08:	4b01      	ldr	r3, [pc, #4]	; (8004c10 <__errno+0x8>)
 8004c0a:	6818      	ldr	r0, [r3, #0]
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	20000058 	.word	0x20000058

08004c14 <__libc_init_array>:
 8004c14:	b570      	push	{r4, r5, r6, lr}
 8004c16:	4d0d      	ldr	r5, [pc, #52]	; (8004c4c <__libc_init_array+0x38>)
 8004c18:	4c0d      	ldr	r4, [pc, #52]	; (8004c50 <__libc_init_array+0x3c>)
 8004c1a:	1b64      	subs	r4, r4, r5
 8004c1c:	10a4      	asrs	r4, r4, #2
 8004c1e:	2600      	movs	r6, #0
 8004c20:	42a6      	cmp	r6, r4
 8004c22:	d109      	bne.n	8004c38 <__libc_init_array+0x24>
 8004c24:	4d0b      	ldr	r5, [pc, #44]	; (8004c54 <__libc_init_array+0x40>)
 8004c26:	4c0c      	ldr	r4, [pc, #48]	; (8004c58 <__libc_init_array+0x44>)
 8004c28:	f000 fc6a 	bl	8005500 <_init>
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	2600      	movs	r6, #0
 8004c32:	42a6      	cmp	r6, r4
 8004c34:	d105      	bne.n	8004c42 <__libc_init_array+0x2e>
 8004c36:	bd70      	pop	{r4, r5, r6, pc}
 8004c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c3c:	4798      	blx	r3
 8004c3e:	3601      	adds	r6, #1
 8004c40:	e7ee      	b.n	8004c20 <__libc_init_array+0xc>
 8004c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c46:	4798      	blx	r3
 8004c48:	3601      	adds	r6, #1
 8004c4a:	e7f2      	b.n	8004c32 <__libc_init_array+0x1e>
 8004c4c:	0800632c 	.word	0x0800632c
 8004c50:	0800632c 	.word	0x0800632c
 8004c54:	0800632c 	.word	0x0800632c
 8004c58:	08006330 	.word	0x08006330

08004c5c <__retarget_lock_acquire_recursive>:
 8004c5c:	4770      	bx	lr

08004c5e <__retarget_lock_release_recursive>:
 8004c5e:	4770      	bx	lr

08004c60 <memcpy>:
 8004c60:	440a      	add	r2, r1
 8004c62:	4291      	cmp	r1, r2
 8004c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c68:	d100      	bne.n	8004c6c <memcpy+0xc>
 8004c6a:	4770      	bx	lr
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c76:	4291      	cmp	r1, r2
 8004c78:	d1f9      	bne.n	8004c6e <memcpy+0xe>
 8004c7a:	bd10      	pop	{r4, pc}

08004c7c <_free_r>:
 8004c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	d044      	beq.n	8004d0c <_free_r+0x90>
 8004c82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c86:	9001      	str	r0, [sp, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f1a1 0404 	sub.w	r4, r1, #4
 8004c8e:	bfb8      	it	lt
 8004c90:	18e4      	addlt	r4, r4, r3
 8004c92:	f000 f8df 	bl	8004e54 <__malloc_lock>
 8004c96:	4a1e      	ldr	r2, [pc, #120]	; (8004d10 <_free_r+0x94>)
 8004c98:	9801      	ldr	r0, [sp, #4]
 8004c9a:	6813      	ldr	r3, [r2, #0]
 8004c9c:	b933      	cbnz	r3, 8004cac <_free_r+0x30>
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	6014      	str	r4, [r2, #0]
 8004ca2:	b003      	add	sp, #12
 8004ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ca8:	f000 b8da 	b.w	8004e60 <__malloc_unlock>
 8004cac:	42a3      	cmp	r3, r4
 8004cae:	d908      	bls.n	8004cc2 <_free_r+0x46>
 8004cb0:	6825      	ldr	r5, [r4, #0]
 8004cb2:	1961      	adds	r1, r4, r5
 8004cb4:	428b      	cmp	r3, r1
 8004cb6:	bf01      	itttt	eq
 8004cb8:	6819      	ldreq	r1, [r3, #0]
 8004cba:	685b      	ldreq	r3, [r3, #4]
 8004cbc:	1949      	addeq	r1, r1, r5
 8004cbe:	6021      	streq	r1, [r4, #0]
 8004cc0:	e7ed      	b.n	8004c9e <_free_r+0x22>
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	b10b      	cbz	r3, 8004ccc <_free_r+0x50>
 8004cc8:	42a3      	cmp	r3, r4
 8004cca:	d9fa      	bls.n	8004cc2 <_free_r+0x46>
 8004ccc:	6811      	ldr	r1, [r2, #0]
 8004cce:	1855      	adds	r5, r2, r1
 8004cd0:	42a5      	cmp	r5, r4
 8004cd2:	d10b      	bne.n	8004cec <_free_r+0x70>
 8004cd4:	6824      	ldr	r4, [r4, #0]
 8004cd6:	4421      	add	r1, r4
 8004cd8:	1854      	adds	r4, r2, r1
 8004cda:	42a3      	cmp	r3, r4
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	d1e0      	bne.n	8004ca2 <_free_r+0x26>
 8004ce0:	681c      	ldr	r4, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	6053      	str	r3, [r2, #4]
 8004ce6:	440c      	add	r4, r1
 8004ce8:	6014      	str	r4, [r2, #0]
 8004cea:	e7da      	b.n	8004ca2 <_free_r+0x26>
 8004cec:	d902      	bls.n	8004cf4 <_free_r+0x78>
 8004cee:	230c      	movs	r3, #12
 8004cf0:	6003      	str	r3, [r0, #0]
 8004cf2:	e7d6      	b.n	8004ca2 <_free_r+0x26>
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	1961      	adds	r1, r4, r5
 8004cf8:	428b      	cmp	r3, r1
 8004cfa:	bf04      	itt	eq
 8004cfc:	6819      	ldreq	r1, [r3, #0]
 8004cfe:	685b      	ldreq	r3, [r3, #4]
 8004d00:	6063      	str	r3, [r4, #4]
 8004d02:	bf04      	itt	eq
 8004d04:	1949      	addeq	r1, r1, r5
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	6054      	str	r4, [r2, #4]
 8004d0a:	e7ca      	b.n	8004ca2 <_free_r+0x26>
 8004d0c:	b003      	add	sp, #12
 8004d0e:	bd30      	pop	{r4, r5, pc}
 8004d10:	20000508 	.word	0x20000508

08004d14 <sbrk_aligned>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4e0e      	ldr	r6, [pc, #56]	; (8004d50 <sbrk_aligned+0x3c>)
 8004d18:	460c      	mov	r4, r1
 8004d1a:	6831      	ldr	r1, [r6, #0]
 8004d1c:	4605      	mov	r5, r0
 8004d1e:	b911      	cbnz	r1, 8004d26 <sbrk_aligned+0x12>
 8004d20:	f000 fba6 	bl	8005470 <_sbrk_r>
 8004d24:	6030      	str	r0, [r6, #0]
 8004d26:	4621      	mov	r1, r4
 8004d28:	4628      	mov	r0, r5
 8004d2a:	f000 fba1 	bl	8005470 <_sbrk_r>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d00a      	beq.n	8004d48 <sbrk_aligned+0x34>
 8004d32:	1cc4      	adds	r4, r0, #3
 8004d34:	f024 0403 	bic.w	r4, r4, #3
 8004d38:	42a0      	cmp	r0, r4
 8004d3a:	d007      	beq.n	8004d4c <sbrk_aligned+0x38>
 8004d3c:	1a21      	subs	r1, r4, r0
 8004d3e:	4628      	mov	r0, r5
 8004d40:	f000 fb96 	bl	8005470 <_sbrk_r>
 8004d44:	3001      	adds	r0, #1
 8004d46:	d101      	bne.n	8004d4c <sbrk_aligned+0x38>
 8004d48:	f04f 34ff 	mov.w	r4, #4294967295
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	bd70      	pop	{r4, r5, r6, pc}
 8004d50:	2000050c 	.word	0x2000050c

08004d54 <_malloc_r>:
 8004d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d58:	1ccd      	adds	r5, r1, #3
 8004d5a:	f025 0503 	bic.w	r5, r5, #3
 8004d5e:	3508      	adds	r5, #8
 8004d60:	2d0c      	cmp	r5, #12
 8004d62:	bf38      	it	cc
 8004d64:	250c      	movcc	r5, #12
 8004d66:	2d00      	cmp	r5, #0
 8004d68:	4607      	mov	r7, r0
 8004d6a:	db01      	blt.n	8004d70 <_malloc_r+0x1c>
 8004d6c:	42a9      	cmp	r1, r5
 8004d6e:	d905      	bls.n	8004d7c <_malloc_r+0x28>
 8004d70:	230c      	movs	r3, #12
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	2600      	movs	r6, #0
 8004d76:	4630      	mov	r0, r6
 8004d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004e50 <_malloc_r+0xfc>
 8004d80:	f000 f868 	bl	8004e54 <__malloc_lock>
 8004d84:	f8d8 3000 	ldr.w	r3, [r8]
 8004d88:	461c      	mov	r4, r3
 8004d8a:	bb5c      	cbnz	r4, 8004de4 <_malloc_r+0x90>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	4638      	mov	r0, r7
 8004d90:	f7ff ffc0 	bl	8004d14 <sbrk_aligned>
 8004d94:	1c43      	adds	r3, r0, #1
 8004d96:	4604      	mov	r4, r0
 8004d98:	d155      	bne.n	8004e46 <_malloc_r+0xf2>
 8004d9a:	f8d8 4000 	ldr.w	r4, [r8]
 8004d9e:	4626      	mov	r6, r4
 8004da0:	2e00      	cmp	r6, #0
 8004da2:	d145      	bne.n	8004e30 <_malloc_r+0xdc>
 8004da4:	2c00      	cmp	r4, #0
 8004da6:	d048      	beq.n	8004e3a <_malloc_r+0xe6>
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	4631      	mov	r1, r6
 8004dac:	4638      	mov	r0, r7
 8004dae:	eb04 0903 	add.w	r9, r4, r3
 8004db2:	f000 fb5d 	bl	8005470 <_sbrk_r>
 8004db6:	4581      	cmp	r9, r0
 8004db8:	d13f      	bne.n	8004e3a <_malloc_r+0xe6>
 8004dba:	6821      	ldr	r1, [r4, #0]
 8004dbc:	1a6d      	subs	r5, r5, r1
 8004dbe:	4629      	mov	r1, r5
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	f7ff ffa7 	bl	8004d14 <sbrk_aligned>
 8004dc6:	3001      	adds	r0, #1
 8004dc8:	d037      	beq.n	8004e3a <_malloc_r+0xe6>
 8004dca:	6823      	ldr	r3, [r4, #0]
 8004dcc:	442b      	add	r3, r5
 8004dce:	6023      	str	r3, [r4, #0]
 8004dd0:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d038      	beq.n	8004e4a <_malloc_r+0xf6>
 8004dd8:	685a      	ldr	r2, [r3, #4]
 8004dda:	42a2      	cmp	r2, r4
 8004ddc:	d12b      	bne.n	8004e36 <_malloc_r+0xe2>
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	e00f      	b.n	8004e04 <_malloc_r+0xb0>
 8004de4:	6822      	ldr	r2, [r4, #0]
 8004de6:	1b52      	subs	r2, r2, r5
 8004de8:	d41f      	bmi.n	8004e2a <_malloc_r+0xd6>
 8004dea:	2a0b      	cmp	r2, #11
 8004dec:	d917      	bls.n	8004e1e <_malloc_r+0xca>
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	42a3      	cmp	r3, r4
 8004df2:	6025      	str	r5, [r4, #0]
 8004df4:	bf18      	it	ne
 8004df6:	6059      	strne	r1, [r3, #4]
 8004df8:	6863      	ldr	r3, [r4, #4]
 8004dfa:	bf08      	it	eq
 8004dfc:	f8c8 1000 	streq.w	r1, [r8]
 8004e00:	5162      	str	r2, [r4, r5]
 8004e02:	604b      	str	r3, [r1, #4]
 8004e04:	4638      	mov	r0, r7
 8004e06:	f104 060b 	add.w	r6, r4, #11
 8004e0a:	f000 f829 	bl	8004e60 <__malloc_unlock>
 8004e0e:	f026 0607 	bic.w	r6, r6, #7
 8004e12:	1d23      	adds	r3, r4, #4
 8004e14:	1af2      	subs	r2, r6, r3
 8004e16:	d0ae      	beq.n	8004d76 <_malloc_r+0x22>
 8004e18:	1b9b      	subs	r3, r3, r6
 8004e1a:	50a3      	str	r3, [r4, r2]
 8004e1c:	e7ab      	b.n	8004d76 <_malloc_r+0x22>
 8004e1e:	42a3      	cmp	r3, r4
 8004e20:	6862      	ldr	r2, [r4, #4]
 8004e22:	d1dd      	bne.n	8004de0 <_malloc_r+0x8c>
 8004e24:	f8c8 2000 	str.w	r2, [r8]
 8004e28:	e7ec      	b.n	8004e04 <_malloc_r+0xb0>
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	6864      	ldr	r4, [r4, #4]
 8004e2e:	e7ac      	b.n	8004d8a <_malloc_r+0x36>
 8004e30:	4634      	mov	r4, r6
 8004e32:	6876      	ldr	r6, [r6, #4]
 8004e34:	e7b4      	b.n	8004da0 <_malloc_r+0x4c>
 8004e36:	4613      	mov	r3, r2
 8004e38:	e7cc      	b.n	8004dd4 <_malloc_r+0x80>
 8004e3a:	230c      	movs	r3, #12
 8004e3c:	603b      	str	r3, [r7, #0]
 8004e3e:	4638      	mov	r0, r7
 8004e40:	f000 f80e 	bl	8004e60 <__malloc_unlock>
 8004e44:	e797      	b.n	8004d76 <_malloc_r+0x22>
 8004e46:	6025      	str	r5, [r4, #0]
 8004e48:	e7dc      	b.n	8004e04 <_malloc_r+0xb0>
 8004e4a:	605b      	str	r3, [r3, #4]
 8004e4c:	deff      	udf	#255	; 0xff
 8004e4e:	bf00      	nop
 8004e50:	20000508 	.word	0x20000508

08004e54 <__malloc_lock>:
 8004e54:	4801      	ldr	r0, [pc, #4]	; (8004e5c <__malloc_lock+0x8>)
 8004e56:	f7ff bf01 	b.w	8004c5c <__retarget_lock_acquire_recursive>
 8004e5a:	bf00      	nop
 8004e5c:	20000504 	.word	0x20000504

08004e60 <__malloc_unlock>:
 8004e60:	4801      	ldr	r0, [pc, #4]	; (8004e68 <__malloc_unlock+0x8>)
 8004e62:	f7ff befc 	b.w	8004c5e <__retarget_lock_release_recursive>
 8004e66:	bf00      	nop
 8004e68:	20000504 	.word	0x20000504

08004e6c <__ssputs_r>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	688e      	ldr	r6, [r1, #8]
 8004e72:	461f      	mov	r7, r3
 8004e74:	42be      	cmp	r6, r7
 8004e76:	680b      	ldr	r3, [r1, #0]
 8004e78:	4682      	mov	sl, r0
 8004e7a:	460c      	mov	r4, r1
 8004e7c:	4690      	mov	r8, r2
 8004e7e:	d82c      	bhi.n	8004eda <__ssputs_r+0x6e>
 8004e80:	898a      	ldrh	r2, [r1, #12]
 8004e82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e86:	d026      	beq.n	8004ed6 <__ssputs_r+0x6a>
 8004e88:	6965      	ldr	r5, [r4, #20]
 8004e8a:	6909      	ldr	r1, [r1, #16]
 8004e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e90:	eba3 0901 	sub.w	r9, r3, r1
 8004e94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e98:	1c7b      	adds	r3, r7, #1
 8004e9a:	444b      	add	r3, r9
 8004e9c:	106d      	asrs	r5, r5, #1
 8004e9e:	429d      	cmp	r5, r3
 8004ea0:	bf38      	it	cc
 8004ea2:	461d      	movcc	r5, r3
 8004ea4:	0553      	lsls	r3, r2, #21
 8004ea6:	d527      	bpl.n	8004ef8 <__ssputs_r+0x8c>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7ff ff53 	bl	8004d54 <_malloc_r>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	b360      	cbz	r0, 8004f0c <__ssputs_r+0xa0>
 8004eb2:	6921      	ldr	r1, [r4, #16]
 8004eb4:	464a      	mov	r2, r9
 8004eb6:	f7ff fed3 	bl	8004c60 <memcpy>
 8004eba:	89a3      	ldrh	r3, [r4, #12]
 8004ebc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	6126      	str	r6, [r4, #16]
 8004ec8:	6165      	str	r5, [r4, #20]
 8004eca:	444e      	add	r6, r9
 8004ecc:	eba5 0509 	sub.w	r5, r5, r9
 8004ed0:	6026      	str	r6, [r4, #0]
 8004ed2:	60a5      	str	r5, [r4, #8]
 8004ed4:	463e      	mov	r6, r7
 8004ed6:	42be      	cmp	r6, r7
 8004ed8:	d900      	bls.n	8004edc <__ssputs_r+0x70>
 8004eda:	463e      	mov	r6, r7
 8004edc:	6820      	ldr	r0, [r4, #0]
 8004ede:	4632      	mov	r2, r6
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	f000 faab 	bl	800543c <memmove>
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	1b9b      	subs	r3, r3, r6
 8004eea:	60a3      	str	r3, [r4, #8]
 8004eec:	6823      	ldr	r3, [r4, #0]
 8004eee:	4433      	add	r3, r6
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	462a      	mov	r2, r5
 8004efa:	f000 fac9 	bl	8005490 <_realloc_r>
 8004efe:	4606      	mov	r6, r0
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d1e0      	bne.n	8004ec6 <__ssputs_r+0x5a>
 8004f04:	6921      	ldr	r1, [r4, #16]
 8004f06:	4650      	mov	r0, sl
 8004f08:	f7ff feb8 	bl	8004c7c <_free_r>
 8004f0c:	230c      	movs	r3, #12
 8004f0e:	f8ca 3000 	str.w	r3, [sl]
 8004f12:	89a3      	ldrh	r3, [r4, #12]
 8004f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1e:	e7e9      	b.n	8004ef4 <__ssputs_r+0x88>

08004f20 <_svfiprintf_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	4698      	mov	r8, r3
 8004f26:	898b      	ldrh	r3, [r1, #12]
 8004f28:	061b      	lsls	r3, r3, #24
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	460d      	mov	r5, r1
 8004f30:	4614      	mov	r4, r2
 8004f32:	d50e      	bpl.n	8004f52 <_svfiprintf_r+0x32>
 8004f34:	690b      	ldr	r3, [r1, #16]
 8004f36:	b963      	cbnz	r3, 8004f52 <_svfiprintf_r+0x32>
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	f7ff ff0b 	bl	8004d54 <_malloc_r>
 8004f3e:	6028      	str	r0, [r5, #0]
 8004f40:	6128      	str	r0, [r5, #16]
 8004f42:	b920      	cbnz	r0, 8004f4e <_svfiprintf_r+0x2e>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4c:	e0d0      	b.n	80050f0 <_svfiprintf_r+0x1d0>
 8004f4e:	2340      	movs	r3, #64	; 0x40
 8004f50:	616b      	str	r3, [r5, #20]
 8004f52:	2300      	movs	r3, #0
 8004f54:	9309      	str	r3, [sp, #36]	; 0x24
 8004f56:	2320      	movs	r3, #32
 8004f58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004f60:	2330      	movs	r3, #48	; 0x30
 8004f62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005108 <_svfiprintf_r+0x1e8>
 8004f66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f6a:	f04f 0901 	mov.w	r9, #1
 8004f6e:	4623      	mov	r3, r4
 8004f70:	469a      	mov	sl, r3
 8004f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004f76:	b10a      	cbz	r2, 8004f7c <_svfiprintf_r+0x5c>
 8004f78:	2a25      	cmp	r2, #37	; 0x25
 8004f7a:	d1f9      	bne.n	8004f70 <_svfiprintf_r+0x50>
 8004f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8004f80:	d00b      	beq.n	8004f9a <_svfiprintf_r+0x7a>
 8004f82:	465b      	mov	r3, fp
 8004f84:	4622      	mov	r2, r4
 8004f86:	4629      	mov	r1, r5
 8004f88:	4638      	mov	r0, r7
 8004f8a:	f7ff ff6f 	bl	8004e6c <__ssputs_r>
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f000 80a9 	beq.w	80050e6 <_svfiprintf_r+0x1c6>
 8004f94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f96:	445a      	add	r2, fp
 8004f98:	9209      	str	r2, [sp, #36]	; 0x24
 8004f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 80a1 	beq.w	80050e6 <_svfiprintf_r+0x1c6>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fae:	f10a 0a01 	add.w	sl, sl, #1
 8004fb2:	9304      	str	r3, [sp, #16]
 8004fb4:	9307      	str	r3, [sp, #28]
 8004fb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fba:	931a      	str	r3, [sp, #104]	; 0x68
 8004fbc:	4654      	mov	r4, sl
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fc4:	4850      	ldr	r0, [pc, #320]	; (8005108 <_svfiprintf_r+0x1e8>)
 8004fc6:	f7fb f92b 	bl	8000220 <memchr>
 8004fca:	9a04      	ldr	r2, [sp, #16]
 8004fcc:	b9d8      	cbnz	r0, 8005006 <_svfiprintf_r+0xe6>
 8004fce:	06d0      	lsls	r0, r2, #27
 8004fd0:	bf44      	itt	mi
 8004fd2:	2320      	movmi	r3, #32
 8004fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fd8:	0711      	lsls	r1, r2, #28
 8004fda:	bf44      	itt	mi
 8004fdc:	232b      	movmi	r3, #43	; 0x2b
 8004fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8004fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8004fe8:	d015      	beq.n	8005016 <_svfiprintf_r+0xf6>
 8004fea:	9a07      	ldr	r2, [sp, #28]
 8004fec:	4654      	mov	r4, sl
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f04f 0c0a 	mov.w	ip, #10
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ffa:	3b30      	subs	r3, #48	; 0x30
 8004ffc:	2b09      	cmp	r3, #9
 8004ffe:	d94d      	bls.n	800509c <_svfiprintf_r+0x17c>
 8005000:	b1b0      	cbz	r0, 8005030 <_svfiprintf_r+0x110>
 8005002:	9207      	str	r2, [sp, #28]
 8005004:	e014      	b.n	8005030 <_svfiprintf_r+0x110>
 8005006:	eba0 0308 	sub.w	r3, r0, r8
 800500a:	fa09 f303 	lsl.w	r3, r9, r3
 800500e:	4313      	orrs	r3, r2
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	46a2      	mov	sl, r4
 8005014:	e7d2      	b.n	8004fbc <_svfiprintf_r+0x9c>
 8005016:	9b03      	ldr	r3, [sp, #12]
 8005018:	1d19      	adds	r1, r3, #4
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	9103      	str	r1, [sp, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	bfbb      	ittet	lt
 8005022:	425b      	neglt	r3, r3
 8005024:	f042 0202 	orrlt.w	r2, r2, #2
 8005028:	9307      	strge	r3, [sp, #28]
 800502a:	9307      	strlt	r3, [sp, #28]
 800502c:	bfb8      	it	lt
 800502e:	9204      	strlt	r2, [sp, #16]
 8005030:	7823      	ldrb	r3, [r4, #0]
 8005032:	2b2e      	cmp	r3, #46	; 0x2e
 8005034:	d10c      	bne.n	8005050 <_svfiprintf_r+0x130>
 8005036:	7863      	ldrb	r3, [r4, #1]
 8005038:	2b2a      	cmp	r3, #42	; 0x2a
 800503a:	d134      	bne.n	80050a6 <_svfiprintf_r+0x186>
 800503c:	9b03      	ldr	r3, [sp, #12]
 800503e:	1d1a      	adds	r2, r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	9203      	str	r2, [sp, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	bfb8      	it	lt
 8005048:	f04f 33ff 	movlt.w	r3, #4294967295
 800504c:	3402      	adds	r4, #2
 800504e:	9305      	str	r3, [sp, #20]
 8005050:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005118 <_svfiprintf_r+0x1f8>
 8005054:	7821      	ldrb	r1, [r4, #0]
 8005056:	2203      	movs	r2, #3
 8005058:	4650      	mov	r0, sl
 800505a:	f7fb f8e1 	bl	8000220 <memchr>
 800505e:	b138      	cbz	r0, 8005070 <_svfiprintf_r+0x150>
 8005060:	9b04      	ldr	r3, [sp, #16]
 8005062:	eba0 000a 	sub.w	r0, r0, sl
 8005066:	2240      	movs	r2, #64	; 0x40
 8005068:	4082      	lsls	r2, r0
 800506a:	4313      	orrs	r3, r2
 800506c:	3401      	adds	r4, #1
 800506e:	9304      	str	r3, [sp, #16]
 8005070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005074:	4825      	ldr	r0, [pc, #148]	; (800510c <_svfiprintf_r+0x1ec>)
 8005076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800507a:	2206      	movs	r2, #6
 800507c:	f7fb f8d0 	bl	8000220 <memchr>
 8005080:	2800      	cmp	r0, #0
 8005082:	d038      	beq.n	80050f6 <_svfiprintf_r+0x1d6>
 8005084:	4b22      	ldr	r3, [pc, #136]	; (8005110 <_svfiprintf_r+0x1f0>)
 8005086:	bb1b      	cbnz	r3, 80050d0 <_svfiprintf_r+0x1b0>
 8005088:	9b03      	ldr	r3, [sp, #12]
 800508a:	3307      	adds	r3, #7
 800508c:	f023 0307 	bic.w	r3, r3, #7
 8005090:	3308      	adds	r3, #8
 8005092:	9303      	str	r3, [sp, #12]
 8005094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005096:	4433      	add	r3, r6
 8005098:	9309      	str	r3, [sp, #36]	; 0x24
 800509a:	e768      	b.n	8004f6e <_svfiprintf_r+0x4e>
 800509c:	fb0c 3202 	mla	r2, ip, r2, r3
 80050a0:	460c      	mov	r4, r1
 80050a2:	2001      	movs	r0, #1
 80050a4:	e7a6      	b.n	8004ff4 <_svfiprintf_r+0xd4>
 80050a6:	2300      	movs	r3, #0
 80050a8:	3401      	adds	r4, #1
 80050aa:	9305      	str	r3, [sp, #20]
 80050ac:	4619      	mov	r1, r3
 80050ae:	f04f 0c0a 	mov.w	ip, #10
 80050b2:	4620      	mov	r0, r4
 80050b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050b8:	3a30      	subs	r2, #48	; 0x30
 80050ba:	2a09      	cmp	r2, #9
 80050bc:	d903      	bls.n	80050c6 <_svfiprintf_r+0x1a6>
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0c6      	beq.n	8005050 <_svfiprintf_r+0x130>
 80050c2:	9105      	str	r1, [sp, #20]
 80050c4:	e7c4      	b.n	8005050 <_svfiprintf_r+0x130>
 80050c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80050ca:	4604      	mov	r4, r0
 80050cc:	2301      	movs	r3, #1
 80050ce:	e7f0      	b.n	80050b2 <_svfiprintf_r+0x192>
 80050d0:	ab03      	add	r3, sp, #12
 80050d2:	9300      	str	r3, [sp, #0]
 80050d4:	462a      	mov	r2, r5
 80050d6:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <_svfiprintf_r+0x1f4>)
 80050d8:	a904      	add	r1, sp, #16
 80050da:	4638      	mov	r0, r7
 80050dc:	f3af 8000 	nop.w
 80050e0:	1c42      	adds	r2, r0, #1
 80050e2:	4606      	mov	r6, r0
 80050e4:	d1d6      	bne.n	8005094 <_svfiprintf_r+0x174>
 80050e6:	89ab      	ldrh	r3, [r5, #12]
 80050e8:	065b      	lsls	r3, r3, #25
 80050ea:	f53f af2d 	bmi.w	8004f48 <_svfiprintf_r+0x28>
 80050ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050f0:	b01d      	add	sp, #116	; 0x74
 80050f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f6:	ab03      	add	r3, sp, #12
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	462a      	mov	r2, r5
 80050fc:	4b05      	ldr	r3, [pc, #20]	; (8005114 <_svfiprintf_r+0x1f4>)
 80050fe:	a904      	add	r1, sp, #16
 8005100:	4638      	mov	r0, r7
 8005102:	f000 f879 	bl	80051f8 <_printf_i>
 8005106:	e7eb      	b.n	80050e0 <_svfiprintf_r+0x1c0>
 8005108:	080062f0 	.word	0x080062f0
 800510c:	080062fa 	.word	0x080062fa
 8005110:	00000000 	.word	0x00000000
 8005114:	08004e6d 	.word	0x08004e6d
 8005118:	080062f6 	.word	0x080062f6

0800511c <_printf_common>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	4616      	mov	r6, r2
 8005122:	4699      	mov	r9, r3
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	690b      	ldr	r3, [r1, #16]
 8005128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800512c:	4293      	cmp	r3, r2
 800512e:	bfb8      	it	lt
 8005130:	4613      	movlt	r3, r2
 8005132:	6033      	str	r3, [r6, #0]
 8005134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005138:	4607      	mov	r7, r0
 800513a:	460c      	mov	r4, r1
 800513c:	b10a      	cbz	r2, 8005142 <_printf_common+0x26>
 800513e:	3301      	adds	r3, #1
 8005140:	6033      	str	r3, [r6, #0]
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	0699      	lsls	r1, r3, #26
 8005146:	bf42      	ittt	mi
 8005148:	6833      	ldrmi	r3, [r6, #0]
 800514a:	3302      	addmi	r3, #2
 800514c:	6033      	strmi	r3, [r6, #0]
 800514e:	6825      	ldr	r5, [r4, #0]
 8005150:	f015 0506 	ands.w	r5, r5, #6
 8005154:	d106      	bne.n	8005164 <_printf_common+0x48>
 8005156:	f104 0a19 	add.w	sl, r4, #25
 800515a:	68e3      	ldr	r3, [r4, #12]
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	1a9b      	subs	r3, r3, r2
 8005160:	42ab      	cmp	r3, r5
 8005162:	dc26      	bgt.n	80051b2 <_printf_common+0x96>
 8005164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005168:	1e13      	subs	r3, r2, #0
 800516a:	6822      	ldr	r2, [r4, #0]
 800516c:	bf18      	it	ne
 800516e:	2301      	movne	r3, #1
 8005170:	0692      	lsls	r2, r2, #26
 8005172:	d42b      	bmi.n	80051cc <_printf_common+0xb0>
 8005174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005178:	4649      	mov	r1, r9
 800517a:	4638      	mov	r0, r7
 800517c:	47c0      	blx	r8
 800517e:	3001      	adds	r0, #1
 8005180:	d01e      	beq.n	80051c0 <_printf_common+0xa4>
 8005182:	6823      	ldr	r3, [r4, #0]
 8005184:	6922      	ldr	r2, [r4, #16]
 8005186:	f003 0306 	and.w	r3, r3, #6
 800518a:	2b04      	cmp	r3, #4
 800518c:	bf02      	ittt	eq
 800518e:	68e5      	ldreq	r5, [r4, #12]
 8005190:	6833      	ldreq	r3, [r6, #0]
 8005192:	1aed      	subeq	r5, r5, r3
 8005194:	68a3      	ldr	r3, [r4, #8]
 8005196:	bf0c      	ite	eq
 8005198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800519c:	2500      	movne	r5, #0
 800519e:	4293      	cmp	r3, r2
 80051a0:	bfc4      	itt	gt
 80051a2:	1a9b      	subgt	r3, r3, r2
 80051a4:	18ed      	addgt	r5, r5, r3
 80051a6:	2600      	movs	r6, #0
 80051a8:	341a      	adds	r4, #26
 80051aa:	42b5      	cmp	r5, r6
 80051ac:	d11a      	bne.n	80051e4 <_printf_common+0xc8>
 80051ae:	2000      	movs	r0, #0
 80051b0:	e008      	b.n	80051c4 <_printf_common+0xa8>
 80051b2:	2301      	movs	r3, #1
 80051b4:	4652      	mov	r2, sl
 80051b6:	4649      	mov	r1, r9
 80051b8:	4638      	mov	r0, r7
 80051ba:	47c0      	blx	r8
 80051bc:	3001      	adds	r0, #1
 80051be:	d103      	bne.n	80051c8 <_printf_common+0xac>
 80051c0:	f04f 30ff 	mov.w	r0, #4294967295
 80051c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c8:	3501      	adds	r5, #1
 80051ca:	e7c6      	b.n	800515a <_printf_common+0x3e>
 80051cc:	18e1      	adds	r1, r4, r3
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	2030      	movs	r0, #48	; 0x30
 80051d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d6:	4422      	add	r2, r4
 80051d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e0:	3302      	adds	r3, #2
 80051e2:	e7c7      	b.n	8005174 <_printf_common+0x58>
 80051e4:	2301      	movs	r3, #1
 80051e6:	4622      	mov	r2, r4
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d0e6      	beq.n	80051c0 <_printf_common+0xa4>
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7d9      	b.n	80051aa <_printf_common+0x8e>
	...

080051f8 <_printf_i>:
 80051f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051fc:	7e0f      	ldrb	r7, [r1, #24]
 80051fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005200:	2f78      	cmp	r7, #120	; 0x78
 8005202:	4691      	mov	r9, r2
 8005204:	4680      	mov	r8, r0
 8005206:	460c      	mov	r4, r1
 8005208:	469a      	mov	sl, r3
 800520a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800520e:	d807      	bhi.n	8005220 <_printf_i+0x28>
 8005210:	2f62      	cmp	r7, #98	; 0x62
 8005212:	d80a      	bhi.n	800522a <_printf_i+0x32>
 8005214:	2f00      	cmp	r7, #0
 8005216:	f000 80d4 	beq.w	80053c2 <_printf_i+0x1ca>
 800521a:	2f58      	cmp	r7, #88	; 0x58
 800521c:	f000 80c0 	beq.w	80053a0 <_printf_i+0x1a8>
 8005220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005228:	e03a      	b.n	80052a0 <_printf_i+0xa8>
 800522a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800522e:	2b15      	cmp	r3, #21
 8005230:	d8f6      	bhi.n	8005220 <_printf_i+0x28>
 8005232:	a101      	add	r1, pc, #4	; (adr r1, 8005238 <_printf_i+0x40>)
 8005234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005238:	08005291 	.word	0x08005291
 800523c:	080052a5 	.word	0x080052a5
 8005240:	08005221 	.word	0x08005221
 8005244:	08005221 	.word	0x08005221
 8005248:	08005221 	.word	0x08005221
 800524c:	08005221 	.word	0x08005221
 8005250:	080052a5 	.word	0x080052a5
 8005254:	08005221 	.word	0x08005221
 8005258:	08005221 	.word	0x08005221
 800525c:	08005221 	.word	0x08005221
 8005260:	08005221 	.word	0x08005221
 8005264:	080053a9 	.word	0x080053a9
 8005268:	080052d1 	.word	0x080052d1
 800526c:	08005363 	.word	0x08005363
 8005270:	08005221 	.word	0x08005221
 8005274:	08005221 	.word	0x08005221
 8005278:	080053cb 	.word	0x080053cb
 800527c:	08005221 	.word	0x08005221
 8005280:	080052d1 	.word	0x080052d1
 8005284:	08005221 	.word	0x08005221
 8005288:	08005221 	.word	0x08005221
 800528c:	0800536b 	.word	0x0800536b
 8005290:	682b      	ldr	r3, [r5, #0]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	602a      	str	r2, [r5, #0]
 8005298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800529c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052a0:	2301      	movs	r3, #1
 80052a2:	e09f      	b.n	80053e4 <_printf_i+0x1ec>
 80052a4:	6820      	ldr	r0, [r4, #0]
 80052a6:	682b      	ldr	r3, [r5, #0]
 80052a8:	0607      	lsls	r7, r0, #24
 80052aa:	f103 0104 	add.w	r1, r3, #4
 80052ae:	6029      	str	r1, [r5, #0]
 80052b0:	d501      	bpl.n	80052b6 <_printf_i+0xbe>
 80052b2:	681e      	ldr	r6, [r3, #0]
 80052b4:	e003      	b.n	80052be <_printf_i+0xc6>
 80052b6:	0646      	lsls	r6, r0, #25
 80052b8:	d5fb      	bpl.n	80052b2 <_printf_i+0xba>
 80052ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80052be:	2e00      	cmp	r6, #0
 80052c0:	da03      	bge.n	80052ca <_printf_i+0xd2>
 80052c2:	232d      	movs	r3, #45	; 0x2d
 80052c4:	4276      	negs	r6, r6
 80052c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052ca:	485a      	ldr	r0, [pc, #360]	; (8005434 <_printf_i+0x23c>)
 80052cc:	230a      	movs	r3, #10
 80052ce:	e012      	b.n	80052f6 <_printf_i+0xfe>
 80052d0:	682b      	ldr	r3, [r5, #0]
 80052d2:	6820      	ldr	r0, [r4, #0]
 80052d4:	1d19      	adds	r1, r3, #4
 80052d6:	6029      	str	r1, [r5, #0]
 80052d8:	0605      	lsls	r5, r0, #24
 80052da:	d501      	bpl.n	80052e0 <_printf_i+0xe8>
 80052dc:	681e      	ldr	r6, [r3, #0]
 80052de:	e002      	b.n	80052e6 <_printf_i+0xee>
 80052e0:	0641      	lsls	r1, r0, #25
 80052e2:	d5fb      	bpl.n	80052dc <_printf_i+0xe4>
 80052e4:	881e      	ldrh	r6, [r3, #0]
 80052e6:	4853      	ldr	r0, [pc, #332]	; (8005434 <_printf_i+0x23c>)
 80052e8:	2f6f      	cmp	r7, #111	; 0x6f
 80052ea:	bf0c      	ite	eq
 80052ec:	2308      	moveq	r3, #8
 80052ee:	230a      	movne	r3, #10
 80052f0:	2100      	movs	r1, #0
 80052f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052f6:	6865      	ldr	r5, [r4, #4]
 80052f8:	60a5      	str	r5, [r4, #8]
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	bfa2      	ittt	ge
 80052fe:	6821      	ldrge	r1, [r4, #0]
 8005300:	f021 0104 	bicge.w	r1, r1, #4
 8005304:	6021      	strge	r1, [r4, #0]
 8005306:	b90e      	cbnz	r6, 800530c <_printf_i+0x114>
 8005308:	2d00      	cmp	r5, #0
 800530a:	d04b      	beq.n	80053a4 <_printf_i+0x1ac>
 800530c:	4615      	mov	r5, r2
 800530e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005312:	fb03 6711 	mls	r7, r3, r1, r6
 8005316:	5dc7      	ldrb	r7, [r0, r7]
 8005318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800531c:	4637      	mov	r7, r6
 800531e:	42bb      	cmp	r3, r7
 8005320:	460e      	mov	r6, r1
 8005322:	d9f4      	bls.n	800530e <_printf_i+0x116>
 8005324:	2b08      	cmp	r3, #8
 8005326:	d10b      	bne.n	8005340 <_printf_i+0x148>
 8005328:	6823      	ldr	r3, [r4, #0]
 800532a:	07de      	lsls	r6, r3, #31
 800532c:	d508      	bpl.n	8005340 <_printf_i+0x148>
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	6861      	ldr	r1, [r4, #4]
 8005332:	4299      	cmp	r1, r3
 8005334:	bfde      	ittt	le
 8005336:	2330      	movle	r3, #48	; 0x30
 8005338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800533c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005340:	1b52      	subs	r2, r2, r5
 8005342:	6122      	str	r2, [r4, #16]
 8005344:	f8cd a000 	str.w	sl, [sp]
 8005348:	464b      	mov	r3, r9
 800534a:	aa03      	add	r2, sp, #12
 800534c:	4621      	mov	r1, r4
 800534e:	4640      	mov	r0, r8
 8005350:	f7ff fee4 	bl	800511c <_printf_common>
 8005354:	3001      	adds	r0, #1
 8005356:	d14a      	bne.n	80053ee <_printf_i+0x1f6>
 8005358:	f04f 30ff 	mov.w	r0, #4294967295
 800535c:	b004      	add	sp, #16
 800535e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	f043 0320 	orr.w	r3, r3, #32
 8005368:	6023      	str	r3, [r4, #0]
 800536a:	4833      	ldr	r0, [pc, #204]	; (8005438 <_printf_i+0x240>)
 800536c:	2778      	movs	r7, #120	; 0x78
 800536e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6829      	ldr	r1, [r5, #0]
 8005376:	061f      	lsls	r7, r3, #24
 8005378:	f851 6b04 	ldr.w	r6, [r1], #4
 800537c:	d402      	bmi.n	8005384 <_printf_i+0x18c>
 800537e:	065f      	lsls	r7, r3, #25
 8005380:	bf48      	it	mi
 8005382:	b2b6      	uxthmi	r6, r6
 8005384:	07df      	lsls	r7, r3, #31
 8005386:	bf48      	it	mi
 8005388:	f043 0320 	orrmi.w	r3, r3, #32
 800538c:	6029      	str	r1, [r5, #0]
 800538e:	bf48      	it	mi
 8005390:	6023      	strmi	r3, [r4, #0]
 8005392:	b91e      	cbnz	r6, 800539c <_printf_i+0x1a4>
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	f023 0320 	bic.w	r3, r3, #32
 800539a:	6023      	str	r3, [r4, #0]
 800539c:	2310      	movs	r3, #16
 800539e:	e7a7      	b.n	80052f0 <_printf_i+0xf8>
 80053a0:	4824      	ldr	r0, [pc, #144]	; (8005434 <_printf_i+0x23c>)
 80053a2:	e7e4      	b.n	800536e <_printf_i+0x176>
 80053a4:	4615      	mov	r5, r2
 80053a6:	e7bd      	b.n	8005324 <_printf_i+0x12c>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	6826      	ldr	r6, [r4, #0]
 80053ac:	6961      	ldr	r1, [r4, #20]
 80053ae:	1d18      	adds	r0, r3, #4
 80053b0:	6028      	str	r0, [r5, #0]
 80053b2:	0635      	lsls	r5, r6, #24
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	d501      	bpl.n	80053bc <_printf_i+0x1c4>
 80053b8:	6019      	str	r1, [r3, #0]
 80053ba:	e002      	b.n	80053c2 <_printf_i+0x1ca>
 80053bc:	0670      	lsls	r0, r6, #25
 80053be:	d5fb      	bpl.n	80053b8 <_printf_i+0x1c0>
 80053c0:	8019      	strh	r1, [r3, #0]
 80053c2:	2300      	movs	r3, #0
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	4615      	mov	r5, r2
 80053c8:	e7bc      	b.n	8005344 <_printf_i+0x14c>
 80053ca:	682b      	ldr	r3, [r5, #0]
 80053cc:	1d1a      	adds	r2, r3, #4
 80053ce:	602a      	str	r2, [r5, #0]
 80053d0:	681d      	ldr	r5, [r3, #0]
 80053d2:	6862      	ldr	r2, [r4, #4]
 80053d4:	2100      	movs	r1, #0
 80053d6:	4628      	mov	r0, r5
 80053d8:	f7fa ff22 	bl	8000220 <memchr>
 80053dc:	b108      	cbz	r0, 80053e2 <_printf_i+0x1ea>
 80053de:	1b40      	subs	r0, r0, r5
 80053e0:	6060      	str	r0, [r4, #4]
 80053e2:	6863      	ldr	r3, [r4, #4]
 80053e4:	6123      	str	r3, [r4, #16]
 80053e6:	2300      	movs	r3, #0
 80053e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053ec:	e7aa      	b.n	8005344 <_printf_i+0x14c>
 80053ee:	6923      	ldr	r3, [r4, #16]
 80053f0:	462a      	mov	r2, r5
 80053f2:	4649      	mov	r1, r9
 80053f4:	4640      	mov	r0, r8
 80053f6:	47d0      	blx	sl
 80053f8:	3001      	adds	r0, #1
 80053fa:	d0ad      	beq.n	8005358 <_printf_i+0x160>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	079b      	lsls	r3, r3, #30
 8005400:	d413      	bmi.n	800542a <_printf_i+0x232>
 8005402:	68e0      	ldr	r0, [r4, #12]
 8005404:	9b03      	ldr	r3, [sp, #12]
 8005406:	4298      	cmp	r0, r3
 8005408:	bfb8      	it	lt
 800540a:	4618      	movlt	r0, r3
 800540c:	e7a6      	b.n	800535c <_printf_i+0x164>
 800540e:	2301      	movs	r3, #1
 8005410:	4632      	mov	r2, r6
 8005412:	4649      	mov	r1, r9
 8005414:	4640      	mov	r0, r8
 8005416:	47d0      	blx	sl
 8005418:	3001      	adds	r0, #1
 800541a:	d09d      	beq.n	8005358 <_printf_i+0x160>
 800541c:	3501      	adds	r5, #1
 800541e:	68e3      	ldr	r3, [r4, #12]
 8005420:	9903      	ldr	r1, [sp, #12]
 8005422:	1a5b      	subs	r3, r3, r1
 8005424:	42ab      	cmp	r3, r5
 8005426:	dcf2      	bgt.n	800540e <_printf_i+0x216>
 8005428:	e7eb      	b.n	8005402 <_printf_i+0x20a>
 800542a:	2500      	movs	r5, #0
 800542c:	f104 0619 	add.w	r6, r4, #25
 8005430:	e7f5      	b.n	800541e <_printf_i+0x226>
 8005432:	bf00      	nop
 8005434:	08006301 	.word	0x08006301
 8005438:	08006312 	.word	0x08006312

0800543c <memmove>:
 800543c:	4288      	cmp	r0, r1
 800543e:	b510      	push	{r4, lr}
 8005440:	eb01 0402 	add.w	r4, r1, r2
 8005444:	d902      	bls.n	800544c <memmove+0x10>
 8005446:	4284      	cmp	r4, r0
 8005448:	4623      	mov	r3, r4
 800544a:	d807      	bhi.n	800545c <memmove+0x20>
 800544c:	1e43      	subs	r3, r0, #1
 800544e:	42a1      	cmp	r1, r4
 8005450:	d008      	beq.n	8005464 <memmove+0x28>
 8005452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800545a:	e7f8      	b.n	800544e <memmove+0x12>
 800545c:	4402      	add	r2, r0
 800545e:	4601      	mov	r1, r0
 8005460:	428a      	cmp	r2, r1
 8005462:	d100      	bne.n	8005466 <memmove+0x2a>
 8005464:	bd10      	pop	{r4, pc}
 8005466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800546a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800546e:	e7f7      	b.n	8005460 <memmove+0x24>

08005470 <_sbrk_r>:
 8005470:	b538      	push	{r3, r4, r5, lr}
 8005472:	4d06      	ldr	r5, [pc, #24]	; (800548c <_sbrk_r+0x1c>)
 8005474:	2300      	movs	r3, #0
 8005476:	4604      	mov	r4, r0
 8005478:	4608      	mov	r0, r1
 800547a:	602b      	str	r3, [r5, #0]
 800547c:	f7fb fca8 	bl	8000dd0 <_sbrk>
 8005480:	1c43      	adds	r3, r0, #1
 8005482:	d102      	bne.n	800548a <_sbrk_r+0x1a>
 8005484:	682b      	ldr	r3, [r5, #0]
 8005486:	b103      	cbz	r3, 800548a <_sbrk_r+0x1a>
 8005488:	6023      	str	r3, [r4, #0]
 800548a:	bd38      	pop	{r3, r4, r5, pc}
 800548c:	20000500 	.word	0x20000500

08005490 <_realloc_r>:
 8005490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005494:	4680      	mov	r8, r0
 8005496:	4614      	mov	r4, r2
 8005498:	460e      	mov	r6, r1
 800549a:	b921      	cbnz	r1, 80054a6 <_realloc_r+0x16>
 800549c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a0:	4611      	mov	r1, r2
 80054a2:	f7ff bc57 	b.w	8004d54 <_malloc_r>
 80054a6:	b92a      	cbnz	r2, 80054b4 <_realloc_r+0x24>
 80054a8:	f7ff fbe8 	bl	8004c7c <_free_r>
 80054ac:	4625      	mov	r5, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b4:	f000 f81b 	bl	80054ee <_malloc_usable_size_r>
 80054b8:	4284      	cmp	r4, r0
 80054ba:	4607      	mov	r7, r0
 80054bc:	d802      	bhi.n	80054c4 <_realloc_r+0x34>
 80054be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80054c2:	d812      	bhi.n	80054ea <_realloc_r+0x5a>
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fc44 	bl	8004d54 <_malloc_r>
 80054cc:	4605      	mov	r5, r0
 80054ce:	2800      	cmp	r0, #0
 80054d0:	d0ed      	beq.n	80054ae <_realloc_r+0x1e>
 80054d2:	42bc      	cmp	r4, r7
 80054d4:	4622      	mov	r2, r4
 80054d6:	4631      	mov	r1, r6
 80054d8:	bf28      	it	cs
 80054da:	463a      	movcs	r2, r7
 80054dc:	f7ff fbc0 	bl	8004c60 <memcpy>
 80054e0:	4631      	mov	r1, r6
 80054e2:	4640      	mov	r0, r8
 80054e4:	f7ff fbca 	bl	8004c7c <_free_r>
 80054e8:	e7e1      	b.n	80054ae <_realloc_r+0x1e>
 80054ea:	4635      	mov	r5, r6
 80054ec:	e7df      	b.n	80054ae <_realloc_r+0x1e>

080054ee <_malloc_usable_size_r>:
 80054ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f2:	1f18      	subs	r0, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	bfbc      	itt	lt
 80054f8:	580b      	ldrlt	r3, [r1, r0]
 80054fa:	18c0      	addlt	r0, r0, r3
 80054fc:	4770      	bx	lr
	...

08005500 <_init>:
 8005500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005502:	bf00      	nop
 8005504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005506:	bc08      	pop	{r3}
 8005508:	469e      	mov	lr, r3
 800550a:	4770      	bx	lr

0800550c <_fini>:
 800550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800550e:	bf00      	nop
 8005510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005512:	bc08      	pop	{r3}
 8005514:	469e      	mov	lr, r3
 8005516:	4770      	bx	lr
