
poc_rtc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  08004f58  08004f58  00014f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d60  08005d60  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d68  08005d68  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d68  08005d68  00015d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b4  2000005c  08005dcc  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000510  08005dcc  00020510  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ac7  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282c  00000000  00000000  00032b96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  000353c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  000362d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c5a  00000000  00000000  00036e73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140a7  00000000  00000000  0005dacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f3d3a  00000000  00000000  00071b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000042f0  00000000  00000000  001658b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  00169ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004f40 	.word	0x08004f40

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004f40 	.word	0x08004f40

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fbf8 	bl	8000db6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f887 	bl	80006d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f9cb 	bl	8000964 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ce:	f000 f91d 	bl	800080c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d2:	f000 f8db 	bl	800078c <MX_I2C1_Init>
  MX_RTC_Init();
 80005d6:	f000 f963 	bl	80008a0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005da:	f003 fe0f 	bl	80041fc <ssd1306_Init>
  ssd1306_Fill(Black);
 80005de:	2000      	movs	r0, #0
 80005e0:	f003 fe76 	bl	80042d0 <ssd1306_Fill>

  rtc_date = (RTC_DateTypeDef){.WeekDay = 3, .Date = 7, .Month = 11, .Year = 24};
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <main+0xf8>)
 80005e6:	2203      	movs	r2, #3
 80005e8:	701a      	strb	r2, [r3, #0]
 80005ea:	4b32      	ldr	r3, [pc, #200]	; (80006b4 <main+0xf8>)
 80005ec:	220b      	movs	r2, #11
 80005ee:	705a      	strb	r2, [r3, #1]
 80005f0:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <main+0xf8>)
 80005f2:	2207      	movs	r2, #7
 80005f4:	709a      	strb	r2, [r3, #2]
 80005f6:	4b2f      	ldr	r3, [pc, #188]	; (80006b4 <main+0xf8>)
 80005f8:	2218      	movs	r2, #24
 80005fa:	70da      	strb	r2, [r3, #3]
  rtc_time = (RTC_TimeTypeDef){.Hours = 22, .Minutes = 16, .Seconds= 0};
 80005fc:	4b2e      	ldr	r3, [pc, #184]	; (80006b8 <main+0xfc>)
 80005fe:	461a      	mov	r2, r3
 8000600:	2300      	movs	r3, #0
 8000602:	6013      	str	r3, [r2, #0]
 8000604:	6053      	str	r3, [r2, #4]
 8000606:	6093      	str	r3, [r2, #8]
 8000608:	60d3      	str	r3, [r2, #12]
 800060a:	6113      	str	r3, [r2, #16]
 800060c:	4b2a      	ldr	r3, [pc, #168]	; (80006b8 <main+0xfc>)
 800060e:	2216      	movs	r2, #22
 8000610:	701a      	strb	r2, [r3, #0]
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <main+0xfc>)
 8000614:	2210      	movs	r2, #16
 8000616:	705a      	strb	r2, [r3, #1]

  HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000618:	2200      	movs	r2, #0
 800061a:	4926      	ldr	r1, [pc, #152]	; (80006b4 <main+0xf8>)
 800061c:	4827      	ldr	r0, [pc, #156]	; (80006bc <main+0x100>)
 800061e:	f002 fd97 	bl	8003150 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000622:	2200      	movs	r2, #0
 8000624:	4924      	ldr	r1, [pc, #144]	; (80006b8 <main+0xfc>)
 8000626:	4825      	ldr	r0, [pc, #148]	; (80006bc <main+0x100>)
 8000628:	f002 fc99 	bl	8002f5e <HAL_RTC_SetTime>
  while (1)
  {
	  /** As stated in its comment, HAL_RTC_GetTime() should be called before
	   * HAL_RTC_GetDate() to maintain consistency
	   */
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800062c:	2200      	movs	r2, #0
 800062e:	4922      	ldr	r1, [pc, #136]	; (80006b8 <main+0xfc>)
 8000630:	4822      	ldr	r0, [pc, #136]	; (80006bc <main+0x100>)
 8000632:	f002 fd31 	bl	8003098 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000636:	2200      	movs	r2, #0
 8000638:	491e      	ldr	r1, [pc, #120]	; (80006b4 <main+0xf8>)
 800063a:	4820      	ldr	r0, [pc, #128]	; (80006bc <main+0x100>)
 800063c:	f002 fe0f 	bl	800325e <HAL_RTC_GetDate>

	  sprintf(sData, "%02d/%02d/%02d", rtc_date.Date, rtc_date.Month, rtc_date.Year);
 8000640:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <main+0xf8>)
 8000642:	789b      	ldrb	r3, [r3, #2]
 8000644:	461a      	mov	r2, r3
 8000646:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <main+0xf8>)
 8000648:	785b      	ldrb	r3, [r3, #1]
 800064a:	4619      	mov	r1, r3
 800064c:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <main+0xf8>)
 800064e:	78db      	ldrb	r3, [r3, #3]
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	460b      	mov	r3, r1
 8000654:	491a      	ldr	r1, [pc, #104]	; (80006c0 <main+0x104>)
 8000656:	481b      	ldr	r0, [pc, #108]	; (80006c4 <main+0x108>)
 8000658:	f003 ffce 	bl	80045f8 <siprintf>
	  sprintf(sTime, "%02d:%02d:%02d", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds);
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <main+0xfc>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	461a      	mov	r2, r3
 8000662:	4b15      	ldr	r3, [pc, #84]	; (80006b8 <main+0xfc>)
 8000664:	785b      	ldrb	r3, [r3, #1]
 8000666:	4619      	mov	r1, r3
 8000668:	4b13      	ldr	r3, [pc, #76]	; (80006b8 <main+0xfc>)
 800066a:	789b      	ldrb	r3, [r3, #2]
 800066c:	9300      	str	r3, [sp, #0]
 800066e:	460b      	mov	r3, r1
 8000670:	4915      	ldr	r1, [pc, #84]	; (80006c8 <main+0x10c>)
 8000672:	4816      	ldr	r0, [pc, #88]	; (80006cc <main+0x110>)
 8000674:	f003 ffc0 	bl	80045f8 <siprintf>

	  ssd1306_SetCursor(2, 3);
 8000678:	2103      	movs	r1, #3
 800067a:	2002      	movs	r0, #2
 800067c:	f003 ff72 	bl	8004564 <ssd1306_SetCursor>
	  ssd1306_WriteString(sData, Font_7x10, White);
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0x114>)
 8000682:	2201      	movs	r2, #1
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000688:	480e      	ldr	r0, [pc, #56]	; (80006c4 <main+0x108>)
 800068a:	f003 ff45 	bl	8004518 <ssd1306_WriteString>

	  ssd1306_SetCursor(2, 20);
 800068e:	2114      	movs	r1, #20
 8000690:	2002      	movs	r0, #2
 8000692:	f003 ff67 	bl	8004564 <ssd1306_SetCursor>
	  ssd1306_WriteString(sTime, Font_6x8, White);
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <main+0x118>)
 8000698:	2201      	movs	r2, #1
 800069a:	9200      	str	r2, [sp, #0]
 800069c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800069e:	480b      	ldr	r0, [pc, #44]	; (80006cc <main+0x110>)
 80006a0:	f003 ff3a 	bl	8004518 <ssd1306_WriteString>

	  ssd1306_UpdateScreen();
 80006a4:	f003 fe2c 	bl	8004300 <ssd1306_UpdateScreen>
	  HAL_Delay(1000);
 80006a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ac:	f000 fbf4 	bl	8000e98 <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80006b0:	e7bc      	b.n	800062c <main+0x70>
 80006b2:	bf00      	nop
 80006b4:	20000188 	.word	0x20000188
 80006b8:	2000018c 	.word	0x2000018c
 80006bc:	20000160 	.word	0x20000160
 80006c0:	08004f58 	.word	0x08004f58
 80006c4:	200001a0 	.word	0x200001a0
 80006c8:	08004f68 	.word	0x08004f68
 80006cc:	200001ac 	.word	0x200001ac
 80006d0:	08005d20 	.word	0x08005d20
 80006d4:	08005d14 	.word	0x08005d14

080006d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0318 	add.w	r3, r7, #24
 80006e2:	2238      	movs	r2, #56	; 0x38
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 ffa6 	bl	8004638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006fa:	2000      	movs	r0, #0
 80006fc:	f001 fb80 	bl	8001e00 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000700:	f001 fb6e 	bl	8001de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xb0>)
 8000706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800070a:	4a1f      	ldr	r2, [pc, #124]	; (8000788 <SystemClock_Config+0xb0>)
 800070c:	f023 0318 	bic.w	r3, r3, #24
 8000710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000714:	2306      	movs	r3, #6
 8000716:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000722:	2340      	movs	r3, #64	; 0x40
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000726:	2302      	movs	r3, #2
 8000728:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800072a:	2302      	movs	r3, #2
 800072c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000732:	2355      	movs	r3, #85	; 0x55
 8000734:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 0318 	add.w	r3, r7, #24
 8000746:	4618      	mov	r0, r3
 8000748:	f001 fc0e 	bl	8001f68 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000752:	f000 f975 	bl	8000a40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2303      	movs	r3, #3
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2104      	movs	r1, #4
 800076e:	4618      	mov	r0, r3
 8000770:	f001 ff0c 	bl	800258c <HAL_RCC_ClockConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800077a:	f000 f961 	bl	8000a40 <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	3750      	adds	r7, #80	; 0x50
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_I2C1_Init+0x74>)
 8000792:	4a1c      	ldr	r2, [pc, #112]	; (8000804 <MX_I2C1_Init+0x78>)
 8000794:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_I2C1_Init+0x74>)
 8000798:	4a1b      	ldr	r2, [pc, #108]	; (8000808 <MX_I2C1_Init+0x7c>)
 800079a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MX_I2C1_Init+0x74>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a2:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_I2C1_Init+0x74>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <MX_I2C1_Init+0x74>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_I2C1_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_I2C1_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007c6:	480e      	ldr	r0, [pc, #56]	; (8000800 <MX_I2C1_Init+0x74>)
 80007c8:	f000 fe55 	bl	8001476 <HAL_I2C_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007d2:	f000 f935 	bl	8000a40 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007d6:	2100      	movs	r1, #0
 80007d8:	4809      	ldr	r0, [pc, #36]	; (8000800 <MX_I2C1_Init+0x74>)
 80007da:	f001 fa69 	bl	8001cb0 <HAL_I2CEx_ConfigAnalogFilter>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007e4:	f000 f92c 	bl	8000a40 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e8:	2100      	movs	r1, #0
 80007ea:	4805      	ldr	r0, [pc, #20]	; (8000800 <MX_I2C1_Init+0x74>)
 80007ec:	f001 faab 	bl	8001d46 <HAL_I2CEx_ConfigDigitalFilter>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007f6:	f000 f923 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20000078 	.word	0x20000078
 8000804:	40005400 	.word	0x40005400
 8000808:	30a0a7fb 	.word	0x30a0a7fb

0800080c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	f002 fe2b 	bl	80034aa <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f8f1 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	f003 fbc7 	bl	8003ff4 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800086c:	f000 f8e8 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f003 fbfc 	bl	8004070 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087e:	f000 f8df 	bl	8000a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	f003 fb7d 	bl	8003f82 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088e:	f000 f8d7 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200000cc 	.word	0x200000cc
 800089c:	40008000 	.word	0x40008000

080008a0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	2200      	movs	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	605a      	str	r2, [r3, #4]
 80008ae:	609a      	str	r2, [r3, #8]
 80008b0:	60da      	str	r2, [r3, #12]
 80008b2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80008b4:	2300      	movs	r3, #0
 80008b6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_RTC_Init+0xbc>)
 80008ba:	4a29      	ldr	r2, [pc, #164]	; (8000960 <MX_RTC_Init+0xc0>)
 80008bc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_RTC_Init+0xbc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_RTC_Init+0xbc>)
 80008c6:	227f      	movs	r2, #127	; 0x7f
 80008c8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_RTC_Init+0xbc>)
 80008cc:	22ff      	movs	r2, #255	; 0xff
 80008ce:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_RTC_Init+0xbc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_RTC_Init+0xbc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_RTC_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_RTC_Init+0xbc>)
 80008e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_RTC_Init+0xbc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f0:	481a      	ldr	r0, [pc, #104]	; (800095c <MX_RTC_Init+0xbc>)
 80008f2:	f002 fab5 	bl	8002e60 <HAL_RTC_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80008fc:	f000 f8a0 	bl	8000a40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8000900:	2323      	movs	r3, #35	; 0x23
 8000902:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x32;
 8000904:	2332      	movs	r3, #50	; 0x32
 8000906:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000908:	2300      	movs	r3, #0
 800090a:	71bb      	strb	r3, [r7, #6]
  sTime.SubSeconds = 0x0;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2201      	movs	r2, #1
 800091c:	4619      	mov	r1, r3
 800091e:	480f      	ldr	r0, [pc, #60]	; (800095c <MX_RTC_Init+0xbc>)
 8000920:	f002 fb1d 	bl	8002f5e <HAL_RTC_SetTime>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_RTC_Init+0x8e>
  {
    Error_Handler();
 800092a:	f000 f889 	bl	8000a40 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800092e:	2302      	movs	r3, #2
 8000930:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8000932:	2311      	movs	r3, #17
 8000934:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x5;
 8000936:	2305      	movs	r3, #5
 8000938:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x24;
 800093a:	2324      	movs	r3, #36	; 0x24
 800093c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	2201      	movs	r2, #1
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_RTC_Init+0xbc>)
 8000946:	f002 fc03 	bl	8003150 <HAL_RTC_SetDate>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_RTC_Init+0xb4>
  {
    Error_Handler();
 8000950:	f000 f876 	bl	8000a40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3718      	adds	r7, #24
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000160 	.word	0x20000160
 8000960:	40002800 	.word	0x40002800

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	4b2f      	ldr	r3, [pc, #188]	; (8000a38 <MX_GPIO_Init+0xd4>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	4a2e      	ldr	r2, [pc, #184]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000986:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	f003 0304 	and.w	r3, r3, #4
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000992:	4b29      	ldr	r3, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_GPIO_Init+0xd4>)
 8000998:	f043 0320 	orr.w	r3, r3, #32
 800099c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099e:	4b26      	ldr	r3, [pc, #152]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a2:	f003 0320 	and.w	r3, r3, #32
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b20      	ldr	r3, [pc, #128]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a1c      	ldr	r2, [pc, #112]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <MX_GPIO_Init+0xd4>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
 80009d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2120      	movs	r1, #32
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fd0d 	bl	8001400 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	480f      	ldr	r0, [pc, #60]	; (8000a3c <MX_GPIO_Init+0xd8>)
 80009fe:	f000 fb7d 	bl	80010fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a02:	2320      	movs	r3, #32
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a06:	2301      	movs	r3, #1
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fb6e 	bl	80010fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a20:	2200      	movs	r2, #0
 8000a22:	2100      	movs	r1, #0
 8000a24:	2028      	movs	r0, #40	; 0x28
 8000a26:	f000 fb34 	bl	8001092 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2a:	2028      	movs	r0, #40	; 0x28
 8000a2c:	f000 fb4b 	bl	80010c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000800 	.word	0x48000800

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a44:	b672      	cpsid	i
}
 8000a46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <Error_Handler+0x8>
	...

08000a4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_MspInit+0x44>)
 8000a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a56:	4a0e      	ldr	r2, [pc, #56]	; (8000a90 <HAL_MspInit+0x44>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <HAL_MspInit+0x44>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_MspInit+0x44>)
 8000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_MspInit+0x44>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6593      	str	r3, [r2, #88]	; 0x58
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_MspInit+0x44>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a82:	f001 fa61 	bl	8001f48 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40021000 	.word	0x40021000

08000a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b09e      	sub	sp, #120	; 0x78
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	2254      	movs	r2, #84	; 0x54
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f003 fdbf 	bl	8004638 <memset>
  if(hi2c->Instance==I2C1)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a1f      	ldr	r2, [pc, #124]	; (8000b3c <HAL_I2C_MspInit+0xa8>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d136      	bne.n	8000b32 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ac4:	2340      	movs	r3, #64	; 0x40
 8000ac6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f001 ff77 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000adc:	f7ff ffb0 	bl	8000a40 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae0:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae4:	4a16      	ldr	r2, [pc, #88]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000ae6:	f043 0302 	orr.w	r3, r3, #2
 8000aea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000afc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000afe:	2312      	movs	r3, #18
 8000b00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b06:	2300      	movs	r3, #0
 8000b08:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0a:	2304      	movs	r3, #4
 8000b0c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b12:	4619      	mov	r1, r3
 8000b14:	480b      	ldr	r0, [pc, #44]	; (8000b44 <HAL_I2C_MspInit+0xb0>)
 8000b16:	f000 faf1 	bl	80010fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a08      	ldr	r2, [pc, #32]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <HAL_I2C_MspInit+0xac>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3778      	adds	r7, #120	; 0x78
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000400 	.word	0x48000400

08000b48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b09e      	sub	sp, #120	; 0x78
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b60:	f107 0310 	add.w	r3, r7, #16
 8000b64:	2254      	movs	r2, #84	; 0x54
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f003 fd65 	bl	8004638 <memset>
  if(huart->Instance==LPUART1)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <HAL_UART_MspInit+0xa8>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d136      	bne.n	8000be6 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b78:	2320      	movs	r3, #32
 8000b7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	4618      	mov	r0, r3
 8000b86:	f001 ff1d 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b90:	f7ff ff56 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b98:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000b9a:	f043 0301 	orr.w	r3, r3, #1
 8000b9e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	f003 0301 	and.w	r3, r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb0:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_UART_MspInit+0xac>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	f003 0301 	and.w	r3, r3, #1
 8000bc0:	60bb      	str	r3, [r7, #8]
 8000bc2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bc4:	230c      	movs	r3, #12
 8000bc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f000 fa8b 	bl	80010fc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3778      	adds	r7, #120	; 0x78
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40008000 	.word	0x40008000
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b098      	sub	sp, #96	; 0x60
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c00:	f107 030c 	add.w	r3, r7, #12
 8000c04:	2254      	movs	r2, #84	; 0x54
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 fd15 	bl	8004638 <memset>
  if(hrtc->Instance==RTC)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <HAL_RTC_MspInit+0x70>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d123      	bne.n	8000c60 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000c1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c22:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 030c 	add.w	r3, r7, #12
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fecb 	bl	80029c4 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c34:	f7ff ff04 	bl	8000a40 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c3e:	4a0b      	ldr	r2, [pc, #44]	; (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c52:	6593      	str	r3, [r2, #88]	; 0x58
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <HAL_RTC_MspInit+0x74>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c5c:	60bb      	str	r3, [r7, #8]
 8000c5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3760      	adds	r7, #96	; 0x60
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40002800 	.word	0x40002800
 8000c6c:	40021000 	.word	0x40021000

08000c70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c74:	e7fe      	b.n	8000c74 <NMI_Handler+0x4>

08000c76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7a:	e7fe      	b.n	8000c7a <HardFault_Handler+0x4>

08000c7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <MemManage_Handler+0x4>

08000c82 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <BusFault_Handler+0x4>

08000c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <UsageFault_Handler+0x4>

08000c8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr

08000c9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cbc:	f000 f8ce 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cc8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ccc:	f000 fbb0 	bl	8001430 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cdc:	4a14      	ldr	r2, [pc, #80]	; (8000d30 <_sbrk+0x5c>)
 8000cde:	4b15      	ldr	r3, [pc, #84]	; (8000d34 <_sbrk+0x60>)
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <_sbrk+0x64>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d102      	bne.n	8000cf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf0:	4b11      	ldr	r3, [pc, #68]	; (8000d38 <_sbrk+0x64>)
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <_sbrk+0x68>)
 8000cf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cf6:	4b10      	ldr	r3, [pc, #64]	; (8000d38 <_sbrk+0x64>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d207      	bcs.n	8000d14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d04:	f003 fca0 	bl	8004648 <__errno>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d12:	e009      	b.n	8000d28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <_sbrk+0x64>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	4a05      	ldr	r2, [pc, #20]	; (8000d38 <_sbrk+0x64>)
 8000d24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3718      	adds	r7, #24
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20020000 	.word	0x20020000
 8000d34:	00000400 	.word	0x00000400
 8000d38:	200001b8 	.word	0x200001b8
 8000d3c:	20000510 	.word	0x20000510

08000d40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <SystemInit+0x20>)
 8000d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4a:	4a05      	ldr	r2, [pc, #20]	; (8000d60 <SystemInit+0x20>)
 8000d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f7ff ffea 	bl	8000d40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f003 fc5f 	bl	8004654 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f7ff fc11 	bl	80005bc <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000da8:	08005d70 	.word	0x08005d70
  ldr r2, =_sbss
 8000dac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000db0:	20000510 	.word	0x20000510

08000db4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC1_2_IRQHandler>

08000db6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 f95b 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dc6:	2000      	movs	r0, #0
 8000dc8:	f000 f80e 	bl	8000de8 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d002      	beq.n	8000dd8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	71fb      	strb	r3, [r7, #7]
 8000dd6:	e001      	b.n	8000ddc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000dd8:	f7ff fe38 	bl	8000a4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ddc:	79fb      	ldrb	r3, [r7, #7]

}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000df0:	2300      	movs	r3, #0
 8000df2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_InitTick+0x68>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d022      	beq.n	8000e42 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dfc:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <HAL_InitTick+0x6c>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <HAL_InitTick+0x68>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e08:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f966 	bl	80010e2 <HAL_SYSTICK_Config>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10f      	bne.n	8000e3c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b0f      	cmp	r3, #15
 8000e20:	d809      	bhi.n	8000e36 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e22:	2200      	movs	r2, #0
 8000e24:	6879      	ldr	r1, [r7, #4]
 8000e26:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2a:	f000 f932 	bl	8001092 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e2e:	4a0a      	ldr	r2, [pc, #40]	; (8000e58 <HAL_InitTick+0x70>)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6013      	str	r3, [r2, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	e004      	b.n	8000e46 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e001      	b.n	8000e46 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000008 	.word	0x20000008
 8000e54:	20000000 	.word	0x20000000
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <HAL_IncTick+0x20>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4413      	add	r3, r2
 8000e6a:	4a03      	ldr	r2, [pc, #12]	; (8000e78 <HAL_IncTick+0x1c>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	200001bc 	.word	0x200001bc
 8000e7c:	20000008 	.word	0x20000008

08000e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  return uwTick;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <HAL_GetTick+0x14>)
 8000e86:	681b      	ldr	r3, [r3, #0]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	200001bc 	.word	0x200001bc

08000e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea0:	f7ff ffee 	bl	8000e80 <HAL_GetTick>
 8000ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb0:	d004      	beq.n	8000ebc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_Delay+0x40>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	68fa      	ldr	r2, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ebc:	bf00      	nop
 8000ebe:	f7ff ffdf 	bl	8000e80 <HAL_GetTick>
 8000ec2:	4602      	mov	r2, r0
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	68fa      	ldr	r2, [r7, #12]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d8f7      	bhi.n	8000ebe <HAL_Delay+0x26>
  {
  }
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000008 	.word	0x20000008

08000edc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f003 0307 	and.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eec:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0e:	4a04      	ldr	r2, [pc, #16]	; (8000f20 <__NVIC_SetPriorityGrouping+0x44>)
 8000f10:	68bb      	ldr	r3, [r7, #8]
 8000f12:	60d3      	str	r3, [r2, #12]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <__NVIC_GetPriorityGrouping+0x18>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	0a1b      	lsrs	r3, r3, #8
 8000f2e:	f003 0307 	and.w	r3, r3, #7
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	db0b      	blt.n	8000f6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	f003 021f 	and.w	r2, r3, #31
 8000f58:	4907      	ldr	r1, [pc, #28]	; (8000f78 <__NVIC_EnableIRQ+0x38>)
 8000f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5e:	095b      	lsrs	r3, r3, #5
 8000f60:	2001      	movs	r0, #1
 8000f62:	fa00 f202 	lsl.w	r2, r0, r2
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	370c      	adds	r7, #12
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000e100 	.word	0xe000e100

08000f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
         );
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff29 	bl	8000edc <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010a0:	f7ff ff40 	bl	8000f24 <__NVIC_GetPriorityGrouping>
 80010a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68b9      	ldr	r1, [r7, #8]
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	f7ff ff90 	bl	8000fd0 <NVIC_EncodePriority>
 80010b0:	4602      	mov	r2, r0
 80010b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b6:	4611      	mov	r1, r2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff ff5f 	bl	8000f7c <__NVIC_SetPriority>
}
 80010be:	bf00      	nop
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	4603      	mov	r3, r0
 80010ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff ff33 	bl	8000f40 <__NVIC_EnableIRQ>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff ffa4 	bl	8001038 <SysTick_Config>
 80010f0:	4603      	mov	r3, r0
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b087      	sub	sp, #28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800110a:	e15a      	b.n	80013c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	2101      	movs	r1, #1
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	4013      	ands	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b00      	cmp	r3, #0
 8001120:	f000 814c 	beq.w	80013bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b01      	cmp	r3, #1
 800112e:	d005      	beq.n	800113c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001138:	2b02      	cmp	r3, #2
 800113a:	d130      	bne.n	800119e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68da      	ldr	r2, [r3, #12]
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001172:	2201      	movs	r2, #1
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 0201 	and.w	r2, r3, #1
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d017      	beq.n	80011da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d123      	bne.n	800122e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	08da      	lsrs	r2, r3, #3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3208      	adds	r2, #8
 80011ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	f003 0307 	and.w	r3, r3, #7
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	4013      	ands	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	691a      	ldr	r2, [r3, #16]
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0203 	and.w	r2, r3, #3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80a6 	beq.w	80013bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001270:	4b5b      	ldr	r3, [pc, #364]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 8001272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001274:	4a5a      	ldr	r2, [pc, #360]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6613      	str	r3, [r2, #96]	; 0x60
 800127c:	4b58      	ldr	r3, [pc, #352]	; (80013e0 <HAL_GPIO_Init+0x2e4>)
 800127e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001288:	4a56      	ldr	r2, [pc, #344]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	220f      	movs	r2, #15
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	4013      	ands	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012b2:	d01f      	beq.n	80012f4 <HAL_GPIO_Init+0x1f8>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4a4c      	ldr	r2, [pc, #304]	; (80013e8 <HAL_GPIO_Init+0x2ec>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d019      	beq.n	80012f0 <HAL_GPIO_Init+0x1f4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a4b      	ldr	r2, [pc, #300]	; (80013ec <HAL_GPIO_Init+0x2f0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d013      	beq.n	80012ec <HAL_GPIO_Init+0x1f0>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4a      	ldr	r2, [pc, #296]	; (80013f0 <HAL_GPIO_Init+0x2f4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00d      	beq.n	80012e8 <HAL_GPIO_Init+0x1ec>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a49      	ldr	r2, [pc, #292]	; (80013f4 <HAL_GPIO_Init+0x2f8>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_GPIO_Init+0x1e8>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a48      	ldr	r2, [pc, #288]	; (80013f8 <HAL_GPIO_Init+0x2fc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d101      	bne.n	80012e0 <HAL_GPIO_Init+0x1e4>
 80012dc:	2305      	movs	r3, #5
 80012de:	e00a      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012e0:	2306      	movs	r3, #6
 80012e2:	e008      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012e4:	2304      	movs	r3, #4
 80012e6:	e006      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012e8:	2303      	movs	r3, #3
 80012ea:	e004      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e002      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <HAL_GPIO_Init+0x1fa>
 80012f4:	2300      	movs	r3, #0
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	f002 0203 	and.w	r2, r2, #3
 80012fc:	0092      	lsls	r2, r2, #2
 80012fe:	4093      	lsls	r3, r2
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001306:	4937      	ldr	r1, [pc, #220]	; (80013e4 <HAL_GPIO_Init+0x2e8>)
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	089b      	lsrs	r3, r3, #2
 800130c:	3302      	adds	r3, #2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001314:	4b39      	ldr	r3, [pc, #228]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001316:	689b      	ldr	r3, [r3, #8]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43db      	mvns	r3, r3
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001338:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_GPIO_Init+0x300>)
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800133e:	4b2f      	ldr	r3, [pc, #188]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43db      	mvns	r3, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001362:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_GPIO_Init+0x300>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43db      	mvns	r3, r3
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800138c:	4a1b      	ldr	r2, [pc, #108]	; (80013fc <HAL_GPIO_Init+0x300>)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_GPIO_Init+0x300>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43db      	mvns	r3, r3
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013b6:	4a11      	ldr	r2, [pc, #68]	; (80013fc <HAL_GPIO_Init+0x300>)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	fa22 f303 	lsr.w	r3, r2, r3
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f47f ae9d 	bne.w	800110c <HAL_GPIO_Init+0x10>
  }
}
 80013d2:	bf00      	nop
 80013d4:	bf00      	nop
 80013d6:	371c      	adds	r7, #28
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	48000400 	.word	0x48000400
 80013ec:	48000800 	.word	0x48000800
 80013f0:	48000c00 	.word	0x48000c00
 80013f4:	48001000 	.word	0x48001000
 80013f8:	48001400 	.word	0x48001400
 80013fc:	40010400 	.word	0x40010400

08001400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	460b      	mov	r3, r1
 800140a:	807b      	strh	r3, [r7, #2]
 800140c:	4613      	mov	r3, r2
 800140e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001410:	787b      	ldrb	r3, [r7, #1]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	887a      	ldrh	r2, [r7, #2]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141c:	e002      	b.n	8001424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800141e:	887a      	ldrh	r2, [r7, #2]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800143a:	4b08      	ldr	r3, [pc, #32]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	695a      	ldr	r2, [r3, #20]
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4013      	ands	r3, r2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d006      	beq.n	8001454 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001446:	4a05      	ldr	r2, [pc, #20]	; (800145c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001448:	88fb      	ldrh	r3, [r7, #6]
 800144a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	4618      	mov	r0, r3
 8001450:	f000 f806 	bl	8001460 <HAL_GPIO_EXTI_Callback>
  }
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b082      	sub	sp, #8
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e08d      	b.n	80015a4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d106      	bne.n	80014a2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff faf9 	bl	8000a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2224      	movs	r2, #36	; 0x24
 80014a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014c6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014d6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d107      	bne.n	80014f0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	e006      	b.n	80014fe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014fc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d108      	bne.n	8001518 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	e007      	b.n	8001528 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001526:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800154a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69d9      	ldr	r1, [r3, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f042 0201 	orr.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2200      	movs	r2, #0
 800159e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af02      	add	r7, sp, #8
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	4608      	mov	r0, r1
 80015b6:	4611      	mov	r1, r2
 80015b8:	461a      	mov	r2, r3
 80015ba:	4603      	mov	r3, r0
 80015bc:	817b      	strh	r3, [r7, #10]
 80015be:	460b      	mov	r3, r1
 80015c0:	813b      	strh	r3, [r7, #8]
 80015c2:	4613      	mov	r3, r2
 80015c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	2b20      	cmp	r3, #32
 80015d0:	f040 80f9 	bne.w	80017c6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d002      	beq.n	80015e0 <HAL_I2C_Mem_Write+0x34>
 80015da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d105      	bne.n	80015ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	e0ed      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d101      	bne.n	80015fa <HAL_I2C_Mem_Write+0x4e>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e0e6      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001602:	f7ff fc3d 	bl	8000e80 <HAL_GetTick>
 8001606:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2319      	movs	r3, #25
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f955 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e0d1      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2221      	movs	r2, #33	; 0x21
 8001628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2200      	movs	r2, #0
 8001638:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6a3a      	ldr	r2, [r7, #32]
 800163e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001644:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800164c:	88f8      	ldrh	r0, [r7, #6]
 800164e:	893a      	ldrh	r2, [r7, #8]
 8001650:	8979      	ldrh	r1, [r7, #10]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	4603      	mov	r3, r0
 800165c:	68f8      	ldr	r0, [r7, #12]
 800165e:	f000 f8b9 	bl	80017d4 <I2C_RequestMemoryWrite>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	e0a9      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001678:	b29b      	uxth	r3, r3
 800167a:	2bff      	cmp	r3, #255	; 0xff
 800167c:	d90e      	bls.n	800169c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	22ff      	movs	r2, #255	; 0xff
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fad9 	bl	8001c4c <I2C_TransferConfig>
 800169a:	e00f      	b.n	80016bc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	8979      	ldrh	r1, [r7, #10]
 80016ae:	2300      	movs	r3, #0
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016b6:	68f8      	ldr	r0, [r7, #12]
 80016b8:	f000 fac8 	bl	8001c4c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016c0:	68f8      	ldr	r0, [r7, #12]
 80016c2:	f000 f958 	bl	8001976 <I2C_WaitOnTXISFlagUntilTimeout>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e07b      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	781a      	ldrb	r2, [r3, #0]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	1c5a      	adds	r2, r3, #1
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3b01      	subs	r3, #1
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f8:	3b01      	subs	r3, #1
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29b      	uxth	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d034      	beq.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	2b00      	cmp	r3, #0
 8001710:	d130      	bne.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	9300      	str	r3, [sp, #0]
 8001716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001718:	2200      	movs	r2, #0
 800171a:	2180      	movs	r1, #128	; 0x80
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f000 f8d1 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e04d      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	2bff      	cmp	r3, #255	; 0xff
 8001734:	d90e      	bls.n	8001754 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	22ff      	movs	r2, #255	; 0xff
 800173a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001740:	b2da      	uxtb	r2, r3
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	2300      	movs	r3, #0
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f000 fa7d 	bl	8001c4c <I2C_TransferConfig>
 8001752:	e00f      	b.n	8001774 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29a      	uxth	r2, r3
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001762:	b2da      	uxtb	r2, r3
 8001764:	8979      	ldrh	r1, [r7, #10]
 8001766:	2300      	movs	r3, #0
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	68f8      	ldr	r0, [r7, #12]
 8001770:	f000 fa6c 	bl	8001c4c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001778:	b29b      	uxth	r3, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	d19e      	bne.n	80016bc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177e:	697a      	ldr	r2, [r7, #20]
 8001780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001782:	68f8      	ldr	r0, [r7, #12]
 8001784:	f000 f93e 	bl	8001a04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e01a      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2220      	movs	r2, #32
 8001798:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6859      	ldr	r1, [r3, #4]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <HAL_I2C_Mem_Write+0x224>)
 80017a6:	400b      	ands	r3, r1
 80017a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2220      	movs	r2, #32
 80017ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017c2:	2300      	movs	r3, #0
 80017c4:	e000      	b.n	80017c8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80017c6:	2302      	movs	r3, #2
  }
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	fe00e800 	.word	0xfe00e800

080017d4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af02      	add	r7, sp, #8
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	4608      	mov	r0, r1
 80017de:	4611      	mov	r1, r2
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	817b      	strh	r3, [r7, #10]
 80017e6:	460b      	mov	r3, r1
 80017e8:	813b      	strh	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	8979      	ldrh	r1, [r7, #10]
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <I2C_RequestMemoryWrite+0xa4>)
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017fc:	68f8      	ldr	r0, [r7, #12]
 80017fe:	f000 fa25 	bl	8001c4c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	69b9      	ldr	r1, [r7, #24]
 8001806:	68f8      	ldr	r0, [r7, #12]
 8001808:	f000 f8b5 	bl	8001976 <I2C_WaitOnTXISFlagUntilTimeout>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e02c      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001816:	88fb      	ldrh	r3, [r7, #6]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800181c:	893b      	ldrh	r3, [r7, #8]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	629a      	str	r2, [r3, #40]	; 0x28
 8001826:	e015      	b.n	8001854 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	b29b      	uxth	r3, r3
 800182e:	b2da      	uxtb	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	68f8      	ldr	r0, [r7, #12]
 800183c:	f000 f89b 	bl	8001976 <I2C_WaitOnTXISFlagUntilTimeout>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e012      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800184a:	893b      	ldrh	r3, [r7, #8]
 800184c:	b2da      	uxtb	r2, r3
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2200      	movs	r2, #0
 800185c:	2180      	movs	r1, #128	; 0x80
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f000 f830 	bl	80018c4 <I2C_WaitOnFlagUntilTimeout>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	80002000 	.word	0x80002000

0800187c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	2b02      	cmp	r3, #2
 8001890:	d103      	bne.n	800189a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2200      	movs	r2, #0
 8001898:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d007      	beq.n	80018b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	699a      	ldr	r2, [r3, #24]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0201 	orr.w	r2, r2, #1
 80018b6:	619a      	str	r2, [r3, #24]
  }
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	603b      	str	r3, [r7, #0]
 80018d0:	4613      	mov	r3, r2
 80018d2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018d4:	e03b      	b.n	800194e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	6839      	ldr	r1, [r7, #0]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 f8d6 	bl	8001a8c <I2C_IsErrorOccurred>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e041      	b.n	800196e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f0:	d02d      	beq.n	800194e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018f2:	f7ff fac5 	bl	8000e80 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d302      	bcc.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d122      	bne.n	800194e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	4013      	ands	r3, r2
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	429a      	cmp	r2, r3
 8001916:	bf0c      	ite	eq
 8001918:	2301      	moveq	r3, #1
 800191a:	2300      	movne	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	461a      	mov	r2, r3
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	429a      	cmp	r2, r3
 8001924:	d113      	bne.n	800194e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f043 0220 	orr.w	r2, r3, #32
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	2200      	movs	r2, #0
 8001946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	e00f      	b.n	800196e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699a      	ldr	r2, [r3, #24]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	4013      	ands	r3, r2
 8001958:	68ba      	ldr	r2, [r7, #8]
 800195a:	429a      	cmp	r2, r3
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	429a      	cmp	r2, r3
 800196a:	d0b4      	beq.n	80018d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0
 800197c:	60f8      	str	r0, [r7, #12]
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001982:	e033      	b.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	68b9      	ldr	r1, [r7, #8]
 8001988:	68f8      	ldr	r0, [r7, #12]
 800198a:	f000 f87f 	bl	8001a8c <I2C_IsErrorOccurred>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e031      	b.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199e:	d025      	beq.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019a0:	f7ff fa6e 	bl	8000e80 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d302      	bcc.n	80019b6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d11a      	bne.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d013      	beq.n	80019ec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c8:	f043 0220 	orr.w	r2, r3, #32
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2220      	movs	r2, #32
 80019d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e007      	b.n	80019fc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d1c4      	bne.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a10:	e02f      	b.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 f838 	bl	8001a8c <I2C_IsErrorOccurred>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e02d      	b.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a26:	f7ff fa2b 	bl	8000e80 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	68ba      	ldr	r2, [r7, #8]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d302      	bcc.n	8001a3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d11a      	bne.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	d013      	beq.n	8001a72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f043 0220 	orr.w	r2, r3, #32
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2220      	movs	r2, #32
 8001a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e007      	b.n	8001a82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b20      	cmp	r3, #32
 8001a7e:	d1c8      	bne.n	8001a12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	f003 0310 	and.w	r3, r3, #16
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d068      	beq.n	8001b8a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001ac0:	e049      	b.n	8001b56 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac8:	d045      	beq.n	8001b56 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001aca:	f7ff f9d9 	bl	8000e80 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	68ba      	ldr	r2, [r7, #8]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d302      	bcc.n	8001ae0 <I2C_IsErrorOccurred+0x54>
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d13a      	bne.n	8001b56 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001af2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b02:	d121      	bne.n	8001b48 <I2C_IsErrorOccurred+0xbc>
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b0a:	d01d      	beq.n	8001b48 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001b0c:	7cfb      	ldrb	r3, [r7, #19]
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d01a      	beq.n	8001b48 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b20:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001b22:	f7ff f9ad 	bl	8000e80 <HAL_GetTick>
 8001b26:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b28:	e00e      	b.n	8001b48 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001b2a:	f7ff f9a9 	bl	8000e80 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b19      	cmp	r3, #25
 8001b36:	d907      	bls.n	8001b48 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f043 0320 	orr.w	r3, r3, #32
 8001b3e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b46:	e006      	b.n	8001b56 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d1e9      	bne.n	8001b2a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d003      	beq.n	8001b6c <I2C_IsErrorOccurred+0xe0>
 8001b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0aa      	beq.n	8001ac2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d103      	bne.n	8001b7c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2220      	movs	r2, #32
 8001b7a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f043 0301 	orr.w	r3, r3, #1
 8001ba2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001bbe:	6a3b      	ldr	r3, [r7, #32]
 8001bc0:	f043 0308 	orr.w	r3, r3, #8
 8001bc4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	f043 0302 	orr.w	r3, r3, #2
 8001be6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bf0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d01c      	beq.n	8001c3a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f7ff fe3b 	bl	800187c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <I2C_IsErrorOccurred+0x1bc>)
 8001c12:	400b      	ands	r3, r1
 8001c14:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3728      	adds	r7, #40	; 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	fe00e800 	.word	0xfe00e800

08001c4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	460b      	mov	r3, r1
 8001c58:	817b      	strh	r3, [r7, #10]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c5e:	897b      	ldrh	r3, [r7, #10]
 8001c60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c64:	7a7b      	ldrb	r3, [r7, #9]
 8001c66:	041b      	lsls	r3, r3, #16
 8001c68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	0d5b      	lsrs	r3, r3, #21
 8001c86:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c8a:	4b08      	ldr	r3, [pc, #32]	; (8001cac <I2C_TransferConfig+0x60>)
 8001c8c:	430b      	orrs	r3, r1
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	ea02 0103 	and.w	r1, r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c9e:	bf00      	nop
 8001ca0:	371c      	adds	r7, #28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	03ff63ff 	.word	0x03ff63ff

08001cb0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	d138      	bne.n	8001d38 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d101      	bne.n	8001cd4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e032      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2224      	movs	r2, #36	; 0x24
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0201 	bic.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6819      	ldr	r1, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	683a      	ldr	r2, [r7, #0]
 8001d10:	430a      	orrs	r2, r1
 8001d12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0201 	orr.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b085      	sub	sp, #20
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
 8001d4e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b20      	cmp	r3, #32
 8001d5a:	d139      	bne.n	8001dd0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e033      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2224      	movs	r2, #36	; 0x24
 8001d76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f022 0201 	bic.w	r2, r2, #1
 8001d88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	021b      	lsls	r3, r3, #8
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e000      	b.n	8001dd2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001dd0:	2302      	movs	r3, #2
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
	...

08001de0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40007000 	.word	0x40007000

08001e00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d141      	bne.n	8001e92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e0e:	4b4b      	ldr	r3, [pc, #300]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1a:	d131      	bne.n	8001e80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e1c:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e22:	4a46      	ldr	r2, [pc, #280]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e34:	4a41      	ldr	r2, [pc, #260]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e3c:	4b40      	ldr	r3, [pc, #256]	; (8001f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2232      	movs	r2, #50	; 0x32
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	4a3f      	ldr	r2, [pc, #252]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	0c9b      	lsrs	r3, r3, #18
 8001e4e:	3301      	adds	r3, #1
 8001e50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e52:	e002      	b.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	d102      	bne.n	8001e6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1f2      	bne.n	8001e54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e6e:	4b33      	ldr	r3, [pc, #204]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7a:	d158      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e057      	b.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e80:	4b2e      	ldr	r3, [pc, #184]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e86:	4a2d      	ldr	r2, [pc, #180]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e90:	e04d      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e98:	d141      	bne.n	8001f1e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e9a:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea6:	d131      	bne.n	8001f0c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	4a23      	ldr	r2, [pc, #140]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec0:	4a1e      	ldr	r2, [pc, #120]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ec8:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2232      	movs	r2, #50	; 0x32
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	4a1c      	ldr	r2, [pc, #112]	; (8001f44 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed8:	0c9b      	lsrs	r3, r3, #18
 8001eda:	3301      	adds	r3, #1
 8001edc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ede:	e002      	b.n	8001ee6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ef2:	d102      	bne.n	8001efa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f2      	bne.n	8001ee0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f06:	d112      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e011      	b.n	8001f30 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f0c:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f1c:	e007      	b.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f56:	6093      	str	r3, [r2, #8]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	40007000 	.word	0x40007000

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e2fe      	b.n	8002578 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d075      	beq.n	8002072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f86:	4b97      	ldr	r3, [pc, #604]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f90:	4b94      	ldr	r3, [pc, #592]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	2b0c      	cmp	r3, #12
 8001f9e:	d102      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3e>
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d002      	beq.n	8001fac <HAL_RCC_OscConfig+0x44>
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d10b      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	4b8d      	ldr	r3, [pc, #564]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d05b      	beq.n	8002070 <HAL_RCC_OscConfig+0x108>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d157      	bne.n	8002070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e2d9      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d106      	bne.n	8001fdc <HAL_RCC_OscConfig+0x74>
 8001fce:	4b85      	ldr	r3, [pc, #532]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a84      	ldr	r2, [pc, #528]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd8:	6013      	str	r3, [r2, #0]
 8001fda:	e01d      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b7c      	ldr	r3, [pc, #496]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a7b      	ldr	r2, [pc, #492]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e00b      	b.n	8002018 <HAL_RCC_OscConfig+0xb0>
 8002000:	4b78      	ldr	r3, [pc, #480]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a77      	ldr	r2, [pc, #476]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a74      	ldr	r2, [pc, #464]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d013      	beq.n	8002048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7fe ff2e 	bl	8000e80 <HAL_GetTick>
 8002024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002028:	f7fe ff2a 	bl	8000e80 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	; 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e29e      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0xc0>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002048:	f7fe ff1a 	bl	8000e80 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7fe ff16 	bl	8000e80 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e28a      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002062:	4b60      	ldr	r3, [pc, #384]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1f0      	bne.n	8002050 <HAL_RCC_OscConfig+0xe8>
 800206e:	e000      	b.n	8002072 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d075      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207e:	4b59      	ldr	r3, [pc, #356]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 030c 	and.w	r3, r3, #12
 8002086:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002088:	4b56      	ldr	r3, [pc, #344]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	2b0c      	cmp	r3, #12
 8002096:	d102      	bne.n	800209e <HAL_RCC_OscConfig+0x136>
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	2b02      	cmp	r3, #2
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_OscConfig+0x13c>
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d11f      	bne.n	80020e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	4b4f      	ldr	r3, [pc, #316]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_OscConfig+0x154>
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e25d      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020bc:	4b49      	ldr	r3, [pc, #292]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	061b      	lsls	r3, r3, #24
 80020ca:	4946      	ldr	r1, [pc, #280]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <HAL_RCC_OscConfig+0x280>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fe87 	bl	8000de8 <HAL_InitTick>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d043      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e249      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d023      	beq.n	8002134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ec:	4b3d      	ldr	r3, [pc, #244]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a3c      	ldr	r2, [pc, #240]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f8:	f7fe fec2 	bl	8000e80 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002100:	f7fe febe 	bl	8000e80 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e232      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002112:	4b34      	ldr	r3, [pc, #208]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800211e:	4b31      	ldr	r3, [pc, #196]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	691b      	ldr	r3, [r3, #16]
 800212a:	061b      	lsls	r3, r3, #24
 800212c:	492d      	ldr	r1, [pc, #180]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
 8002132:	e01a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002134:	4b2b      	ldr	r3, [pc, #172]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2a      	ldr	r2, [pc, #168]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800213a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800213e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fe9e 	bl	8000e80 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fe9a 	bl	8000e80 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e20e      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e0>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d041      	beq.n	80021fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01c      	beq.n	80021b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b19      	ldr	r3, [pc, #100]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002184:	4a17      	ldr	r2, [pc, #92]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218e:	f7fe fe77 	bl	8000e80 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002196:	f7fe fe73 	bl	8000e80 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e1e7      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021a8:	4b0e      	ldr	r3, [pc, #56]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0ef      	beq.n	8002196 <HAL_RCC_OscConfig+0x22e>
 80021b6:	e020      	b.n	80021fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b8:	4b0a      	ldr	r3, [pc, #40]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021be:	4a09      	ldr	r2, [pc, #36]	; (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	f023 0301 	bic.w	r3, r3, #1
 80021c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe5a 	bl	8000e80 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ce:	e00d      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d0:	f7fe fe56 	bl	8000e80 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d906      	bls.n	80021ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e1ca      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021ec:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ea      	bne.n	80021d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0304 	and.w	r3, r3, #4
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80a6 	beq.w	8002354 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800220e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x2b4>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_RCC_OscConfig+0x2b6>
 800221c:	2300      	movs	r3, #0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00d      	beq.n	800223e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002222:	4b7f      	ldr	r3, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002226:	4a7e      	ldr	r2, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222c:	6593      	str	r3, [r2, #88]	; 0x58
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800223a:	2301      	movs	r3, #1
 800223c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800223e:	4b79      	ldr	r3, [pc, #484]	; (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002246:	2b00      	cmp	r3, #0
 8002248:	d118      	bne.n	800227c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800224a:	4b76      	ldr	r3, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x4bc>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a75      	ldr	r2, [pc, #468]	; (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002256:	f7fe fe13 	bl	8000e80 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800225e:	f7fe fe0f 	bl	8000e80 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e183      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002270:	4b6c      	ldr	r3, [pc, #432]	; (8002424 <HAL_RCC_OscConfig+0x4bc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0x32e>
 8002284:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002294:	e024      	b.n	80022e0 <HAL_RCC_OscConfig+0x378>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b05      	cmp	r3, #5
 800229c:	d110      	bne.n	80022c0 <HAL_RCC_OscConfig+0x358>
 800229e:	4b60      	ldr	r3, [pc, #384]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a4:	4a5e      	ldr	r2, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f043 0304 	orr.w	r3, r3, #4
 80022aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022ae:	4b5c      	ldr	r3, [pc, #368]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022be:	e00f      	b.n	80022e0 <HAL_RCC_OscConfig+0x378>
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022d0:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	4a52      	ldr	r2, [pc, #328]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80022d8:	f023 0304 	bic.w	r3, r3, #4
 80022dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d016      	beq.n	8002316 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e8:	f7fe fdca 	bl	8000e80 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ee:	e00a      	b.n	8002306 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f0:	f7fe fdc6 	bl	8000e80 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fe:	4293      	cmp	r3, r2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e138      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ed      	beq.n	80022f0 <HAL_RCC_OscConfig+0x388>
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002316:	f7fe fdb3 	bl	8000e80 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800231c:	e00a      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800231e:	f7fe fdaf 	bl	8000e80 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	; 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e121      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002334:	4b3a      	ldr	r3, [pc, #232]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1ed      	bne.n	800231e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002342:	7ffb      	ldrb	r3, [r7, #31]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d105      	bne.n	8002354 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002348:	4b35      	ldr	r3, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800234a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234c:	4a34      	ldr	r2, [pc, #208]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800234e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002352:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0320 	and.w	r3, r3, #32
 800235c:	2b00      	cmp	r3, #0
 800235e:	d03c      	beq.n	80023da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d01c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002370:	f043 0301 	orr.w	r3, r3, #1
 8002374:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002378:	f7fe fd82 	bl	8000e80 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002380:	f7fe fd7e 	bl	8000e80 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e0f2      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002392:	4b23      	ldr	r3, [pc, #140]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0ef      	beq.n	8002380 <HAL_RCC_OscConfig+0x418>
 80023a0:	e01b      	b.n	80023da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023a2:	4b1f      	ldr	r3, [pc, #124]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023a8:	4a1d      	ldr	r2, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f023 0301 	bic.w	r3, r3, #1
 80023ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe fd65 	bl	8000e80 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ba:	f7fe fd61 	bl	8000e80 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e0d5      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1ef      	bne.n	80023ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 80c9 	beq.w	8002576 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	f000 8083 	beq.w	80024f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d15e      	bne.n	80024b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a08      	ldr	r2, [pc, #32]	; (8002420 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002406:	f7fe fd3b 	bl	8000e80 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240c:	e00c      	b.n	8002428 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240e:	f7fe fd37 	bl	8000e80 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d905      	bls.n	8002428 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0ab      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
 8002420:	40021000 	.word	0x40021000
 8002424:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1ec      	bne.n	800240e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002434:	4b52      	ldr	r3, [pc, #328]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	4b52      	ldr	r3, [pc, #328]	; (8002584 <HAL_RCC_OscConfig+0x61c>)
 800243a:	4013      	ands	r3, r2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6a11      	ldr	r1, [r2, #32]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002444:	3a01      	subs	r2, #1
 8002446:	0112      	lsls	r2, r2, #4
 8002448:	4311      	orrs	r1, r2
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800244e:	0212      	lsls	r2, r2, #8
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002456:	0852      	lsrs	r2, r2, #1
 8002458:	3a01      	subs	r2, #1
 800245a:	0552      	lsls	r2, r2, #21
 800245c:	4311      	orrs	r1, r2
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002462:	0852      	lsrs	r2, r2, #1
 8002464:	3a01      	subs	r2, #1
 8002466:	0652      	lsls	r2, r2, #25
 8002468:	4311      	orrs	r1, r2
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800246e:	06d2      	lsls	r2, r2, #27
 8002470:	430a      	orrs	r2, r1
 8002472:	4943      	ldr	r1, [pc, #268]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a40      	ldr	r2, [pc, #256]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 800247e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002482:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002484:	4b3e      	ldr	r3, [pc, #248]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	4a3d      	ldr	r2, [pc, #244]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 800248a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800248e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7fe fcf6 	bl	8000e80 <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002498:	f7fe fcf2 	bl	8000e80 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e066      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024aa:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d0f0      	beq.n	8002498 <HAL_RCC_OscConfig+0x530>
 80024b6:	e05e      	b.n	8002576 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b8:	4b31      	ldr	r3, [pc, #196]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a30      	ldr	r2, [pc, #192]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	f7fe fcdc 	bl	8000e80 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024cc:	f7fe fcd8 	bl	8000e80 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e04c      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024de:	4b28      	ldr	r3, [pc, #160]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80024ea:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	4924      	ldr	r1, [pc, #144]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 80024f0:	4b25      	ldr	r3, [pc, #148]	; (8002588 <HAL_RCC_OscConfig+0x620>)
 80024f2:	4013      	ands	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
 80024f6:	e03e      	b.n	8002576 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e039      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002504:	4b1e      	ldr	r3, [pc, #120]	; (8002580 <HAL_RCC_OscConfig+0x618>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f003 0203 	and.w	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	429a      	cmp	r2, r3
 8002516:	d12c      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	3b01      	subs	r3, #1
 8002524:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002526:	429a      	cmp	r2, r3
 8002528:	d123      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002534:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d11b      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002546:	429a      	cmp	r2, r3
 8002548:	d113      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002554:	085b      	lsrs	r3, r3, #1
 8002556:	3b01      	subs	r3, #1
 8002558:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800255a:	429a      	cmp	r2, r3
 800255c:	d109      	bne.n	8002572 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002568:	085b      	lsrs	r3, r3, #1
 800256a:	3b01      	subs	r3, #1
 800256c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256e:	429a      	cmp	r2, r3
 8002570:	d001      	beq.n	8002576 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	019f800c 	.word	0x019f800c
 8002588:	feeefffc 	.word	0xfeeefffc

0800258c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e11e      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025a4:	4b91      	ldr	r3, [pc, #580]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d910      	bls.n	80025d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b2:	4b8e      	ldr	r3, [pc, #568]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 020f 	bic.w	r2, r3, #15
 80025ba:	498c      	ldr	r1, [pc, #560]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c2:	4b8a      	ldr	r3, [pc, #552]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d001      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e106      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d073      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b03      	cmp	r3, #3
 80025e6:	d129      	bne.n	800263c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e8:	4b81      	ldr	r3, [pc, #516]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0f4      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80025f8:	f000 f99e 	bl	8002938 <RCC_GetSysClockFreqFromPLLSource>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	4a7c      	ldr	r2, [pc, #496]	; (80027f4 <HAL_RCC_ClockConfig+0x268>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d93f      	bls.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002606:	4b7a      	ldr	r3, [pc, #488]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800261a:	2b00      	cmp	r3, #0
 800261c:	d033      	beq.n	8002686 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002622:	2b00      	cmp	r3, #0
 8002624:	d12f      	bne.n	8002686 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002626:	4b72      	ldr	r3, [pc, #456]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800262e:	4a70      	ldr	r2, [pc, #448]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002634:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e024      	b.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d107      	bne.n	8002654 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002644:	4b6a      	ldr	r3, [pc, #424]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d109      	bne.n	8002664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e0c6      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002654:	4b66      	ldr	r3, [pc, #408]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0be      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002664:	f000 f8ce 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8002668:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4a61      	ldr	r2, [pc, #388]	; (80027f4 <HAL_RCC_ClockConfig+0x268>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d909      	bls.n	8002686 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002672:	4b5f      	ldr	r3, [pc, #380]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800267a:	4a5d      	ldr	r2, [pc, #372]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 800267c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002680:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002686:	4b5a      	ldr	r3, [pc, #360]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f023 0203 	bic.w	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4957      	ldr	r1, [pc, #348]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002694:	4313      	orrs	r3, r2
 8002696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002698:	f7fe fbf2 	bl	8000e80 <HAL_GetTick>
 800269c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269e:	e00a      	b.n	80026b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a0:	f7fe fbee 	bl	8000e80 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e095      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	4b4e      	ldr	r3, [pc, #312]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 020c 	and.w	r2, r3, #12
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d1eb      	bne.n	80026a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d023      	beq.n	800271c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b43      	ldr	r3, [pc, #268]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d007      	beq.n	8002708 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002700:	4a3b      	ldr	r2, [pc, #236]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002706:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002708:	4b39      	ldr	r3, [pc, #228]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4936      	ldr	r1, [pc, #216]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002716:	4313      	orrs	r3, r2
 8002718:	608b      	str	r3, [r1, #8]
 800271a:	e008      	b.n	800272e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b80      	cmp	r3, #128	; 0x80
 8002720:	d105      	bne.n	800272e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002722:	4b33      	ldr	r3, [pc, #204]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4a32      	ldr	r2, [pc, #200]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002728:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800272c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800272e:	4b2f      	ldr	r3, [pc, #188]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d21d      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273c:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f023 020f 	bic.w	r2, r3, #15
 8002744:	4929      	ldr	r1, [pc, #164]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4313      	orrs	r3, r2
 800274a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800274c:	f7fe fb98 	bl	8000e80 <HAL_GetTick>
 8002750:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	e00a      	b.n	800276a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002754:	f7fe fb94 	bl	8000e80 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e03b      	b.n	80027e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b20      	ldr	r3, [pc, #128]	; (80027ec <HAL_RCC_ClockConfig+0x260>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d1ed      	bne.n	8002754 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	4917      	ldr	r1, [pc, #92]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 8002792:	4313      	orrs	r3, r2
 8002794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d009      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027a2:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	490f      	ldr	r1, [pc, #60]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027b6:	f000 f825 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027ba:	4602      	mov	r2, r0
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <HAL_RCC_ClockConfig+0x264>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	490c      	ldr	r1, [pc, #48]	; (80027f8 <HAL_RCC_ClockConfig+0x26c>)
 80027c8:	5ccb      	ldrb	r3, [r1, r3]
 80027ca:	f003 031f 	and.w	r3, r3, #31
 80027ce:	fa22 f303 	lsr.w	r3, r2, r3
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <HAL_RCC_ClockConfig+0x270>)
 80027d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <HAL_RCC_ClockConfig+0x274>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fe fb04 	bl	8000de8 <HAL_InitTick>
 80027e0:	4603      	mov	r3, r0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40022000 	.word	0x40022000
 80027f0:	40021000 	.word	0x40021000
 80027f4:	04c4b400 	.word	0x04c4b400
 80027f8:	08004f78 	.word	0x08004f78
 80027fc:	20000000 	.word	0x20000000
 8002800:	20000004 	.word	0x20000004

08002804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800280a:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b04      	cmp	r3, #4
 8002814:	d102      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002816:	4b2a      	ldr	r3, [pc, #168]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e047      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f003 030c 	and.w	r3, r3, #12
 8002824:	2b08      	cmp	r3, #8
 8002826:	d102      	bne.n	800282e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	e03e      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800282e:	4b23      	ldr	r3, [pc, #140]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 030c 	and.w	r3, r3, #12
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d136      	bne.n	80028a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	091b      	lsrs	r3, r3, #4
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3301      	adds	r3, #1
 8002850:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d10c      	bne.n	8002872 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002858:	4a1a      	ldr	r2, [pc, #104]	; (80028c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002860:	4a16      	ldr	r2, [pc, #88]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002862:	68d2      	ldr	r2, [r2, #12]
 8002864:	0a12      	lsrs	r2, r2, #8
 8002866:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800286a:	fb02 f303 	mul.w	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
      break;
 8002870:	e00c      	b.n	800288c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800287c:	68d2      	ldr	r2, [r2, #12]
 800287e:	0a12      	lsrs	r2, r2, #8
 8002880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	617b      	str	r3, [r7, #20]
      break;
 800288a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800288c:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	0e5b      	lsrs	r3, r3, #25
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a4:	613b      	str	r3, [r7, #16]
 80028a6:	e001      	b.n	80028ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028ac:	693b      	ldr	r3, [r7, #16]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40021000 	.word	0x40021000
 80028c0:	00f42400 	.word	0x00f42400
 80028c4:	016e3600 	.word	0x016e3600

080028c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <HAL_RCC_GetHCLKFreq+0x14>)
 80028ce:	681b      	ldr	r3, [r3, #0]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	20000000 	.word	0x20000000

080028e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80028e4:	f7ff fff0 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	0a1b      	lsrs	r3, r3, #8
 80028f0:	f003 0307 	and.w	r3, r3, #7
 80028f4:	4904      	ldr	r1, [pc, #16]	; (8002908 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	08004f88 	.word	0x08004f88

0800290c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002910:	f7ff ffda 	bl	80028c8 <HAL_RCC_GetHCLKFreq>
 8002914:	4602      	mov	r2, r0
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0adb      	lsrs	r3, r3, #11
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	4904      	ldr	r1, [pc, #16]	; (8002934 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002922:	5ccb      	ldrb	r3, [r1, r3]
 8002924:	f003 031f 	and.w	r3, r3, #31
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40021000 	.word	0x40021000
 8002934:	08004f88 	.word	0x08004f88

08002938 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800293e:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 030f 	and.w	r3, r3, #15
 8002952:	3301      	adds	r3, #1
 8002954:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d10c      	bne.n	8002976 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	fbb2 f3f3 	udiv	r3, r2, r3
 8002964:	4a14      	ldr	r2, [pc, #80]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002966:	68d2      	ldr	r2, [r2, #12]
 8002968:	0a12      	lsrs	r2, r2, #8
 800296a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800296e:	fb02 f303 	mul.w	r3, r2, r3
 8002972:	617b      	str	r3, [r7, #20]
    break;
 8002974:	e00c      	b.n	8002990 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	fbb2 f3f3 	udiv	r3, r2, r3
 800297e:	4a0e      	ldr	r2, [pc, #56]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002980:	68d2      	ldr	r2, [r2, #12]
 8002982:	0a12      	lsrs	r2, r2, #8
 8002984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002988:	fb02 f303 	mul.w	r3, r2, r3
 800298c:	617b      	str	r3, [r7, #20]
    break;
 800298e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002990:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0e5b      	lsrs	r3, r3, #25
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	3301      	adds	r3, #1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029aa:	687b      	ldr	r3, [r7, #4]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	371c      	adds	r7, #28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr
 80029b8:	40021000 	.word	0x40021000
 80029bc:	016e3600 	.word	0x016e3600
 80029c0:	00f42400 	.word	0x00f42400

080029c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029cc:	2300      	movs	r3, #0
 80029ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029d0:	2300      	movs	r3, #0
 80029d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 8098 	beq.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e2:	2300      	movs	r3, #0
 80029e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e6:	4b43      	ldr	r3, [pc, #268]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10d      	bne.n	8002a0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	4b40      	ldr	r3, [pc, #256]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f6:	4a3f      	ldr	r2, [pc, #252]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029fc:	6593      	str	r3, [r2, #88]	; 0x58
 80029fe:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a0e:	4b3a      	ldr	r3, [pc, #232]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a39      	ldr	r2, [pc, #228]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a1a:	f7fe fa31 	bl	8000e80 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a20:	e009      	b.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a22:	f7fe fa2d 	bl	8000e80 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d902      	bls.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	74fb      	strb	r3, [r7, #19]
        break;
 8002a34:	e005      	b.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d0ef      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a42:	7cfb      	ldrb	r3, [r7, #19]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d159      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a48:	4b2a      	ldr	r3, [pc, #168]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d01e      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d019      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a64:	4b23      	ldr	r3, [pc, #140]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a70:	4b20      	ldr	r3, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a76:	4a1f      	ldr	r2, [pc, #124]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a80:	4b1c      	ldr	r3, [pc, #112]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a90:	4a18      	ldr	r2, [pc, #96]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7fe f9ed 	bl	8000e80 <HAL_GetTick>
 8002aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa8:	e00b      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aaa:	f7fe f9e9 	bl	8000e80 <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d902      	bls.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	74fb      	strb	r3, [r7, #19]
            break;
 8002ac0:	e006      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ec      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10b      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad6:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae4:	4903      	ldr	r1, [pc, #12]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aec:	e008      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	74bb      	strb	r3, [r7, #18]
 8002af2:	e005      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b00:	7c7b      	ldrb	r3, [r7, #17]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4ba7      	ldr	r3, [pc, #668]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4aa6      	ldr	r2, [pc, #664]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1e:	4ba1      	ldr	r3, [pc, #644]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 0203 	bic.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	499d      	ldr	r1, [pc, #628]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b40:	4b98      	ldr	r3, [pc, #608]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 020c 	bic.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	4995      	ldr	r1, [pc, #596]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b62:	4b90      	ldr	r3, [pc, #576]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	498c      	ldr	r1, [pc, #560]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b84:	4b87      	ldr	r3, [pc, #540]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	4984      	ldr	r1, [pc, #528]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba6:	4b7f      	ldr	r3, [pc, #508]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	497b      	ldr	r1, [pc, #492]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc8:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	4973      	ldr	r1, [pc, #460]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	496a      	ldr	r1, [pc, #424]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c0c:	4b65      	ldr	r3, [pc, #404]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	4962      	ldr	r1, [pc, #392]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4959      	ldr	r1, [pc, #356]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c50:	4b54      	ldr	r3, [pc, #336]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5e:	4951      	ldr	r1, [pc, #324]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	4948      	ldr	r1, [pc, #288]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d015      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c94:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4940      	ldr	r1, [pc, #256]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb2:	d105      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb4:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d015      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ccc:	4b35      	ldr	r3, [pc, #212]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cda:	4932      	ldr	r1, [pc, #200]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cea:	d105      	bne.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	4a2c      	ldr	r2, [pc, #176]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d015      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4924      	ldr	r1, [pc, #144]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d22:	d105      	bne.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	4a1e      	ldr	r2, [pc, #120]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d015      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d3c:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4a:	4916      	ldr	r1, [pc, #88]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d5a:	d105      	bne.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d5c:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d019      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	4908      	ldr	r1, [pc, #32]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d92:	d109      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4a02      	ldr	r2, [pc, #8]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9e:	60d3      	str	r3, [r2, #12]
 8002da0:	e002      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d015      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002db4:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4926      	ldr	r1, [pc, #152]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd2:	d105      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002dd4:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a20      	ldr	r2, [pc, #128]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dde:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d015      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002dec:	4b1b      	ldr	r3, [pc, #108]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dfa:	4918      	ldr	r1, [pc, #96]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e0c:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	4a12      	ldr	r2, [pc, #72]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d015      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e24:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	490a      	ldr	r1, [pc, #40]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e42:	d105      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e44:	4b05      	ldr	r3, [pc, #20]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	4a04      	ldr	r2, [pc, #16]	; (8002e5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e50:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40021000 	.word	0x40021000

08002e60 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d070      	beq.n	8002f54 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7fd feb6 	bl	8000bf8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2202      	movs	r2, #2
 8002e90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f003 0310 	and.w	r3, r3, #16
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d04f      	beq.n	8002f42 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	22ca      	movs	r2, #202	; 0xca
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2253      	movs	r2, #83	; 0x53
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f000 fa44 	bl	8003340 <RTC_EnterInitMode>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d126      	bne.n	8002f10 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6812      	ldr	r2, [r2, #0]
 8002ecc:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8002ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed4:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6999      	ldr	r1, [r3, #24]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	431a      	orrs	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68d9      	ldr	r1, [r3, #12]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	041a      	lsls	r2, r3, #16
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 fa50 	bl	80033ac <RTC_ExitInitMode>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8002f10:	7bfb      	ldrb	r3, [r7, #15]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d110      	bne.n	8002f38 <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	699b      	ldr	r3, [r3, #24]
 8002f1c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	69db      	ldr	r3, [r3, #28]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	22ff      	movs	r2, #255	; 0xff
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f40:	e001      	b.n	8002f46 <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f5e:	b590      	push	{r4, r7, lr}
 8002f60:	b087      	sub	sp, #28
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_RTC_SetTime+0x1a>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e08b      	b.n	8003090 <HAL_RTC_SetTime+0x132>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	22ca      	movs	r2, #202	; 0xca
 8002f8e:	625a      	str	r2, [r3, #36]	; 0x24
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2253      	movs	r2, #83	; 0x53
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f9d1 	bl	8003340 <RTC_EnterInitMode>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d163      	bne.n	8003070 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d126      	bne.n	8002ffc <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d102      	bne.n	8002fc2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f000 fa33 	bl	8003432 <RTC_ByteToBcd2>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	785b      	ldrb	r3, [r3, #1]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa2c 	bl	8003432 <RTC_ByteToBcd2>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fde:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	789b      	ldrb	r3, [r3, #2]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f000 fa24 	bl	8003432 <RTC_ByteToBcd2>
 8002fea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	78db      	ldrb	r3, [r3, #3]
 8002ff4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	e018      	b.n	800302e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d102      	bne.n	8003010 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2200      	movs	r2, #0
 800300e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800301c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003022:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	78db      	ldrb	r3, [r3, #3]
 8003028:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003038:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800303c:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699a      	ldr	r2, [r3, #24]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800304c:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6999      	ldr	r1, [r3, #24]
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	431a      	orrs	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f9a0 	bl	80033ac <RTC_ExitInitMode>
 800306c:	4603      	mov	r3, r0
 800306e:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	22ff      	movs	r2, #255	; 0xff
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d103      	bne.n	8003086 <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800308e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}

08003098 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689a      	ldr	r2, [r3, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80030c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030ca:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	0a1b      	lsrs	r3, r3, #8
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030e6:	b2da      	uxtb	r2, r3
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	0d9b      	lsrs	r3, r3, #22
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	b2da      	uxtb	r2, r3
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d11a      	bne.n	8003146 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f000 f9ac 	bl	8003472 <RTC_Bcd2ToByte>
 800311a:	4603      	mov	r3, r0
 800311c:	461a      	mov	r2, r3
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	785b      	ldrb	r3, [r3, #1]
 8003126:	4618      	mov	r0, r3
 8003128:	f000 f9a3 	bl	8003472 <RTC_Bcd2ToByte>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	789b      	ldrb	r3, [r3, #2]
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f99a 	bl	8003472 <RTC_Bcd2ToByte>
 800313e:	4603      	mov	r3, r0
 8003140:	461a      	mov	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3718      	adds	r7, #24
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003150:	b590      	push	{r4, r7, lr}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RTC_SetDate+0x1a>
 8003166:	2302      	movs	r3, #2
 8003168:	e075      	b.n	8003256 <HAL_RTC_SetDate+0x106>
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2202      	movs	r2, #2
 8003176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10e      	bne.n	800319e <HAL_RTC_SetDate+0x4e>
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	785b      	ldrb	r3, [r3, #1]
 8003184:	f003 0310 	and.w	r3, r3, #16
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	785b      	ldrb	r3, [r3, #1]
 8003190:	f023 0310 	bic.w	r3, r3, #16
 8003194:	b2db      	uxtb	r3, r3
 8003196:	330a      	adds	r3, #10
 8003198:	b2da      	uxtb	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11c      	bne.n	80031de <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	78db      	ldrb	r3, [r3, #3]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 f942 	bl	8003432 <RTC_ByteToBcd2>
 80031ae:	4603      	mov	r3, r0
 80031b0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f93b 	bl	8003432 <RTC_ByteToBcd2>
 80031bc:	4603      	mov	r3, r0
 80031be:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031c0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	789b      	ldrb	r3, [r3, #2]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f933 	bl	8003432 <RTC_ByteToBcd2>
 80031cc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80031ce:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]
 80031dc:	e00e      	b.n	80031fc <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	78db      	ldrb	r3, [r3, #3]
 80031e2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	785b      	ldrb	r3, [r3, #1]
 80031e8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031ea:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80031f0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	22ca      	movs	r2, #202	; 0xca
 8003202:	625a      	str	r2, [r3, #36]	; 0x24
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2253      	movs	r2, #83	; 0x53
 800320a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f897 	bl	8003340 <RTC_EnterInitMode>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003226:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800322a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f8bd 	bl	80033ac <RTC_ExitInitMode>
 8003232:	4603      	mov	r3, r0
 8003234:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	22ff      	movs	r2, #255	; 0xff
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d103      	bne.n	800324c <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
}
 8003256:	4618      	mov	r0, r3
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd90      	pop	{r4, r7, pc}

0800325e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b086      	sub	sp, #24
 8003262:	af00      	add	r7, sp, #0
 8003264:	60f8      	str	r0, [r7, #12]
 8003266:	60b9      	str	r1, [r7, #8]
 8003268:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003274:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003278:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	0c1b      	lsrs	r3, r3, #16
 800327e:	b2da      	uxtb	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	b2da      	uxtb	r2, r3
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	0b5b      	lsrs	r3, r3, #13
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d11a      	bne.n	80032ee <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	78db      	ldrb	r3, [r3, #3]
 80032bc:	4618      	mov	r0, r3
 80032be:	f000 f8d8 	bl	8003472 <RTC_Bcd2ToByte>
 80032c2:	4603      	mov	r3, r0
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	785b      	ldrb	r3, [r3, #1]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8cf 	bl	8003472 <RTC_Bcd2ToByte>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	789b      	ldrb	r3, [r3, #2]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 f8c6 	bl	8003472 <RTC_Bcd2ToByte>
 80032e6:	4603      	mov	r3, r0
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a0d      	ldr	r2, [pc, #52]	; (800333c <HAL_RTC_WaitForSynchro+0x44>)
 8003306:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003308:	f7fd fdba 	bl	8000e80 <HAL_GetTick>
 800330c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 800330e:	e009      	b.n	8003324 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003310:	f7fd fdb6 	bl	8000e80 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800331e:	d901      	bls.n	8003324 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e007      	b.n	8003334 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	f003 0320 	and.w	r3, r3, #32
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0ee      	beq.n	8003310 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	0001005f 	.word	0x0001005f

08003340 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003356:	2b00      	cmp	r3, #0
 8003358:	d123      	bne.n	80033a2 <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003368:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800336a:	f7fd fd89 	bl	8000e80 <HAL_GetTick>
 800336e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003370:	e00d      	b.n	800338e <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003372:	f7fd fd85 	bl	8000e80 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003380:	d905      	bls.n	800338e <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2203      	movs	r2, #3
 800338a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b00      	cmp	r3, #0
 800339a:	d102      	bne.n	80033a2 <RTC_EnterInitMode+0x62>
 800339c:	7bfb      	ldrb	r3, [r7, #15]
 800339e:	2b03      	cmp	r3, #3
 80033a0:	d1e7      	bne.n	8003372 <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 80033a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10c      	bne.n	80033f0 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7ff ff8e 	bl	80032f8 <HAL_RTC_WaitForSynchro>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d022      	beq.n	8003428 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2203      	movs	r2, #3
 80033e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	73fb      	strb	r3, [r7, #15]
 80033ee:	e01b      	b.n	8003428 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699a      	ldr	r2, [r3, #24]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0220 	bic.w	r2, r2, #32
 80033fe:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f7ff ff79 	bl	80032f8 <HAL_RTC_WaitForSynchro>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d005      	beq.n	8003418 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2203      	movs	r2, #3
 8003410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f042 0220 	orr.w	r2, r2, #32
 8003426:	619a      	str	r2, [r3, #24]
  }

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003432:	b480      	push	{r7}
 8003434:	b085      	sub	sp, #20
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003444:	e005      	b.n	8003452 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3301      	adds	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800344c:	7afb      	ldrb	r3, [r7, #11]
 800344e:	3b0a      	subs	r3, #10
 8003450:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003452:	7afb      	ldrb	r3, [r7, #11]
 8003454:	2b09      	cmp	r3, #9
 8003456:	d8f6      	bhi.n	8003446 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	b2db      	uxtb	r3, r3
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	b2da      	uxtb	r2, r3
 8003460:	7afb      	ldrb	r3, [r7, #11]
 8003462:	4313      	orrs	r3, r2
 8003464:	b2db      	uxtb	r3, r3
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	4603      	mov	r3, r0
 800347a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	091b      	lsrs	r3, r3, #4
 8003480:	b2db      	uxtb	r3, r3
 8003482:	461a      	mov	r2, r3
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	79fb      	ldrb	r3, [r7, #7]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	b2db      	uxtb	r3, r3
 800349a:	4413      	add	r3, r2
 800349c:	b2db      	uxtb	r3, r3
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e042      	b.n	8003542 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fb3a 	bl	8000b48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	; 0x24
 80034d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 fb25 	bl	8003b44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f826 	bl	800354c <UART_SetConfig>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d101      	bne.n	800350a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e01b      	b.n	8003542 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003518:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003528:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fba4 	bl	8003c88 <UART_CheckIdleState>
 8003540:	4603      	mov	r3, r0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b08c      	sub	sp, #48	; 0x30
 8003552:	af00      	add	r7, sp, #0
 8003554:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003556:	2300      	movs	r3, #0
 8003558:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	431a      	orrs	r2, r3
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	69db      	ldr	r3, [r3, #28]
 8003570:	4313      	orrs	r3, r2
 8003572:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4baa      	ldr	r3, [pc, #680]	; (8003824 <UART_SetConfig+0x2d8>)
 800357c:	4013      	ands	r3, r2
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	6812      	ldr	r2, [r2, #0]
 8003582:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003584:	430b      	orrs	r3, r1
 8003586:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a9f      	ldr	r2, [pc, #636]	; (8003828 <UART_SetConfig+0x2dc>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d004      	beq.n	80035b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	6a1b      	ldr	r3, [r3, #32]
 80035b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b4:	4313      	orrs	r3, r2
 80035b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	6812      	ldr	r2, [r2, #0]
 80035ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	f023 010f 	bic.w	r1, r3, #15
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a90      	ldr	r2, [pc, #576]	; (800382c <UART_SetConfig+0x2e0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d125      	bne.n	800363c <UART_SetConfig+0xf0>
 80035f0:	4b8f      	ldr	r3, [pc, #572]	; (8003830 <UART_SetConfig+0x2e4>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f003 0303 	and.w	r3, r3, #3
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d81a      	bhi.n	8003634 <UART_SetConfig+0xe8>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <UART_SetConfig+0xb8>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003615 	.word	0x08003615
 8003608:	08003625 	.word	0x08003625
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362d 	.word	0x0800362d
 8003614:	2301      	movs	r3, #1
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e116      	b.n	800384a <UART_SetConfig+0x2fe>
 800361c:	2302      	movs	r3, #2
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e112      	b.n	800384a <UART_SetConfig+0x2fe>
 8003624:	2304      	movs	r3, #4
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e10e      	b.n	800384a <UART_SetConfig+0x2fe>
 800362c:	2308      	movs	r3, #8
 800362e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003632:	e10a      	b.n	800384a <UART_SetConfig+0x2fe>
 8003634:	2310      	movs	r3, #16
 8003636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800363a:	e106      	b.n	800384a <UART_SetConfig+0x2fe>
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a7c      	ldr	r2, [pc, #496]	; (8003834 <UART_SetConfig+0x2e8>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d138      	bne.n	80036b8 <UART_SetConfig+0x16c>
 8003646:	4b7a      	ldr	r3, [pc, #488]	; (8003830 <UART_SetConfig+0x2e4>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f003 030c 	and.w	r3, r3, #12
 8003650:	2b0c      	cmp	r3, #12
 8003652:	d82d      	bhi.n	80036b0 <UART_SetConfig+0x164>
 8003654:	a201      	add	r2, pc, #4	; (adr r2, 800365c <UART_SetConfig+0x110>)
 8003656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365a:	bf00      	nop
 800365c:	08003691 	.word	0x08003691
 8003660:	080036b1 	.word	0x080036b1
 8003664:	080036b1 	.word	0x080036b1
 8003668:	080036b1 	.word	0x080036b1
 800366c:	080036a1 	.word	0x080036a1
 8003670:	080036b1 	.word	0x080036b1
 8003674:	080036b1 	.word	0x080036b1
 8003678:	080036b1 	.word	0x080036b1
 800367c:	08003699 	.word	0x08003699
 8003680:	080036b1 	.word	0x080036b1
 8003684:	080036b1 	.word	0x080036b1
 8003688:	080036b1 	.word	0x080036b1
 800368c:	080036a9 	.word	0x080036a9
 8003690:	2300      	movs	r3, #0
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e0d8      	b.n	800384a <UART_SetConfig+0x2fe>
 8003698:	2302      	movs	r3, #2
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e0d4      	b.n	800384a <UART_SetConfig+0x2fe>
 80036a0:	2304      	movs	r3, #4
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e0d0      	b.n	800384a <UART_SetConfig+0x2fe>
 80036a8:	2308      	movs	r3, #8
 80036aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ae:	e0cc      	b.n	800384a <UART_SetConfig+0x2fe>
 80036b0:	2310      	movs	r3, #16
 80036b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036b6:	e0c8      	b.n	800384a <UART_SetConfig+0x2fe>
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a5e      	ldr	r2, [pc, #376]	; (8003838 <UART_SetConfig+0x2ec>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d125      	bne.n	800370e <UART_SetConfig+0x1c2>
 80036c2:	4b5b      	ldr	r3, [pc, #364]	; (8003830 <UART_SetConfig+0x2e4>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036cc:	2b30      	cmp	r3, #48	; 0x30
 80036ce:	d016      	beq.n	80036fe <UART_SetConfig+0x1b2>
 80036d0:	2b30      	cmp	r3, #48	; 0x30
 80036d2:	d818      	bhi.n	8003706 <UART_SetConfig+0x1ba>
 80036d4:	2b20      	cmp	r3, #32
 80036d6:	d00a      	beq.n	80036ee <UART_SetConfig+0x1a2>
 80036d8:	2b20      	cmp	r3, #32
 80036da:	d814      	bhi.n	8003706 <UART_SetConfig+0x1ba>
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d002      	beq.n	80036e6 <UART_SetConfig+0x19a>
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d008      	beq.n	80036f6 <UART_SetConfig+0x1aa>
 80036e4:	e00f      	b.n	8003706 <UART_SetConfig+0x1ba>
 80036e6:	2300      	movs	r3, #0
 80036e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ec:	e0ad      	b.n	800384a <UART_SetConfig+0x2fe>
 80036ee:	2302      	movs	r3, #2
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f4:	e0a9      	b.n	800384a <UART_SetConfig+0x2fe>
 80036f6:	2304      	movs	r3, #4
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fc:	e0a5      	b.n	800384a <UART_SetConfig+0x2fe>
 80036fe:	2308      	movs	r3, #8
 8003700:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003704:	e0a1      	b.n	800384a <UART_SetConfig+0x2fe>
 8003706:	2310      	movs	r3, #16
 8003708:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800370c:	e09d      	b.n	800384a <UART_SetConfig+0x2fe>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a4a      	ldr	r2, [pc, #296]	; (800383c <UART_SetConfig+0x2f0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d125      	bne.n	8003764 <UART_SetConfig+0x218>
 8003718:	4b45      	ldr	r3, [pc, #276]	; (8003830 <UART_SetConfig+0x2e4>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003722:	2bc0      	cmp	r3, #192	; 0xc0
 8003724:	d016      	beq.n	8003754 <UART_SetConfig+0x208>
 8003726:	2bc0      	cmp	r3, #192	; 0xc0
 8003728:	d818      	bhi.n	800375c <UART_SetConfig+0x210>
 800372a:	2b80      	cmp	r3, #128	; 0x80
 800372c:	d00a      	beq.n	8003744 <UART_SetConfig+0x1f8>
 800372e:	2b80      	cmp	r3, #128	; 0x80
 8003730:	d814      	bhi.n	800375c <UART_SetConfig+0x210>
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <UART_SetConfig+0x1f0>
 8003736:	2b40      	cmp	r3, #64	; 0x40
 8003738:	d008      	beq.n	800374c <UART_SetConfig+0x200>
 800373a:	e00f      	b.n	800375c <UART_SetConfig+0x210>
 800373c:	2300      	movs	r3, #0
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e082      	b.n	800384a <UART_SetConfig+0x2fe>
 8003744:	2302      	movs	r3, #2
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e07e      	b.n	800384a <UART_SetConfig+0x2fe>
 800374c:	2304      	movs	r3, #4
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e07a      	b.n	800384a <UART_SetConfig+0x2fe>
 8003754:	2308      	movs	r3, #8
 8003756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800375a:	e076      	b.n	800384a <UART_SetConfig+0x2fe>
 800375c:	2310      	movs	r3, #16
 800375e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003762:	e072      	b.n	800384a <UART_SetConfig+0x2fe>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a35      	ldr	r2, [pc, #212]	; (8003840 <UART_SetConfig+0x2f4>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d12a      	bne.n	80037c4 <UART_SetConfig+0x278>
 800376e:	4b30      	ldr	r3, [pc, #192]	; (8003830 <UART_SetConfig+0x2e4>)
 8003770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003774:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003778:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377c:	d01a      	beq.n	80037b4 <UART_SetConfig+0x268>
 800377e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003782:	d81b      	bhi.n	80037bc <UART_SetConfig+0x270>
 8003784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003788:	d00c      	beq.n	80037a4 <UART_SetConfig+0x258>
 800378a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800378e:	d815      	bhi.n	80037bc <UART_SetConfig+0x270>
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <UART_SetConfig+0x250>
 8003794:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003798:	d008      	beq.n	80037ac <UART_SetConfig+0x260>
 800379a:	e00f      	b.n	80037bc <UART_SetConfig+0x270>
 800379c:	2300      	movs	r3, #0
 800379e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a2:	e052      	b.n	800384a <UART_SetConfig+0x2fe>
 80037a4:	2302      	movs	r3, #2
 80037a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037aa:	e04e      	b.n	800384a <UART_SetConfig+0x2fe>
 80037ac:	2304      	movs	r3, #4
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b2:	e04a      	b.n	800384a <UART_SetConfig+0x2fe>
 80037b4:	2308      	movs	r3, #8
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037ba:	e046      	b.n	800384a <UART_SetConfig+0x2fe>
 80037bc:	2310      	movs	r3, #16
 80037be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037c2:	e042      	b.n	800384a <UART_SetConfig+0x2fe>
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a17      	ldr	r2, [pc, #92]	; (8003828 <UART_SetConfig+0x2dc>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d13a      	bne.n	8003844 <UART_SetConfig+0x2f8>
 80037ce:	4b18      	ldr	r3, [pc, #96]	; (8003830 <UART_SetConfig+0x2e4>)
 80037d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037dc:	d01a      	beq.n	8003814 <UART_SetConfig+0x2c8>
 80037de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037e2:	d81b      	bhi.n	800381c <UART_SetConfig+0x2d0>
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	d00c      	beq.n	8003804 <UART_SetConfig+0x2b8>
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ee:	d815      	bhi.n	800381c <UART_SetConfig+0x2d0>
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d003      	beq.n	80037fc <UART_SetConfig+0x2b0>
 80037f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037f8:	d008      	beq.n	800380c <UART_SetConfig+0x2c0>
 80037fa:	e00f      	b.n	800381c <UART_SetConfig+0x2d0>
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003802:	e022      	b.n	800384a <UART_SetConfig+0x2fe>
 8003804:	2302      	movs	r3, #2
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800380a:	e01e      	b.n	800384a <UART_SetConfig+0x2fe>
 800380c:	2304      	movs	r3, #4
 800380e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003812:	e01a      	b.n	800384a <UART_SetConfig+0x2fe>
 8003814:	2308      	movs	r3, #8
 8003816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800381a:	e016      	b.n	800384a <UART_SetConfig+0x2fe>
 800381c:	2310      	movs	r3, #16
 800381e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003822:	e012      	b.n	800384a <UART_SetConfig+0x2fe>
 8003824:	cfff69f3 	.word	0xcfff69f3
 8003828:	40008000 	.word	0x40008000
 800382c:	40013800 	.word	0x40013800
 8003830:	40021000 	.word	0x40021000
 8003834:	40004400 	.word	0x40004400
 8003838:	40004800 	.word	0x40004800
 800383c:	40004c00 	.word	0x40004c00
 8003840:	40005000 	.word	0x40005000
 8003844:	2310      	movs	r3, #16
 8003846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4aae      	ldr	r2, [pc, #696]	; (8003b08 <UART_SetConfig+0x5bc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	f040 8097 	bne.w	8003984 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003856:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800385a:	2b08      	cmp	r3, #8
 800385c:	d823      	bhi.n	80038a6 <UART_SetConfig+0x35a>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x318>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003889 	.word	0x08003889
 8003868:	080038a7 	.word	0x080038a7
 800386c:	08003891 	.word	0x08003891
 8003870:	080038a7 	.word	0x080038a7
 8003874:	08003897 	.word	0x08003897
 8003878:	080038a7 	.word	0x080038a7
 800387c:	080038a7 	.word	0x080038a7
 8003880:	080038a7 	.word	0x080038a7
 8003884:	0800389f 	.word	0x0800389f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003888:	f7ff f82a 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 800388c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800388e:	e010      	b.n	80038b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003890:	4b9e      	ldr	r3, [pc, #632]	; (8003b0c <UART_SetConfig+0x5c0>)
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003894:	e00d      	b.n	80038b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003896:	f7fe ffb5 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 800389a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800389c:	e009      	b.n	80038b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80038a4:	e005      	b.n	80038b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80038b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8130 	beq.w	8003b1a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	4a94      	ldr	r2, [pc, #592]	; (8003b10 <UART_SetConfig+0x5c4>)
 80038c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038c4:	461a      	mov	r2, r3
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	005b      	lsls	r3, r3, #1
 80038d6:	4413      	add	r3, r2
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d305      	bcc.n	80038ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d903      	bls.n	80038f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80038f0:	e113      	b.n	8003b1a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	2200      	movs	r2, #0
 80038f6:	60bb      	str	r3, [r7, #8]
 80038f8:	60fa      	str	r2, [r7, #12]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	4a84      	ldr	r2, [pc, #528]	; (8003b10 <UART_SetConfig+0x5c4>)
 8003900:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003904:	b29b      	uxth	r3, r3
 8003906:	2200      	movs	r2, #0
 8003908:	603b      	str	r3, [r7, #0]
 800390a:	607a      	str	r2, [r7, #4]
 800390c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003910:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003914:	f7fc fcd4 	bl	80002c0 <__aeabi_uldivmod>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	020b      	lsls	r3, r1, #8
 800392a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800392e:	0202      	lsls	r2, r0, #8
 8003930:	6979      	ldr	r1, [r7, #20]
 8003932:	6849      	ldr	r1, [r1, #4]
 8003934:	0849      	lsrs	r1, r1, #1
 8003936:	2000      	movs	r0, #0
 8003938:	460c      	mov	r4, r1
 800393a:	4605      	mov	r5, r0
 800393c:	eb12 0804 	adds.w	r8, r2, r4
 8003940:	eb43 0905 	adc.w	r9, r3, r5
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	469a      	mov	sl, r3
 800394c:	4693      	mov	fp, r2
 800394e:	4652      	mov	r2, sl
 8003950:	465b      	mov	r3, fp
 8003952:	4640      	mov	r0, r8
 8003954:	4649      	mov	r1, r9
 8003956:	f7fc fcb3 	bl	80002c0 <__aeabi_uldivmod>
 800395a:	4602      	mov	r2, r0
 800395c:	460b      	mov	r3, r1
 800395e:	4613      	mov	r3, r2
 8003960:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003968:	d308      	bcc.n	800397c <UART_SetConfig+0x430>
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003970:	d204      	bcs.n	800397c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	6a3a      	ldr	r2, [r7, #32]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	e0ce      	b.n	8003b1a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003982:	e0ca      	b.n	8003b1a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800398c:	d166      	bne.n	8003a5c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800398e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003992:	2b08      	cmp	r3, #8
 8003994:	d827      	bhi.n	80039e6 <UART_SetConfig+0x49a>
 8003996:	a201      	add	r2, pc, #4	; (adr r2, 800399c <UART_SetConfig+0x450>)
 8003998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800399c:	080039c1 	.word	0x080039c1
 80039a0:	080039c9 	.word	0x080039c9
 80039a4:	080039d1 	.word	0x080039d1
 80039a8:	080039e7 	.word	0x080039e7
 80039ac:	080039d7 	.word	0x080039d7
 80039b0:	080039e7 	.word	0x080039e7
 80039b4:	080039e7 	.word	0x080039e7
 80039b8:	080039e7 	.word	0x080039e7
 80039bc:	080039df 	.word	0x080039df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039c0:	f7fe ff8e 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 80039c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039c6:	e014      	b.n	80039f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c8:	f7fe ffa0 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 80039cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039ce:	e010      	b.n	80039f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039d0:	4b4e      	ldr	r3, [pc, #312]	; (8003b0c <UART_SetConfig+0x5c0>)
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039d4:	e00d      	b.n	80039f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d6:	f7fe ff15 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80039da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80039dc:	e009      	b.n	80039f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80039e4:	e005      	b.n	80039f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80039f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 8090 	beq.w	8003b1a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fe:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <UART_SetConfig+0x5c4>)
 8003a00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a04:	461a      	mov	r2, r3
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a0c:	005a      	lsls	r2, r3, #1
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	441a      	add	r2, r3
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b0f      	cmp	r3, #15
 8003a24:	d916      	bls.n	8003a54 <UART_SetConfig+0x508>
 8003a26:	6a3b      	ldr	r3, [r7, #32]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d212      	bcs.n	8003a54 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f023 030f 	bic.w	r3, r3, #15
 8003a36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	085b      	lsrs	r3, r3, #1
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	8bfb      	ldrh	r3, [r7, #30]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	8bfa      	ldrh	r2, [r7, #30]
 8003a50:	60da      	str	r2, [r3, #12]
 8003a52:	e062      	b.n	8003b1a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003a5a:	e05e      	b.n	8003b1a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d828      	bhi.n	8003ab6 <UART_SetConfig+0x56a>
 8003a64:	a201      	add	r2, pc, #4	; (adr r2, 8003a6c <UART_SetConfig+0x520>)
 8003a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6a:	bf00      	nop
 8003a6c:	08003a91 	.word	0x08003a91
 8003a70:	08003a99 	.word	0x08003a99
 8003a74:	08003aa1 	.word	0x08003aa1
 8003a78:	08003ab7 	.word	0x08003ab7
 8003a7c:	08003aa7 	.word	0x08003aa7
 8003a80:	08003ab7 	.word	0x08003ab7
 8003a84:	08003ab7 	.word	0x08003ab7
 8003a88:	08003ab7 	.word	0x08003ab7
 8003a8c:	08003aaf 	.word	0x08003aaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a90:	f7fe ff26 	bl	80028e0 <HAL_RCC_GetPCLK1Freq>
 8003a94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a96:	e014      	b.n	8003ac2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a98:	f7fe ff38 	bl	800290c <HAL_RCC_GetPCLK2Freq>
 8003a9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a9e:	e010      	b.n	8003ac2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003aa0:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <UART_SetConfig+0x5c0>)
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003aa4:	e00d      	b.n	8003ac2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aa6:	f7fe fead 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 8003aaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003aac:	e009      	b.n	8003ac2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003ab4:	e005      	b.n	8003ac2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ac0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d028      	beq.n	8003b1a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	4a10      	ldr	r2, [pc, #64]	; (8003b10 <UART_SetConfig+0x5c4>)
 8003ace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad6:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	085b      	lsrs	r3, r3, #1
 8003ae0:	441a      	add	r2, r3
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	2b0f      	cmp	r3, #15
 8003af0:	d910      	bls.n	8003b14 <UART_SetConfig+0x5c8>
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003af8:	d20c      	bcs.n	8003b14 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
 8003b04:	e009      	b.n	8003b1a <UART_SetConfig+0x5ce>
 8003b06:	bf00      	nop
 8003b08:	40008000 	.word	0x40008000
 8003b0c:	00f42400 	.word	0x00f42400
 8003b10:	08004f90 	.word	0x08004f90
      }
      else
      {
        ret = HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	2200      	movs	r2, #0
 8003b34:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003b36:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3730      	adds	r7, #48	; 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00a      	beq.n	8003b6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d00a      	beq.n	8003b90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	f003 0302 	and.w	r3, r3, #2
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00a      	beq.n	8003bb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d00a      	beq.n	8003bd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00a      	beq.n	8003bf6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00a      	beq.n	8003c18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d01a      	beq.n	8003c5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	430a      	orrs	r2, r1
 8003c38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c42:	d10a      	bne.n	8003c5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b098      	sub	sp, #96	; 0x60
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c98:	f7fd f8f2 	bl	8000e80 <HAL_GetTick>
 8003c9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 0308 	and.w	r3, r3, #8
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d12f      	bne.n	8003d0c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 f88e 	bl	8003ddc <UART_WaitOnFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d022      	beq.n	8003d0c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cda:	653b      	str	r3, [r7, #80]	; 0x50
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e6      	bne.n	8003cc6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e063      	b.n	8003dd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d149      	bne.n	8003dae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d1a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d22:	2200      	movs	r2, #0
 8003d24:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f857 	bl	8003ddc <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d03c      	beq.n	8003dae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	623b      	str	r3, [r7, #32]
   return(result);
 8003d42:	6a3b      	ldr	r3, [r7, #32]
 8003d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d52:	633b      	str	r3, [r7, #48]	; 0x30
 8003d54:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e6      	bne.n	8003d34 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3308      	adds	r3, #8
 8003d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d86:	61fa      	str	r2, [r7, #28]
 8003d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	69b9      	ldr	r1, [r7, #24]
 8003d8c:	69fa      	ldr	r2, [r7, #28]
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	617b      	str	r3, [r7, #20]
   return(result);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e012      	b.n	8003dd4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2220      	movs	r2, #32
 8003db2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3758      	adds	r7, #88	; 0x58
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	603b      	str	r3, [r7, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dec:	e04f      	b.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df4:	d04b      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003df6:	f7fd f843 	bl	8000e80 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d302      	bcc.n	8003e0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e04e      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d037      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b80      	cmp	r3, #128	; 0x80
 8003e22:	d034      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d031      	beq.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b08      	cmp	r3, #8
 8003e36:	d110      	bne.n	8003e5a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f000 f838 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2208      	movs	r2, #8
 8003e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e029      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69db      	ldr	r3, [r3, #28]
 8003e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e68:	d111      	bne.n	8003e8e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f81e 	bl	8003eb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e00f      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	69da      	ldr	r2, [r3, #28]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4013      	ands	r3, r2
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	bf0c      	ite	eq
 8003e9e:	2301      	moveq	r3, #1
 8003ea0:	2300      	movne	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	79fb      	ldrb	r3, [r7, #7]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d0a0      	beq.n	8003dee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b095      	sub	sp, #84	; 0x54
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ece:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003edc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ede:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ee2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e6      	bne.n	8003ebe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e3      	bne.n	8003ef0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d118      	bne.n	8003f62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f023 0310 	bic.w	r3, r3, #16
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	6979      	ldr	r1, [r7, #20]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	e841 2300 	strex	r3, r2, [r1]
 8003f5a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1e6      	bne.n	8003f30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003f76:	bf00      	nop
 8003f78:	3754      	adds	r7, #84	; 0x54
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b085      	sub	sp, #20
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_UARTEx_DisableFifoMode+0x16>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e027      	b.n	8003fe8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003fc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004008:	2302      	movs	r3, #2
 800400a:	e02d      	b.n	8004068 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	430a      	orrs	r2, r1
 8004046:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f84f 	bl	80040ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2220      	movs	r2, #32
 800405a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004080:	2b01      	cmp	r3, #1
 8004082:	d101      	bne.n	8004088 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004084:	2302      	movs	r3, #2
 8004086:	e02d      	b.n	80040e4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2224      	movs	r2, #36	; 0x24
 8004094:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0201 	bic.w	r2, r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	683a      	ldr	r2, [r7, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f000 f811 	bl	80040ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d108      	bne.n	800410e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800410c:	e031      	b.n	8004172 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800410e:	2308      	movs	r3, #8
 8004110:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004112:	2308      	movs	r3, #8
 8004114:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	0e5b      	lsrs	r3, r3, #25
 800411e:	b2db      	uxtb	r3, r3
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	0f5b      	lsrs	r3, r3, #29
 800412e:	b2db      	uxtb	r3, r3
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004136:	7bbb      	ldrb	r3, [r7, #14]
 8004138:	7b3a      	ldrb	r2, [r7, #12]
 800413a:	4911      	ldr	r1, [pc, #68]	; (8004180 <UARTEx_SetNbDataToProcess+0x94>)
 800413c:	5c8a      	ldrb	r2, [r1, r2]
 800413e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004142:	7b3a      	ldrb	r2, [r7, #12]
 8004144:	490f      	ldr	r1, [pc, #60]	; (8004184 <UARTEx_SetNbDataToProcess+0x98>)
 8004146:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004148:	fb93 f3f2 	sdiv	r3, r3, r2
 800414c:	b29a      	uxth	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004154:	7bfb      	ldrb	r3, [r7, #15]
 8004156:	7b7a      	ldrb	r2, [r7, #13]
 8004158:	4909      	ldr	r1, [pc, #36]	; (8004180 <UARTEx_SetNbDataToProcess+0x94>)
 800415a:	5c8a      	ldrb	r2, [r1, r2]
 800415c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004160:	7b7a      	ldrb	r2, [r7, #13]
 8004162:	4908      	ldr	r1, [pc, #32]	; (8004184 <UARTEx_SetNbDataToProcess+0x98>)
 8004164:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004166:	fb93 f3f2 	sdiv	r3, r3, r2
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004172:	bf00      	nop
 8004174:	3714      	adds	r7, #20
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr
 800417e:	bf00      	nop
 8004180:	08004fa8 	.word	0x08004fa8
 8004184:	08004fb0 	.word	0x08004fb0

08004188 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800418c:	bf00      	nop
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
	...

08004198 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af04      	add	r7, sp, #16
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80041a2:	f04f 33ff 	mov.w	r3, #4294967295
 80041a6:	9302      	str	r3, [sp, #8]
 80041a8:	2301      	movs	r3, #1
 80041aa:	9301      	str	r3, [sp, #4]
 80041ac:	1dfb      	adds	r3, r7, #7
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2301      	movs	r3, #1
 80041b2:	2200      	movs	r2, #0
 80041b4:	2178      	movs	r1, #120	; 0x78
 80041b6:	4803      	ldr	r0, [pc, #12]	; (80041c4 <ssd1306_WriteCommand+0x2c>)
 80041b8:	f7fd f9f8 	bl	80015ac <HAL_I2C_Mem_Write>
}
 80041bc:	bf00      	nop
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}
 80041c4:	20000078 	.word	0x20000078

080041c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af04      	add	r7, sp, #16
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	f04f 32ff 	mov.w	r2, #4294967295
 80041da:	9202      	str	r2, [sp, #8]
 80041dc:	9301      	str	r3, [sp, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2301      	movs	r3, #1
 80041e4:	2240      	movs	r2, #64	; 0x40
 80041e6:	2178      	movs	r1, #120	; 0x78
 80041e8:	4803      	ldr	r0, [pc, #12]	; (80041f8 <ssd1306_WriteData+0x30>)
 80041ea:	f7fd f9df 	bl	80015ac <HAL_I2C_Mem_Write>
}
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000078 	.word	0x20000078

080041fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004200:	f7ff ffc2 	bl	8004188 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	f7fc fe47 	bl	8000e98 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800420a:	2000      	movs	r0, #0
 800420c:	f000 f9d6 	bl	80045bc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004210:	2020      	movs	r0, #32
 8004212:	f7ff ffc1 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004216:	2000      	movs	r0, #0
 8004218:	f7ff ffbe 	bl	8004198 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800421c:	20b0      	movs	r0, #176	; 0xb0
 800421e:	f7ff ffbb 	bl	8004198 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004222:	20c8      	movs	r0, #200	; 0xc8
 8004224:	f7ff ffb8 	bl	8004198 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004228:	2000      	movs	r0, #0
 800422a:	f7ff ffb5 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800422e:	2010      	movs	r0, #16
 8004230:	f7ff ffb2 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004234:	2040      	movs	r0, #64	; 0x40
 8004236:	f7ff ffaf 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800423a:	20ff      	movs	r0, #255	; 0xff
 800423c:	f000 f9aa 	bl	8004594 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004240:	20a1      	movs	r0, #161	; 0xa1
 8004242:	f7ff ffa9 	bl	8004198 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004246:	20a6      	movs	r0, #166	; 0xa6
 8004248:	f7ff ffa6 	bl	8004198 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800424c:	20a8      	movs	r0, #168	; 0xa8
 800424e:	f7ff ffa3 	bl	8004198 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004252:	203f      	movs	r0, #63	; 0x3f
 8004254:	f7ff ffa0 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004258:	20a4      	movs	r0, #164	; 0xa4
 800425a:	f7ff ff9d 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800425e:	20d3      	movs	r0, #211	; 0xd3
 8004260:	f7ff ff9a 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004264:	2000      	movs	r0, #0
 8004266:	f7ff ff97 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800426a:	20d5      	movs	r0, #213	; 0xd5
 800426c:	f7ff ff94 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004270:	20f0      	movs	r0, #240	; 0xf0
 8004272:	f7ff ff91 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004276:	20d9      	movs	r0, #217	; 0xd9
 8004278:	f7ff ff8e 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800427c:	2022      	movs	r0, #34	; 0x22
 800427e:	f7ff ff8b 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004282:	20da      	movs	r0, #218	; 0xda
 8004284:	f7ff ff88 	bl	8004198 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004288:	2012      	movs	r0, #18
 800428a:	f7ff ff85 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800428e:	20db      	movs	r0, #219	; 0xdb
 8004290:	f7ff ff82 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004294:	2020      	movs	r0, #32
 8004296:	f7ff ff7f 	bl	8004198 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800429a:	208d      	movs	r0, #141	; 0x8d
 800429c:	f7ff ff7c 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80042a0:	2014      	movs	r0, #20
 80042a2:	f7ff ff79 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80042a6:	2001      	movs	r0, #1
 80042a8:	f000 f988 	bl	80045bc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f000 f80f 	bl	80042d0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80042b2:	f000 f825 	bl	8004300 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <ssd1306_Init+0xd0>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <ssd1306_Init+0xd0>)
 80042be:	2200      	movs	r2, #0
 80042c0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80042c2:	4b02      	ldr	r3, [pc, #8]	; (80042cc <ssd1306_Init+0xd0>)
 80042c4:	2201      	movs	r2, #1
 80042c6:	711a      	strb	r2, [r3, #4]
}
 80042c8:	bf00      	nop
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	200003c0 	.word	0x200003c0

080042d0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <ssd1306_Fill+0x14>
 80042e0:	2300      	movs	r3, #0
 80042e2:	e000      	b.n	80042e6 <ssd1306_Fill+0x16>
 80042e4:	23ff      	movs	r3, #255	; 0xff
 80042e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ea:	4619      	mov	r1, r3
 80042ec:	4803      	ldr	r0, [pc, #12]	; (80042fc <ssd1306_Fill+0x2c>)
 80042ee:	f000 f9a3 	bl	8004638 <memset>
}
 80042f2:	bf00      	nop
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200001c0 	.word	0x200001c0

08004300 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004306:	2300      	movs	r3, #0
 8004308:	71fb      	strb	r3, [r7, #7]
 800430a:	e016      	b.n	800433a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	3b50      	subs	r3, #80	; 0x50
 8004310:	b2db      	uxtb	r3, r3
 8004312:	4618      	mov	r0, r3
 8004314:	f7ff ff40 	bl	8004198 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8004318:	2000      	movs	r0, #0
 800431a:	f7ff ff3d 	bl	8004198 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800431e:	2010      	movs	r0, #16
 8004320:	f7ff ff3a 	bl	8004198 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004324:	79fb      	ldrb	r3, [r7, #7]
 8004326:	019b      	lsls	r3, r3, #6
 8004328:	4a08      	ldr	r2, [pc, #32]	; (800434c <ssd1306_UpdateScreen+0x4c>)
 800432a:	4413      	add	r3, r2
 800432c:	2140      	movs	r1, #64	; 0x40
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff4a 	bl	80041c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	3301      	adds	r3, #1
 8004338:	71fb      	strb	r3, [r7, #7]
 800433a:	79fb      	ldrb	r3, [r7, #7]
 800433c:	2b07      	cmp	r3, #7
 800433e:	d9e5      	bls.n	800430c <ssd1306_UpdateScreen+0xc>
    }
}
 8004340:	bf00      	nop
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	200001c0 	.word	0x200001c0

08004350 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
 800435a:	460b      	mov	r3, r1
 800435c:	71bb      	strb	r3, [r7, #6]
 800435e:	4613      	mov	r3, r2
 8004360:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b3f      	cmp	r3, #63	; 0x3f
 8004366:	d83d      	bhi.n	80043e4 <ssd1306_DrawPixel+0x94>
 8004368:	79bb      	ldrb	r3, [r7, #6]
 800436a:	2b3f      	cmp	r3, #63	; 0x3f
 800436c:	d83a      	bhi.n	80043e4 <ssd1306_DrawPixel+0x94>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 800436e:	797b      	ldrb	r3, [r7, #5]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d11a      	bne.n	80043aa <ssd1306_DrawPixel+0x5a>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004374:	79fa      	ldrb	r2, [r7, #7]
 8004376:	79bb      	ldrb	r3, [r7, #6]
 8004378:	08db      	lsrs	r3, r3, #3
 800437a:	b2d8      	uxtb	r0, r3
 800437c:	4603      	mov	r3, r0
 800437e:	019b      	lsls	r3, r3, #6
 8004380:	4413      	add	r3, r2
 8004382:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <ssd1306_DrawPixel+0xa0>)
 8004384:	5cd3      	ldrb	r3, [r2, r3]
 8004386:	b25a      	sxtb	r2, r3
 8004388:	79bb      	ldrb	r3, [r7, #6]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2101      	movs	r1, #1
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	b25b      	sxtb	r3, r3
 8004396:	4313      	orrs	r3, r2
 8004398:	b259      	sxtb	r1, r3
 800439a:	79fa      	ldrb	r2, [r7, #7]
 800439c:	4603      	mov	r3, r0
 800439e:	019b      	lsls	r3, r3, #6
 80043a0:	4413      	add	r3, r2
 80043a2:	b2c9      	uxtb	r1, r1
 80043a4:	4a12      	ldr	r2, [pc, #72]	; (80043f0 <ssd1306_DrawPixel+0xa0>)
 80043a6:	54d1      	strb	r1, [r2, r3]
 80043a8:	e01d      	b.n	80043e6 <ssd1306_DrawPixel+0x96>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80043aa:	79fa      	ldrb	r2, [r7, #7]
 80043ac:	79bb      	ldrb	r3, [r7, #6]
 80043ae:	08db      	lsrs	r3, r3, #3
 80043b0:	b2d8      	uxtb	r0, r3
 80043b2:	4603      	mov	r3, r0
 80043b4:	019b      	lsls	r3, r3, #6
 80043b6:	4413      	add	r3, r2
 80043b8:	4a0d      	ldr	r2, [pc, #52]	; (80043f0 <ssd1306_DrawPixel+0xa0>)
 80043ba:	5cd3      	ldrb	r3, [r2, r3]
 80043bc:	b25a      	sxtb	r2, r3
 80043be:	79bb      	ldrb	r3, [r7, #6]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	2101      	movs	r1, #1
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	b25b      	sxtb	r3, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	4013      	ands	r3, r2
 80043d2:	b259      	sxtb	r1, r3
 80043d4:	79fa      	ldrb	r2, [r7, #7]
 80043d6:	4603      	mov	r3, r0
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	4413      	add	r3, r2
 80043dc:	b2c9      	uxtb	r1, r1
 80043de:	4a04      	ldr	r2, [pc, #16]	; (80043f0 <ssd1306_DrawPixel+0xa0>)
 80043e0:	54d1      	strb	r1, [r2, r3]
 80043e2:	e000      	b.n	80043e6 <ssd1306_DrawPixel+0x96>
        return;
 80043e4:	bf00      	nop
    }
}
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr
 80043f0:	200001c0 	.word	0x200001c0

080043f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80043f4:	b590      	push	{r4, r7, lr}
 80043f6:	b089      	sub	sp, #36	; 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4604      	mov	r4, r0
 80043fc:	4638      	mov	r0, r7
 80043fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004402:	4623      	mov	r3, r4
 8004404:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8004406:	7bfb      	ldrb	r3, [r7, #15]
 8004408:	2b1f      	cmp	r3, #31
 800440a:	d902      	bls.n	8004412 <ssd1306_WriteChar+0x1e>
 800440c:	7bfb      	ldrb	r3, [r7, #15]
 800440e:	2b7e      	cmp	r3, #126	; 0x7e
 8004410:	d901      	bls.n	8004416 <ssd1306_WriteChar+0x22>
        return 0;
 8004412:	2300      	movs	r3, #0
 8004414:	e079      	b.n	800450a <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004416:	4b3f      	ldr	r3, [pc, #252]	; (8004514 <ssd1306_WriteChar+0x120>)
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	783b      	ldrb	r3, [r7, #0]
 800441e:	4413      	add	r3, r2
 8004420:	2b40      	cmp	r3, #64	; 0x40
 8004422:	dc06      	bgt.n	8004432 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8004424:	4b3b      	ldr	r3, [pc, #236]	; (8004514 <ssd1306_WriteChar+0x120>)
 8004426:	885b      	ldrh	r3, [r3, #2]
 8004428:	461a      	mov	r2, r3
 800442a:	787b      	ldrb	r3, [r7, #1]
 800442c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800442e:	2b40      	cmp	r3, #64	; 0x40
 8004430:	dd01      	ble.n	8004436 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8004432:	2300      	movs	r3, #0
 8004434:	e069      	b.n	800450a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8004436:	2300      	movs	r3, #0
 8004438:	61fb      	str	r3, [r7, #28]
 800443a:	e04e      	b.n	80044da <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	7bfb      	ldrb	r3, [r7, #15]
 8004440:	3b20      	subs	r3, #32
 8004442:	7879      	ldrb	r1, [r7, #1]
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4619      	mov	r1, r3
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	440b      	add	r3, r1
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	881b      	ldrh	r3, [r3, #0]
 8004454:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8004456:	2300      	movs	r3, #0
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e036      	b.n	80044ca <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	fa02 f303 	lsl.w	r3, r2, r3
 8004464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d013      	beq.n	8004494 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800446c:	4b29      	ldr	r3, [pc, #164]	; (8004514 <ssd1306_WriteChar+0x120>)
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	b2da      	uxtb	r2, r3
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	4413      	add	r3, r2
 8004478:	b2d8      	uxtb	r0, r3
 800447a:	4b26      	ldr	r3, [pc, #152]	; (8004514 <ssd1306_WriteChar+0x120>)
 800447c:	885b      	ldrh	r3, [r3, #2]
 800447e:	b2da      	uxtb	r2, r3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4413      	add	r3, r2
 8004486:	b2db      	uxtb	r3, r3
 8004488:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800448c:	4619      	mov	r1, r3
 800448e:	f7ff ff5f 	bl	8004350 <ssd1306_DrawPixel>
 8004492:	e017      	b.n	80044c4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004494:	4b1f      	ldr	r3, [pc, #124]	; (8004514 <ssd1306_WriteChar+0x120>)
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	4413      	add	r3, r2
 80044a0:	b2d8      	uxtb	r0, r3
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <ssd1306_WriteChar+0x120>)
 80044a4:	885b      	ldrh	r3, [r3, #2]
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	b2d9      	uxtb	r1, r3
 80044b0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	f7ff ff46 	bl	8004350 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	3301      	adds	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	783b      	ldrb	r3, [r7, #0]
 80044cc:	461a      	mov	r2, r3
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d3c3      	bcc.n	800445c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	3301      	adds	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
 80044da:	787b      	ldrb	r3, [r7, #1]
 80044dc:	461a      	mov	r2, r3
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d3ab      	bcc.n	800443c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80044e4:	4b0b      	ldr	r3, [pc, #44]	; (8004514 <ssd1306_WriteChar+0x120>)
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d006      	beq.n	80044fc <ssd1306_WriteChar+0x108>
 80044ee:	68b9      	ldr	r1, [r7, #8]
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	3b20      	subs	r3, #32
 80044f4:	440b      	add	r3, r1
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	e001      	b.n	8004500 <ssd1306_WriteChar+0x10c>
 80044fc:	783b      	ldrb	r3, [r7, #0]
 80044fe:	b29b      	uxth	r3, r3
 8004500:	4413      	add	r3, r2
 8004502:	b29a      	uxth	r2, r3
 8004504:	4b03      	ldr	r3, [pc, #12]	; (8004514 <ssd1306_WriteChar+0x120>)
 8004506:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004508:	7bfb      	ldrb	r3, [r7, #15]
}
 800450a:	4618      	mov	r0, r3
 800450c:	3724      	adds	r7, #36	; 0x24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd90      	pop	{r4, r7, pc}
 8004512:	bf00      	nop
 8004514:	200003c0 	.word	0x200003c0

08004518 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	4638      	mov	r0, r7
 8004522:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8004526:	e013      	b.n	8004550 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	7818      	ldrb	r0, [r3, #0]
 800452c:	7e3b      	ldrb	r3, [r7, #24]
 800452e:	9300      	str	r3, [sp, #0]
 8004530:	463b      	mov	r3, r7
 8004532:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004534:	f7ff ff5e 	bl	80043f4 <ssd1306_WriteChar>
 8004538:	4603      	mov	r3, r0
 800453a:	461a      	mov	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d002      	beq.n	800454a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	e008      	b.n	800455c <ssd1306_WriteString+0x44>
        }
        str++;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3301      	adds	r3, #1
 800454e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e7      	bne.n	8004528 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	781b      	ldrb	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	3710      	adds	r7, #16
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	4603      	mov	r3, r0
 800456c:	460a      	mov	r2, r1
 800456e:	71fb      	strb	r3, [r7, #7]
 8004570:	4613      	mov	r3, r2
 8004572:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004574:	79fb      	ldrb	r3, [r7, #7]
 8004576:	b29a      	uxth	r2, r3
 8004578:	4b05      	ldr	r3, [pc, #20]	; (8004590 <ssd1306_SetCursor+0x2c>)
 800457a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800457c:	79bb      	ldrb	r3, [r7, #6]
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b03      	ldr	r3, [pc, #12]	; (8004590 <ssd1306_SetCursor+0x2c>)
 8004582:	805a      	strh	r2, [r3, #2]
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	200003c0 	.word	0x200003c0

08004594 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800459e:	2381      	movs	r3, #129	; 0x81
 80045a0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80045a2:	7bfb      	ldrb	r3, [r7, #15]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fdf7 	bl	8004198 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80045aa:	79fb      	ldrb	r3, [r7, #7]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f7ff fdf3 	bl	8004198 <ssd1306_WriteCommand>
}
 80045b2:	bf00      	nop
 80045b4:	3710      	adds	r7, #16
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80045cc:	23af      	movs	r3, #175	; 0xaf
 80045ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80045d0:	4b08      	ldr	r3, [pc, #32]	; (80045f4 <ssd1306_SetDisplayOn+0x38>)
 80045d2:	2201      	movs	r2, #1
 80045d4:	715a      	strb	r2, [r3, #5]
 80045d6:	e004      	b.n	80045e2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80045d8:	23ae      	movs	r3, #174	; 0xae
 80045da:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <ssd1306_SetDisplayOn+0x38>)
 80045de:	2200      	movs	r2, #0
 80045e0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80045e2:	7bfb      	ldrb	r3, [r7, #15]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fdd7 	bl	8004198 <ssd1306_WriteCommand>
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	200003c0 	.word	0x200003c0

080045f8 <siprintf>:
 80045f8:	b40e      	push	{r1, r2, r3}
 80045fa:	b500      	push	{lr}
 80045fc:	b09c      	sub	sp, #112	; 0x70
 80045fe:	ab1d      	add	r3, sp, #116	; 0x74
 8004600:	9002      	str	r0, [sp, #8]
 8004602:	9006      	str	r0, [sp, #24]
 8004604:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004608:	4809      	ldr	r0, [pc, #36]	; (8004630 <siprintf+0x38>)
 800460a:	9107      	str	r1, [sp, #28]
 800460c:	9104      	str	r1, [sp, #16]
 800460e:	4909      	ldr	r1, [pc, #36]	; (8004634 <siprintf+0x3c>)
 8004610:	f853 2b04 	ldr.w	r2, [r3], #4
 8004614:	9105      	str	r1, [sp, #20]
 8004616:	6800      	ldr	r0, [r0, #0]
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	a902      	add	r1, sp, #8
 800461c:	f000 f9a0 	bl	8004960 <_svfiprintf_r>
 8004620:	9b02      	ldr	r3, [sp, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
 8004626:	b01c      	add	sp, #112	; 0x70
 8004628:	f85d eb04 	ldr.w	lr, [sp], #4
 800462c:	b003      	add	sp, #12
 800462e:	4770      	bx	lr
 8004630:	20000058 	.word	0x20000058
 8004634:	ffff0208 	.word	0xffff0208

08004638 <memset>:
 8004638:	4402      	add	r2, r0
 800463a:	4603      	mov	r3, r0
 800463c:	4293      	cmp	r3, r2
 800463e:	d100      	bne.n	8004642 <memset+0xa>
 8004640:	4770      	bx	lr
 8004642:	f803 1b01 	strb.w	r1, [r3], #1
 8004646:	e7f9      	b.n	800463c <memset+0x4>

08004648 <__errno>:
 8004648:	4b01      	ldr	r3, [pc, #4]	; (8004650 <__errno+0x8>)
 800464a:	6818      	ldr	r0, [r3, #0]
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20000058 	.word	0x20000058

08004654 <__libc_init_array>:
 8004654:	b570      	push	{r4, r5, r6, lr}
 8004656:	4d0d      	ldr	r5, [pc, #52]	; (800468c <__libc_init_array+0x38>)
 8004658:	4c0d      	ldr	r4, [pc, #52]	; (8004690 <__libc_init_array+0x3c>)
 800465a:	1b64      	subs	r4, r4, r5
 800465c:	10a4      	asrs	r4, r4, #2
 800465e:	2600      	movs	r6, #0
 8004660:	42a6      	cmp	r6, r4
 8004662:	d109      	bne.n	8004678 <__libc_init_array+0x24>
 8004664:	4d0b      	ldr	r5, [pc, #44]	; (8004694 <__libc_init_array+0x40>)
 8004666:	4c0c      	ldr	r4, [pc, #48]	; (8004698 <__libc_init_array+0x44>)
 8004668:	f000 fc6a 	bl	8004f40 <_init>
 800466c:	1b64      	subs	r4, r4, r5
 800466e:	10a4      	asrs	r4, r4, #2
 8004670:	2600      	movs	r6, #0
 8004672:	42a6      	cmp	r6, r4
 8004674:	d105      	bne.n	8004682 <__libc_init_array+0x2e>
 8004676:	bd70      	pop	{r4, r5, r6, pc}
 8004678:	f855 3b04 	ldr.w	r3, [r5], #4
 800467c:	4798      	blx	r3
 800467e:	3601      	adds	r6, #1
 8004680:	e7ee      	b.n	8004660 <__libc_init_array+0xc>
 8004682:	f855 3b04 	ldr.w	r3, [r5], #4
 8004686:	4798      	blx	r3
 8004688:	3601      	adds	r6, #1
 800468a:	e7f2      	b.n	8004672 <__libc_init_array+0x1e>
 800468c:	08005d68 	.word	0x08005d68
 8004690:	08005d68 	.word	0x08005d68
 8004694:	08005d68 	.word	0x08005d68
 8004698:	08005d6c 	.word	0x08005d6c

0800469c <__retarget_lock_acquire_recursive>:
 800469c:	4770      	bx	lr

0800469e <__retarget_lock_release_recursive>:
 800469e:	4770      	bx	lr

080046a0 <memcpy>:
 80046a0:	440a      	add	r2, r1
 80046a2:	4291      	cmp	r1, r2
 80046a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80046a8:	d100      	bne.n	80046ac <memcpy+0xc>
 80046aa:	4770      	bx	lr
 80046ac:	b510      	push	{r4, lr}
 80046ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046b6:	4291      	cmp	r1, r2
 80046b8:	d1f9      	bne.n	80046ae <memcpy+0xe>
 80046ba:	bd10      	pop	{r4, pc}

080046bc <_free_r>:
 80046bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046be:	2900      	cmp	r1, #0
 80046c0:	d044      	beq.n	800474c <_free_r+0x90>
 80046c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046c6:	9001      	str	r0, [sp, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f1a1 0404 	sub.w	r4, r1, #4
 80046ce:	bfb8      	it	lt
 80046d0:	18e4      	addlt	r4, r4, r3
 80046d2:	f000 f8df 	bl	8004894 <__malloc_lock>
 80046d6:	4a1e      	ldr	r2, [pc, #120]	; (8004750 <_free_r+0x94>)
 80046d8:	9801      	ldr	r0, [sp, #4]
 80046da:	6813      	ldr	r3, [r2, #0]
 80046dc:	b933      	cbnz	r3, 80046ec <_free_r+0x30>
 80046de:	6063      	str	r3, [r4, #4]
 80046e0:	6014      	str	r4, [r2, #0]
 80046e2:	b003      	add	sp, #12
 80046e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046e8:	f000 b8da 	b.w	80048a0 <__malloc_unlock>
 80046ec:	42a3      	cmp	r3, r4
 80046ee:	d908      	bls.n	8004702 <_free_r+0x46>
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1961      	adds	r1, r4, r5
 80046f4:	428b      	cmp	r3, r1
 80046f6:	bf01      	itttt	eq
 80046f8:	6819      	ldreq	r1, [r3, #0]
 80046fa:	685b      	ldreq	r3, [r3, #4]
 80046fc:	1949      	addeq	r1, r1, r5
 80046fe:	6021      	streq	r1, [r4, #0]
 8004700:	e7ed      	b.n	80046de <_free_r+0x22>
 8004702:	461a      	mov	r2, r3
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	b10b      	cbz	r3, 800470c <_free_r+0x50>
 8004708:	42a3      	cmp	r3, r4
 800470a:	d9fa      	bls.n	8004702 <_free_r+0x46>
 800470c:	6811      	ldr	r1, [r2, #0]
 800470e:	1855      	adds	r5, r2, r1
 8004710:	42a5      	cmp	r5, r4
 8004712:	d10b      	bne.n	800472c <_free_r+0x70>
 8004714:	6824      	ldr	r4, [r4, #0]
 8004716:	4421      	add	r1, r4
 8004718:	1854      	adds	r4, r2, r1
 800471a:	42a3      	cmp	r3, r4
 800471c:	6011      	str	r1, [r2, #0]
 800471e:	d1e0      	bne.n	80046e2 <_free_r+0x26>
 8004720:	681c      	ldr	r4, [r3, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	6053      	str	r3, [r2, #4]
 8004726:	440c      	add	r4, r1
 8004728:	6014      	str	r4, [r2, #0]
 800472a:	e7da      	b.n	80046e2 <_free_r+0x26>
 800472c:	d902      	bls.n	8004734 <_free_r+0x78>
 800472e:	230c      	movs	r3, #12
 8004730:	6003      	str	r3, [r0, #0]
 8004732:	e7d6      	b.n	80046e2 <_free_r+0x26>
 8004734:	6825      	ldr	r5, [r4, #0]
 8004736:	1961      	adds	r1, r4, r5
 8004738:	428b      	cmp	r3, r1
 800473a:	bf04      	itt	eq
 800473c:	6819      	ldreq	r1, [r3, #0]
 800473e:	685b      	ldreq	r3, [r3, #4]
 8004740:	6063      	str	r3, [r4, #4]
 8004742:	bf04      	itt	eq
 8004744:	1949      	addeq	r1, r1, r5
 8004746:	6021      	streq	r1, [r4, #0]
 8004748:	6054      	str	r4, [r2, #4]
 800474a:	e7ca      	b.n	80046e2 <_free_r+0x26>
 800474c:	b003      	add	sp, #12
 800474e:	bd30      	pop	{r4, r5, pc}
 8004750:	20000508 	.word	0x20000508

08004754 <sbrk_aligned>:
 8004754:	b570      	push	{r4, r5, r6, lr}
 8004756:	4e0e      	ldr	r6, [pc, #56]	; (8004790 <sbrk_aligned+0x3c>)
 8004758:	460c      	mov	r4, r1
 800475a:	6831      	ldr	r1, [r6, #0]
 800475c:	4605      	mov	r5, r0
 800475e:	b911      	cbnz	r1, 8004766 <sbrk_aligned+0x12>
 8004760:	f000 fba6 	bl	8004eb0 <_sbrk_r>
 8004764:	6030      	str	r0, [r6, #0]
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 fba1 	bl	8004eb0 <_sbrk_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	d00a      	beq.n	8004788 <sbrk_aligned+0x34>
 8004772:	1cc4      	adds	r4, r0, #3
 8004774:	f024 0403 	bic.w	r4, r4, #3
 8004778:	42a0      	cmp	r0, r4
 800477a:	d007      	beq.n	800478c <sbrk_aligned+0x38>
 800477c:	1a21      	subs	r1, r4, r0
 800477e:	4628      	mov	r0, r5
 8004780:	f000 fb96 	bl	8004eb0 <_sbrk_r>
 8004784:	3001      	adds	r0, #1
 8004786:	d101      	bne.n	800478c <sbrk_aligned+0x38>
 8004788:	f04f 34ff 	mov.w	r4, #4294967295
 800478c:	4620      	mov	r0, r4
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	2000050c 	.word	0x2000050c

08004794 <_malloc_r>:
 8004794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004798:	1ccd      	adds	r5, r1, #3
 800479a:	f025 0503 	bic.w	r5, r5, #3
 800479e:	3508      	adds	r5, #8
 80047a0:	2d0c      	cmp	r5, #12
 80047a2:	bf38      	it	cc
 80047a4:	250c      	movcc	r5, #12
 80047a6:	2d00      	cmp	r5, #0
 80047a8:	4607      	mov	r7, r0
 80047aa:	db01      	blt.n	80047b0 <_malloc_r+0x1c>
 80047ac:	42a9      	cmp	r1, r5
 80047ae:	d905      	bls.n	80047bc <_malloc_r+0x28>
 80047b0:	230c      	movs	r3, #12
 80047b2:	603b      	str	r3, [r7, #0]
 80047b4:	2600      	movs	r6, #0
 80047b6:	4630      	mov	r0, r6
 80047b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004890 <_malloc_r+0xfc>
 80047c0:	f000 f868 	bl	8004894 <__malloc_lock>
 80047c4:	f8d8 3000 	ldr.w	r3, [r8]
 80047c8:	461c      	mov	r4, r3
 80047ca:	bb5c      	cbnz	r4, 8004824 <_malloc_r+0x90>
 80047cc:	4629      	mov	r1, r5
 80047ce:	4638      	mov	r0, r7
 80047d0:	f7ff ffc0 	bl	8004754 <sbrk_aligned>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	4604      	mov	r4, r0
 80047d8:	d155      	bne.n	8004886 <_malloc_r+0xf2>
 80047da:	f8d8 4000 	ldr.w	r4, [r8]
 80047de:	4626      	mov	r6, r4
 80047e0:	2e00      	cmp	r6, #0
 80047e2:	d145      	bne.n	8004870 <_malloc_r+0xdc>
 80047e4:	2c00      	cmp	r4, #0
 80047e6:	d048      	beq.n	800487a <_malloc_r+0xe6>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	4631      	mov	r1, r6
 80047ec:	4638      	mov	r0, r7
 80047ee:	eb04 0903 	add.w	r9, r4, r3
 80047f2:	f000 fb5d 	bl	8004eb0 <_sbrk_r>
 80047f6:	4581      	cmp	r9, r0
 80047f8:	d13f      	bne.n	800487a <_malloc_r+0xe6>
 80047fa:	6821      	ldr	r1, [r4, #0]
 80047fc:	1a6d      	subs	r5, r5, r1
 80047fe:	4629      	mov	r1, r5
 8004800:	4638      	mov	r0, r7
 8004802:	f7ff ffa7 	bl	8004754 <sbrk_aligned>
 8004806:	3001      	adds	r0, #1
 8004808:	d037      	beq.n	800487a <_malloc_r+0xe6>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	442b      	add	r3, r5
 800480e:	6023      	str	r3, [r4, #0]
 8004810:	f8d8 3000 	ldr.w	r3, [r8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d038      	beq.n	800488a <_malloc_r+0xf6>
 8004818:	685a      	ldr	r2, [r3, #4]
 800481a:	42a2      	cmp	r2, r4
 800481c:	d12b      	bne.n	8004876 <_malloc_r+0xe2>
 800481e:	2200      	movs	r2, #0
 8004820:	605a      	str	r2, [r3, #4]
 8004822:	e00f      	b.n	8004844 <_malloc_r+0xb0>
 8004824:	6822      	ldr	r2, [r4, #0]
 8004826:	1b52      	subs	r2, r2, r5
 8004828:	d41f      	bmi.n	800486a <_malloc_r+0xd6>
 800482a:	2a0b      	cmp	r2, #11
 800482c:	d917      	bls.n	800485e <_malloc_r+0xca>
 800482e:	1961      	adds	r1, r4, r5
 8004830:	42a3      	cmp	r3, r4
 8004832:	6025      	str	r5, [r4, #0]
 8004834:	bf18      	it	ne
 8004836:	6059      	strne	r1, [r3, #4]
 8004838:	6863      	ldr	r3, [r4, #4]
 800483a:	bf08      	it	eq
 800483c:	f8c8 1000 	streq.w	r1, [r8]
 8004840:	5162      	str	r2, [r4, r5]
 8004842:	604b      	str	r3, [r1, #4]
 8004844:	4638      	mov	r0, r7
 8004846:	f104 060b 	add.w	r6, r4, #11
 800484a:	f000 f829 	bl	80048a0 <__malloc_unlock>
 800484e:	f026 0607 	bic.w	r6, r6, #7
 8004852:	1d23      	adds	r3, r4, #4
 8004854:	1af2      	subs	r2, r6, r3
 8004856:	d0ae      	beq.n	80047b6 <_malloc_r+0x22>
 8004858:	1b9b      	subs	r3, r3, r6
 800485a:	50a3      	str	r3, [r4, r2]
 800485c:	e7ab      	b.n	80047b6 <_malloc_r+0x22>
 800485e:	42a3      	cmp	r3, r4
 8004860:	6862      	ldr	r2, [r4, #4]
 8004862:	d1dd      	bne.n	8004820 <_malloc_r+0x8c>
 8004864:	f8c8 2000 	str.w	r2, [r8]
 8004868:	e7ec      	b.n	8004844 <_malloc_r+0xb0>
 800486a:	4623      	mov	r3, r4
 800486c:	6864      	ldr	r4, [r4, #4]
 800486e:	e7ac      	b.n	80047ca <_malloc_r+0x36>
 8004870:	4634      	mov	r4, r6
 8004872:	6876      	ldr	r6, [r6, #4]
 8004874:	e7b4      	b.n	80047e0 <_malloc_r+0x4c>
 8004876:	4613      	mov	r3, r2
 8004878:	e7cc      	b.n	8004814 <_malloc_r+0x80>
 800487a:	230c      	movs	r3, #12
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	4638      	mov	r0, r7
 8004880:	f000 f80e 	bl	80048a0 <__malloc_unlock>
 8004884:	e797      	b.n	80047b6 <_malloc_r+0x22>
 8004886:	6025      	str	r5, [r4, #0]
 8004888:	e7dc      	b.n	8004844 <_malloc_r+0xb0>
 800488a:	605b      	str	r3, [r3, #4]
 800488c:	deff      	udf	#255	; 0xff
 800488e:	bf00      	nop
 8004890:	20000508 	.word	0x20000508

08004894 <__malloc_lock>:
 8004894:	4801      	ldr	r0, [pc, #4]	; (800489c <__malloc_lock+0x8>)
 8004896:	f7ff bf01 	b.w	800469c <__retarget_lock_acquire_recursive>
 800489a:	bf00      	nop
 800489c:	20000504 	.word	0x20000504

080048a0 <__malloc_unlock>:
 80048a0:	4801      	ldr	r0, [pc, #4]	; (80048a8 <__malloc_unlock+0x8>)
 80048a2:	f7ff befc 	b.w	800469e <__retarget_lock_release_recursive>
 80048a6:	bf00      	nop
 80048a8:	20000504 	.word	0x20000504

080048ac <__ssputs_r>:
 80048ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b0:	688e      	ldr	r6, [r1, #8]
 80048b2:	461f      	mov	r7, r3
 80048b4:	42be      	cmp	r6, r7
 80048b6:	680b      	ldr	r3, [r1, #0]
 80048b8:	4682      	mov	sl, r0
 80048ba:	460c      	mov	r4, r1
 80048bc:	4690      	mov	r8, r2
 80048be:	d82c      	bhi.n	800491a <__ssputs_r+0x6e>
 80048c0:	898a      	ldrh	r2, [r1, #12]
 80048c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048c6:	d026      	beq.n	8004916 <__ssputs_r+0x6a>
 80048c8:	6965      	ldr	r5, [r4, #20]
 80048ca:	6909      	ldr	r1, [r1, #16]
 80048cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80048d0:	eba3 0901 	sub.w	r9, r3, r1
 80048d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80048d8:	1c7b      	adds	r3, r7, #1
 80048da:	444b      	add	r3, r9
 80048dc:	106d      	asrs	r5, r5, #1
 80048de:	429d      	cmp	r5, r3
 80048e0:	bf38      	it	cc
 80048e2:	461d      	movcc	r5, r3
 80048e4:	0553      	lsls	r3, r2, #21
 80048e6:	d527      	bpl.n	8004938 <__ssputs_r+0x8c>
 80048e8:	4629      	mov	r1, r5
 80048ea:	f7ff ff53 	bl	8004794 <_malloc_r>
 80048ee:	4606      	mov	r6, r0
 80048f0:	b360      	cbz	r0, 800494c <__ssputs_r+0xa0>
 80048f2:	6921      	ldr	r1, [r4, #16]
 80048f4:	464a      	mov	r2, r9
 80048f6:	f7ff fed3 	bl	80046a0 <memcpy>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004900:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004904:	81a3      	strh	r3, [r4, #12]
 8004906:	6126      	str	r6, [r4, #16]
 8004908:	6165      	str	r5, [r4, #20]
 800490a:	444e      	add	r6, r9
 800490c:	eba5 0509 	sub.w	r5, r5, r9
 8004910:	6026      	str	r6, [r4, #0]
 8004912:	60a5      	str	r5, [r4, #8]
 8004914:	463e      	mov	r6, r7
 8004916:	42be      	cmp	r6, r7
 8004918:	d900      	bls.n	800491c <__ssputs_r+0x70>
 800491a:	463e      	mov	r6, r7
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4632      	mov	r2, r6
 8004920:	4641      	mov	r1, r8
 8004922:	f000 faab 	bl	8004e7c <memmove>
 8004926:	68a3      	ldr	r3, [r4, #8]
 8004928:	1b9b      	subs	r3, r3, r6
 800492a:	60a3      	str	r3, [r4, #8]
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	4433      	add	r3, r6
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	2000      	movs	r0, #0
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	462a      	mov	r2, r5
 800493a:	f000 fac9 	bl	8004ed0 <_realloc_r>
 800493e:	4606      	mov	r6, r0
 8004940:	2800      	cmp	r0, #0
 8004942:	d1e0      	bne.n	8004906 <__ssputs_r+0x5a>
 8004944:	6921      	ldr	r1, [r4, #16]
 8004946:	4650      	mov	r0, sl
 8004948:	f7ff feb8 	bl	80046bc <_free_r>
 800494c:	230c      	movs	r3, #12
 800494e:	f8ca 3000 	str.w	r3, [sl]
 8004952:	89a3      	ldrh	r3, [r4, #12]
 8004954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004958:	81a3      	strh	r3, [r4, #12]
 800495a:	f04f 30ff 	mov.w	r0, #4294967295
 800495e:	e7e9      	b.n	8004934 <__ssputs_r+0x88>

08004960 <_svfiprintf_r>:
 8004960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004964:	4698      	mov	r8, r3
 8004966:	898b      	ldrh	r3, [r1, #12]
 8004968:	061b      	lsls	r3, r3, #24
 800496a:	b09d      	sub	sp, #116	; 0x74
 800496c:	4607      	mov	r7, r0
 800496e:	460d      	mov	r5, r1
 8004970:	4614      	mov	r4, r2
 8004972:	d50e      	bpl.n	8004992 <_svfiprintf_r+0x32>
 8004974:	690b      	ldr	r3, [r1, #16]
 8004976:	b963      	cbnz	r3, 8004992 <_svfiprintf_r+0x32>
 8004978:	2140      	movs	r1, #64	; 0x40
 800497a:	f7ff ff0b 	bl	8004794 <_malloc_r>
 800497e:	6028      	str	r0, [r5, #0]
 8004980:	6128      	str	r0, [r5, #16]
 8004982:	b920      	cbnz	r0, 800498e <_svfiprintf_r+0x2e>
 8004984:	230c      	movs	r3, #12
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	f04f 30ff 	mov.w	r0, #4294967295
 800498c:	e0d0      	b.n	8004b30 <_svfiprintf_r+0x1d0>
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	616b      	str	r3, [r5, #20]
 8004992:	2300      	movs	r3, #0
 8004994:	9309      	str	r3, [sp, #36]	; 0x24
 8004996:	2320      	movs	r3, #32
 8004998:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800499c:	f8cd 800c 	str.w	r8, [sp, #12]
 80049a0:	2330      	movs	r3, #48	; 0x30
 80049a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b48 <_svfiprintf_r+0x1e8>
 80049a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049aa:	f04f 0901 	mov.w	r9, #1
 80049ae:	4623      	mov	r3, r4
 80049b0:	469a      	mov	sl, r3
 80049b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049b6:	b10a      	cbz	r2, 80049bc <_svfiprintf_r+0x5c>
 80049b8:	2a25      	cmp	r2, #37	; 0x25
 80049ba:	d1f9      	bne.n	80049b0 <_svfiprintf_r+0x50>
 80049bc:	ebba 0b04 	subs.w	fp, sl, r4
 80049c0:	d00b      	beq.n	80049da <_svfiprintf_r+0x7a>
 80049c2:	465b      	mov	r3, fp
 80049c4:	4622      	mov	r2, r4
 80049c6:	4629      	mov	r1, r5
 80049c8:	4638      	mov	r0, r7
 80049ca:	f7ff ff6f 	bl	80048ac <__ssputs_r>
 80049ce:	3001      	adds	r0, #1
 80049d0:	f000 80a9 	beq.w	8004b26 <_svfiprintf_r+0x1c6>
 80049d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049d6:	445a      	add	r2, fp
 80049d8:	9209      	str	r2, [sp, #36]	; 0x24
 80049da:	f89a 3000 	ldrb.w	r3, [sl]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 80a1 	beq.w	8004b26 <_svfiprintf_r+0x1c6>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f04f 32ff 	mov.w	r2, #4294967295
 80049ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049ee:	f10a 0a01 	add.w	sl, sl, #1
 80049f2:	9304      	str	r3, [sp, #16]
 80049f4:	9307      	str	r3, [sp, #28]
 80049f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049fa:	931a      	str	r3, [sp, #104]	; 0x68
 80049fc:	4654      	mov	r4, sl
 80049fe:	2205      	movs	r2, #5
 8004a00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a04:	4850      	ldr	r0, [pc, #320]	; (8004b48 <_svfiprintf_r+0x1e8>)
 8004a06:	f7fb fc0b 	bl	8000220 <memchr>
 8004a0a:	9a04      	ldr	r2, [sp, #16]
 8004a0c:	b9d8      	cbnz	r0, 8004a46 <_svfiprintf_r+0xe6>
 8004a0e:	06d0      	lsls	r0, r2, #27
 8004a10:	bf44      	itt	mi
 8004a12:	2320      	movmi	r3, #32
 8004a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a18:	0711      	lsls	r1, r2, #28
 8004a1a:	bf44      	itt	mi
 8004a1c:	232b      	movmi	r3, #43	; 0x2b
 8004a1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a22:	f89a 3000 	ldrb.w	r3, [sl]
 8004a26:	2b2a      	cmp	r3, #42	; 0x2a
 8004a28:	d015      	beq.n	8004a56 <_svfiprintf_r+0xf6>
 8004a2a:	9a07      	ldr	r2, [sp, #28]
 8004a2c:	4654      	mov	r4, sl
 8004a2e:	2000      	movs	r0, #0
 8004a30:	f04f 0c0a 	mov.w	ip, #10
 8004a34:	4621      	mov	r1, r4
 8004a36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a3a:	3b30      	subs	r3, #48	; 0x30
 8004a3c:	2b09      	cmp	r3, #9
 8004a3e:	d94d      	bls.n	8004adc <_svfiprintf_r+0x17c>
 8004a40:	b1b0      	cbz	r0, 8004a70 <_svfiprintf_r+0x110>
 8004a42:	9207      	str	r2, [sp, #28]
 8004a44:	e014      	b.n	8004a70 <_svfiprintf_r+0x110>
 8004a46:	eba0 0308 	sub.w	r3, r0, r8
 8004a4a:	fa09 f303 	lsl.w	r3, r9, r3
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	9304      	str	r3, [sp, #16]
 8004a52:	46a2      	mov	sl, r4
 8004a54:	e7d2      	b.n	80049fc <_svfiprintf_r+0x9c>
 8004a56:	9b03      	ldr	r3, [sp, #12]
 8004a58:	1d19      	adds	r1, r3, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	9103      	str	r1, [sp, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	bfbb      	ittet	lt
 8004a62:	425b      	neglt	r3, r3
 8004a64:	f042 0202 	orrlt.w	r2, r2, #2
 8004a68:	9307      	strge	r3, [sp, #28]
 8004a6a:	9307      	strlt	r3, [sp, #28]
 8004a6c:	bfb8      	it	lt
 8004a6e:	9204      	strlt	r2, [sp, #16]
 8004a70:	7823      	ldrb	r3, [r4, #0]
 8004a72:	2b2e      	cmp	r3, #46	; 0x2e
 8004a74:	d10c      	bne.n	8004a90 <_svfiprintf_r+0x130>
 8004a76:	7863      	ldrb	r3, [r4, #1]
 8004a78:	2b2a      	cmp	r3, #42	; 0x2a
 8004a7a:	d134      	bne.n	8004ae6 <_svfiprintf_r+0x186>
 8004a7c:	9b03      	ldr	r3, [sp, #12]
 8004a7e:	1d1a      	adds	r2, r3, #4
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	9203      	str	r2, [sp, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bfb8      	it	lt
 8004a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a8c:	3402      	adds	r4, #2
 8004a8e:	9305      	str	r3, [sp, #20]
 8004a90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004b58 <_svfiprintf_r+0x1f8>
 8004a94:	7821      	ldrb	r1, [r4, #0]
 8004a96:	2203      	movs	r2, #3
 8004a98:	4650      	mov	r0, sl
 8004a9a:	f7fb fbc1 	bl	8000220 <memchr>
 8004a9e:	b138      	cbz	r0, 8004ab0 <_svfiprintf_r+0x150>
 8004aa0:	9b04      	ldr	r3, [sp, #16]
 8004aa2:	eba0 000a 	sub.w	r0, r0, sl
 8004aa6:	2240      	movs	r2, #64	; 0x40
 8004aa8:	4082      	lsls	r2, r0
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	3401      	adds	r4, #1
 8004aae:	9304      	str	r3, [sp, #16]
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	4825      	ldr	r0, [pc, #148]	; (8004b4c <_svfiprintf_r+0x1ec>)
 8004ab6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004aba:	2206      	movs	r2, #6
 8004abc:	f7fb fbb0 	bl	8000220 <memchr>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d038      	beq.n	8004b36 <_svfiprintf_r+0x1d6>
 8004ac4:	4b22      	ldr	r3, [pc, #136]	; (8004b50 <_svfiprintf_r+0x1f0>)
 8004ac6:	bb1b      	cbnz	r3, 8004b10 <_svfiprintf_r+0x1b0>
 8004ac8:	9b03      	ldr	r3, [sp, #12]
 8004aca:	3307      	adds	r3, #7
 8004acc:	f023 0307 	bic.w	r3, r3, #7
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	9303      	str	r3, [sp, #12]
 8004ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ad6:	4433      	add	r3, r6
 8004ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8004ada:	e768      	b.n	80049ae <_svfiprintf_r+0x4e>
 8004adc:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	2001      	movs	r0, #1
 8004ae4:	e7a6      	b.n	8004a34 <_svfiprintf_r+0xd4>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	3401      	adds	r4, #1
 8004aea:	9305      	str	r3, [sp, #20]
 8004aec:	4619      	mov	r1, r3
 8004aee:	f04f 0c0a 	mov.w	ip, #10
 8004af2:	4620      	mov	r0, r4
 8004af4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004af8:	3a30      	subs	r2, #48	; 0x30
 8004afa:	2a09      	cmp	r2, #9
 8004afc:	d903      	bls.n	8004b06 <_svfiprintf_r+0x1a6>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0c6      	beq.n	8004a90 <_svfiprintf_r+0x130>
 8004b02:	9105      	str	r1, [sp, #20]
 8004b04:	e7c4      	b.n	8004a90 <_svfiprintf_r+0x130>
 8004b06:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e7f0      	b.n	8004af2 <_svfiprintf_r+0x192>
 8004b10:	ab03      	add	r3, sp, #12
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	462a      	mov	r2, r5
 8004b16:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <_svfiprintf_r+0x1f4>)
 8004b18:	a904      	add	r1, sp, #16
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f3af 8000 	nop.w
 8004b20:	1c42      	adds	r2, r0, #1
 8004b22:	4606      	mov	r6, r0
 8004b24:	d1d6      	bne.n	8004ad4 <_svfiprintf_r+0x174>
 8004b26:	89ab      	ldrh	r3, [r5, #12]
 8004b28:	065b      	lsls	r3, r3, #25
 8004b2a:	f53f af2d 	bmi.w	8004988 <_svfiprintf_r+0x28>
 8004b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b30:	b01d      	add	sp, #116	; 0x74
 8004b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b36:	ab03      	add	r3, sp, #12
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <_svfiprintf_r+0x1f4>)
 8004b3e:	a904      	add	r1, sp, #16
 8004b40:	4638      	mov	r0, r7
 8004b42:	f000 f879 	bl	8004c38 <_printf_i>
 8004b46:	e7eb      	b.n	8004b20 <_svfiprintf_r+0x1c0>
 8004b48:	08005d2c 	.word	0x08005d2c
 8004b4c:	08005d36 	.word	0x08005d36
 8004b50:	00000000 	.word	0x00000000
 8004b54:	080048ad 	.word	0x080048ad
 8004b58:	08005d32 	.word	0x08005d32

08004b5c <_printf_common>:
 8004b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b60:	4616      	mov	r6, r2
 8004b62:	4699      	mov	r9, r3
 8004b64:	688a      	ldr	r2, [r1, #8]
 8004b66:	690b      	ldr	r3, [r1, #16]
 8004b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	bfb8      	it	lt
 8004b70:	4613      	movlt	r3, r2
 8004b72:	6033      	str	r3, [r6, #0]
 8004b74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b78:	4607      	mov	r7, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	b10a      	cbz	r2, 8004b82 <_printf_common+0x26>
 8004b7e:	3301      	adds	r3, #1
 8004b80:	6033      	str	r3, [r6, #0]
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	0699      	lsls	r1, r3, #26
 8004b86:	bf42      	ittt	mi
 8004b88:	6833      	ldrmi	r3, [r6, #0]
 8004b8a:	3302      	addmi	r3, #2
 8004b8c:	6033      	strmi	r3, [r6, #0]
 8004b8e:	6825      	ldr	r5, [r4, #0]
 8004b90:	f015 0506 	ands.w	r5, r5, #6
 8004b94:	d106      	bne.n	8004ba4 <_printf_common+0x48>
 8004b96:	f104 0a19 	add.w	sl, r4, #25
 8004b9a:	68e3      	ldr	r3, [r4, #12]
 8004b9c:	6832      	ldr	r2, [r6, #0]
 8004b9e:	1a9b      	subs	r3, r3, r2
 8004ba0:	42ab      	cmp	r3, r5
 8004ba2:	dc26      	bgt.n	8004bf2 <_printf_common+0x96>
 8004ba4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ba8:	1e13      	subs	r3, r2, #0
 8004baa:	6822      	ldr	r2, [r4, #0]
 8004bac:	bf18      	it	ne
 8004bae:	2301      	movne	r3, #1
 8004bb0:	0692      	lsls	r2, r2, #26
 8004bb2:	d42b      	bmi.n	8004c0c <_printf_common+0xb0>
 8004bb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004bb8:	4649      	mov	r1, r9
 8004bba:	4638      	mov	r0, r7
 8004bbc:	47c0      	blx	r8
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	d01e      	beq.n	8004c00 <_printf_common+0xa4>
 8004bc2:	6823      	ldr	r3, [r4, #0]
 8004bc4:	6922      	ldr	r2, [r4, #16]
 8004bc6:	f003 0306 	and.w	r3, r3, #6
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf02      	ittt	eq
 8004bce:	68e5      	ldreq	r5, [r4, #12]
 8004bd0:	6833      	ldreq	r3, [r6, #0]
 8004bd2:	1aed      	subeq	r5, r5, r3
 8004bd4:	68a3      	ldr	r3, [r4, #8]
 8004bd6:	bf0c      	ite	eq
 8004bd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bdc:	2500      	movne	r5, #0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	bfc4      	itt	gt
 8004be2:	1a9b      	subgt	r3, r3, r2
 8004be4:	18ed      	addgt	r5, r5, r3
 8004be6:	2600      	movs	r6, #0
 8004be8:	341a      	adds	r4, #26
 8004bea:	42b5      	cmp	r5, r6
 8004bec:	d11a      	bne.n	8004c24 <_printf_common+0xc8>
 8004bee:	2000      	movs	r0, #0
 8004bf0:	e008      	b.n	8004c04 <_printf_common+0xa8>
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4652      	mov	r2, sl
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	4638      	mov	r0, r7
 8004bfa:	47c0      	blx	r8
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d103      	bne.n	8004c08 <_printf_common+0xac>
 8004c00:	f04f 30ff 	mov.w	r0, #4294967295
 8004c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c08:	3501      	adds	r5, #1
 8004c0a:	e7c6      	b.n	8004b9a <_printf_common+0x3e>
 8004c0c:	18e1      	adds	r1, r4, r3
 8004c0e:	1c5a      	adds	r2, r3, #1
 8004c10:	2030      	movs	r0, #48	; 0x30
 8004c12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c16:	4422      	add	r2, r4
 8004c18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c20:	3302      	adds	r3, #2
 8004c22:	e7c7      	b.n	8004bb4 <_printf_common+0x58>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4622      	mov	r2, r4
 8004c28:	4649      	mov	r1, r9
 8004c2a:	4638      	mov	r0, r7
 8004c2c:	47c0      	blx	r8
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d0e6      	beq.n	8004c00 <_printf_common+0xa4>
 8004c32:	3601      	adds	r6, #1
 8004c34:	e7d9      	b.n	8004bea <_printf_common+0x8e>
	...

08004c38 <_printf_i>:
 8004c38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	7e0f      	ldrb	r7, [r1, #24]
 8004c3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c40:	2f78      	cmp	r7, #120	; 0x78
 8004c42:	4691      	mov	r9, r2
 8004c44:	4680      	mov	r8, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	469a      	mov	sl, r3
 8004c4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c4e:	d807      	bhi.n	8004c60 <_printf_i+0x28>
 8004c50:	2f62      	cmp	r7, #98	; 0x62
 8004c52:	d80a      	bhi.n	8004c6a <_printf_i+0x32>
 8004c54:	2f00      	cmp	r7, #0
 8004c56:	f000 80d4 	beq.w	8004e02 <_printf_i+0x1ca>
 8004c5a:	2f58      	cmp	r7, #88	; 0x58
 8004c5c:	f000 80c0 	beq.w	8004de0 <_printf_i+0x1a8>
 8004c60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c68:	e03a      	b.n	8004ce0 <_printf_i+0xa8>
 8004c6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c6e:	2b15      	cmp	r3, #21
 8004c70:	d8f6      	bhi.n	8004c60 <_printf_i+0x28>
 8004c72:	a101      	add	r1, pc, #4	; (adr r1, 8004c78 <_printf_i+0x40>)
 8004c74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c78:	08004cd1 	.word	0x08004cd1
 8004c7c:	08004ce5 	.word	0x08004ce5
 8004c80:	08004c61 	.word	0x08004c61
 8004c84:	08004c61 	.word	0x08004c61
 8004c88:	08004c61 	.word	0x08004c61
 8004c8c:	08004c61 	.word	0x08004c61
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c61 	.word	0x08004c61
 8004c98:	08004c61 	.word	0x08004c61
 8004c9c:	08004c61 	.word	0x08004c61
 8004ca0:	08004c61 	.word	0x08004c61
 8004ca4:	08004de9 	.word	0x08004de9
 8004ca8:	08004d11 	.word	0x08004d11
 8004cac:	08004da3 	.word	0x08004da3
 8004cb0:	08004c61 	.word	0x08004c61
 8004cb4:	08004c61 	.word	0x08004c61
 8004cb8:	08004e0b 	.word	0x08004e0b
 8004cbc:	08004c61 	.word	0x08004c61
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004c61 	.word	0x08004c61
 8004cc8:	08004c61 	.word	0x08004c61
 8004ccc:	08004dab 	.word	0x08004dab
 8004cd0:	682b      	ldr	r3, [r5, #0]
 8004cd2:	1d1a      	adds	r2, r3, #4
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	602a      	str	r2, [r5, #0]
 8004cd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e09f      	b.n	8004e24 <_printf_i+0x1ec>
 8004ce4:	6820      	ldr	r0, [r4, #0]
 8004ce6:	682b      	ldr	r3, [r5, #0]
 8004ce8:	0607      	lsls	r7, r0, #24
 8004cea:	f103 0104 	add.w	r1, r3, #4
 8004cee:	6029      	str	r1, [r5, #0]
 8004cf0:	d501      	bpl.n	8004cf6 <_printf_i+0xbe>
 8004cf2:	681e      	ldr	r6, [r3, #0]
 8004cf4:	e003      	b.n	8004cfe <_printf_i+0xc6>
 8004cf6:	0646      	lsls	r6, r0, #25
 8004cf8:	d5fb      	bpl.n	8004cf2 <_printf_i+0xba>
 8004cfa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cfe:	2e00      	cmp	r6, #0
 8004d00:	da03      	bge.n	8004d0a <_printf_i+0xd2>
 8004d02:	232d      	movs	r3, #45	; 0x2d
 8004d04:	4276      	negs	r6, r6
 8004d06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d0a:	485a      	ldr	r0, [pc, #360]	; (8004e74 <_printf_i+0x23c>)
 8004d0c:	230a      	movs	r3, #10
 8004d0e:	e012      	b.n	8004d36 <_printf_i+0xfe>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	1d19      	adds	r1, r3, #4
 8004d16:	6029      	str	r1, [r5, #0]
 8004d18:	0605      	lsls	r5, r0, #24
 8004d1a:	d501      	bpl.n	8004d20 <_printf_i+0xe8>
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	e002      	b.n	8004d26 <_printf_i+0xee>
 8004d20:	0641      	lsls	r1, r0, #25
 8004d22:	d5fb      	bpl.n	8004d1c <_printf_i+0xe4>
 8004d24:	881e      	ldrh	r6, [r3, #0]
 8004d26:	4853      	ldr	r0, [pc, #332]	; (8004e74 <_printf_i+0x23c>)
 8004d28:	2f6f      	cmp	r7, #111	; 0x6f
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2308      	moveq	r3, #8
 8004d2e:	230a      	movne	r3, #10
 8004d30:	2100      	movs	r1, #0
 8004d32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d36:	6865      	ldr	r5, [r4, #4]
 8004d38:	60a5      	str	r5, [r4, #8]
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	bfa2      	ittt	ge
 8004d3e:	6821      	ldrge	r1, [r4, #0]
 8004d40:	f021 0104 	bicge.w	r1, r1, #4
 8004d44:	6021      	strge	r1, [r4, #0]
 8004d46:	b90e      	cbnz	r6, 8004d4c <_printf_i+0x114>
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	d04b      	beq.n	8004de4 <_printf_i+0x1ac>
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d52:	fb03 6711 	mls	r7, r3, r1, r6
 8004d56:	5dc7      	ldrb	r7, [r0, r7]
 8004d58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d5c:	4637      	mov	r7, r6
 8004d5e:	42bb      	cmp	r3, r7
 8004d60:	460e      	mov	r6, r1
 8004d62:	d9f4      	bls.n	8004d4e <_printf_i+0x116>
 8004d64:	2b08      	cmp	r3, #8
 8004d66:	d10b      	bne.n	8004d80 <_printf_i+0x148>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	07de      	lsls	r6, r3, #31
 8004d6c:	d508      	bpl.n	8004d80 <_printf_i+0x148>
 8004d6e:	6923      	ldr	r3, [r4, #16]
 8004d70:	6861      	ldr	r1, [r4, #4]
 8004d72:	4299      	cmp	r1, r3
 8004d74:	bfde      	ittt	le
 8004d76:	2330      	movle	r3, #48	; 0x30
 8004d78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d80:	1b52      	subs	r2, r2, r5
 8004d82:	6122      	str	r2, [r4, #16]
 8004d84:	f8cd a000 	str.w	sl, [sp]
 8004d88:	464b      	mov	r3, r9
 8004d8a:	aa03      	add	r2, sp, #12
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4640      	mov	r0, r8
 8004d90:	f7ff fee4 	bl	8004b5c <_printf_common>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d14a      	bne.n	8004e2e <_printf_i+0x1f6>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b004      	add	sp, #16
 8004d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	f043 0320 	orr.w	r3, r3, #32
 8004da8:	6023      	str	r3, [r4, #0]
 8004daa:	4833      	ldr	r0, [pc, #204]	; (8004e78 <_printf_i+0x240>)
 8004dac:	2778      	movs	r7, #120	; 0x78
 8004dae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	6829      	ldr	r1, [r5, #0]
 8004db6:	061f      	lsls	r7, r3, #24
 8004db8:	f851 6b04 	ldr.w	r6, [r1], #4
 8004dbc:	d402      	bmi.n	8004dc4 <_printf_i+0x18c>
 8004dbe:	065f      	lsls	r7, r3, #25
 8004dc0:	bf48      	it	mi
 8004dc2:	b2b6      	uxthmi	r6, r6
 8004dc4:	07df      	lsls	r7, r3, #31
 8004dc6:	bf48      	it	mi
 8004dc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004dcc:	6029      	str	r1, [r5, #0]
 8004dce:	bf48      	it	mi
 8004dd0:	6023      	strmi	r3, [r4, #0]
 8004dd2:	b91e      	cbnz	r6, 8004ddc <_printf_i+0x1a4>
 8004dd4:	6823      	ldr	r3, [r4, #0]
 8004dd6:	f023 0320 	bic.w	r3, r3, #32
 8004dda:	6023      	str	r3, [r4, #0]
 8004ddc:	2310      	movs	r3, #16
 8004dde:	e7a7      	b.n	8004d30 <_printf_i+0xf8>
 8004de0:	4824      	ldr	r0, [pc, #144]	; (8004e74 <_printf_i+0x23c>)
 8004de2:	e7e4      	b.n	8004dae <_printf_i+0x176>
 8004de4:	4615      	mov	r5, r2
 8004de6:	e7bd      	b.n	8004d64 <_printf_i+0x12c>
 8004de8:	682b      	ldr	r3, [r5, #0]
 8004dea:	6826      	ldr	r6, [r4, #0]
 8004dec:	6961      	ldr	r1, [r4, #20]
 8004dee:	1d18      	adds	r0, r3, #4
 8004df0:	6028      	str	r0, [r5, #0]
 8004df2:	0635      	lsls	r5, r6, #24
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	d501      	bpl.n	8004dfc <_printf_i+0x1c4>
 8004df8:	6019      	str	r1, [r3, #0]
 8004dfa:	e002      	b.n	8004e02 <_printf_i+0x1ca>
 8004dfc:	0670      	lsls	r0, r6, #25
 8004dfe:	d5fb      	bpl.n	8004df8 <_printf_i+0x1c0>
 8004e00:	8019      	strh	r1, [r3, #0]
 8004e02:	2300      	movs	r3, #0
 8004e04:	6123      	str	r3, [r4, #16]
 8004e06:	4615      	mov	r5, r2
 8004e08:	e7bc      	b.n	8004d84 <_printf_i+0x14c>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	1d1a      	adds	r2, r3, #4
 8004e0e:	602a      	str	r2, [r5, #0]
 8004e10:	681d      	ldr	r5, [r3, #0]
 8004e12:	6862      	ldr	r2, [r4, #4]
 8004e14:	2100      	movs	r1, #0
 8004e16:	4628      	mov	r0, r5
 8004e18:	f7fb fa02 	bl	8000220 <memchr>
 8004e1c:	b108      	cbz	r0, 8004e22 <_printf_i+0x1ea>
 8004e1e:	1b40      	subs	r0, r0, r5
 8004e20:	6060      	str	r0, [r4, #4]
 8004e22:	6863      	ldr	r3, [r4, #4]
 8004e24:	6123      	str	r3, [r4, #16]
 8004e26:	2300      	movs	r3, #0
 8004e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e2c:	e7aa      	b.n	8004d84 <_printf_i+0x14c>
 8004e2e:	6923      	ldr	r3, [r4, #16]
 8004e30:	462a      	mov	r2, r5
 8004e32:	4649      	mov	r1, r9
 8004e34:	4640      	mov	r0, r8
 8004e36:	47d0      	blx	sl
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0ad      	beq.n	8004d98 <_printf_i+0x160>
 8004e3c:	6823      	ldr	r3, [r4, #0]
 8004e3e:	079b      	lsls	r3, r3, #30
 8004e40:	d413      	bmi.n	8004e6a <_printf_i+0x232>
 8004e42:	68e0      	ldr	r0, [r4, #12]
 8004e44:	9b03      	ldr	r3, [sp, #12]
 8004e46:	4298      	cmp	r0, r3
 8004e48:	bfb8      	it	lt
 8004e4a:	4618      	movlt	r0, r3
 8004e4c:	e7a6      	b.n	8004d9c <_printf_i+0x164>
 8004e4e:	2301      	movs	r3, #1
 8004e50:	4632      	mov	r2, r6
 8004e52:	4649      	mov	r1, r9
 8004e54:	4640      	mov	r0, r8
 8004e56:	47d0      	blx	sl
 8004e58:	3001      	adds	r0, #1
 8004e5a:	d09d      	beq.n	8004d98 <_printf_i+0x160>
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	68e3      	ldr	r3, [r4, #12]
 8004e60:	9903      	ldr	r1, [sp, #12]
 8004e62:	1a5b      	subs	r3, r3, r1
 8004e64:	42ab      	cmp	r3, r5
 8004e66:	dcf2      	bgt.n	8004e4e <_printf_i+0x216>
 8004e68:	e7eb      	b.n	8004e42 <_printf_i+0x20a>
 8004e6a:	2500      	movs	r5, #0
 8004e6c:	f104 0619 	add.w	r6, r4, #25
 8004e70:	e7f5      	b.n	8004e5e <_printf_i+0x226>
 8004e72:	bf00      	nop
 8004e74:	08005d3d 	.word	0x08005d3d
 8004e78:	08005d4e 	.word	0x08005d4e

08004e7c <memmove>:
 8004e7c:	4288      	cmp	r0, r1
 8004e7e:	b510      	push	{r4, lr}
 8004e80:	eb01 0402 	add.w	r4, r1, r2
 8004e84:	d902      	bls.n	8004e8c <memmove+0x10>
 8004e86:	4284      	cmp	r4, r0
 8004e88:	4623      	mov	r3, r4
 8004e8a:	d807      	bhi.n	8004e9c <memmove+0x20>
 8004e8c:	1e43      	subs	r3, r0, #1
 8004e8e:	42a1      	cmp	r1, r4
 8004e90:	d008      	beq.n	8004ea4 <memmove+0x28>
 8004e92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e9a:	e7f8      	b.n	8004e8e <memmove+0x12>
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4601      	mov	r1, r0
 8004ea0:	428a      	cmp	r2, r1
 8004ea2:	d100      	bne.n	8004ea6 <memmove+0x2a>
 8004ea4:	bd10      	pop	{r4, pc}
 8004ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004eaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004eae:	e7f7      	b.n	8004ea0 <memmove+0x24>

08004eb0 <_sbrk_r>:
 8004eb0:	b538      	push	{r3, r4, r5, lr}
 8004eb2:	4d06      	ldr	r5, [pc, #24]	; (8004ecc <_sbrk_r+0x1c>)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	4608      	mov	r0, r1
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	f7fb ff0a 	bl	8000cd4 <_sbrk>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_sbrk_r+0x1a>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_sbrk_r+0x1a>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	20000500 	.word	0x20000500

08004ed0 <_realloc_r>:
 8004ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ed4:	4680      	mov	r8, r0
 8004ed6:	4614      	mov	r4, r2
 8004ed8:	460e      	mov	r6, r1
 8004eda:	b921      	cbnz	r1, 8004ee6 <_realloc_r+0x16>
 8004edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	f7ff bc57 	b.w	8004794 <_malloc_r>
 8004ee6:	b92a      	cbnz	r2, 8004ef4 <_realloc_r+0x24>
 8004ee8:	f7ff fbe8 	bl	80046bc <_free_r>
 8004eec:	4625      	mov	r5, r4
 8004eee:	4628      	mov	r0, r5
 8004ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ef4:	f000 f81b 	bl	8004f2e <_malloc_usable_size_r>
 8004ef8:	4284      	cmp	r4, r0
 8004efa:	4607      	mov	r7, r0
 8004efc:	d802      	bhi.n	8004f04 <_realloc_r+0x34>
 8004efe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004f02:	d812      	bhi.n	8004f2a <_realloc_r+0x5a>
 8004f04:	4621      	mov	r1, r4
 8004f06:	4640      	mov	r0, r8
 8004f08:	f7ff fc44 	bl	8004794 <_malloc_r>
 8004f0c:	4605      	mov	r5, r0
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d0ed      	beq.n	8004eee <_realloc_r+0x1e>
 8004f12:	42bc      	cmp	r4, r7
 8004f14:	4622      	mov	r2, r4
 8004f16:	4631      	mov	r1, r6
 8004f18:	bf28      	it	cs
 8004f1a:	463a      	movcs	r2, r7
 8004f1c:	f7ff fbc0 	bl	80046a0 <memcpy>
 8004f20:	4631      	mov	r1, r6
 8004f22:	4640      	mov	r0, r8
 8004f24:	f7ff fbca 	bl	80046bc <_free_r>
 8004f28:	e7e1      	b.n	8004eee <_realloc_r+0x1e>
 8004f2a:	4635      	mov	r5, r6
 8004f2c:	e7df      	b.n	8004eee <_realloc_r+0x1e>

08004f2e <_malloc_usable_size_r>:
 8004f2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f32:	1f18      	subs	r0, r3, #4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bfbc      	itt	lt
 8004f38:	580b      	ldrlt	r3, [r1, r0]
 8004f3a:	18c0      	addlt	r0, r0, r3
 8004f3c:	4770      	bx	lr
	...

08004f40 <_init>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr

08004f4c <_fini>:
 8004f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4e:	bf00      	nop
 8004f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f52:	bc08      	pop	{r3}
 8004f54:	469e      	mov	lr, r3
 8004f56:	4770      	bx	lr
