
poc_dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ed0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001568  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006618  08006618  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006618  08006618  00016618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006620  08006620  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006620  08006620  00016620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006624  08006624  00016624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006628  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006bc  2000005c  08006684  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08006684  00020718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c65  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ce4  00000000  00000000  00036d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  00039a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f93  00000000  00000000  0003ae00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027744  00000000  00000000  0003bd93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001930c  00000000  00000000  000634d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff819  00000000  00000000  0007c7e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005a08  00000000  00000000  0017bffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00181a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005098 	.word	0x08005098

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08005098 	.word	0x08005098

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c2:	f000 fbbe 	bl	8000d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c6:	f000 f88d 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ca:	f000 f997 	bl	80008fc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80005ce:	f000 f915 	bl	80007fc <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80005d2:	f000 f8d3 	bl	800077c <MX_I2C1_Init>
  MX_TIM7_Init();
 80005d6:	f000 f95b 	bl	8000890 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  init_dht11(&dht11, &htim7, DHT11_GPIO_Port, DHT11_Pin);
 80005da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005de:	4a16      	ldr	r2, [pc, #88]	; (8000638 <main+0x7c>)
 80005e0:	4916      	ldr	r1, [pc, #88]	; (800063c <main+0x80>)
 80005e2:	4817      	ldr	r0, [pc, #92]	; (8000640 <main+0x84>)
 80005e4:	f003 fcb2 	bl	8003f4c <init_dht11>
  ssd1306_Init();
 80005e8:	f003 feb2 	bl	8004350 <ssd1306_Init>
  ssd1306_Fill(White);
 80005ec:	2001      	movs	r0, #1
 80005ee:	f003 ff19 	bl	8004424 <ssd1306_Fill>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	readDHT11(&dht11);
 80005f2:	4813      	ldr	r0, [pc, #76]	; (8000640 <main+0x84>)
 80005f4:	f003 fcfb 	bl	8003fee <readDHT11>

	ssd1306_WriteTemp(dht11.temperature,2,0);
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <main+0x84>)
 80005fa:	7b1b      	ldrb	r3, [r3, #12]
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f000 f825 	bl	8000650 <ssd1306_WriteTemp>

	sprintf(hum, "%d%%", dht11.humidty);
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <main+0x84>)
 8000608:	7b5b      	ldrb	r3, [r3, #13]
 800060a:	461a      	mov	r2, r3
 800060c:	490d      	ldr	r1, [pc, #52]	; (8000644 <main+0x88>)
 800060e:	480e      	ldr	r0, [pc, #56]	; (8000648 <main+0x8c>)
 8000610:	f004 f89e 	bl	8004750 <siprintf>
	ssd1306_SetCursor(2, 18);
 8000614:	2112      	movs	r1, #18
 8000616:	2002      	movs	r0, #2
 8000618:	f004 f850 	bl	80046bc <ssd1306_SetCursor>
	ssd1306_WriteString(hum, Font_11x18, Black);
 800061c:	4b0b      	ldr	r3, [pc, #44]	; (800064c <main+0x90>)
 800061e:	2200      	movs	r2, #0
 8000620:	9200      	str	r2, [sp, #0]
 8000622:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000624:	4808      	ldr	r0, [pc, #32]	; (8000648 <main+0x8c>)
 8000626:	f004 f823 	bl	8004670 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800062a:	f003 ff13 	bl	8004454 <ssd1306_UpdateScreen>

	HAL_Delay(100);
 800062e:	2064      	movs	r0, #100	; 0x64
 8000630:	f000 fbf8 	bl	8000e24 <HAL_Delay>
	readDHT11(&dht11);
 8000634:	e7dd      	b.n	80005f2 <main+0x36>
 8000636:	bf00      	nop
 8000638:	48000800 	.word	0x48000800
 800063c:	20000160 	.word	0x20000160
 8000640:	200001ac 	.word	0x200001ac
 8000644:	080050b0 	.word	0x080050b0
 8000648:	200001bc 	.word	0x200001bc
 800064c:	080065d8 	.word	0x080065d8

08000650 <ssd1306_WriteTemp>:
  }
  /* USER CODE END 3 */
}

void ssd1306_WriteTemp(uint8_t temp, uint8_t x, uint8_t y)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	4603      	mov	r3, r0
 8000658:	71fb      	strb	r3, [r7, #7]
 800065a:	460b      	mov	r3, r1
 800065c:	71bb      	strb	r3, [r7, #6]
 800065e:	4613      	mov	r3, r2
 8000660:	717b      	strb	r3, [r7, #5]
	char cTemp[3];

	sprintf(cTemp, "%d", temp);
 8000662:	79fa      	ldrb	r2, [r7, #7]
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	4919      	ldr	r1, [pc, #100]	; (80006d0 <ssd1306_WriteTemp+0x80>)
 800066a:	4618      	mov	r0, r3
 800066c:	f004 f870 	bl	8004750 <siprintf>
	ssd1306_SetCursor(x, y);
 8000670:	797a      	ldrb	r2, [r7, #5]
 8000672:	79bb      	ldrb	r3, [r7, #6]
 8000674:	4611      	mov	r1, r2
 8000676:	4618      	mov	r0, r3
 8000678:	f004 f820 	bl	80046bc <ssd1306_SetCursor>
	ssd1306_WriteString(cTemp, Font_11x18, Black);
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <ssd1306_WriteTemp+0x84>)
 800067e:	f107 000c 	add.w	r0, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	9200      	str	r2, [sp, #0]
 8000686:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000688:	f003 fff2 	bl	8004670 <ssd1306_WriteString>
	ssd1306_SetCursor(x+2*11+1, y);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	3317      	adds	r3, #23
 8000690:	b2db      	uxtb	r3, r3
 8000692:	797a      	ldrb	r2, [r7, #5]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f004 f810 	bl	80046bc <ssd1306_SetCursor>
	ssd1306_WriteString("o", Font_7x10, Black);
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <ssd1306_WriteTemp+0x88>)
 800069e:	2200      	movs	r2, #0
 80006a0:	9200      	str	r2, [sp, #0]
 80006a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <ssd1306_WriteTemp+0x8c>)
 80006a6:	f003 ffe3 	bl	8004670 <ssd1306_WriteString>
	ssd1306_SetCursor(x+3*11-3, y);
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	331e      	adds	r3, #30
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	797a      	ldrb	r2, [r7, #5]
 80006b2:	4611      	mov	r1, r2
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 f801 	bl	80046bc <ssd1306_SetCursor>
	ssd1306_WriteString("C", Font_11x18, Black);
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <ssd1306_WriteTemp+0x84>)
 80006bc:	2200      	movs	r2, #0
 80006be:	9200      	str	r2, [sp, #0]
 80006c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006c2:	4807      	ldr	r0, [pc, #28]	; (80006e0 <ssd1306_WriteTemp+0x90>)
 80006c4:	f003 ffd4 	bl	8004670 <ssd1306_WriteString>
}
 80006c8:	bf00      	nop
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	080050b8 	.word	0x080050b8
 80006d4:	080065d8 	.word	0x080065d8
 80006d8:	080065cc 	.word	0x080065cc
 80006dc:	080050bc 	.word	0x080050bc
 80006e0:	080050c0 	.word	0x080050c0

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	2238      	movs	r2, #56	; 0x38
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f004 f84c 	bl	8004790 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000706:	2000      	movs	r0, #0
 8000708:	f001 fb48 	bl	8001d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000726:	2355      	movs	r3, #85	; 0x55
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f001 fbe2 	bl	8001f04 <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000746:	f000 f95d 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f001 fee0 	bl	8002528 <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800076e:	f000 f949 	bl	8000a04 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000782:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <MX_I2C1_Init+0x78>)
 8000784:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000786:	4b1a      	ldr	r3, [pc, #104]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <MX_I2C1_Init+0x7c>)
 800078a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800078c:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <MX_I2C1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <MX_I2C1_Init+0x74>)
 8000794:	2201      	movs	r2, #1
 8000796:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <MX_I2C1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	480e      	ldr	r0, [pc, #56]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007b8:	f000 fe3b 	bl	8001432 <HAL_I2C_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007c2:	f000 f91f 	bl	8000a04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007c6:	2100      	movs	r1, #0
 80007c8:	4809      	ldr	r0, [pc, #36]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007ca:	f001 fa4f 	bl	8001c6c <HAL_I2CEx_ConfigAnalogFilter>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007d4:	f000 f916 	bl	8000a04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	4805      	ldr	r0, [pc, #20]	; (80007f0 <MX_I2C1_Init+0x74>)
 80007dc:	f001 fa91 	bl	8001d02 <HAL_I2CEx_ConfigDigitalFilter>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007e6:	f000 f90d 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000078 	.word	0x20000078
 80007f4:	40005400 	.word	0x40005400
 80007f8:	30a0a7fb 	.word	0x30a0a7fb

080007fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000802:	4a22      	ldr	r2, [pc, #136]	; (800088c <MX_LPUART1_UART_Init+0x90>)
 8000804:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000806:	4b20      	ldr	r3, [pc, #128]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b18      	ldr	r3, [pc, #96]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 800082e:	2200      	movs	r2, #0
 8000830:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000832:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000834:	2200      	movs	r2, #0
 8000836:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 800083a:	2200      	movs	r2, #0
 800083c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000840:	f002 fd16 	bl	8003270 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f8db 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800084e:	2100      	movs	r1, #0
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000852:	f003 fab1 	bl	8003db8 <HAL_UARTEx_SetTxFifoThreshold>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800085c:	f000 f8d2 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000860:	2100      	movs	r1, #0
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000864:	f003 fae6 	bl	8003e34 <HAL_UARTEx_SetRxFifoThreshold>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800086e:	f000 f8c9 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f003 fa67 	bl	8003d46 <HAL_UARTEx_DisableFifoMode>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800087e:	f000 f8c1 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000cc 	.word	0x200000cc
 800088c:	40008000 	.word	0x40008000

08000890 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008a2:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <MX_TIM7_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 80008a6:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008a8:	22a9      	movs	r2, #169	; 0xa9
 80008aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80008c0:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008c2:	f002 fa9b 	bl	8002dfc <HAL_TIM_Base_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80008cc:	f000 f89a 	bl	8000a04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	4619      	mov	r1, r3
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <MX_TIM7_Init+0x64>)
 80008de:	f002 fc31 	bl	8003144 <HAL_TIMEx_MasterConfigSynchronization>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f88c 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	20000160 	.word	0x20000160
 80008f8:	40001400 	.word	0x40001400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	4b3a      	ldr	r3, [pc, #232]	; (80009fc <MX_GPIO_Init+0x100>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	4a39      	ldr	r2, [pc, #228]	; (80009fc <MX_GPIO_Init+0x100>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091e:	4b37      	ldr	r3, [pc, #220]	; (80009fc <MX_GPIO_Init+0x100>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092a:	4b34      	ldr	r3, [pc, #208]	; (80009fc <MX_GPIO_Init+0x100>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a33      	ldr	r2, [pc, #204]	; (80009fc <MX_GPIO_Init+0x100>)
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b31      	ldr	r3, [pc, #196]	; (80009fc <MX_GPIO_Init+0x100>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0320 	and.w	r3, r3, #32
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <MX_GPIO_Init+0x100>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <MX_GPIO_Init+0x100>)
 8000948:	f043 0301 	orr.w	r3, r3, #1
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <MX_GPIO_Init+0x100>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	4b28      	ldr	r3, [pc, #160]	; (80009fc <MX_GPIO_Init+0x100>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a27      	ldr	r2, [pc, #156]	; (80009fc <MX_GPIO_Init+0x100>)
 8000960:	f043 0302 	orr.w	r3, r3, #2
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <MX_GPIO_Init+0x100>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2120      	movs	r1, #32
 8000976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097a:	f000 fd1f 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT11_GPIO_Port, DHT11_Pin, GPIO_PIN_SET);
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000984:	481e      	ldr	r0, [pc, #120]	; (8000a00 <MX_GPIO_Init+0x104>)
 8000986:	f000 fd19 	bl	80013bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000990:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0314 	add.w	r3, r7, #20
 800099e:	4619      	mov	r1, r3
 80009a0:	4817      	ldr	r0, [pc, #92]	; (8000a00 <MX_GPIO_Init+0x104>)
 80009a2:	f000 fb71 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009a6:	2320      	movs	r3, #32
 80009a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009aa:	2301      	movs	r3, #1
 80009ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b2:	2300      	movs	r3, #0
 80009b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f000 fb62 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 80009c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d2:	2303      	movs	r3, #3
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4808      	ldr	r0, [pc, #32]	; (8000a00 <MX_GPIO_Init+0x104>)
 80009de:	f000 fb53 	bl	8001088 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2028      	movs	r0, #40	; 0x28
 80009e8:	f000 fb19 	bl	800101e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009ec:	2028      	movs	r0, #40	; 0x28
 80009ee:	f000 fb30 	bl	8001052 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000
 8000a00:	48000800 	.word	0x48000800

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6613      	str	r3, [r2, #96]	; 0x60
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a32:	4a08      	ldr	r2, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3a:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000a46:	f001 fa4d 	bl	8001ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b09e      	sub	sp, #120	; 0x78
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	2254      	movs	r2, #84	; 0x54
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fe89 	bl	8004790 <memset>
  if(hi2c->Instance==I2C1)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a1f      	ldr	r2, [pc, #124]	; (8000b00 <HAL_I2C_MspInit+0xa8>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d136      	bne.n	8000af6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000a88:	2340      	movs	r3, #64	; 0x40
 8000a8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	4618      	mov	r0, r3
 8000a96:	f001 ff63 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000aa0:	f7ff ffb0 	bl	8000a04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa4:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000aaa:	f043 0302 	orr.w	r3, r3, #2
 8000aae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab0:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab4:	f003 0302 	and.w	r3, r3, #2
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000abc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ac0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <HAL_I2C_MspInit+0xb0>)
 8000ada:	f000 fad5 	bl	8001088 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_I2C_MspInit+0xac>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3778      	adds	r7, #120	; 0x78
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000400 	.word	0x48000400

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b09e      	sub	sp, #120	; 0x78
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2254      	movs	r2, #84	; 0x54
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f003 fe2f 	bl	8004790 <memset>
  if(huart->Instance==LPUART1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a1f      	ldr	r2, [pc, #124]	; (8000bb4 <HAL_UART_MspInit+0xa8>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d136      	bne.n	8000baa <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b40:	2300      	movs	r3, #0
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b44:	f107 0310 	add.w	r3, r7, #16
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f001 ff09 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b54:	f7ff ff56 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000b58:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b5c:	4a16      	ldr	r2, [pc, #88]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000b64:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a10      	ldr	r2, [pc, #64]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7c:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <HAL_UART_MspInit+0xac>)
 8000b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000b88:	230c      	movs	r3, #12
 8000b8a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2300      	movs	r3, #0
 8000b96:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba6:	f000 fa6f 	bl	8001088 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000baa:	bf00      	nop
 8000bac:	3778      	adds	r7, #120	; 0x78
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40008000 	.word	0x40008000
 8000bb8:	40021000 	.word	0x40021000

08000bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_TIM_Base_MspInit+0x38>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d10b      	bne.n	8000be6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a09      	ldr	r2, [pc, #36]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bd4:	f043 0320 	orr.w	r3, r3, #32
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b07      	ldr	r3, [pc, #28]	; (8000bf8 <HAL_TIM_Base_MspInit+0x3c>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f003 0320 	and.w	r3, r3, #32
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8000be6:	bf00      	nop
 8000be8:	3714      	adds	r7, #20
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40001400 	.word	0x40001400
 8000bf8:	40021000 	.word	0x40021000

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c48:	f000 f8ce 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c58:	f000 fbc8 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f003 fd86 	bl	80047a0 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	20020000 	.word	0x20020000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200001c0 	.word	0x200001c0
 8000cc8:	20000718 	.word	0x20000718

08000ccc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cf2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf4:	f7ff ffea 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f003 fd45 	bl	80047ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d22:	f7ff fc4b 	bl	80005bc <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   r0, =_estack
 8000d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000d34:	08006628 	.word	0x08006628
  ldr r2, =_sbss
 8000d38:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000d3c:	20000718 	.word	0x20000718

08000d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_2_IRQHandler>

08000d42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f95b 	bl	8001008 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 f80e 	bl	8000d74 <HAL_InitTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d64:	f7ff fe54 	bl	8000a10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	79fb      	ldrb	r3, [r7, #7]

}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_InitTick+0x68>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d022      	beq.n	8000dce <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d88:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <HAL_InitTick+0x6c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <HAL_InitTick+0x68>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f966 	bl	800106e <HAL_SYSTICK_Config>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d10f      	bne.n	8000dc8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2b0f      	cmp	r3, #15
 8000dac:	d809      	bhi.n	8000dc2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dae:	2200      	movs	r2, #0
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	f04f 30ff 	mov.w	r0, #4294967295
 8000db6:	f000 f932 	bl	800101e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_InitTick+0x70>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	73fb      	strb	r3, [r7, #15]
 8000dc6:	e004      	b.n	8000dd2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	73fb      	strb	r3, [r7, #15]
 8000dcc:	e001      	b.n	8000dd2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000000 	.word	0x20000000
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <HAL_IncTick+0x1c>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x20>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a03      	ldr	r2, [pc, #12]	; (8000e04 <HAL_IncTick+0x1c>)
 8000df8:	6013      	str	r3, [r2, #0]
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200001c4 	.word	0x200001c4
 8000e08:	20000008 	.word	0x20000008

08000e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <HAL_GetTick+0x14>)
 8000e12:	681b      	ldr	r3, [r3, #0]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	200001c4 	.word	0x200001c4

08000e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e2c:	f7ff ffee 	bl	8000e0c <HAL_GetTick>
 8000e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d004      	beq.n	8000e48 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e3e:	4b09      	ldr	r3, [pc, #36]	; (8000e64 <HAL_Delay+0x40>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	4413      	add	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e48:	bf00      	nop
 8000e4a:	f7ff ffdf 	bl	8000e0c <HAL_GetTick>
 8000e4e:	4602      	mov	r2, r0
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d8f7      	bhi.n	8000e4a <HAL_Delay+0x26>
  {
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	bf00      	nop
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000008 	.word	0x20000008

08000e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f003 0307 	and.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e84:	4013      	ands	r3, r2
 8000e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9a:	4a04      	ldr	r2, [pc, #16]	; (8000eac <__NVIC_SetPriorityGrouping+0x44>)
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	60d3      	str	r3, [r2, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb4:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	0a1b      	lsrs	r3, r3, #8
 8000eba:	f003 0307 	and.w	r3, r3, #7
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	db0b      	blt.n	8000ef6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f003 021f 	and.w	r2, r3, #31
 8000ee4:	4907      	ldr	r1, [pc, #28]	; (8000f04 <__NVIC_EnableIRQ+0x38>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	095b      	lsrs	r3, r3, #5
 8000eec:	2001      	movs	r0, #1
 8000eee:	fa00 f202 	lsl.w	r2, r0, r2
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100

08000f08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	db0a      	blt.n	8000f32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	490c      	ldr	r1, [pc, #48]	; (8000f54 <__NVIC_SetPriority+0x4c>)
 8000f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f26:	0112      	lsls	r2, r2, #4
 8000f28:	b2d2      	uxtb	r2, r2
 8000f2a:	440b      	add	r3, r1
 8000f2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f30:	e00a      	b.n	8000f48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	4908      	ldr	r1, [pc, #32]	; (8000f58 <__NVIC_SetPriority+0x50>)
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	f003 030f 	and.w	r3, r3, #15
 8000f3e:	3b04      	subs	r3, #4
 8000f40:	0112      	lsls	r2, r2, #4
 8000f42:	b2d2      	uxtb	r2, r2
 8000f44:	440b      	add	r3, r1
 8000f46:	761a      	strb	r2, [r3, #24]
}
 8000f48:	bf00      	nop
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b089      	sub	sp, #36	; 0x24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	f1c3 0307 	rsb	r3, r3, #7
 8000f76:	2b04      	cmp	r3, #4
 8000f78:	bf28      	it	cs
 8000f7a:	2304      	movcs	r3, #4
 8000f7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3304      	adds	r3, #4
 8000f82:	2b06      	cmp	r3, #6
 8000f84:	d902      	bls.n	8000f8c <NVIC_EncodePriority+0x30>
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3b03      	subs	r3, #3
 8000f8a:	e000      	b.n	8000f8e <NVIC_EncodePriority+0x32>
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	f04f 32ff 	mov.w	r2, #4294967295
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	fa01 f303 	lsl.w	r3, r1, r3
 8000fae:	43d9      	mvns	r1, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	4313      	orrs	r3, r2
         );
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3724      	adds	r7, #36	; 0x24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
	...

08000fc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3b01      	subs	r3, #1
 8000fd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd4:	d301      	bcc.n	8000fda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e00f      	b.n	8000ffa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fda:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <SysTick_Config+0x40>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe2:	210f      	movs	r1, #15
 8000fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe8:	f7ff ff8e 	bl	8000f08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fec:	4b05      	ldr	r3, [pc, #20]	; (8001004 <SysTick_Config+0x40>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff2:	4b04      	ldr	r3, [pc, #16]	; (8001004 <SysTick_Config+0x40>)
 8000ff4:	2207      	movs	r2, #7
 8000ff6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff8:	2300      	movs	r3, #0
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010

08001008 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ff29 	bl	8000e68 <__NVIC_SetPriorityGrouping>
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
 800102a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800102c:	f7ff ff40 	bl	8000eb0 <__NVIC_GetPriorityGrouping>
 8001030:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	68b9      	ldr	r1, [r7, #8]
 8001036:	6978      	ldr	r0, [r7, #20]
 8001038:	f7ff ff90 	bl	8000f5c <NVIC_EncodePriority>
 800103c:	4602      	mov	r2, r0
 800103e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001042:	4611      	mov	r1, r2
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ff5f 	bl	8000f08 <__NVIC_SetPriority>
}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff33 	bl	8000ecc <__NVIC_EnableIRQ>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff ffa4 	bl	8000fc4 <SysTick_Config>
 800107c:	4603      	mov	r3, r0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b087      	sub	sp, #28
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001096:	e15a      	b.n	800134e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	fa01 f303 	lsl.w	r3, r1, r3
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	f000 814c 	beq.w	8001348 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	f003 0201 	and.w	r2, r3, #1
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0303 	and.w	r3, r3, #3
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	693a      	ldr	r2, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	f003 0307 	and.w	r3, r3, #7
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	6939      	ldr	r1, [r7, #16]
 80011b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 0203 	and.w	r2, r3, #3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 80a6 	beq.w	8001348 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_GPIO_Init+0x2e4>)
 80011fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001200:	4a5a      	ldr	r2, [pc, #360]	; (800136c <HAL_GPIO_Init+0x2e4>)
 8001202:	f043 0301 	orr.w	r3, r3, #1
 8001206:	6613      	str	r3, [r2, #96]	; 0x60
 8001208:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_GPIO_Init+0x2e4>)
 800120a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	089b      	lsrs	r3, r3, #2
 800121a:	3302      	adds	r3, #2
 800121c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	220f      	movs	r2, #15
 800122c:	fa02 f303 	lsl.w	r3, r2, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	4013      	ands	r3, r2
 8001236:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800123e:	d01f      	beq.n	8001280 <HAL_GPIO_Init+0x1f8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_GPIO_Init+0x2ec>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d019      	beq.n	800127c <HAL_GPIO_Init+0x1f4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a4b      	ldr	r2, [pc, #300]	; (8001378 <HAL_GPIO_Init+0x2f0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d013      	beq.n	8001278 <HAL_GPIO_Init+0x1f0>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4a4a      	ldr	r2, [pc, #296]	; (800137c <HAL_GPIO_Init+0x2f4>)
 8001254:	4293      	cmp	r3, r2
 8001256:	d00d      	beq.n	8001274 <HAL_GPIO_Init+0x1ec>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a49      	ldr	r2, [pc, #292]	; (8001380 <HAL_GPIO_Init+0x2f8>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d007      	beq.n	8001270 <HAL_GPIO_Init+0x1e8>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a48      	ldr	r2, [pc, #288]	; (8001384 <HAL_GPIO_Init+0x2fc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d101      	bne.n	800126c <HAL_GPIO_Init+0x1e4>
 8001268:	2305      	movs	r3, #5
 800126a:	e00a      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 800126c:	2306      	movs	r3, #6
 800126e:	e008      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001270:	2304      	movs	r3, #4
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001274:	2303      	movs	r3, #3
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001280:	2300      	movs	r3, #0
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001292:	4937      	ldr	r1, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x2e8>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012c4:	4a30      	ldr	r2, [pc, #192]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012ca:	4b2f      	ldr	r3, [pc, #188]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012ee:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012f4:	4b24      	ldr	r3, [pc, #144]	; (8001388 <HAL_GPIO_Init+0x300>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001318:	4a1b      	ldr	r2, [pc, #108]	; (8001388 <HAL_GPIO_Init+0x300>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800131e:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001342:	4a11      	ldr	r2, [pc, #68]	; (8001388 <HAL_GPIO_Init+0x300>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f ae9d 	bne.w	8001098 <HAL_GPIO_Init+0x10>
  }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	40021000 	.word	0x40021000
 8001370:	40010000 	.word	0x40010000
 8001374:	48000400 	.word	0x48000400
 8001378:	48000800 	.word	0x48000800
 800137c:	48000c00 	.word	0x48000c00
 8001380:	48001000 	.word	0x48001000
 8001384:	48001400 	.word	0x48001400
 8001388:	40010400 	.word	0x40010400

0800138c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691a      	ldr	r2, [r3, #16]
 800139c:	887b      	ldrh	r3, [r7, #2]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d002      	beq.n	80013aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a4:	2301      	movs	r3, #1
 80013a6:	73fb      	strb	r3, [r7, #15]
 80013a8:	e001      	b.n	80013ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
 80013c8:	4613      	mov	r3, r2
 80013ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013cc:	787b      	ldrb	r3, [r7, #1]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d2:	887a      	ldrh	r2, [r7, #2]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d8:	e002      	b.n	80013e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013da:	887a      	ldrh	r2, [r7, #2]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f806 	bl	800141c <HAL_GPIO_EXTI_Callback>
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e08d      	b.n	8001560 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	d106      	bne.n	800145e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff fafd 	bl	8000a58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2224      	movs	r2, #36	; 0x24
 8001462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0201 	bic.w	r2, r2, #1
 8001474:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001482:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001492:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d107      	bne.n	80014ac <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	e006      	b.n	80014ba <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014b8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d108      	bne.n	80014d4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	e007      	b.n	80014e4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014e2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	687a      	ldr	r2, [r7, #4]
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68da      	ldr	r2, [r3, #12]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001506:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	69d9      	ldr	r1, [r3, #28]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1a      	ldr	r2, [r3, #32]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f042 0201 	orr.w	r2, r2, #1
 8001540:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2220      	movs	r2, #32
 800154c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b088      	sub	sp, #32
 800156c:	af02      	add	r7, sp, #8
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	4608      	mov	r0, r1
 8001572:	4611      	mov	r1, r2
 8001574:	461a      	mov	r2, r3
 8001576:	4603      	mov	r3, r0
 8001578:	817b      	strh	r3, [r7, #10]
 800157a:	460b      	mov	r3, r1
 800157c:	813b      	strh	r3, [r7, #8]
 800157e:	4613      	mov	r3, r2
 8001580:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b20      	cmp	r3, #32
 800158c:	f040 80f9 	bne.w	8001782 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_I2C_Mem_Write+0x34>
 8001596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e0ed      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d101      	bne.n	80015b6 <HAL_I2C_Mem_Write+0x4e>
 80015b2:	2302      	movs	r3, #2
 80015b4:	e0e6      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015be:	f7ff fc25 	bl	8000e0c <HAL_GetTick>
 80015c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2319      	movs	r3, #25
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f955 	bl	8001880 <I2C_WaitOnFlagUntilTimeout>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0d1      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2221      	movs	r2, #33	; 0x21
 80015e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2240      	movs	r2, #64	; 0x40
 80015ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2200      	movs	r2, #0
 80015f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001600:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001608:	88f8      	ldrh	r0, [r7, #6]
 800160a:	893a      	ldrh	r2, [r7, #8]
 800160c:	8979      	ldrh	r1, [r7, #10]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	4603      	mov	r3, r0
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f8b9 	bl	8001790 <I2C_RequestMemoryWrite>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0a9      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001634:	b29b      	uxth	r3, r3
 8001636:	2bff      	cmp	r3, #255	; 0xff
 8001638:	d90e      	bls.n	8001658 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	22ff      	movs	r2, #255	; 0xff
 800163e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001644:	b2da      	uxtb	r2, r3
 8001646:	8979      	ldrh	r1, [r7, #10]
 8001648:	2300      	movs	r3, #0
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 fad9 	bl	8001c08 <I2C_TransferConfig>
 8001656:	e00f      	b.n	8001678 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800165c:	b29a      	uxth	r2, r3
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fac8 	bl	8001c08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f958 	bl	8001932 <I2C_WaitOnTXISFlagUntilTimeout>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e07b      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001690:	781a      	ldrb	r2, [r3, #0]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169c:	1c5a      	adds	r2, r3, #1
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b01      	subs	r3, #1
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d034      	beq.n	8001730 <HAL_I2C_Mem_Write+0x1c8>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d130      	bne.n	8001730 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d4:	2200      	movs	r2, #0
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f8d1 	bl	8001880 <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e04d      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	2bff      	cmp	r3, #255	; 0xff
 80016f0:	d90e      	bls.n	8001710 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	22ff      	movs	r2, #255	; 0xff
 80016f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	8979      	ldrh	r1, [r7, #10]
 8001700:	2300      	movs	r3, #0
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001708:	68f8      	ldr	r0, [r7, #12]
 800170a:	f000 fa7d 	bl	8001c08 <I2C_TransferConfig>
 800170e:	e00f      	b.n	8001730 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001714:	b29a      	uxth	r2, r3
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800171e:	b2da      	uxtb	r2, r3
 8001720:	8979      	ldrh	r1, [r7, #10]
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f000 fa6c 	bl	8001c08 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001734:	b29b      	uxth	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d19e      	bne.n	8001678 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 f93e 	bl	80019c0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e01a      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2220      	movs	r2, #32
 8001754:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_I2C_Mem_Write+0x224>)
 8001762:	400b      	ands	r3, r1
 8001764:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001782:	2302      	movs	r3, #2
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	fe00e800 	.word	0xfe00e800

08001790 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af02      	add	r7, sp, #8
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	4608      	mov	r0, r1
 800179a:	4611      	mov	r1, r2
 800179c:	461a      	mov	r2, r3
 800179e:	4603      	mov	r3, r0
 80017a0:	817b      	strh	r3, [r7, #10]
 80017a2:	460b      	mov	r3, r1
 80017a4:	813b      	strh	r3, [r7, #8]
 80017a6:	4613      	mov	r3, r2
 80017a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	8979      	ldrh	r1, [r7, #10]
 80017b0:	4b20      	ldr	r3, [pc, #128]	; (8001834 <I2C_RequestMemoryWrite+0xa4>)
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fa25 	bl	8001c08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017be:	69fa      	ldr	r2, [r7, #28]
 80017c0:	69b9      	ldr	r1, [r7, #24]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f000 f8b5 	bl	8001932 <I2C_WaitOnTXISFlagUntilTimeout>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e02c      	b.n	800182c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d105      	bne.n	80017e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80017d8:	893b      	ldrh	r3, [r7, #8]
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	629a      	str	r2, [r3, #40]	; 0x28
 80017e2:	e015      	b.n	8001810 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80017e4:	893b      	ldrh	r3, [r7, #8]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	69b9      	ldr	r1, [r7, #24]
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f000 f89b 	bl	8001932 <I2C_WaitOnTXISFlagUntilTimeout>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e012      	b.n	800182c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001806:	893b      	ldrh	r3, [r7, #8]
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	2200      	movs	r2, #0
 8001818:	2180      	movs	r1, #128	; 0x80
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f000 f830 	bl	8001880 <I2C_WaitOnFlagUntilTimeout>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800182a:	2300      	movs	r3, #0
}
 800182c:	4618      	mov	r0, r3
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	80002000 	.word	0x80002000

08001838 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b02      	cmp	r3, #2
 800184c:	d103      	bne.n	8001856 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b01      	cmp	r3, #1
 8001862:	d007      	beq.n	8001874 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699a      	ldr	r2, [r3, #24]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f042 0201 	orr.w	r2, r2, #1
 8001872:	619a      	str	r2, [r3, #24]
  }
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	60f8      	str	r0, [r7, #12]
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	4613      	mov	r3, r2
 800188e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001890:	e03b      	b.n	800190a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001892:	69ba      	ldr	r2, [r7, #24]
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f8d6 	bl	8001a48 <I2C_IsErrorOccurred>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e041      	b.n	800192a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ac:	d02d      	beq.n	800190a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018ae:	f7ff faad 	bl	8000e0c <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d302      	bcc.n	80018c4 <I2C_WaitOnFlagUntilTimeout+0x44>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d122      	bne.n	800190a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	4013      	ands	r3, r2
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	bf0c      	ite	eq
 80018d4:	2301      	moveq	r3, #1
 80018d6:	2300      	movne	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	461a      	mov	r2, r3
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d113      	bne.n	800190a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f043 0220 	orr.w	r2, r3, #32
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	2220      	movs	r2, #32
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	4013      	ands	r3, r2
 8001914:	68ba      	ldr	r2, [r7, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2db      	uxtb	r3, r3
 8001920:	461a      	mov	r2, r3
 8001922:	79fb      	ldrb	r3, [r7, #7]
 8001924:	429a      	cmp	r2, r3
 8001926:	d0b4      	beq.n	8001892 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	60f8      	str	r0, [r7, #12]
 800193a:	60b9      	str	r1, [r7, #8]
 800193c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800193e:	e033      	b.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f87f 	bl	8001a48 <I2C_IsErrorOccurred>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e031      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195a:	d025      	beq.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800195c:	f7ff fa56 	bl	8000e0c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	429a      	cmp	r2, r3
 800196a:	d302      	bcc.n	8001972 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d11a      	bne.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d013      	beq.n	80019a8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001984:	f043 0220 	orr.w	r2, r3, #32
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2220      	movs	r2, #32
 8001990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e007      	b.n	80019b8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d1c4      	bne.n	8001940 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019cc:	e02f      	b.n	8001a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 f838 	bl	8001a48 <I2C_IsErrorOccurred>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e02d      	b.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e2:	f7ff fa13 	bl	8000e0c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	68ba      	ldr	r2, [r7, #8]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d302      	bcc.n	80019f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d11a      	bne.n	8001a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0320 	and.w	r3, r3, #32
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d013      	beq.n	8001a2e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	f043 0220 	orr.w	r2, r3, #32
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e007      	b.n	8001a3e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	699b      	ldr	r3, [r3, #24]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d1c8      	bne.n	80019ce <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d068      	beq.n	8001b46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2210      	movs	r2, #16
 8001a7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001a7c:	e049      	b.n	8001b12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d045      	beq.n	8001b12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a86:	f7ff f9c1 	bl	8000e0c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d302      	bcc.n	8001a9c <I2C_IsErrorOccurred+0x54>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d13a      	bne.n	8001b12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001abe:	d121      	bne.n	8001b04 <I2C_IsErrorOccurred+0xbc>
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ac6:	d01d      	beq.n	8001b04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001ac8:	7cfb      	ldrb	r3, [r7, #19]
 8001aca:	2b20      	cmp	r3, #32
 8001acc:	d01a      	beq.n	8001b04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001adc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001ade:	f7ff f995 	bl	8000e0c <HAL_GetTick>
 8001ae2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ae4:	e00e      	b.n	8001b04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ae6:	f7ff f991 	bl	8000e0c <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b19      	cmp	r3, #25
 8001af2:	d907      	bls.n	8001b04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
 8001af6:	f043 0320 	orr.w	r3, r3, #32
 8001afa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8001b02:	e006      	b.n	8001b12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f003 0320 	and.w	r3, r3, #32
 8001b0e:	2b20      	cmp	r3, #32
 8001b10:	d1e9      	bne.n	8001ae6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f003 0320 	and.w	r3, r3, #32
 8001b1c:	2b20      	cmp	r3, #32
 8001b1e:	d003      	beq.n	8001b28 <I2C_IsErrorOccurred+0xe0>
 8001b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d0aa      	beq.n	8001a7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2220      	movs	r2, #32
 8001b36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	f043 0304 	orr.w	r3, r3, #4
 8001b3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001b58:	6a3b      	ldr	r3, [r7, #32]
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d00b      	beq.n	8001b92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001b7a:	6a3b      	ldr	r3, [r7, #32]
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00b      	beq.n	8001bb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d01c      	beq.n	8001bf6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001bbc:	68f8      	ldr	r0, [r7, #12]
 8001bbe:	f7ff fe3b 	bl	8001838 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6859      	ldr	r1, [r3, #4]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	4b0d      	ldr	r3, [pc, #52]	; (8001c04 <I2C_IsErrorOccurred+0x1bc>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2220      	movs	r2, #32
 8001be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	fe00e800 	.word	0xfe00e800

08001c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b087      	sub	sp, #28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	607b      	str	r3, [r7, #4]
 8001c12:	460b      	mov	r3, r1
 8001c14:	817b      	strh	r3, [r7, #10]
 8001c16:	4613      	mov	r3, r2
 8001c18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c20:	7a7b      	ldrb	r3, [r7, #9]
 8001c22:	041b      	lsls	r3, r3, #16
 8001c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c2e:	6a3b      	ldr	r3, [r7, #32]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	685a      	ldr	r2, [r3, #4]
 8001c3e:	6a3b      	ldr	r3, [r7, #32]
 8001c40:	0d5b      	lsrs	r3, r3, #21
 8001c42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001c46:	4b08      	ldr	r3, [pc, #32]	; (8001c68 <I2C_TransferConfig+0x60>)
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	ea02 0103 	and.w	r1, r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c5a:	bf00      	nop
 8001c5c:	371c      	adds	r7, #28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	03ff63ff 	.word	0x03ff63ff

08001c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d138      	bne.n	8001cf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e032      	b.n	8001cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2224      	movs	r2, #36	; 0x24
 8001c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6819      	ldr	r1, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0201 	orr.w	r2, r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2220      	movs	r2, #32
 8001ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	e000      	b.n	8001cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001cf4:	2302      	movs	r3, #2
  }
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d139      	bne.n	8001d8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d101      	bne.n	8001d26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001d22:	2302      	movs	r3, #2
 8001d24:	e033      	b.n	8001d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2224      	movs	r2, #36	; 0x24
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0201 	bic.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2220      	movs	r2, #32
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	e000      	b.n	8001d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
  }
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d141      	bne.n	8001e2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001daa:	4b4b      	ldr	r3, [pc, #300]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d131      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001db8:	4b47      	ldr	r3, [pc, #284]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dbe:	4a46      	ldr	r2, [pc, #280]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dc8:	4b43      	ldr	r3, [pc, #268]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dd0:	4a41      	ldr	r2, [pc, #260]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001dd8:	4b40      	ldr	r3, [pc, #256]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2232      	movs	r2, #50	; 0x32
 8001dde:	fb02 f303 	mul.w	r3, r2, r3
 8001de2:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001de4:	fba2 2303 	umull	r2, r3, r2, r3
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	3301      	adds	r3, #1
 8001dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dee:	e002      	b.n	8001df6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e02:	d102      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f2      	bne.n	8001df0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e0a:	4b33      	ldr	r3, [pc, #204]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d158      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e057      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e22:	4a2d      	ldr	r2, [pc, #180]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e2c:	e04d      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e34:	d141      	bne.n	8001eba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d131      	bne.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4a:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e54:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2232      	movs	r2, #50	; 0x32
 8001e6a:	fb02 f303 	mul.w	r3, r2, r3
 8001e6e:	4a1c      	ldr	r2, [pc, #112]	; (8001ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	0c9b      	lsrs	r3, r3, #18
 8001e76:	3301      	adds	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e7a:	e002      	b.n	8001e82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e82:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8e:	d102      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f2      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ea2:	d112      	bne.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e011      	b.n	8001ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001eae:	4a0a      	ldr	r2, [pc, #40]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001eb8:	e007      	b.n	8001eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001eba:	4b07      	ldr	r3, [pc, #28]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ec2:	4a05      	ldr	r2, [pc, #20]	; (8001ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ec8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	40007000 	.word	0x40007000
 8001edc:	20000000 	.word	0x20000000
 8001ee0:	431bde83 	.word	0x431bde83

08001ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a04      	ldr	r2, [pc, #16]	; (8001f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef2:	6093      	str	r3, [r2, #8]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40007000 	.word	0x40007000

08001f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b088      	sub	sp, #32
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e2fe      	b.n	8002514 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d075      	beq.n	800200e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f22:	4b97      	ldr	r3, [pc, #604]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 030c 	and.w	r3, r3, #12
 8001f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f2c:	4b94      	ldr	r3, [pc, #592]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	f003 0303 	and.w	r3, r3, #3
 8001f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	2b0c      	cmp	r3, #12
 8001f3a:	d102      	bne.n	8001f42 <HAL_RCC_OscConfig+0x3e>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b03      	cmp	r3, #3
 8001f40:	d002      	beq.n	8001f48 <HAL_RCC_OscConfig+0x44>
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d10b      	bne.n	8001f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f48:	4b8d      	ldr	r3, [pc, #564]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d05b      	beq.n	800200c <HAL_RCC_OscConfig+0x108>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d157      	bne.n	800200c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e2d9      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x74>
 8001f6a:	4b85      	ldr	r3, [pc, #532]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a84      	ldr	r2, [pc, #528]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb0>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x98>
 8001f82:	4b7f      	ldr	r3, [pc, #508]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a7e      	ldr	r2, [pc, #504]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b7c      	ldr	r3, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a7b      	ldr	r2, [pc, #492]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb0>
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a77      	ldr	r2, [pc, #476]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a74      	ldr	r2, [pc, #464]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7fe ff26 	bl	8000e0c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7fe ff22 	bl	8000e0c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	; 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e29e      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xc0>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe4:	f7fe ff12 	bl	8000e0c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7fe ff0e 	bl	8000e0c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e28a      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ffe:	4b60      	ldr	r3, [pc, #384]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0xe8>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d075      	beq.n	8002106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800201a:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	2b0c      	cmp	r3, #12
 8002032:	d102      	bne.n	800203a <HAL_RCC_OscConfig+0x136>
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d002      	beq.n	8002040 <HAL_RCC_OscConfig+0x13c>
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d11f      	bne.n	8002080 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002040:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x154>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d101      	bne.n	8002058 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e25d      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	061b      	lsls	r3, r3, #24
 8002066:	4946      	ldr	r1, [pc, #280]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <HAL_RCC_OscConfig+0x280>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe7f 	bl	8000d74 <HAL_InitTick>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d043      	beq.n	8002104 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e249      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d023      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7fe feba 	bl	8000e0c <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800209c:	f7fe feb6 	bl	8000e0c <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e232      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	061b      	lsls	r3, r3, #24
 80020c8:	492d      	ldr	r1, [pc, #180]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e01a      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020d0:	4b2b      	ldr	r3, [pc, #172]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fe96 	bl	8000e0c <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020e4:	f7fe fe92 	bl	8000e0c <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e20e      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020f6:	4b22      	ldr	r3, [pc, #136]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1e0>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d041      	beq.n	8002196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01c      	beq.n	8002154 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800211a:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800211c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002122:	f043 0301 	orr.w	r3, r3, #1
 8002126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212a:	f7fe fe6f 	bl	8000e0c <HAL_GetTick>
 800212e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002130:	e008      	b.n	8002144 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002132:	f7fe fe6b 	bl	8000e0c <HAL_GetTick>
 8002136:	4602      	mov	r2, r0
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	1ad3      	subs	r3, r2, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e1e7      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002144:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0ef      	beq.n	8002132 <HAL_RCC_OscConfig+0x22e>
 8002152:	e020      	b.n	8002196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002154:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 8002156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x27c>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fe52 	bl	8000e0c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800216a:	e00d      	b.n	8002188 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fe4e 	bl	8000e0c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d906      	bls.n	8002188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e1ca      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002188:	4b8c      	ldr	r3, [pc, #560]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1ea      	bne.n	800216c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80a6 	beq.w	80022f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021a8:	4b84      	ldr	r3, [pc, #528]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2b4>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x2b6>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	4a7e      	ldr	r2, [pc, #504]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	; 0x58
 80021ca:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021d6:	2301      	movs	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021da:	4b79      	ldr	r3, [pc, #484]	; (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d118      	bne.n	8002218 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021e6:	4b76      	ldr	r3, [pc, #472]	; (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a75      	ldr	r2, [pc, #468]	; (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 80021ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f2:	f7fe fe0b 	bl	8000e0c <HAL_GetTick>
 80021f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021fa:	f7fe fe07 	bl	8000e0c <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e183      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <HAL_RCC_OscConfig+0x4bc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d108      	bne.n	8002232 <HAL_RCC_OscConfig+0x32e>
 8002220:	4b66      	ldr	r3, [pc, #408]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002226:	4a65      	ldr	r2, [pc, #404]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002230:	e024      	b.n	800227c <HAL_RCC_OscConfig+0x378>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2b05      	cmp	r3, #5
 8002238:	d110      	bne.n	800225c <HAL_RCC_OscConfig+0x358>
 800223a:	4b60      	ldr	r3, [pc, #384]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002240:	4a5e      	ldr	r2, [pc, #376]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800224a:	4b5c      	ldr	r3, [pc, #368]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	4a5a      	ldr	r2, [pc, #360]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800225a:	e00f      	b.n	800227c <HAL_RCC_OscConfig+0x378>
 800225c:	4b57      	ldr	r3, [pc, #348]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800225e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002262:	4a56      	ldr	r2, [pc, #344]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800226e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002272:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002274:	f023 0304 	bic.w	r3, r3, #4
 8002278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d016      	beq.n	80022b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7fe fdc2 	bl	8000e0c <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228c:	f7fe fdbe 	bl	8000e0c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	; 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e138      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022a2:	4b46      	ldr	r3, [pc, #280]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ed      	beq.n	800228c <HAL_RCC_OscConfig+0x388>
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b2:	f7fe fdab 	bl	8000e0c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe fda7 	bl	8000e0c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e121      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022d0:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ed      	bne.n	80022ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022de:	7ffb      	ldrb	r3, [r7, #31]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d105      	bne.n	80022f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e4:	4b35      	ldr	r3, [pc, #212]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a34      	ldr	r2, [pc, #208]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 80022ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0320 	and.w	r3, r3, #32
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d03c      	beq.n	8002376 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d01c      	beq.n	800233e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f043 0301 	orr.w	r3, r3, #1
 8002310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002314:	f7fe fd7a 	bl	8000e0c <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800231c:	f7fe fd76 	bl	8000e0c <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0f2      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0ef      	beq.n	800231c <HAL_RCC_OscConfig+0x418>
 800233c:	e01b      	b.n	8002376 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002344:	4a1d      	ldr	r2, [pc, #116]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f023 0301 	bic.w	r3, r3, #1
 800234a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800234e:	f7fe fd5d 	bl	8000e0c <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002356:	f7fe fd59 	bl	8000e0c <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e0d5      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002368:	4b14      	ldr	r3, [pc, #80]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800236a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d1ef      	bne.n	8002356 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80c9 	beq.w	8002512 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002380:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f003 030c 	and.w	r3, r3, #12
 8002388:	2b0c      	cmp	r3, #12
 800238a:	f000 8083 	beq.w	8002494 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	2b02      	cmp	r3, #2
 8002394:	d15e      	bne.n	8002454 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002396:	4b09      	ldr	r3, [pc, #36]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_RCC_OscConfig+0x4b8>)
 800239c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a2:	f7fe fd33 	bl	8000e0c <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a8:	e00c      	b.n	80023c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023aa:	f7fe fd2f 	bl	8000e0c <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d905      	bls.n	80023c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0ab      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
 80023bc:	40021000 	.word	0x40021000
 80023c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023c4:	4b55      	ldr	r3, [pc, #340]	; (800251c <HAL_RCC_OscConfig+0x618>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d1ec      	bne.n	80023aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023d0:	4b52      	ldr	r3, [pc, #328]	; (800251c <HAL_RCC_OscConfig+0x618>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b52      	ldr	r3, [pc, #328]	; (8002520 <HAL_RCC_OscConfig+0x61c>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	6a11      	ldr	r1, [r2, #32]
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e0:	3a01      	subs	r2, #1
 80023e2:	0112      	lsls	r2, r2, #4
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023ea:	0212      	lsls	r2, r2, #8
 80023ec:	4311      	orrs	r1, r2
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023f2:	0852      	lsrs	r2, r2, #1
 80023f4:	3a01      	subs	r2, #1
 80023f6:	0552      	lsls	r2, r2, #21
 80023f8:	4311      	orrs	r1, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023fe:	0852      	lsrs	r2, r2, #1
 8002400:	3a01      	subs	r2, #1
 8002402:	0652      	lsls	r2, r2, #25
 8002404:	4311      	orrs	r1, r2
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800240a:	06d2      	lsls	r2, r2, #27
 800240c:	430a      	orrs	r2, r1
 800240e:	4943      	ldr	r1, [pc, #268]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002410:	4313      	orrs	r3, r2
 8002412:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a40      	ldr	r2, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x618>)
 800241a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800241e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4a3d      	ldr	r2, [pc, #244]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800242a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fcee 	bl	8000e0c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002434:	f7fe fcea 	bl	8000e0c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e066      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x530>
 8002452:	e05e      	b.n	8002512 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002454:	4b31      	ldr	r3, [pc, #196]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a30      	ldr	r2, [pc, #192]	; (800251c <HAL_RCC_OscConfig+0x618>)
 800245a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800245e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002460:	f7fe fcd4 	bl	8000e0c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002468:	f7fe fcd0 	bl	8000e0c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e04c      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x618>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002486:	4b25      	ldr	r3, [pc, #148]	; (800251c <HAL_RCC_OscConfig+0x618>)
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	4924      	ldr	r1, [pc, #144]	; (800251c <HAL_RCC_OscConfig+0x618>)
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_RCC_OscConfig+0x620>)
 800248e:	4013      	ands	r3, r2
 8002490:	60cb      	str	r3, [r1, #12]
 8002492:	e03e      	b.n	8002512 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	69db      	ldr	r3, [r3, #28]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e039      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x618>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d12c      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024be:	3b01      	subs	r3, #1
 80024c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d123      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d11b      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d113      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	3b01      	subs	r3, #1
 80024f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d109      	bne.n	800250e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	3b01      	subs	r3, #1
 8002508:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3720      	adds	r7, #32
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	019f800c 	.word	0x019f800c
 8002524:	feeefffc 	.word	0xfeeefffc

08002528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d101      	bne.n	8002540 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e11e      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002540:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 030f 	and.w	r3, r3, #15
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	429a      	cmp	r2, r3
 800254c:	d910      	bls.n	8002570 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254e:	4b8e      	ldr	r3, [pc, #568]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 020f 	bic.w	r2, r3, #15
 8002556:	498c      	ldr	r1, [pc, #560]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b8a      	ldr	r3, [pc, #552]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e106      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d073      	beq.n	8002664 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d129      	bne.n	80025d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002584:	4b81      	ldr	r3, [pc, #516]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0f4      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002594:	f000 f99e 	bl	80028d4 <RCC_GetSysClockFreqFromPLLSource>
 8002598:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4a7c      	ldr	r2, [pc, #496]	; (8002790 <HAL_RCC_ClockConfig+0x268>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d93f      	bls.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025a2:	4b7a      	ldr	r3, [pc, #488]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d033      	beq.n	8002622 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d12f      	bne.n	8002622 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025c2:	4b72      	ldr	r3, [pc, #456]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025ca:	4a70      	ldr	r2, [pc, #448]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80025cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	e024      	b.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e0:	4b6a      	ldr	r3, [pc, #424]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0c6      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025f0:	4b66      	ldr	r3, [pc, #408]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0be      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002600:	f000 f8ce 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8002604:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4a61      	ldr	r2, [pc, #388]	; (8002790 <HAL_RCC_ClockConfig+0x268>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d909      	bls.n	8002622 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800260e:	4b5f      	ldr	r3, [pc, #380]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002616:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800261c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b5a      	ldr	r3, [pc, #360]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4957      	ldr	r1, [pc, #348]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002630:	4313      	orrs	r3, r2
 8002632:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fbea 	bl	8000e0c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fbe6 	bl	8000e0c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	; 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e095      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b4e      	ldr	r3, [pc, #312]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800267c:	4b43      	ldr	r3, [pc, #268]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	4a42      	ldr	r2, [pc, #264]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002682:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002686:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d007      	beq.n	80026a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002694:	4b3d      	ldr	r3, [pc, #244]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800269c:	4a3b      	ldr	r2, [pc, #236]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 800269e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4936      	ldr	r1, [pc, #216]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
 80026b6:	e008      	b.n	80026ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d105      	bne.n	80026ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80026be:	4b33      	ldr	r3, [pc, #204]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	4a32      	ldr	r2, [pc, #200]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026ca:	4b2f      	ldr	r3, [pc, #188]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 030f 	and.w	r3, r3, #15
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d21d      	bcs.n	8002714 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 020f 	bic.w	r2, r3, #15
 80026e0:	4929      	ldr	r1, [pc, #164]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026e8:	f7fe fb90 	bl	8000e0c <HAL_GetTick>
 80026ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ee:	e00a      	b.n	8002706 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026f0:	f7fe fb8c 	bl	8000e0c <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fe:	4293      	cmp	r3, r2
 8002700:	d901      	bls.n	8002706 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e03b      	b.n	800277e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002706:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCC_ClockConfig+0x260>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d1ed      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d008      	beq.n	8002732 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002720:	4b1a      	ldr	r3, [pc, #104]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4917      	ldr	r1, [pc, #92]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d009      	beq.n	8002752 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	490f      	ldr	r1, [pc, #60]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 800274e:	4313      	orrs	r3, r2
 8002750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002752:	f000 f825 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 8002756:	4602      	mov	r2, r0
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <HAL_RCC_ClockConfig+0x264>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	490c      	ldr	r1, [pc, #48]	; (8002794 <HAL_RCC_ClockConfig+0x26c>)
 8002764:	5ccb      	ldrb	r3, [r1, r3]
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	fa22 f303 	lsr.w	r3, r2, r3
 800276e:	4a0a      	ldr	r2, [pc, #40]	; (8002798 <HAL_RCC_ClockConfig+0x270>)
 8002770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_RCC_ClockConfig+0x274>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fafc 	bl	8000d74 <HAL_InitTick>
 800277c:	4603      	mov	r3, r0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40022000 	.word	0x40022000
 800278c:	40021000 	.word	0x40021000
 8002790:	04c4b400 	.word	0x04c4b400
 8002794:	080050c4 	.word	0x080050c4
 8002798:	20000000 	.word	0x20000000
 800279c:	20000004 	.word	0x20000004

080027a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80027a6:	4b2c      	ldr	r3, [pc, #176]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	d102      	bne.n	80027b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80027b2:	4b2a      	ldr	r3, [pc, #168]	; (800285c <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	e047      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027b8:	4b27      	ldr	r3, [pc, #156]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027c4:	4b26      	ldr	r3, [pc, #152]	; (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e03e      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027ca:	4b23      	ldr	r3, [pc, #140]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d136      	bne.n	8002844 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3301      	adds	r3, #1
 80027ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027f4:	4a1a      	ldr	r2, [pc, #104]	; (8002860 <HAL_RCC_GetSysClockFreq+0xc0>)
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	4a16      	ldr	r2, [pc, #88]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fe:	68d2      	ldr	r2, [r2, #12]
 8002800:	0a12      	lsrs	r2, r2, #8
 8002802:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	617b      	str	r3, [r7, #20]
      break;
 800280c:	e00c      	b.n	8002828 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800280e:	4a13      	ldr	r2, [pc, #76]	; (800285c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	fbb2 f3f3 	udiv	r3, r2, r3
 8002816:	4a10      	ldr	r2, [pc, #64]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002818:	68d2      	ldr	r2, [r2, #12]
 800281a:	0a12      	lsrs	r2, r2, #8
 800281c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002820:	fb02 f303 	mul.w	r3, r2, r3
 8002824:	617b      	str	r3, [r7, #20]
      break;
 8002826:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetSysClockFreq+0xb8>)
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	0e5b      	lsrs	r3, r3, #25
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	3301      	adds	r3, #1
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	e001      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002848:	693b      	ldr	r3, [r7, #16]
}
 800284a:	4618      	mov	r0, r3
 800284c:	371c      	adds	r7, #28
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	00f42400 	.word	0x00f42400
 8002860:	016e3600 	.word	0x016e3600

08002864 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_RCC_GetHCLKFreq+0x14>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000

0800287c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002880:	f7ff fff0 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	f003 031f 	and.w	r3, r3, #31
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800289c:	4618      	mov	r0, r3
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000
 80028a4:	080050d4 	.word	0x080050d4

080028a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80028ac:	f7ff ffda 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	0adb      	lsrs	r3, r3, #11
 80028b8:	f003 0307 	and.w	r3, r3, #7
 80028bc:	4904      	ldr	r1, [pc, #16]	; (80028d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028be:	5ccb      	ldrb	r3, [r1, r3]
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40021000 	.word	0x40021000
 80028d0:	080050d4 	.word	0x080050d4

080028d4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028da:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	f003 0303 	and.w	r3, r3, #3
 80028e2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e4:	4b1b      	ldr	r3, [pc, #108]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	3301      	adds	r3, #1
 80028f0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	2b03      	cmp	r3, #3
 80028f6:	d10c      	bne.n	8002912 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f8:	4a17      	ldr	r2, [pc, #92]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002900:	4a14      	ldr	r2, [pc, #80]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	0a12      	lsrs	r2, r2, #8
 8002906:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	617b      	str	r3, [r7, #20]
    break;
 8002910:	e00c      	b.n	800292c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800291c:	68d2      	ldr	r2, [r2, #12]
 800291e:	0a12      	lsrs	r2, r2, #8
 8002920:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
    break;
 800292a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800292c:	4b09      	ldr	r3, [pc, #36]	; (8002954 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	0e5b      	lsrs	r3, r3, #25
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	3301      	adds	r3, #1
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	fbb2 f3f3 	udiv	r3, r2, r3
 8002944:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002946:	687b      	ldr	r3, [r7, #4]
}
 8002948:	4618      	mov	r0, r3
 800294a:	371c      	adds	r7, #28
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	40021000 	.word	0x40021000
 8002958:	016e3600 	.word	0x016e3600
 800295c:	00f42400 	.word	0x00f42400

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002968:	2300      	movs	r3, #0
 800296a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800296c:	2300      	movs	r3, #0
 800296e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 8098 	beq.w	8002aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297e:	2300      	movs	r3, #0
 8002980:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002982:	4b43      	ldr	r3, [pc, #268]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10d      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298e:	4b40      	ldr	r3, [pc, #256]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002992:	4a3f      	ldr	r2, [pc, #252]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6593      	str	r3, [r2, #88]	; 0x58
 800299a:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029aa:	4b3a      	ldr	r3, [pc, #232]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a39      	ldr	r2, [pc, #228]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029b6:	f7fe fa29 	bl	8000e0c <HAL_GetTick>
 80029ba:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029bc:	e009      	b.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029be:	f7fe fa25 	bl	8000e0c <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d902      	bls.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	74fb      	strb	r3, [r7, #19]
        break;
 80029d0:	e005      	b.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d2:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0ef      	beq.n	80029be <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029de:	7cfb      	ldrb	r3, [r7, #19]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d159      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e4:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ee:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d01e      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d019      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a0c:	4b20      	ldr	r3, [pc, #128]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a1f      	ldr	r2, [pc, #124]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1c:	4b1c      	ldr	r3, [pc, #112]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a2c:	4a18      	ldr	r2, [pc, #96]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3e:	f7fe f9e5 	bl	8000e0c <HAL_GetTick>
 8002a42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a44:	e00b      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a46:	f7fe f9e1 	bl	8000e0c <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d902      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	74fb      	strb	r3, [r7, #19]
            break;
 8002a5c:	e006      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0ec      	beq.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10b      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a80:	4903      	ldr	r1, [pc, #12]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a88:	e008      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8a:	7cfb      	ldrb	r3, [r7, #19]
 8002a8c:	74bb      	strb	r3, [r7, #18]
 8002a8e:	e005      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9c:	7c7b      	ldrb	r3, [r7, #17]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d105      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa2:	4ba7      	ldr	r3, [pc, #668]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa6:	4aa6      	ldr	r2, [pc, #664]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aba:	4ba1      	ldr	r3, [pc, #644]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f023 0203 	bic.w	r2, r3, #3
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	499d      	ldr	r1, [pc, #628]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002adc:	4b98      	ldr	r3, [pc, #608]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae2:	f023 020c 	bic.w	r2, r3, #12
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	4995      	ldr	r1, [pc, #596]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0304 	and.w	r3, r3, #4
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002afe:	4b90      	ldr	r3, [pc, #576]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	498c      	ldr	r1, [pc, #560]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0308 	and.w	r3, r3, #8
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00a      	beq.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b20:	4b87      	ldr	r3, [pc, #540]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	4984      	ldr	r1, [pc, #528]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0310 	and.w	r3, r3, #16
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d00a      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b42:	4b7f      	ldr	r3, [pc, #508]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	497b      	ldr	r1, [pc, #492]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0320 	and.w	r3, r3, #32
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b64:	4b76      	ldr	r3, [pc, #472]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	4973      	ldr	r1, [pc, #460]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b86:	4b6e      	ldr	r3, [pc, #440]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	496a      	ldr	r1, [pc, #424]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00a      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba8:	4b65      	ldr	r3, [pc, #404]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	4962      	ldr	r1, [pc, #392]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	4959      	ldr	r1, [pc, #356]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00a      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bec:	4b54      	ldr	r3, [pc, #336]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfa:	4951      	ldr	r1, [pc, #324]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c0e:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	4948      	ldr	r1, [pc, #288]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d015      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c30:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4940      	ldr	r1, [pc, #256]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4e:	d105      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c50:	4b3b      	ldr	r3, [pc, #236]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	4a3a      	ldr	r2, [pc, #232]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	4932      	ldr	r1, [pc, #200]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c82:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c86:	d105      	bne.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a2c      	ldr	r2, [pc, #176]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c92:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d015      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002ca0:	4b27      	ldr	r3, [pc, #156]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cae:	4924      	ldr	r1, [pc, #144]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc0:	4b1f      	ldr	r3, [pc, #124]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d015      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cd8:	4b19      	ldr	r3, [pc, #100]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	4916      	ldr	r1, [pc, #88]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cf6:	d105      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf8:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d02:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d019      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d10:	4b0b      	ldr	r3, [pc, #44]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	4908      	ldr	r1, [pc, #32]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d2e:	d109      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d30:	4b03      	ldr	r3, [pc, #12]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a02      	ldr	r2, [pc, #8]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3a:	60d3      	str	r3, [r2, #12]
 8002d3c:	e002      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d015      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d50:	4b29      	ldr	r3, [pc, #164]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5e:	4926      	ldr	r1, [pc, #152]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d6e:	d105      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d70:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d7a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d015      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d96:	4918      	ldr	r1, [pc, #96]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002da2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da6:	d105      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d015      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002dc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dce:	490a      	ldr	r1, [pc, #40]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dde:	d105      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002de6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dea:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dec:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000

08002dfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e049      	b.n	8002ea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d106      	bne.n	8002e28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f7fd feca 	bl	8000bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4610      	mov	r0, r2
 8002e3c:	f000 f8ce 	bl	8002fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d001      	beq.n	8002ec4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e04c      	b.n	8002f5e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a26      	ldr	r2, [pc, #152]	; (8002f6c <HAL_TIM_Base_Start+0xc0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d022      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ede:	d01d      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a22      	ldr	r2, [pc, #136]	; (8002f70 <HAL_TIM_Base_Start+0xc4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d018      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a21      	ldr	r2, [pc, #132]	; (8002f74 <HAL_TIM_Base_Start+0xc8>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a1f      	ldr	r2, [pc, #124]	; (8002f78 <HAL_TIM_Base_Start+0xcc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d00e      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a1e      	ldr	r2, [pc, #120]	; (8002f7c <HAL_TIM_Base_Start+0xd0>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d009      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a1c      	ldr	r2, [pc, #112]	; (8002f80 <HAL_TIM_Base_Start+0xd4>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d004      	beq.n	8002f1c <HAL_TIM_Base_Start+0x70>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1b      	ldr	r2, [pc, #108]	; (8002f84 <HAL_TIM_Base_Start+0xd8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d115      	bne.n	8002f48 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_TIM_Base_Start+0xdc>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d015      	beq.n	8002f5a <HAL_TIM_Base_Start+0xae>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f34:	d011      	beq.n	8002f5a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	e008      	b.n	8002f5a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0201 	orr.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	e000      	b.n	8002f5c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40000c00 	.word	0x40000c00
 8002f7c:	40013400 	.word	0x40013400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40015000 	.word	0x40015000
 8002f88:	00010007 	.word	0x00010007

08002f8c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	6a1a      	ldr	r2, [r3, #32]
 8002f9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10f      	bne.n	8002fc4 <HAL_TIM_Base_Stop+0x38>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6a1a      	ldr	r2, [r3, #32]
 8002faa:	f244 4344 	movw	r3, #17476	; 0x4444
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d107      	bne.n	8002fc4 <HAL_TIM_Base_Stop+0x38>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 0201 	bic.w	r2, r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
	...

08002fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b085      	sub	sp, #20
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a4c      	ldr	r2, [pc, #304]	; (8003120 <TIM_Base_SetConfig+0x144>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d017      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ffa:	d013      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a49      	ldr	r2, [pc, #292]	; (8003124 <TIM_Base_SetConfig+0x148>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00f      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a48      	ldr	r2, [pc, #288]	; (8003128 <TIM_Base_SetConfig+0x14c>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d00b      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a47      	ldr	r2, [pc, #284]	; (800312c <TIM_Base_SetConfig+0x150>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d007      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	4a46      	ldr	r2, [pc, #280]	; (8003130 <TIM_Base_SetConfig+0x154>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d003      	beq.n	8003024 <TIM_Base_SetConfig+0x48>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a45      	ldr	r2, [pc, #276]	; (8003134 <TIM_Base_SetConfig+0x158>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d108      	bne.n	8003036 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800302a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a39      	ldr	r2, [pc, #228]	; (8003120 <TIM_Base_SetConfig+0x144>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d023      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003044:	d01f      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a36      	ldr	r2, [pc, #216]	; (8003124 <TIM_Base_SetConfig+0x148>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01b      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a35      	ldr	r2, [pc, #212]	; (8003128 <TIM_Base_SetConfig+0x14c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d017      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a34      	ldr	r2, [pc, #208]	; (800312c <TIM_Base_SetConfig+0x150>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a33      	ldr	r2, [pc, #204]	; (8003130 <TIM_Base_SetConfig+0x154>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00f      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a33      	ldr	r2, [pc, #204]	; (8003138 <TIM_Base_SetConfig+0x15c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d00b      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a32      	ldr	r2, [pc, #200]	; (800313c <TIM_Base_SetConfig+0x160>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d007      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a31      	ldr	r2, [pc, #196]	; (8003140 <TIM_Base_SetConfig+0x164>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d003      	beq.n	8003086 <TIM_Base_SetConfig+0xaa>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a2c      	ldr	r2, [pc, #176]	; (8003134 <TIM_Base_SetConfig+0x158>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d108      	bne.n	8003098 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	68fa      	ldr	r2, [r7, #12]
 8003094:	4313      	orrs	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a18      	ldr	r2, [pc, #96]	; (8003120 <TIM_Base_SetConfig+0x144>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d013      	beq.n	80030ec <TIM_Base_SetConfig+0x110>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	; (8003130 <TIM_Base_SetConfig+0x154>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d00f      	beq.n	80030ec <TIM_Base_SetConfig+0x110>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a1a      	ldr	r2, [pc, #104]	; (8003138 <TIM_Base_SetConfig+0x15c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d00b      	beq.n	80030ec <TIM_Base_SetConfig+0x110>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a19      	ldr	r2, [pc, #100]	; (800313c <TIM_Base_SetConfig+0x160>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d007      	beq.n	80030ec <TIM_Base_SetConfig+0x110>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a18      	ldr	r2, [pc, #96]	; (8003140 <TIM_Base_SetConfig+0x164>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d003      	beq.n	80030ec <TIM_Base_SetConfig+0x110>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a13      	ldr	r2, [pc, #76]	; (8003134 <TIM_Base_SetConfig+0x158>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b01      	cmp	r3, #1
 8003104:	d105      	bne.n	8003112 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f023 0201 	bic.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]
  }
}
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400
 8003128:	40000800 	.word	0x40000800
 800312c:	40000c00 	.word	0x40000c00
 8003130:	40013400 	.word	0x40013400
 8003134:	40015000 	.word	0x40015000
 8003138:	40014000 	.word	0x40014000
 800313c:	40014400 	.word	0x40014400
 8003140:	40014800 	.word	0x40014800

08003144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003158:	2302      	movs	r3, #2
 800315a:	e074      	b.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2202      	movs	r2, #2
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a34      	ldr	r2, [pc, #208]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d009      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a33      	ldr	r2, [pc, #204]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d004      	beq.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a31      	ldr	r2, [pc, #196]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d108      	bne.n	80031ac <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80031a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80031b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a21      	ldr	r2, [pc, #132]	; (8003254 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d022      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031dc:	d01d      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	; (8003260 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d018      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a1d      	ldr	r2, [pc, #116]	; (8003264 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d013      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d00e      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a15      	ldr	r2, [pc, #84]	; (8003258 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d009      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a18      	ldr	r2, [pc, #96]	; (800326c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d004      	beq.n	800321a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a11      	ldr	r2, [pc, #68]	; (800325c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d10c      	bne.n	8003234 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003220:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	4313      	orrs	r3, r2
 800322a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40013400 	.word	0x40013400
 800325c:	40015000 	.word	0x40015000
 8003260:	40000400 	.word	0x40000400
 8003264:	40000800 	.word	0x40000800
 8003268:	40000c00 	.word	0x40000c00
 800326c:	40014000 	.word	0x40014000

08003270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b082      	sub	sp, #8
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e042      	b.n	8003308 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003288:	2b00      	cmp	r3, #0
 800328a:	d106      	bne.n	800329a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7fd fc39 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2224      	movs	r2, #36	; 0x24
 800329e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0201 	bic.w	r2, r2, #1
 80032b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fb24 	bl	8003908 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f825 	bl	8003310 <UART_SetConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e01b      	b.n	8003308 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0201 	orr.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 fba3 	bl	8003a4c <UART_CheckIdleState>
 8003306:	4603      	mov	r3, r0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3708      	adds	r7, #8
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003314:	b08c      	sub	sp, #48	; 0x30
 8003316:	af00      	add	r7, sp, #0
 8003318:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800331a:	2300      	movs	r3, #0
 800331c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	689a      	ldr	r2, [r3, #8]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	431a      	orrs	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	431a      	orrs	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	4313      	orrs	r3, r2
 8003336:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4baa      	ldr	r3, [pc, #680]	; (80035e8 <UART_SetConfig+0x2d8>)
 8003340:	4013      	ands	r3, r2
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6812      	ldr	r2, [r2, #0]
 8003346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003348:	430b      	orrs	r3, r1
 800334a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	68da      	ldr	r2, [r3, #12]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a9f      	ldr	r2, [pc, #636]	; (80035ec <UART_SetConfig+0x2dc>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	6a1b      	ldr	r3, [r3, #32]
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	4313      	orrs	r3, r2
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003386:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6812      	ldr	r2, [r2, #0]
 800338e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003390:	430b      	orrs	r3, r1
 8003392:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f023 010f 	bic.w	r1, r3, #15
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a90      	ldr	r2, [pc, #576]	; (80035f0 <UART_SetConfig+0x2e0>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d125      	bne.n	8003400 <UART_SetConfig+0xf0>
 80033b4:	4b8f      	ldr	r3, [pc, #572]	; (80035f4 <UART_SetConfig+0x2e4>)
 80033b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d81a      	bhi.n	80033f8 <UART_SetConfig+0xe8>
 80033c2:	a201      	add	r2, pc, #4	; (adr r2, 80033c8 <UART_SetConfig+0xb8>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033d9 	.word	0x080033d9
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	080033e1 	.word	0x080033e1
 80033d4:	080033f1 	.word	0x080033f1
 80033d8:	2301      	movs	r3, #1
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033de:	e116      	b.n	800360e <UART_SetConfig+0x2fe>
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033e6:	e112      	b.n	800360e <UART_SetConfig+0x2fe>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033ee:	e10e      	b.n	800360e <UART_SetConfig+0x2fe>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033f6:	e10a      	b.n	800360e <UART_SetConfig+0x2fe>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80033fe:	e106      	b.n	800360e <UART_SetConfig+0x2fe>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a7c      	ldr	r2, [pc, #496]	; (80035f8 <UART_SetConfig+0x2e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d138      	bne.n	800347c <UART_SetConfig+0x16c>
 800340a:	4b7a      	ldr	r3, [pc, #488]	; (80035f4 <UART_SetConfig+0x2e4>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b0c      	cmp	r3, #12
 8003416:	d82d      	bhi.n	8003474 <UART_SetConfig+0x164>
 8003418:	a201      	add	r2, pc, #4	; (adr r2, 8003420 <UART_SetConfig+0x110>)
 800341a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341e:	bf00      	nop
 8003420:	08003455 	.word	0x08003455
 8003424:	08003475 	.word	0x08003475
 8003428:	08003475 	.word	0x08003475
 800342c:	08003475 	.word	0x08003475
 8003430:	08003465 	.word	0x08003465
 8003434:	08003475 	.word	0x08003475
 8003438:	08003475 	.word	0x08003475
 800343c:	08003475 	.word	0x08003475
 8003440:	0800345d 	.word	0x0800345d
 8003444:	08003475 	.word	0x08003475
 8003448:	08003475 	.word	0x08003475
 800344c:	08003475 	.word	0x08003475
 8003450:	0800346d 	.word	0x0800346d
 8003454:	2300      	movs	r3, #0
 8003456:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800345a:	e0d8      	b.n	800360e <UART_SetConfig+0x2fe>
 800345c:	2302      	movs	r3, #2
 800345e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003462:	e0d4      	b.n	800360e <UART_SetConfig+0x2fe>
 8003464:	2304      	movs	r3, #4
 8003466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800346a:	e0d0      	b.n	800360e <UART_SetConfig+0x2fe>
 800346c:	2308      	movs	r3, #8
 800346e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003472:	e0cc      	b.n	800360e <UART_SetConfig+0x2fe>
 8003474:	2310      	movs	r3, #16
 8003476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800347a:	e0c8      	b.n	800360e <UART_SetConfig+0x2fe>
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a5e      	ldr	r2, [pc, #376]	; (80035fc <UART_SetConfig+0x2ec>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d125      	bne.n	80034d2 <UART_SetConfig+0x1c2>
 8003486:	4b5b      	ldr	r3, [pc, #364]	; (80035f4 <UART_SetConfig+0x2e4>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003490:	2b30      	cmp	r3, #48	; 0x30
 8003492:	d016      	beq.n	80034c2 <UART_SetConfig+0x1b2>
 8003494:	2b30      	cmp	r3, #48	; 0x30
 8003496:	d818      	bhi.n	80034ca <UART_SetConfig+0x1ba>
 8003498:	2b20      	cmp	r3, #32
 800349a:	d00a      	beq.n	80034b2 <UART_SetConfig+0x1a2>
 800349c:	2b20      	cmp	r3, #32
 800349e:	d814      	bhi.n	80034ca <UART_SetConfig+0x1ba>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <UART_SetConfig+0x19a>
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d008      	beq.n	80034ba <UART_SetConfig+0x1aa>
 80034a8:	e00f      	b.n	80034ca <UART_SetConfig+0x1ba>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b0:	e0ad      	b.n	800360e <UART_SetConfig+0x2fe>
 80034b2:	2302      	movs	r3, #2
 80034b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b8:	e0a9      	b.n	800360e <UART_SetConfig+0x2fe>
 80034ba:	2304      	movs	r3, #4
 80034bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c0:	e0a5      	b.n	800360e <UART_SetConfig+0x2fe>
 80034c2:	2308      	movs	r3, #8
 80034c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034c8:	e0a1      	b.n	800360e <UART_SetConfig+0x2fe>
 80034ca:	2310      	movs	r3, #16
 80034cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034d0:	e09d      	b.n	800360e <UART_SetConfig+0x2fe>
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a4a      	ldr	r2, [pc, #296]	; (8003600 <UART_SetConfig+0x2f0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d125      	bne.n	8003528 <UART_SetConfig+0x218>
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <UART_SetConfig+0x2e4>)
 80034de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80034e6:	2bc0      	cmp	r3, #192	; 0xc0
 80034e8:	d016      	beq.n	8003518 <UART_SetConfig+0x208>
 80034ea:	2bc0      	cmp	r3, #192	; 0xc0
 80034ec:	d818      	bhi.n	8003520 <UART_SetConfig+0x210>
 80034ee:	2b80      	cmp	r3, #128	; 0x80
 80034f0:	d00a      	beq.n	8003508 <UART_SetConfig+0x1f8>
 80034f2:	2b80      	cmp	r3, #128	; 0x80
 80034f4:	d814      	bhi.n	8003520 <UART_SetConfig+0x210>
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <UART_SetConfig+0x1f0>
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d008      	beq.n	8003510 <UART_SetConfig+0x200>
 80034fe:	e00f      	b.n	8003520 <UART_SetConfig+0x210>
 8003500:	2300      	movs	r3, #0
 8003502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003506:	e082      	b.n	800360e <UART_SetConfig+0x2fe>
 8003508:	2302      	movs	r3, #2
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800350e:	e07e      	b.n	800360e <UART_SetConfig+0x2fe>
 8003510:	2304      	movs	r3, #4
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003516:	e07a      	b.n	800360e <UART_SetConfig+0x2fe>
 8003518:	2308      	movs	r3, #8
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800351e:	e076      	b.n	800360e <UART_SetConfig+0x2fe>
 8003520:	2310      	movs	r3, #16
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003526:	e072      	b.n	800360e <UART_SetConfig+0x2fe>
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a35      	ldr	r2, [pc, #212]	; (8003604 <UART_SetConfig+0x2f4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d12a      	bne.n	8003588 <UART_SetConfig+0x278>
 8003532:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <UART_SetConfig+0x2e4>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003540:	d01a      	beq.n	8003578 <UART_SetConfig+0x268>
 8003542:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003546:	d81b      	bhi.n	8003580 <UART_SetConfig+0x270>
 8003548:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800354c:	d00c      	beq.n	8003568 <UART_SetConfig+0x258>
 800354e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003552:	d815      	bhi.n	8003580 <UART_SetConfig+0x270>
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <UART_SetConfig+0x250>
 8003558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355c:	d008      	beq.n	8003570 <UART_SetConfig+0x260>
 800355e:	e00f      	b.n	8003580 <UART_SetConfig+0x270>
 8003560:	2300      	movs	r3, #0
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e052      	b.n	800360e <UART_SetConfig+0x2fe>
 8003568:	2302      	movs	r3, #2
 800356a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800356e:	e04e      	b.n	800360e <UART_SetConfig+0x2fe>
 8003570:	2304      	movs	r3, #4
 8003572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003576:	e04a      	b.n	800360e <UART_SetConfig+0x2fe>
 8003578:	2308      	movs	r3, #8
 800357a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800357e:	e046      	b.n	800360e <UART_SetConfig+0x2fe>
 8003580:	2310      	movs	r3, #16
 8003582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003586:	e042      	b.n	800360e <UART_SetConfig+0x2fe>
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a17      	ldr	r2, [pc, #92]	; (80035ec <UART_SetConfig+0x2dc>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d13a      	bne.n	8003608 <UART_SetConfig+0x2f8>
 8003592:	4b18      	ldr	r3, [pc, #96]	; (80035f4 <UART_SetConfig+0x2e4>)
 8003594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800359c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a0:	d01a      	beq.n	80035d8 <UART_SetConfig+0x2c8>
 80035a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a6:	d81b      	bhi.n	80035e0 <UART_SetConfig+0x2d0>
 80035a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ac:	d00c      	beq.n	80035c8 <UART_SetConfig+0x2b8>
 80035ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b2:	d815      	bhi.n	80035e0 <UART_SetConfig+0x2d0>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d003      	beq.n	80035c0 <UART_SetConfig+0x2b0>
 80035b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035bc:	d008      	beq.n	80035d0 <UART_SetConfig+0x2c0>
 80035be:	e00f      	b.n	80035e0 <UART_SetConfig+0x2d0>
 80035c0:	2300      	movs	r3, #0
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c6:	e022      	b.n	800360e <UART_SetConfig+0x2fe>
 80035c8:	2302      	movs	r3, #2
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ce:	e01e      	b.n	800360e <UART_SetConfig+0x2fe>
 80035d0:	2304      	movs	r3, #4
 80035d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035d6:	e01a      	b.n	800360e <UART_SetConfig+0x2fe>
 80035d8:	2308      	movs	r3, #8
 80035da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035de:	e016      	b.n	800360e <UART_SetConfig+0x2fe>
 80035e0:	2310      	movs	r3, #16
 80035e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035e6:	e012      	b.n	800360e <UART_SetConfig+0x2fe>
 80035e8:	cfff69f3 	.word	0xcfff69f3
 80035ec:	40008000 	.word	0x40008000
 80035f0:	40013800 	.word	0x40013800
 80035f4:	40021000 	.word	0x40021000
 80035f8:	40004400 	.word	0x40004400
 80035fc:	40004800 	.word	0x40004800
 8003600:	40004c00 	.word	0x40004c00
 8003604:	40005000 	.word	0x40005000
 8003608:	2310      	movs	r3, #16
 800360a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4aae      	ldr	r2, [pc, #696]	; (80038cc <UART_SetConfig+0x5bc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	f040 8097 	bne.w	8003748 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800361a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800361e:	2b08      	cmp	r3, #8
 8003620:	d823      	bhi.n	800366a <UART_SetConfig+0x35a>
 8003622:	a201      	add	r2, pc, #4	; (adr r2, 8003628 <UART_SetConfig+0x318>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	0800364d 	.word	0x0800364d
 800362c:	0800366b 	.word	0x0800366b
 8003630:	08003655 	.word	0x08003655
 8003634:	0800366b 	.word	0x0800366b
 8003638:	0800365b 	.word	0x0800365b
 800363c:	0800366b 	.word	0x0800366b
 8003640:	0800366b 	.word	0x0800366b
 8003644:	0800366b 	.word	0x0800366b
 8003648:	08003663 	.word	0x08003663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800364c:	f7ff f916 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003650:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003652:	e010      	b.n	8003676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003654:	4b9e      	ldr	r3, [pc, #632]	; (80038d0 <UART_SetConfig+0x5c0>)
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003658:	e00d      	b.n	8003676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800365a:	f7ff f8a1 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800365e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003660:	e009      	b.n	8003676 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003668:	e005      	b.n	8003676 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800366a:	2300      	movs	r3, #0
 800366c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003674:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 8130 	beq.w	80038de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	4a94      	ldr	r2, [pc, #592]	; (80038d4 <UART_SetConfig+0x5c4>)
 8003684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003688:	461a      	mov	r2, r3
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003690:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	4613      	mov	r3, r2
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	4413      	add	r3, r2
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d305      	bcc.n	80036ae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d903      	bls.n	80036b6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80036b4:	e113      	b.n	80038de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	2200      	movs	r2, #0
 80036ba:	60bb      	str	r3, [r7, #8]
 80036bc:	60fa      	str	r2, [r7, #12]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	4a84      	ldr	r2, [pc, #528]	; (80038d4 <UART_SetConfig+0x5c4>)
 80036c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2200      	movs	r2, #0
 80036cc:	603b      	str	r3, [r7, #0]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036d8:	f7fc fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4610      	mov	r0, r2
 80036e2:	4619      	mov	r1, r3
 80036e4:	f04f 0200 	mov.w	r2, #0
 80036e8:	f04f 0300 	mov.w	r3, #0
 80036ec:	020b      	lsls	r3, r1, #8
 80036ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036f2:	0202      	lsls	r2, r0, #8
 80036f4:	6979      	ldr	r1, [r7, #20]
 80036f6:	6849      	ldr	r1, [r1, #4]
 80036f8:	0849      	lsrs	r1, r1, #1
 80036fa:	2000      	movs	r0, #0
 80036fc:	460c      	mov	r4, r1
 80036fe:	4605      	mov	r5, r0
 8003700:	eb12 0804 	adds.w	r8, r2, r4
 8003704:	eb43 0905 	adc.w	r9, r3, r5
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	469a      	mov	sl, r3
 8003710:	4693      	mov	fp, r2
 8003712:	4652      	mov	r2, sl
 8003714:	465b      	mov	r3, fp
 8003716:	4640      	mov	r0, r8
 8003718:	4649      	mov	r1, r9
 800371a:	f7fc fdd1 	bl	80002c0 <__aeabi_uldivmod>
 800371e:	4602      	mov	r2, r0
 8003720:	460b      	mov	r3, r1
 8003722:	4613      	mov	r3, r2
 8003724:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800372c:	d308      	bcc.n	8003740 <UART_SetConfig+0x430>
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003734:	d204      	bcs.n	8003740 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a3a      	ldr	r2, [r7, #32]
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e0ce      	b.n	80038de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003746:	e0ca      	b.n	80038de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003750:	d166      	bne.n	8003820 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003752:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003756:	2b08      	cmp	r3, #8
 8003758:	d827      	bhi.n	80037aa <UART_SetConfig+0x49a>
 800375a:	a201      	add	r2, pc, #4	; (adr r2, 8003760 <UART_SetConfig+0x450>)
 800375c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003760:	08003785 	.word	0x08003785
 8003764:	0800378d 	.word	0x0800378d
 8003768:	08003795 	.word	0x08003795
 800376c:	080037ab 	.word	0x080037ab
 8003770:	0800379b 	.word	0x0800379b
 8003774:	080037ab 	.word	0x080037ab
 8003778:	080037ab 	.word	0x080037ab
 800377c:	080037ab 	.word	0x080037ab
 8003780:	080037a3 	.word	0x080037a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7ff f87a 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800378a:	e014      	b.n	80037b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800378c:	f7ff f88c 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003790:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003792:	e010      	b.n	80037b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003794:	4b4e      	ldr	r3, [pc, #312]	; (80038d0 <UART_SetConfig+0x5c0>)
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003798:	e00d      	b.n	80037b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800379a:	f7ff f801 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800379e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037a0:	e009      	b.n	80037b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80037a8:	e005      	b.n	80037b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80037b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 8090 	beq.w	80038de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	4a44      	ldr	r2, [pc, #272]	; (80038d4 <UART_SetConfig+0x5c4>)
 80037c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037c8:	461a      	mov	r2, r3
 80037ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80037d0:	005a      	lsls	r2, r3, #1
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	085b      	lsrs	r3, r3, #1
 80037d8:	441a      	add	r2, r3
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037e4:	6a3b      	ldr	r3, [r7, #32]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d916      	bls.n	8003818 <UART_SetConfig+0x508>
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f0:	d212      	bcs.n	8003818 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	f023 030f 	bic.w	r3, r3, #15
 80037fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	b29b      	uxth	r3, r3
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	b29a      	uxth	r2, r3
 8003808:	8bfb      	ldrh	r3, [r7, #30]
 800380a:	4313      	orrs	r3, r2
 800380c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	8bfa      	ldrh	r2, [r7, #30]
 8003814:	60da      	str	r2, [r3, #12]
 8003816:	e062      	b.n	80038de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800381e:	e05e      	b.n	80038de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003820:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003824:	2b08      	cmp	r3, #8
 8003826:	d828      	bhi.n	800387a <UART_SetConfig+0x56a>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <UART_SetConfig+0x520>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003855 	.word	0x08003855
 8003834:	0800385d 	.word	0x0800385d
 8003838:	08003865 	.word	0x08003865
 800383c:	0800387b 	.word	0x0800387b
 8003840:	0800386b 	.word	0x0800386b
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800387b 	.word	0x0800387b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003854:	f7ff f812 	bl	800287c <HAL_RCC_GetPCLK1Freq>
 8003858:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800385a:	e014      	b.n	8003886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800385c:	f7ff f824 	bl	80028a8 <HAL_RCC_GetPCLK2Freq>
 8003860:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003862:	e010      	b.n	8003886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <UART_SetConfig+0x5c0>)
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe ff99 	bl	80027a0 <HAL_RCC_GetSysClockFreq>
 800386e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003884:	bf00      	nop
    }

    if (pclk != 0U)
 8003886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d028      	beq.n	80038de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <UART_SetConfig+0x5c4>)
 8003892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003896:	461a      	mov	r2, r3
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	fbb3 f2f2 	udiv	r2, r3, r2
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	441a      	add	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	2b0f      	cmp	r3, #15
 80038b4:	d910      	bls.n	80038d8 <UART_SetConfig+0x5c8>
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038bc:	d20c      	bcs.n	80038d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038be:	6a3b      	ldr	r3, [r7, #32]
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60da      	str	r2, [r3, #12]
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0x5ce>
 80038ca:	bf00      	nop
 80038cc:	40008000 	.word	0x40008000
 80038d0:	00f42400 	.word	0x00f42400
 80038d4:	080050dc 	.word	0x080050dc
      }
      else
      {
        ret = HAL_ERROR;
 80038d8:	2301      	movs	r3, #1
 80038da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2201      	movs	r2, #1
 80038e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	2200      	movs	r2, #0
 80038f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80038fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3730      	adds	r7, #48	; 0x30
 8003902:	46bd      	mov	sp, r7
 8003904:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003908 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	f003 0302 	and.w	r3, r3, #2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397a:	f003 0304 	and.w	r3, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399c:	f003 0310 	and.w	r3, r3, #16
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039be:	f003 0320 	and.w	r3, r3, #32
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01a      	beq.n	8003a1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a06:	d10a      	bne.n	8003a1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	430a      	orrs	r2, r1
 8003a3e:	605a      	str	r2, [r3, #4]
  }
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b098      	sub	sp, #96	; 0x60
 8003a50:	af02      	add	r7, sp, #8
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a5c:	f7fd f9d6 	bl	8000e0c <HAL_GetTick>
 8003a60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d12f      	bne.n	8003ad0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f88e 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d022      	beq.n	8003ad0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a92:	e853 3f00 	ldrex	r3, [r3]
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	647b      	str	r3, [r7, #68]	; 0x44
 8003aaa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ab0:	e841 2300 	strex	r3, r2, [r1]
 8003ab4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1e6      	bne.n	8003a8a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e063      	b.n	8003b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0304 	and.w	r3, r3, #4
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d149      	bne.n	8003b72 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ade:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f857 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d03c      	beq.n	8003b72 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	e853 3f00 	ldrex	r3, [r3]
 8003b04:	623b      	str	r3, [r7, #32]
   return(result);
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	461a      	mov	r2, r3
 8003b14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b16:	633b      	str	r3, [r7, #48]	; 0x30
 8003b18:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e6      	bne.n	8003af8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	3308      	adds	r3, #8
 8003b30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	e853 3f00 	ldrex	r3, [r3]
 8003b38:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f023 0301 	bic.w	r3, r3, #1
 8003b40:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	3308      	adds	r3, #8
 8003b48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b4a:	61fa      	str	r2, [r7, #28]
 8003b4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4e:	69b9      	ldr	r1, [r7, #24]
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	e841 2300 	strex	r3, r2, [r1]
 8003b56:	617b      	str	r3, [r7, #20]
   return(result);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1e5      	bne.n	8003b2a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e012      	b.n	8003b98 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2220      	movs	r2, #32
 8003b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3758      	adds	r7, #88	; 0x58
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}

08003ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	4613      	mov	r3, r2
 8003bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb0:	e04f      	b.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d04b      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd f927 	bl	8000e0c <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	69ba      	ldr	r2, [r7, #24]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e04e      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0304 	and.w	r3, r3, #4
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d037      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	2b80      	cmp	r3, #128	; 0x80
 8003be6:	d034      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	2b40      	cmp	r3, #64	; 0x40
 8003bec:	d031      	beq.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	69db      	ldr	r3, [r3, #28]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b08      	cmp	r3, #8
 8003bfa:	d110      	bne.n	8003c1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2208      	movs	r2, #8
 8003c02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f838 	bl	8003c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2208      	movs	r2, #8
 8003c0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e029      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	69db      	ldr	r3, [r3, #28]
 8003c24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c2c:	d111      	bne.n	8003c52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f81e 	bl	8003c7a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e00f      	b.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	68ba      	ldr	r2, [r7, #8]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	bf0c      	ite	eq
 8003c62:	2301      	moveq	r3, #1
 8003c64:	2300      	movne	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	461a      	mov	r2, r3
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d0a0      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b095      	sub	sp, #84	; 0x54
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	643b      	str	r3, [r7, #64]	; 0x40
 8003ca2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ca6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ca8:	e841 2300 	strex	r3, r2, [r1]
 8003cac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d1e6      	bne.n	8003c82 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3308      	adds	r3, #8
 8003cba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	e853 3f00 	ldrex	r3, [r3]
 8003cc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	3308      	adds	r3, #8
 8003cd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce0:	e841 2300 	strex	r3, r2, [r1]
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d1e3      	bne.n	8003cb4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d118      	bne.n	8003d26 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f023 0310 	bic.w	r3, r3, #16
 8003d08:	647b      	str	r3, [r7, #68]	; 0x44
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d12:	61bb      	str	r3, [r7, #24]
 8003d14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6979      	ldr	r1, [r7, #20]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e6      	bne.n	8003cf4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003d3a:	bf00      	nop
 8003d3c:	3754      	adds	r7, #84	; 0x54
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b085      	sub	sp, #20
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d101      	bne.n	8003d5c <HAL_UARTEx_DisableFifoMode+0x16>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	e027      	b.n	8003dac <HAL_UARTEx_DisableFifoMode+0x66>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2224      	movs	r2, #36	; 0x24
 8003d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f022 0201 	bic.w	r2, r2, #1
 8003d82:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003d8a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3714      	adds	r7, #20
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e02d      	b.n	8003e2c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	; 0x24
 8003ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f022 0201 	bic.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f84f 	bl	8003eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003e48:	2302      	movs	r3, #2
 8003e4a:	e02d      	b.n	8003ea8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2224      	movs	r2, #36	; 0x24
 8003e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f811 	bl	8003eb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d108      	bne.n	8003ed2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ed0:	e031      	b.n	8003f36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	0e5b      	lsrs	r3, r3, #25
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	0f5b      	lsrs	r3, r3, #29
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003efa:	7bbb      	ldrb	r3, [r7, #14]
 8003efc:	7b3a      	ldrb	r2, [r7, #12]
 8003efe:	4911      	ldr	r1, [pc, #68]	; (8003f44 <UARTEx_SetNbDataToProcess+0x94>)
 8003f00:	5c8a      	ldrb	r2, [r1, r2]
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003f06:	7b3a      	ldrb	r2, [r7, #12]
 8003f08:	490f      	ldr	r1, [pc, #60]	; (8003f48 <UARTEx_SetNbDataToProcess+0x98>)
 8003f0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003f0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
 8003f1a:	7b7a      	ldrb	r2, [r7, #13]
 8003f1c:	4909      	ldr	r1, [pc, #36]	; (8003f44 <UARTEx_SetNbDataToProcess+0x94>)
 8003f1e:	5c8a      	ldrb	r2, [r1, r2]
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003f24:	7b7a      	ldrb	r2, [r7, #13]
 8003f26:	4908      	ldr	r1, [pc, #32]	; (8003f48 <UARTEx_SetNbDataToProcess+0x98>)
 8003f28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003f2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	080050f4 	.word	0x080050f4
 8003f48:	080050fc 	.word	0x080050fc

08003f4c <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
 8003f58:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	609a      	str	r2, [r3, #8]
	dht->port = port;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	887a      	ldrh	r2, [r7, #2]
 8003f6a:	809a      	strh	r2, [r3, #4]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b088      	sub	sp, #32
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 030c 	add.w	r3, r7, #12
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8003f94:	78fb      	ldrb	r3, [r7, #3]
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d111      	bne.n	8003fbe <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	889b      	ldrh	r3, [r3, #4]
 8003f9e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa8:	2303      	movs	r3, #3
 8003faa:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f107 020c 	add.w	r2, r7, #12
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f866 	bl	8001088 <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8003fbc:	e013      	b.n	8003fe6 <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8003fbe:	78fb      	ldrb	r3, [r7, #3]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d110      	bne.n	8003fe6 <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	889b      	ldrh	r3, [r3, #4]
 8003fc8:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f107 020c 	add.w	r2, r7, #12
 8003fde:	4611      	mov	r1, r2
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd f851 	bl	8001088 <HAL_GPIO_Init>
}
 8003fe6:	bf00      	nop
 8003fe8:	3720      	adds	r7, #32
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}

08003fee <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8003fee:	b580      	push	{r7, lr}
 8003ff0:	b094      	sub	sp, #80	; 0x50
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8004004:	2300      	movs	r3, #0
 8004006:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800400a:	2300      	movs	r3, #0
 800400c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8004010:	2300      	movs	r3, #0
 8004012:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 8004016:	2300      	movs	r3, #0
 8004018:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 800401c:	2101      	movs	r1, #1
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f7ff ffaa 	bl	8003f78 <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6818      	ldr	r0, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	889b      	ldrh	r3, [r3, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	4619      	mov	r1, r3
 8004030:	f7fd f9c4 	bl	80013bc <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 8004034:	2012      	movs	r0, #18
 8004036:	f7fc fef5 	bl	8000e24 <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 800403a:	b672      	cpsid	i
}
 800403c:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f7fe ff32 	bl	8002eac <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 8004048:	2100      	movs	r1, #0
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7ff ff94 	bl	8003f78 <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800405a:	e00b      	b.n	8004074 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	b29b      	uxth	r3, r3
 8004066:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800406a:	d903      	bls.n	8004074 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 800406c:	b662      	cpsie	i
}
 800406e:	bf00      	nop
			__enable_irq();
			return 0;
 8004070:	2300      	movs	r3, #0
 8004072:	e130      	b.n	80042d6 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	889b      	ldrh	r3, [r3, #4]
 800407c:	4619      	mov	r1, r3
 800407e:	4610      	mov	r0, r2
 8004080:	f7fd f984 	bl	800138c <HAL_GPIO_ReadPin>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d0e8      	beq.n	800405c <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2200      	movs	r2, #0
 8004092:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8004094:	e00b      	b.n	80040ae <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040a4:	d903      	bls.n	80040ae <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 80040a6:	b662      	cpsie	i
}
 80040a8:	bf00      	nop
			__enable_irq();
			return 0;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e113      	b.n	80042d6 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	889b      	ldrh	r3, [r3, #4]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7fd f967 	bl	800138c <HAL_GPIO_ReadPin>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d0e8      	beq.n	8004096 <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040cc:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2200      	movs	r2, #0
 80040d6:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80040d8:	e00b      	b.n	80040f2 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80040e8:	d903      	bls.n	80040f2 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 80040ea:	b662      	cpsie	i
}
 80040ec:	bf00      	nop
			__enable_irq();
			return 0;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e0f1      	b.n	80042d6 <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	889b      	ldrh	r3, [r3, #4]
 80040fa:	4619      	mov	r1, r3
 80040fc:	4610      	mov	r0, r2
 80040fe:	f7fd f945 	bl	800138c <HAL_GPIO_ReadPin>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d0e8      	beq.n	80040da <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8004112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004114:	2b4a      	cmp	r3, #74	; 0x4a
 8004116:	d80c      	bhi.n	8004132 <readDHT11+0x144>
 8004118:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800411a:	2b55      	cmp	r3, #85	; 0x55
 800411c:	d909      	bls.n	8004132 <readDHT11+0x144>
 800411e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004120:	2b4a      	cmp	r3, #74	; 0x4a
 8004122:	d806      	bhi.n	8004132 <readDHT11+0x144>
 8004124:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004126:	2b55      	cmp	r3, #85	; 0x55
 8004128:	d903      	bls.n	8004132 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 800412a:	b662      	cpsie	i
}
 800412c:	bf00      	nop
	{
		__enable_irq();
		return 0;
 800412e:	2300      	movs	r3, #0
 8004130:	e0d1      	b.n	80042d6 <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 8004132:	2300      	movs	r3, #0
 8004134:	647b      	str	r3, [r7, #68]	; 0x44
 8004136:	e05d      	b.n	80041f4 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2200      	movs	r2, #0
 8004140:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8004142:	e00b      	b.n	800415c <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	b29b      	uxth	r3, r3
 800414e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004152:	d903      	bls.n	800415c <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 8004154:	b662      	cpsie	i
}
 8004156:	bf00      	nop
				__enable_irq();
				return 0;
 8004158:	2300      	movs	r3, #0
 800415a:	e0bc      	b.n	80042d6 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	889b      	ldrh	r3, [r3, #4]
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f7fd f910 	bl	800138c <HAL_GPIO_ReadPin>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0e8      	beq.n	8004144 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2200      	movs	r2, #0
 800417a:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800417c:	e00b      	b.n	8004196 <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	b29b      	uxth	r3, r3
 8004188:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800418c:	d903      	bls.n	8004196 <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 800418e:	b662      	cpsie	i
}
 8004190:	bf00      	nop
				__enable_irq();
				return 0;
 8004192:	2300      	movs	r3, #0
 8004194:	e09f      	b.n	80042d6 <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	889b      	ldrh	r3, [r3, #4]
 800419e:	4619      	mov	r1, r3
 80041a0:	4610      	mov	r0, r2
 80041a2:	f7fd f8f3 	bl	800138c <HAL_GPIO_ReadPin>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d0e8      	beq.n	800417e <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 80041b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b8:	2b14      	cmp	r3, #20
 80041ba:	d906      	bls.n	80041ca <readDHT11+0x1dc>
 80041bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041be:	2b1d      	cmp	r3, #29
 80041c0:	d803      	bhi.n	80041ca <readDHT11+0x1dc>
		{
			mBit = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80041c8:	e008      	b.n	80041dc <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 80041ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041cc:	2b3c      	cmp	r3, #60	; 0x3c
 80041ce:	d905      	bls.n	80041dc <readDHT11+0x1ee>
 80041d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041d2:	2b4f      	cmp	r3, #79	; 0x4f
 80041d4:	d802      	bhi.n	80041dc <readDHT11+0x1ee>
		{
			 mBit = 1;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 80041dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80041e0:	b2d9      	uxtb	r1, r3
 80041e2:	f107 0208 	add.w	r2, r7, #8
 80041e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e8:	4413      	add	r3, r2
 80041ea:	460a      	mov	r2, r1
 80041ec:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 80041ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f0:	3301      	adds	r3, #1
 80041f2:	647b      	str	r3, [r7, #68]	; 0x44
 80041f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f6:	2b27      	cmp	r3, #39	; 0x27
 80041f8:	dd9e      	ble.n	8004138 <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7fe fec4 	bl	8002f8c <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8004204:	b662      	cpsie	i
}
 8004206:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 8004208:	2300      	movs	r3, #0
 800420a:	643b      	str	r3, [r7, #64]	; 0x40
 800420c:	e011      	b.n	8004232 <readDHT11+0x244>
	{
		humVal += mData[i];
 800420e:	f107 0208 	add.w	r2, r7, #8
 8004212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004214:	4413      	add	r3, r2
 8004216:	781a      	ldrb	r2, [r3, #0]
 8004218:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800421c:	4413      	add	r3, r2
 800421e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8004222:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 800422c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422e:	3301      	adds	r3, #1
 8004230:	643b      	str	r3, [r7, #64]	; 0x40
 8004232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004234:	2b07      	cmp	r3, #7
 8004236:	ddea      	ble.n	800420e <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 8004238:	2310      	movs	r3, #16
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800423c:	e011      	b.n	8004262 <readDHT11+0x274>
	{
		tempVal += mData[i];
 800423e:	f107 0208 	add.w	r2, r7, #8
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	4413      	add	r3, r2
 8004246:	781a      	ldrb	r2, [r3, #0]
 8004248:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800424c:	4413      	add	r3, r2
 800424e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 8004252:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004256:	005b      	lsls	r3, r3, #1
 8004258:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 800425c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425e:	3301      	adds	r3, #1
 8004260:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004264:	2b17      	cmp	r3, #23
 8004266:	ddea      	ble.n	800423e <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 8004268:	2320      	movs	r3, #32
 800426a:	63bb      	str	r3, [r7, #56]	; 0x38
 800426c:	e011      	b.n	8004292 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 800426e:	f107 0208 	add.w	r2, r7, #8
 8004272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004274:	4413      	add	r3, r2
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800427c:	4413      	add	r3, r2
 800427e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 8004282:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	3301      	adds	r3, #1
 8004290:	63bb      	str	r3, [r7, #56]	; 0x38
 8004292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004294:	2b27      	cmp	r3, #39	; 0x27
 8004296:	ddea      	ble.n	800426e <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8004298:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800429c:	085b      	lsrs	r3, r3, #1
 800429e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 80042a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80042a6:	085b      	lsrs	r3, r3, #1
 80042a8:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 80042ac:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80042b0:	085b      	lsrs	r3, r3, #1
 80042b2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 80042b6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042ba:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80042be:	4413      	add	r3, r2
 80042c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 80042ca:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80042d2:	735a      	strb	r2, [r3, #13]


	return 1;
 80042d4:	2301      	movs	r3, #1
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3750      	adds	r7, #80	; 0x50
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80042de:	b480      	push	{r7}
 80042e0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80042e2:	bf00      	nop
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	4603      	mov	r3, r0
 80042f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	9302      	str	r3, [sp, #8]
 80042fc:	2301      	movs	r3, #1
 80042fe:	9301      	str	r3, [sp, #4]
 8004300:	1dfb      	adds	r3, r7, #7
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	2301      	movs	r3, #1
 8004306:	2200      	movs	r2, #0
 8004308:	2178      	movs	r1, #120	; 0x78
 800430a:	4803      	ldr	r0, [pc, #12]	; (8004318 <ssd1306_WriteCommand+0x2c>)
 800430c:	f7fd f92c 	bl	8001568 <HAL_I2C_Mem_Write>
}
 8004310:	bf00      	nop
 8004312:	3708      	adds	r7, #8
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000078 	.word	0x20000078

0800431c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b086      	sub	sp, #24
 8004320:	af04      	add	r7, sp, #16
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	b29b      	uxth	r3, r3
 800432a:	f04f 32ff 	mov.w	r2, #4294967295
 800432e:	9202      	str	r2, [sp, #8]
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	2301      	movs	r3, #1
 8004338:	2240      	movs	r2, #64	; 0x40
 800433a:	2178      	movs	r1, #120	; 0x78
 800433c:	4803      	ldr	r0, [pc, #12]	; (800434c <ssd1306_WriteData+0x30>)
 800433e:	f7fd f913 	bl	8001568 <HAL_I2C_Mem_Write>
}
 8004342:	bf00      	nop
 8004344:	3708      	adds	r7, #8
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	20000078 	.word	0x20000078

08004350 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004350:	b580      	push	{r7, lr}
 8004352:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004354:	f7ff ffc3 	bl	80042de <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004358:	2064      	movs	r0, #100	; 0x64
 800435a:	f7fc fd63 	bl	8000e24 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800435e:	2000      	movs	r0, #0
 8004360:	f000 f9d8 	bl	8004714 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004364:	2020      	movs	r0, #32
 8004366:	f7ff ffc1 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800436a:	2000      	movs	r0, #0
 800436c:	f7ff ffbe 	bl	80042ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004370:	20b0      	movs	r0, #176	; 0xb0
 8004372:	f7ff ffbb 	bl	80042ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8004376:	20c8      	movs	r0, #200	; 0xc8
 8004378:	f7ff ffb8 	bl	80042ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800437c:	2000      	movs	r0, #0
 800437e:	f7ff ffb5 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004382:	2010      	movs	r0, #16
 8004384:	f7ff ffb2 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004388:	2040      	movs	r0, #64	; 0x40
 800438a:	f7ff ffaf 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800438e:	20ff      	movs	r0, #255	; 0xff
 8004390:	f000 f9ac 	bl	80046ec <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8004394:	20a1      	movs	r0, #161	; 0xa1
 8004396:	f7ff ffa9 	bl	80042ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800439a:	20a6      	movs	r0, #166	; 0xa6
 800439c:	f7ff ffa6 	bl	80042ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80043a0:	20a8      	movs	r0, #168	; 0xa8
 80043a2:	f7ff ffa3 	bl	80042ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80043a6:	203f      	movs	r0, #63	; 0x3f
 80043a8:	f7ff ffa0 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80043ac:	20a4      	movs	r0, #164	; 0xa4
 80043ae:	f7ff ff9d 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80043b2:	20d3      	movs	r0, #211	; 0xd3
 80043b4:	f7ff ff9a 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80043b8:	2000      	movs	r0, #0
 80043ba:	f7ff ff97 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80043be:	20d5      	movs	r0, #213	; 0xd5
 80043c0:	f7ff ff94 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80043c4:	20f0      	movs	r0, #240	; 0xf0
 80043c6:	f7ff ff91 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80043ca:	20d9      	movs	r0, #217	; 0xd9
 80043cc:	f7ff ff8e 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80043d0:	2022      	movs	r0, #34	; 0x22
 80043d2:	f7ff ff8b 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80043d6:	20da      	movs	r0, #218	; 0xda
 80043d8:	f7ff ff88 	bl	80042ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80043dc:	2012      	movs	r0, #18
 80043de:	f7ff ff85 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80043e2:	20db      	movs	r0, #219	; 0xdb
 80043e4:	f7ff ff82 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80043e8:	2020      	movs	r0, #32
 80043ea:	f7ff ff7f 	bl	80042ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80043ee:	208d      	movs	r0, #141	; 0x8d
 80043f0:	f7ff ff7c 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80043f4:	2014      	movs	r0, #20
 80043f6:	f7ff ff79 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80043fa:	2001      	movs	r0, #1
 80043fc:	f000 f98a 	bl	8004714 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8004400:	2000      	movs	r0, #0
 8004402:	f000 f80f 	bl	8004424 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004406:	f000 f825 	bl	8004454 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <ssd1306_Init+0xd0>)
 800440c:	2200      	movs	r2, #0
 800440e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8004410:	4b03      	ldr	r3, [pc, #12]	; (8004420 <ssd1306_Init+0xd0>)
 8004412:	2200      	movs	r2, #0
 8004414:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004416:	4b02      	ldr	r3, [pc, #8]	; (8004420 <ssd1306_Init+0xd0>)
 8004418:	2201      	movs	r2, #1
 800441a:	711a      	strb	r2, [r3, #4]
}
 800441c:	bf00      	nop
 800441e:	bd80      	pop	{r7, pc}
 8004420:	200005c8 	.word	0x200005c8

08004424 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <ssd1306_Fill+0x14>
 8004434:	2300      	movs	r3, #0
 8004436:	e000      	b.n	800443a <ssd1306_Fill+0x16>
 8004438:	23ff      	movs	r3, #255	; 0xff
 800443a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800443e:	4619      	mov	r1, r3
 8004440:	4803      	ldr	r0, [pc, #12]	; (8004450 <ssd1306_Fill+0x2c>)
 8004442:	f000 f9a5 	bl	8004790 <memset>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	200001c8 	.word	0x200001c8

08004454 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800445a:	2300      	movs	r3, #0
 800445c:	71fb      	strb	r3, [r7, #7]
 800445e:	e016      	b.n	800448e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8004460:	79fb      	ldrb	r3, [r7, #7]
 8004462:	3b50      	subs	r3, #80	; 0x50
 8004464:	b2db      	uxtb	r3, r3
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff ff40 	bl	80042ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800446c:	2000      	movs	r0, #0
 800446e:	f7ff ff3d 	bl	80042ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8004472:	2010      	movs	r0, #16
 8004474:	f7ff ff3a 	bl	80042ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8004478:	79fb      	ldrb	r3, [r7, #7]
 800447a:	01db      	lsls	r3, r3, #7
 800447c:	4a08      	ldr	r2, [pc, #32]	; (80044a0 <ssd1306_UpdateScreen+0x4c>)
 800447e:	4413      	add	r3, r2
 8004480:	2180      	movs	r1, #128	; 0x80
 8004482:	4618      	mov	r0, r3
 8004484:	f7ff ff4a 	bl	800431c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	3301      	adds	r3, #1
 800448c:	71fb      	strb	r3, [r7, #7]
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	2b07      	cmp	r3, #7
 8004492:	d9e5      	bls.n	8004460 <ssd1306_UpdateScreen+0xc>
    }
}
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3708      	adds	r7, #8
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
 800449e:	bf00      	nop
 80044a0:	200001c8 	.word	0x200001c8

080044a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
 80044ae:	460b      	mov	r3, r1
 80044b0:	71bb      	strb	r3, [r7, #6]
 80044b2:	4613      	mov	r3, r2
 80044b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80044b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	db3d      	blt.n	800453a <ssd1306_DrawPixel+0x96>
 80044be:	79bb      	ldrb	r3, [r7, #6]
 80044c0:	2b3f      	cmp	r3, #63	; 0x3f
 80044c2:	d83a      	bhi.n	800453a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80044c4:	797b      	ldrb	r3, [r7, #5]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d11a      	bne.n	8004500 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80044ca:	79fa      	ldrb	r2, [r7, #7]
 80044cc:	79bb      	ldrb	r3, [r7, #6]
 80044ce:	08db      	lsrs	r3, r3, #3
 80044d0:	b2d8      	uxtb	r0, r3
 80044d2:	4603      	mov	r3, r0
 80044d4:	01db      	lsls	r3, r3, #7
 80044d6:	4413      	add	r3, r2
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <ssd1306_DrawPixel+0xa4>)
 80044da:	5cd3      	ldrb	r3, [r2, r3]
 80044dc:	b25a      	sxtb	r2, r3
 80044de:	79bb      	ldrb	r3, [r7, #6]
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	2101      	movs	r1, #1
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	b25b      	sxtb	r3, r3
 80044ec:	4313      	orrs	r3, r2
 80044ee:	b259      	sxtb	r1, r3
 80044f0:	79fa      	ldrb	r2, [r7, #7]
 80044f2:	4603      	mov	r3, r0
 80044f4:	01db      	lsls	r3, r3, #7
 80044f6:	4413      	add	r3, r2
 80044f8:	b2c9      	uxtb	r1, r1
 80044fa:	4a13      	ldr	r2, [pc, #76]	; (8004548 <ssd1306_DrawPixel+0xa4>)
 80044fc:	54d1      	strb	r1, [r2, r3]
 80044fe:	e01d      	b.n	800453c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8004500:	79fa      	ldrb	r2, [r7, #7]
 8004502:	79bb      	ldrb	r3, [r7, #6]
 8004504:	08db      	lsrs	r3, r3, #3
 8004506:	b2d8      	uxtb	r0, r3
 8004508:	4603      	mov	r3, r0
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	4413      	add	r3, r2
 800450e:	4a0e      	ldr	r2, [pc, #56]	; (8004548 <ssd1306_DrawPixel+0xa4>)
 8004510:	5cd3      	ldrb	r3, [r2, r3]
 8004512:	b25a      	sxtb	r2, r3
 8004514:	79bb      	ldrb	r3, [r7, #6]
 8004516:	f003 0307 	and.w	r3, r3, #7
 800451a:	2101      	movs	r1, #1
 800451c:	fa01 f303 	lsl.w	r3, r1, r3
 8004520:	b25b      	sxtb	r3, r3
 8004522:	43db      	mvns	r3, r3
 8004524:	b25b      	sxtb	r3, r3
 8004526:	4013      	ands	r3, r2
 8004528:	b259      	sxtb	r1, r3
 800452a:	79fa      	ldrb	r2, [r7, #7]
 800452c:	4603      	mov	r3, r0
 800452e:	01db      	lsls	r3, r3, #7
 8004530:	4413      	add	r3, r2
 8004532:	b2c9      	uxtb	r1, r1
 8004534:	4a04      	ldr	r2, [pc, #16]	; (8004548 <ssd1306_DrawPixel+0xa4>)
 8004536:	54d1      	strb	r1, [r2, r3]
 8004538:	e000      	b.n	800453c <ssd1306_DrawPixel+0x98>
        return;
 800453a:	bf00      	nop
    }
}
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	200001c8 	.word	0x200001c8

0800454c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800454c:	b590      	push	{r4, r7, lr}
 800454e:	b089      	sub	sp, #36	; 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	4604      	mov	r4, r0
 8004554:	4638      	mov	r0, r7
 8004556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800455a:	4623      	mov	r3, r4
 800455c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b1f      	cmp	r3, #31
 8004562:	d902      	bls.n	800456a <ssd1306_WriteChar+0x1e>
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b7e      	cmp	r3, #126	; 0x7e
 8004568:	d901      	bls.n	800456e <ssd1306_WriteChar+0x22>
        return 0;
 800456a:	2300      	movs	r3, #0
 800456c:	e079      	b.n	8004662 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800456e:	4b3f      	ldr	r3, [pc, #252]	; (800466c <ssd1306_WriteChar+0x120>)
 8004570:	881b      	ldrh	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	783b      	ldrb	r3, [r7, #0]
 8004576:	4413      	add	r3, r2
 8004578:	2b80      	cmp	r3, #128	; 0x80
 800457a:	dc06      	bgt.n	800458a <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 800457c:	4b3b      	ldr	r3, [pc, #236]	; (800466c <ssd1306_WriteChar+0x120>)
 800457e:	885b      	ldrh	r3, [r3, #2]
 8004580:	461a      	mov	r2, r3
 8004582:	787b      	ldrb	r3, [r7, #1]
 8004584:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8004586:	2b40      	cmp	r3, #64	; 0x40
 8004588:	dd01      	ble.n	800458e <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800458a:	2300      	movs	r3, #0
 800458c:	e069      	b.n	8004662 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	e04e      	b.n	8004632 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	7bfb      	ldrb	r3, [r7, #15]
 8004598:	3b20      	subs	r3, #32
 800459a:	7879      	ldrb	r1, [r7, #1]
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	440b      	add	r3, r1
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	4413      	add	r3, r2
 80045aa:	881b      	ldrh	r3, [r3, #0]
 80045ac:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 80045ae:	2300      	movs	r3, #0
 80045b0:	61bb      	str	r3, [r7, #24]
 80045b2:	e036      	b.n	8004622 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d013      	beq.n	80045ec <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <ssd1306_WriteChar+0x120>)
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	b2d8      	uxtb	r0, r3
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <ssd1306_WriteChar+0x120>)
 80045d4:	885b      	ldrh	r3, [r3, #2]
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	4413      	add	r3, r2
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80045e4:	4619      	mov	r1, r3
 80045e6:	f7ff ff5d 	bl	80044a4 <ssd1306_DrawPixel>
 80045ea:	e017      	b.n	800461c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80045ec:	4b1f      	ldr	r3, [pc, #124]	; (800466c <ssd1306_WriteChar+0x120>)
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	b2d8      	uxtb	r0, r3
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <ssd1306_WriteChar+0x120>)
 80045fc:	885b      	ldrh	r3, [r3, #2]
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	4413      	add	r3, r2
 8004606:	b2d9      	uxtb	r1, r3
 8004608:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800460c:	2b00      	cmp	r3, #0
 800460e:	bf0c      	ite	eq
 8004610:	2301      	moveq	r3, #1
 8004612:	2300      	movne	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	461a      	mov	r2, r3
 8004618:	f7ff ff44 	bl	80044a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	3301      	adds	r3, #1
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	783b      	ldrb	r3, [r7, #0]
 8004624:	461a      	mov	r2, r3
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	4293      	cmp	r3, r2
 800462a:	d3c3      	bcc.n	80045b4 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	3301      	adds	r3, #1
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	787b      	ldrb	r3, [r7, #1]
 8004634:	461a      	mov	r2, r3
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4293      	cmp	r3, r2
 800463a:	d3ab      	bcc.n	8004594 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 800463c:	4b0b      	ldr	r3, [pc, #44]	; (800466c <ssd1306_WriteChar+0x120>)
 800463e:	881a      	ldrh	r2, [r3, #0]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d006      	beq.n	8004654 <ssd1306_WriteChar+0x108>
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	3b20      	subs	r3, #32
 800464c:	440b      	add	r3, r1
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	b29b      	uxth	r3, r3
 8004652:	e001      	b.n	8004658 <ssd1306_WriteChar+0x10c>
 8004654:	783b      	ldrb	r3, [r7, #0]
 8004656:	b29b      	uxth	r3, r3
 8004658:	4413      	add	r3, r2
 800465a:	b29a      	uxth	r2, r3
 800465c:	4b03      	ldr	r3, [pc, #12]	; (800466c <ssd1306_WriteChar+0x120>)
 800465e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8004660:	7bfb      	ldrb	r3, [r7, #15]
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd90      	pop	{r4, r7, pc}
 800466a:	bf00      	nop
 800466c:	200005c8 	.word	0x200005c8

08004670 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	4638      	mov	r0, r7
 800467a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800467e:	e013      	b.n	80046a8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	7818      	ldrb	r0, [r3, #0]
 8004684:	7e3b      	ldrb	r3, [r7, #24]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	463b      	mov	r3, r7
 800468a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800468c:	f7ff ff5e 	bl	800454c <ssd1306_WriteChar>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d002      	beq.n	80046a2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	781b      	ldrb	r3, [r3, #0]
 80046a0:	e008      	b.n	80046b4 <ssd1306_WriteString+0x44>
        }
        str++;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3301      	adds	r3, #1
 80046a6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1e7      	bne.n	8004680 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	781b      	ldrb	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	4603      	mov	r3, r0
 80046c4:	460a      	mov	r2, r1
 80046c6:	71fb      	strb	r3, [r7, #7]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80046cc:	79fb      	ldrb	r3, [r7, #7]
 80046ce:	b29a      	uxth	r2, r3
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <ssd1306_SetCursor+0x2c>)
 80046d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80046d4:	79bb      	ldrb	r3, [r7, #6]
 80046d6:	b29a      	uxth	r2, r3
 80046d8:	4b03      	ldr	r3, [pc, #12]	; (80046e8 <ssd1306_SetCursor+0x2c>)
 80046da:	805a      	strh	r2, [r3, #2]
}
 80046dc:	bf00      	nop
 80046de:	370c      	adds	r7, #12
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr
 80046e8:	200005c8 	.word	0x200005c8

080046ec <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80046f6:	2381      	movs	r3, #129	; 0x81
 80046f8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fdf5 	bl	80042ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004702:	79fb      	ldrb	r3, [r7, #7]
 8004704:	4618      	mov	r0, r3
 8004706:	f7ff fdf1 	bl	80042ec <ssd1306_WriteCommand>
}
 800470a:	bf00      	nop
 800470c:	3710      	adds	r7, #16
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800471e:	79fb      	ldrb	r3, [r7, #7]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d005      	beq.n	8004730 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004724:	23af      	movs	r3, #175	; 0xaf
 8004726:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <ssd1306_SetDisplayOn+0x38>)
 800472a:	2201      	movs	r2, #1
 800472c:	715a      	strb	r2, [r3, #5]
 800472e:	e004      	b.n	800473a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004730:	23ae      	movs	r3, #174	; 0xae
 8004732:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <ssd1306_SetDisplayOn+0x38>)
 8004736:	2200      	movs	r2, #0
 8004738:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fdd5 	bl	80042ec <ssd1306_WriteCommand>
}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	200005c8 	.word	0x200005c8

08004750 <siprintf>:
 8004750:	b40e      	push	{r1, r2, r3}
 8004752:	b500      	push	{lr}
 8004754:	b09c      	sub	sp, #112	; 0x70
 8004756:	ab1d      	add	r3, sp, #116	; 0x74
 8004758:	9002      	str	r0, [sp, #8]
 800475a:	9006      	str	r0, [sp, #24]
 800475c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004760:	4809      	ldr	r0, [pc, #36]	; (8004788 <siprintf+0x38>)
 8004762:	9107      	str	r1, [sp, #28]
 8004764:	9104      	str	r1, [sp, #16]
 8004766:	4909      	ldr	r1, [pc, #36]	; (800478c <siprintf+0x3c>)
 8004768:	f853 2b04 	ldr.w	r2, [r3], #4
 800476c:	9105      	str	r1, [sp, #20]
 800476e:	6800      	ldr	r0, [r0, #0]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	a902      	add	r1, sp, #8
 8004774:	f000 f9a0 	bl	8004ab8 <_svfiprintf_r>
 8004778:	9b02      	ldr	r3, [sp, #8]
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	b01c      	add	sp, #112	; 0x70
 8004780:	f85d eb04 	ldr.w	lr, [sp], #4
 8004784:	b003      	add	sp, #12
 8004786:	4770      	bx	lr
 8004788:	20000058 	.word	0x20000058
 800478c:	ffff0208 	.word	0xffff0208

08004790 <memset>:
 8004790:	4402      	add	r2, r0
 8004792:	4603      	mov	r3, r0
 8004794:	4293      	cmp	r3, r2
 8004796:	d100      	bne.n	800479a <memset+0xa>
 8004798:	4770      	bx	lr
 800479a:	f803 1b01 	strb.w	r1, [r3], #1
 800479e:	e7f9      	b.n	8004794 <memset+0x4>

080047a0 <__errno>:
 80047a0:	4b01      	ldr	r3, [pc, #4]	; (80047a8 <__errno+0x8>)
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	20000058 	.word	0x20000058

080047ac <__libc_init_array>:
 80047ac:	b570      	push	{r4, r5, r6, lr}
 80047ae:	4d0d      	ldr	r5, [pc, #52]	; (80047e4 <__libc_init_array+0x38>)
 80047b0:	4c0d      	ldr	r4, [pc, #52]	; (80047e8 <__libc_init_array+0x3c>)
 80047b2:	1b64      	subs	r4, r4, r5
 80047b4:	10a4      	asrs	r4, r4, #2
 80047b6:	2600      	movs	r6, #0
 80047b8:	42a6      	cmp	r6, r4
 80047ba:	d109      	bne.n	80047d0 <__libc_init_array+0x24>
 80047bc:	4d0b      	ldr	r5, [pc, #44]	; (80047ec <__libc_init_array+0x40>)
 80047be:	4c0c      	ldr	r4, [pc, #48]	; (80047f0 <__libc_init_array+0x44>)
 80047c0:	f000 fc6a 	bl	8005098 <_init>
 80047c4:	1b64      	subs	r4, r4, r5
 80047c6:	10a4      	asrs	r4, r4, #2
 80047c8:	2600      	movs	r6, #0
 80047ca:	42a6      	cmp	r6, r4
 80047cc:	d105      	bne.n	80047da <__libc_init_array+0x2e>
 80047ce:	bd70      	pop	{r4, r5, r6, pc}
 80047d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d4:	4798      	blx	r3
 80047d6:	3601      	adds	r6, #1
 80047d8:	e7ee      	b.n	80047b8 <__libc_init_array+0xc>
 80047da:	f855 3b04 	ldr.w	r3, [r5], #4
 80047de:	4798      	blx	r3
 80047e0:	3601      	adds	r6, #1
 80047e2:	e7f2      	b.n	80047ca <__libc_init_array+0x1e>
 80047e4:	08006620 	.word	0x08006620
 80047e8:	08006620 	.word	0x08006620
 80047ec:	08006620 	.word	0x08006620
 80047f0:	08006624 	.word	0x08006624

080047f4 <__retarget_lock_acquire_recursive>:
 80047f4:	4770      	bx	lr

080047f6 <__retarget_lock_release_recursive>:
 80047f6:	4770      	bx	lr

080047f8 <memcpy>:
 80047f8:	440a      	add	r2, r1
 80047fa:	4291      	cmp	r1, r2
 80047fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004800:	d100      	bne.n	8004804 <memcpy+0xc>
 8004802:	4770      	bx	lr
 8004804:	b510      	push	{r4, lr}
 8004806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800480a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480e:	4291      	cmp	r1, r2
 8004810:	d1f9      	bne.n	8004806 <memcpy+0xe>
 8004812:	bd10      	pop	{r4, pc}

08004814 <_free_r>:
 8004814:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004816:	2900      	cmp	r1, #0
 8004818:	d044      	beq.n	80048a4 <_free_r+0x90>
 800481a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800481e:	9001      	str	r0, [sp, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	f1a1 0404 	sub.w	r4, r1, #4
 8004826:	bfb8      	it	lt
 8004828:	18e4      	addlt	r4, r4, r3
 800482a:	f000 f8df 	bl	80049ec <__malloc_lock>
 800482e:	4a1e      	ldr	r2, [pc, #120]	; (80048a8 <_free_r+0x94>)
 8004830:	9801      	ldr	r0, [sp, #4]
 8004832:	6813      	ldr	r3, [r2, #0]
 8004834:	b933      	cbnz	r3, 8004844 <_free_r+0x30>
 8004836:	6063      	str	r3, [r4, #4]
 8004838:	6014      	str	r4, [r2, #0]
 800483a:	b003      	add	sp, #12
 800483c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004840:	f000 b8da 	b.w	80049f8 <__malloc_unlock>
 8004844:	42a3      	cmp	r3, r4
 8004846:	d908      	bls.n	800485a <_free_r+0x46>
 8004848:	6825      	ldr	r5, [r4, #0]
 800484a:	1961      	adds	r1, r4, r5
 800484c:	428b      	cmp	r3, r1
 800484e:	bf01      	itttt	eq
 8004850:	6819      	ldreq	r1, [r3, #0]
 8004852:	685b      	ldreq	r3, [r3, #4]
 8004854:	1949      	addeq	r1, r1, r5
 8004856:	6021      	streq	r1, [r4, #0]
 8004858:	e7ed      	b.n	8004836 <_free_r+0x22>
 800485a:	461a      	mov	r2, r3
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	b10b      	cbz	r3, 8004864 <_free_r+0x50>
 8004860:	42a3      	cmp	r3, r4
 8004862:	d9fa      	bls.n	800485a <_free_r+0x46>
 8004864:	6811      	ldr	r1, [r2, #0]
 8004866:	1855      	adds	r5, r2, r1
 8004868:	42a5      	cmp	r5, r4
 800486a:	d10b      	bne.n	8004884 <_free_r+0x70>
 800486c:	6824      	ldr	r4, [r4, #0]
 800486e:	4421      	add	r1, r4
 8004870:	1854      	adds	r4, r2, r1
 8004872:	42a3      	cmp	r3, r4
 8004874:	6011      	str	r1, [r2, #0]
 8004876:	d1e0      	bne.n	800483a <_free_r+0x26>
 8004878:	681c      	ldr	r4, [r3, #0]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	6053      	str	r3, [r2, #4]
 800487e:	440c      	add	r4, r1
 8004880:	6014      	str	r4, [r2, #0]
 8004882:	e7da      	b.n	800483a <_free_r+0x26>
 8004884:	d902      	bls.n	800488c <_free_r+0x78>
 8004886:	230c      	movs	r3, #12
 8004888:	6003      	str	r3, [r0, #0]
 800488a:	e7d6      	b.n	800483a <_free_r+0x26>
 800488c:	6825      	ldr	r5, [r4, #0]
 800488e:	1961      	adds	r1, r4, r5
 8004890:	428b      	cmp	r3, r1
 8004892:	bf04      	itt	eq
 8004894:	6819      	ldreq	r1, [r3, #0]
 8004896:	685b      	ldreq	r3, [r3, #4]
 8004898:	6063      	str	r3, [r4, #4]
 800489a:	bf04      	itt	eq
 800489c:	1949      	addeq	r1, r1, r5
 800489e:	6021      	streq	r1, [r4, #0]
 80048a0:	6054      	str	r4, [r2, #4]
 80048a2:	e7ca      	b.n	800483a <_free_r+0x26>
 80048a4:	b003      	add	sp, #12
 80048a6:	bd30      	pop	{r4, r5, pc}
 80048a8:	20000710 	.word	0x20000710

080048ac <sbrk_aligned>:
 80048ac:	b570      	push	{r4, r5, r6, lr}
 80048ae:	4e0e      	ldr	r6, [pc, #56]	; (80048e8 <sbrk_aligned+0x3c>)
 80048b0:	460c      	mov	r4, r1
 80048b2:	6831      	ldr	r1, [r6, #0]
 80048b4:	4605      	mov	r5, r0
 80048b6:	b911      	cbnz	r1, 80048be <sbrk_aligned+0x12>
 80048b8:	f000 fba6 	bl	8005008 <_sbrk_r>
 80048bc:	6030      	str	r0, [r6, #0]
 80048be:	4621      	mov	r1, r4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f000 fba1 	bl	8005008 <_sbrk_r>
 80048c6:	1c43      	adds	r3, r0, #1
 80048c8:	d00a      	beq.n	80048e0 <sbrk_aligned+0x34>
 80048ca:	1cc4      	adds	r4, r0, #3
 80048cc:	f024 0403 	bic.w	r4, r4, #3
 80048d0:	42a0      	cmp	r0, r4
 80048d2:	d007      	beq.n	80048e4 <sbrk_aligned+0x38>
 80048d4:	1a21      	subs	r1, r4, r0
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 fb96 	bl	8005008 <_sbrk_r>
 80048dc:	3001      	adds	r0, #1
 80048de:	d101      	bne.n	80048e4 <sbrk_aligned+0x38>
 80048e0:	f04f 34ff 	mov.w	r4, #4294967295
 80048e4:	4620      	mov	r0, r4
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	20000714 	.word	0x20000714

080048ec <_malloc_r>:
 80048ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048f0:	1ccd      	adds	r5, r1, #3
 80048f2:	f025 0503 	bic.w	r5, r5, #3
 80048f6:	3508      	adds	r5, #8
 80048f8:	2d0c      	cmp	r5, #12
 80048fa:	bf38      	it	cc
 80048fc:	250c      	movcc	r5, #12
 80048fe:	2d00      	cmp	r5, #0
 8004900:	4607      	mov	r7, r0
 8004902:	db01      	blt.n	8004908 <_malloc_r+0x1c>
 8004904:	42a9      	cmp	r1, r5
 8004906:	d905      	bls.n	8004914 <_malloc_r+0x28>
 8004908:	230c      	movs	r3, #12
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	2600      	movs	r6, #0
 800490e:	4630      	mov	r0, r6
 8004910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004914:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80049e8 <_malloc_r+0xfc>
 8004918:	f000 f868 	bl	80049ec <__malloc_lock>
 800491c:	f8d8 3000 	ldr.w	r3, [r8]
 8004920:	461c      	mov	r4, r3
 8004922:	bb5c      	cbnz	r4, 800497c <_malloc_r+0x90>
 8004924:	4629      	mov	r1, r5
 8004926:	4638      	mov	r0, r7
 8004928:	f7ff ffc0 	bl	80048ac <sbrk_aligned>
 800492c:	1c43      	adds	r3, r0, #1
 800492e:	4604      	mov	r4, r0
 8004930:	d155      	bne.n	80049de <_malloc_r+0xf2>
 8004932:	f8d8 4000 	ldr.w	r4, [r8]
 8004936:	4626      	mov	r6, r4
 8004938:	2e00      	cmp	r6, #0
 800493a:	d145      	bne.n	80049c8 <_malloc_r+0xdc>
 800493c:	2c00      	cmp	r4, #0
 800493e:	d048      	beq.n	80049d2 <_malloc_r+0xe6>
 8004940:	6823      	ldr	r3, [r4, #0]
 8004942:	4631      	mov	r1, r6
 8004944:	4638      	mov	r0, r7
 8004946:	eb04 0903 	add.w	r9, r4, r3
 800494a:	f000 fb5d 	bl	8005008 <_sbrk_r>
 800494e:	4581      	cmp	r9, r0
 8004950:	d13f      	bne.n	80049d2 <_malloc_r+0xe6>
 8004952:	6821      	ldr	r1, [r4, #0]
 8004954:	1a6d      	subs	r5, r5, r1
 8004956:	4629      	mov	r1, r5
 8004958:	4638      	mov	r0, r7
 800495a:	f7ff ffa7 	bl	80048ac <sbrk_aligned>
 800495e:	3001      	adds	r0, #1
 8004960:	d037      	beq.n	80049d2 <_malloc_r+0xe6>
 8004962:	6823      	ldr	r3, [r4, #0]
 8004964:	442b      	add	r3, r5
 8004966:	6023      	str	r3, [r4, #0]
 8004968:	f8d8 3000 	ldr.w	r3, [r8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d038      	beq.n	80049e2 <_malloc_r+0xf6>
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	42a2      	cmp	r2, r4
 8004974:	d12b      	bne.n	80049ce <_malloc_r+0xe2>
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
 800497a:	e00f      	b.n	800499c <_malloc_r+0xb0>
 800497c:	6822      	ldr	r2, [r4, #0]
 800497e:	1b52      	subs	r2, r2, r5
 8004980:	d41f      	bmi.n	80049c2 <_malloc_r+0xd6>
 8004982:	2a0b      	cmp	r2, #11
 8004984:	d917      	bls.n	80049b6 <_malloc_r+0xca>
 8004986:	1961      	adds	r1, r4, r5
 8004988:	42a3      	cmp	r3, r4
 800498a:	6025      	str	r5, [r4, #0]
 800498c:	bf18      	it	ne
 800498e:	6059      	strne	r1, [r3, #4]
 8004990:	6863      	ldr	r3, [r4, #4]
 8004992:	bf08      	it	eq
 8004994:	f8c8 1000 	streq.w	r1, [r8]
 8004998:	5162      	str	r2, [r4, r5]
 800499a:	604b      	str	r3, [r1, #4]
 800499c:	4638      	mov	r0, r7
 800499e:	f104 060b 	add.w	r6, r4, #11
 80049a2:	f000 f829 	bl	80049f8 <__malloc_unlock>
 80049a6:	f026 0607 	bic.w	r6, r6, #7
 80049aa:	1d23      	adds	r3, r4, #4
 80049ac:	1af2      	subs	r2, r6, r3
 80049ae:	d0ae      	beq.n	800490e <_malloc_r+0x22>
 80049b0:	1b9b      	subs	r3, r3, r6
 80049b2:	50a3      	str	r3, [r4, r2]
 80049b4:	e7ab      	b.n	800490e <_malloc_r+0x22>
 80049b6:	42a3      	cmp	r3, r4
 80049b8:	6862      	ldr	r2, [r4, #4]
 80049ba:	d1dd      	bne.n	8004978 <_malloc_r+0x8c>
 80049bc:	f8c8 2000 	str.w	r2, [r8]
 80049c0:	e7ec      	b.n	800499c <_malloc_r+0xb0>
 80049c2:	4623      	mov	r3, r4
 80049c4:	6864      	ldr	r4, [r4, #4]
 80049c6:	e7ac      	b.n	8004922 <_malloc_r+0x36>
 80049c8:	4634      	mov	r4, r6
 80049ca:	6876      	ldr	r6, [r6, #4]
 80049cc:	e7b4      	b.n	8004938 <_malloc_r+0x4c>
 80049ce:	4613      	mov	r3, r2
 80049d0:	e7cc      	b.n	800496c <_malloc_r+0x80>
 80049d2:	230c      	movs	r3, #12
 80049d4:	603b      	str	r3, [r7, #0]
 80049d6:	4638      	mov	r0, r7
 80049d8:	f000 f80e 	bl	80049f8 <__malloc_unlock>
 80049dc:	e797      	b.n	800490e <_malloc_r+0x22>
 80049de:	6025      	str	r5, [r4, #0]
 80049e0:	e7dc      	b.n	800499c <_malloc_r+0xb0>
 80049e2:	605b      	str	r3, [r3, #4]
 80049e4:	deff      	udf	#255	; 0xff
 80049e6:	bf00      	nop
 80049e8:	20000710 	.word	0x20000710

080049ec <__malloc_lock>:
 80049ec:	4801      	ldr	r0, [pc, #4]	; (80049f4 <__malloc_lock+0x8>)
 80049ee:	f7ff bf01 	b.w	80047f4 <__retarget_lock_acquire_recursive>
 80049f2:	bf00      	nop
 80049f4:	2000070c 	.word	0x2000070c

080049f8 <__malloc_unlock>:
 80049f8:	4801      	ldr	r0, [pc, #4]	; (8004a00 <__malloc_unlock+0x8>)
 80049fa:	f7ff befc 	b.w	80047f6 <__retarget_lock_release_recursive>
 80049fe:	bf00      	nop
 8004a00:	2000070c 	.word	0x2000070c

08004a04 <__ssputs_r>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	688e      	ldr	r6, [r1, #8]
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	42be      	cmp	r6, r7
 8004a0e:	680b      	ldr	r3, [r1, #0]
 8004a10:	4682      	mov	sl, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	4690      	mov	r8, r2
 8004a16:	d82c      	bhi.n	8004a72 <__ssputs_r+0x6e>
 8004a18:	898a      	ldrh	r2, [r1, #12]
 8004a1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004a1e:	d026      	beq.n	8004a6e <__ssputs_r+0x6a>
 8004a20:	6965      	ldr	r5, [r4, #20]
 8004a22:	6909      	ldr	r1, [r1, #16]
 8004a24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a28:	eba3 0901 	sub.w	r9, r3, r1
 8004a2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a30:	1c7b      	adds	r3, r7, #1
 8004a32:	444b      	add	r3, r9
 8004a34:	106d      	asrs	r5, r5, #1
 8004a36:	429d      	cmp	r5, r3
 8004a38:	bf38      	it	cc
 8004a3a:	461d      	movcc	r5, r3
 8004a3c:	0553      	lsls	r3, r2, #21
 8004a3e:	d527      	bpl.n	8004a90 <__ssputs_r+0x8c>
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7ff ff53 	bl	80048ec <_malloc_r>
 8004a46:	4606      	mov	r6, r0
 8004a48:	b360      	cbz	r0, 8004aa4 <__ssputs_r+0xa0>
 8004a4a:	6921      	ldr	r1, [r4, #16]
 8004a4c:	464a      	mov	r2, r9
 8004a4e:	f7ff fed3 	bl	80047f8 <memcpy>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a5c:	81a3      	strh	r3, [r4, #12]
 8004a5e:	6126      	str	r6, [r4, #16]
 8004a60:	6165      	str	r5, [r4, #20]
 8004a62:	444e      	add	r6, r9
 8004a64:	eba5 0509 	sub.w	r5, r5, r9
 8004a68:	6026      	str	r6, [r4, #0]
 8004a6a:	60a5      	str	r5, [r4, #8]
 8004a6c:	463e      	mov	r6, r7
 8004a6e:	42be      	cmp	r6, r7
 8004a70:	d900      	bls.n	8004a74 <__ssputs_r+0x70>
 8004a72:	463e      	mov	r6, r7
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	4632      	mov	r2, r6
 8004a78:	4641      	mov	r1, r8
 8004a7a:	f000 faab 	bl	8004fd4 <memmove>
 8004a7e:	68a3      	ldr	r3, [r4, #8]
 8004a80:	1b9b      	subs	r3, r3, r6
 8004a82:	60a3      	str	r3, [r4, #8]
 8004a84:	6823      	ldr	r3, [r4, #0]
 8004a86:	4433      	add	r3, r6
 8004a88:	6023      	str	r3, [r4, #0]
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a90:	462a      	mov	r2, r5
 8004a92:	f000 fac9 	bl	8005028 <_realloc_r>
 8004a96:	4606      	mov	r6, r0
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d1e0      	bne.n	8004a5e <__ssputs_r+0x5a>
 8004a9c:	6921      	ldr	r1, [r4, #16]
 8004a9e:	4650      	mov	r0, sl
 8004aa0:	f7ff feb8 	bl	8004814 <_free_r>
 8004aa4:	230c      	movs	r3, #12
 8004aa6:	f8ca 3000 	str.w	r3, [sl]
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab6:	e7e9      	b.n	8004a8c <__ssputs_r+0x88>

08004ab8 <_svfiprintf_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	4698      	mov	r8, r3
 8004abe:	898b      	ldrh	r3, [r1, #12]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	b09d      	sub	sp, #116	; 0x74
 8004ac4:	4607      	mov	r7, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	4614      	mov	r4, r2
 8004aca:	d50e      	bpl.n	8004aea <_svfiprintf_r+0x32>
 8004acc:	690b      	ldr	r3, [r1, #16]
 8004ace:	b963      	cbnz	r3, 8004aea <_svfiprintf_r+0x32>
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	f7ff ff0b 	bl	80048ec <_malloc_r>
 8004ad6:	6028      	str	r0, [r5, #0]
 8004ad8:	6128      	str	r0, [r5, #16]
 8004ada:	b920      	cbnz	r0, 8004ae6 <_svfiprintf_r+0x2e>
 8004adc:	230c      	movs	r3, #12
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	e0d0      	b.n	8004c88 <_svfiprintf_r+0x1d0>
 8004ae6:	2340      	movs	r3, #64	; 0x40
 8004ae8:	616b      	str	r3, [r5, #20]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9309      	str	r3, [sp, #36]	; 0x24
 8004aee:	2320      	movs	r3, #32
 8004af0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004af4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004af8:	2330      	movs	r3, #48	; 0x30
 8004afa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004ca0 <_svfiprintf_r+0x1e8>
 8004afe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b02:	f04f 0901 	mov.w	r9, #1
 8004b06:	4623      	mov	r3, r4
 8004b08:	469a      	mov	sl, r3
 8004b0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b0e:	b10a      	cbz	r2, 8004b14 <_svfiprintf_r+0x5c>
 8004b10:	2a25      	cmp	r2, #37	; 0x25
 8004b12:	d1f9      	bne.n	8004b08 <_svfiprintf_r+0x50>
 8004b14:	ebba 0b04 	subs.w	fp, sl, r4
 8004b18:	d00b      	beq.n	8004b32 <_svfiprintf_r+0x7a>
 8004b1a:	465b      	mov	r3, fp
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	4629      	mov	r1, r5
 8004b20:	4638      	mov	r0, r7
 8004b22:	f7ff ff6f 	bl	8004a04 <__ssputs_r>
 8004b26:	3001      	adds	r0, #1
 8004b28:	f000 80a9 	beq.w	8004c7e <_svfiprintf_r+0x1c6>
 8004b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b2e:	445a      	add	r2, fp
 8004b30:	9209      	str	r2, [sp, #36]	; 0x24
 8004b32:	f89a 3000 	ldrb.w	r3, [sl]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 80a1 	beq.w	8004c7e <_svfiprintf_r+0x1c6>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004b42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b46:	f10a 0a01 	add.w	sl, sl, #1
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	9307      	str	r3, [sp, #28]
 8004b4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b52:	931a      	str	r3, [sp, #104]	; 0x68
 8004b54:	4654      	mov	r4, sl
 8004b56:	2205      	movs	r2, #5
 8004b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b5c:	4850      	ldr	r0, [pc, #320]	; (8004ca0 <_svfiprintf_r+0x1e8>)
 8004b5e:	f7fb fb5f 	bl	8000220 <memchr>
 8004b62:	9a04      	ldr	r2, [sp, #16]
 8004b64:	b9d8      	cbnz	r0, 8004b9e <_svfiprintf_r+0xe6>
 8004b66:	06d0      	lsls	r0, r2, #27
 8004b68:	bf44      	itt	mi
 8004b6a:	2320      	movmi	r3, #32
 8004b6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b70:	0711      	lsls	r1, r2, #28
 8004b72:	bf44      	itt	mi
 8004b74:	232b      	movmi	r3, #43	; 0x2b
 8004b76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b80:	d015      	beq.n	8004bae <_svfiprintf_r+0xf6>
 8004b82:	9a07      	ldr	r2, [sp, #28]
 8004b84:	4654      	mov	r4, sl
 8004b86:	2000      	movs	r0, #0
 8004b88:	f04f 0c0a 	mov.w	ip, #10
 8004b8c:	4621      	mov	r1, r4
 8004b8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b92:	3b30      	subs	r3, #48	; 0x30
 8004b94:	2b09      	cmp	r3, #9
 8004b96:	d94d      	bls.n	8004c34 <_svfiprintf_r+0x17c>
 8004b98:	b1b0      	cbz	r0, 8004bc8 <_svfiprintf_r+0x110>
 8004b9a:	9207      	str	r2, [sp, #28]
 8004b9c:	e014      	b.n	8004bc8 <_svfiprintf_r+0x110>
 8004b9e:	eba0 0308 	sub.w	r3, r0, r8
 8004ba2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	9304      	str	r3, [sp, #16]
 8004baa:	46a2      	mov	sl, r4
 8004bac:	e7d2      	b.n	8004b54 <_svfiprintf_r+0x9c>
 8004bae:	9b03      	ldr	r3, [sp, #12]
 8004bb0:	1d19      	adds	r1, r3, #4
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	9103      	str	r1, [sp, #12]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bfbb      	ittet	lt
 8004bba:	425b      	neglt	r3, r3
 8004bbc:	f042 0202 	orrlt.w	r2, r2, #2
 8004bc0:	9307      	strge	r3, [sp, #28]
 8004bc2:	9307      	strlt	r3, [sp, #28]
 8004bc4:	bfb8      	it	lt
 8004bc6:	9204      	strlt	r2, [sp, #16]
 8004bc8:	7823      	ldrb	r3, [r4, #0]
 8004bca:	2b2e      	cmp	r3, #46	; 0x2e
 8004bcc:	d10c      	bne.n	8004be8 <_svfiprintf_r+0x130>
 8004bce:	7863      	ldrb	r3, [r4, #1]
 8004bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd2:	d134      	bne.n	8004c3e <_svfiprintf_r+0x186>
 8004bd4:	9b03      	ldr	r3, [sp, #12]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	9203      	str	r2, [sp, #12]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	bfb8      	it	lt
 8004be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004be4:	3402      	adds	r4, #2
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004cb0 <_svfiprintf_r+0x1f8>
 8004bec:	7821      	ldrb	r1, [r4, #0]
 8004bee:	2203      	movs	r2, #3
 8004bf0:	4650      	mov	r0, sl
 8004bf2:	f7fb fb15 	bl	8000220 <memchr>
 8004bf6:	b138      	cbz	r0, 8004c08 <_svfiprintf_r+0x150>
 8004bf8:	9b04      	ldr	r3, [sp, #16]
 8004bfa:	eba0 000a 	sub.w	r0, r0, sl
 8004bfe:	2240      	movs	r2, #64	; 0x40
 8004c00:	4082      	lsls	r2, r0
 8004c02:	4313      	orrs	r3, r2
 8004c04:	3401      	adds	r4, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c0c:	4825      	ldr	r0, [pc, #148]	; (8004ca4 <_svfiprintf_r+0x1ec>)
 8004c0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c12:	2206      	movs	r2, #6
 8004c14:	f7fb fb04 	bl	8000220 <memchr>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d038      	beq.n	8004c8e <_svfiprintf_r+0x1d6>
 8004c1c:	4b22      	ldr	r3, [pc, #136]	; (8004ca8 <_svfiprintf_r+0x1f0>)
 8004c1e:	bb1b      	cbnz	r3, 8004c68 <_svfiprintf_r+0x1b0>
 8004c20:	9b03      	ldr	r3, [sp, #12]
 8004c22:	3307      	adds	r3, #7
 8004c24:	f023 0307 	bic.w	r3, r3, #7
 8004c28:	3308      	adds	r3, #8
 8004c2a:	9303      	str	r3, [sp, #12]
 8004c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c2e:	4433      	add	r3, r6
 8004c30:	9309      	str	r3, [sp, #36]	; 0x24
 8004c32:	e768      	b.n	8004b06 <_svfiprintf_r+0x4e>
 8004c34:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c38:	460c      	mov	r4, r1
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	e7a6      	b.n	8004b8c <_svfiprintf_r+0xd4>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	3401      	adds	r4, #1
 8004c42:	9305      	str	r3, [sp, #20]
 8004c44:	4619      	mov	r1, r3
 8004c46:	f04f 0c0a 	mov.w	ip, #10
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c50:	3a30      	subs	r2, #48	; 0x30
 8004c52:	2a09      	cmp	r2, #9
 8004c54:	d903      	bls.n	8004c5e <_svfiprintf_r+0x1a6>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d0c6      	beq.n	8004be8 <_svfiprintf_r+0x130>
 8004c5a:	9105      	str	r1, [sp, #20]
 8004c5c:	e7c4      	b.n	8004be8 <_svfiprintf_r+0x130>
 8004c5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c62:	4604      	mov	r4, r0
 8004c64:	2301      	movs	r3, #1
 8004c66:	e7f0      	b.n	8004c4a <_svfiprintf_r+0x192>
 8004c68:	ab03      	add	r3, sp, #12
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	462a      	mov	r2, r5
 8004c6e:	4b0f      	ldr	r3, [pc, #60]	; (8004cac <_svfiprintf_r+0x1f4>)
 8004c70:	a904      	add	r1, sp, #16
 8004c72:	4638      	mov	r0, r7
 8004c74:	f3af 8000 	nop.w
 8004c78:	1c42      	adds	r2, r0, #1
 8004c7a:	4606      	mov	r6, r0
 8004c7c:	d1d6      	bne.n	8004c2c <_svfiprintf_r+0x174>
 8004c7e:	89ab      	ldrh	r3, [r5, #12]
 8004c80:	065b      	lsls	r3, r3, #25
 8004c82:	f53f af2d 	bmi.w	8004ae0 <_svfiprintf_r+0x28>
 8004c86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c88:	b01d      	add	sp, #116	; 0x74
 8004c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c8e:	ab03      	add	r3, sp, #12
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	462a      	mov	r2, r5
 8004c94:	4b05      	ldr	r3, [pc, #20]	; (8004cac <_svfiprintf_r+0x1f4>)
 8004c96:	a904      	add	r1, sp, #16
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f000 f879 	bl	8004d90 <_printf_i>
 8004c9e:	e7eb      	b.n	8004c78 <_svfiprintf_r+0x1c0>
 8004ca0:	080065e4 	.word	0x080065e4
 8004ca4:	080065ee 	.word	0x080065ee
 8004ca8:	00000000 	.word	0x00000000
 8004cac:	08004a05 	.word	0x08004a05
 8004cb0:	080065ea 	.word	0x080065ea

08004cb4 <_printf_common>:
 8004cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cb8:	4616      	mov	r6, r2
 8004cba:	4699      	mov	r9, r3
 8004cbc:	688a      	ldr	r2, [r1, #8]
 8004cbe:	690b      	ldr	r3, [r1, #16]
 8004cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	bfb8      	it	lt
 8004cc8:	4613      	movlt	r3, r2
 8004cca:	6033      	str	r3, [r6, #0]
 8004ccc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cd0:	4607      	mov	r7, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	b10a      	cbz	r2, 8004cda <_printf_common+0x26>
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	0699      	lsls	r1, r3, #26
 8004cde:	bf42      	ittt	mi
 8004ce0:	6833      	ldrmi	r3, [r6, #0]
 8004ce2:	3302      	addmi	r3, #2
 8004ce4:	6033      	strmi	r3, [r6, #0]
 8004ce6:	6825      	ldr	r5, [r4, #0]
 8004ce8:	f015 0506 	ands.w	r5, r5, #6
 8004cec:	d106      	bne.n	8004cfc <_printf_common+0x48>
 8004cee:	f104 0a19 	add.w	sl, r4, #25
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	6832      	ldr	r2, [r6, #0]
 8004cf6:	1a9b      	subs	r3, r3, r2
 8004cf8:	42ab      	cmp	r3, r5
 8004cfa:	dc26      	bgt.n	8004d4a <_printf_common+0x96>
 8004cfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d00:	1e13      	subs	r3, r2, #0
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	bf18      	it	ne
 8004d06:	2301      	movne	r3, #1
 8004d08:	0692      	lsls	r2, r2, #26
 8004d0a:	d42b      	bmi.n	8004d64 <_printf_common+0xb0>
 8004d0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d10:	4649      	mov	r1, r9
 8004d12:	4638      	mov	r0, r7
 8004d14:	47c0      	blx	r8
 8004d16:	3001      	adds	r0, #1
 8004d18:	d01e      	beq.n	8004d58 <_printf_common+0xa4>
 8004d1a:	6823      	ldr	r3, [r4, #0]
 8004d1c:	6922      	ldr	r2, [r4, #16]
 8004d1e:	f003 0306 	and.w	r3, r3, #6
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	bf02      	ittt	eq
 8004d26:	68e5      	ldreq	r5, [r4, #12]
 8004d28:	6833      	ldreq	r3, [r6, #0]
 8004d2a:	1aed      	subeq	r5, r5, r3
 8004d2c:	68a3      	ldr	r3, [r4, #8]
 8004d2e:	bf0c      	ite	eq
 8004d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d34:	2500      	movne	r5, #0
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bfc4      	itt	gt
 8004d3a:	1a9b      	subgt	r3, r3, r2
 8004d3c:	18ed      	addgt	r5, r5, r3
 8004d3e:	2600      	movs	r6, #0
 8004d40:	341a      	adds	r4, #26
 8004d42:	42b5      	cmp	r5, r6
 8004d44:	d11a      	bne.n	8004d7c <_printf_common+0xc8>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e008      	b.n	8004d5c <_printf_common+0xa8>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4652      	mov	r2, sl
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4638      	mov	r0, r7
 8004d52:	47c0      	blx	r8
 8004d54:	3001      	adds	r0, #1
 8004d56:	d103      	bne.n	8004d60 <_printf_common+0xac>
 8004d58:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d60:	3501      	adds	r5, #1
 8004d62:	e7c6      	b.n	8004cf2 <_printf_common+0x3e>
 8004d64:	18e1      	adds	r1, r4, r3
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	2030      	movs	r0, #48	; 0x30
 8004d6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d6e:	4422      	add	r2, r4
 8004d70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d78:	3302      	adds	r3, #2
 8004d7a:	e7c7      	b.n	8004d0c <_printf_common+0x58>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4622      	mov	r2, r4
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d0e6      	beq.n	8004d58 <_printf_common+0xa4>
 8004d8a:	3601      	adds	r6, #1
 8004d8c:	e7d9      	b.n	8004d42 <_printf_common+0x8e>
	...

08004d90 <_printf_i>:
 8004d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d94:	7e0f      	ldrb	r7, [r1, #24]
 8004d96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d98:	2f78      	cmp	r7, #120	; 0x78
 8004d9a:	4691      	mov	r9, r2
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	469a      	mov	sl, r3
 8004da2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004da6:	d807      	bhi.n	8004db8 <_printf_i+0x28>
 8004da8:	2f62      	cmp	r7, #98	; 0x62
 8004daa:	d80a      	bhi.n	8004dc2 <_printf_i+0x32>
 8004dac:	2f00      	cmp	r7, #0
 8004dae:	f000 80d4 	beq.w	8004f5a <_printf_i+0x1ca>
 8004db2:	2f58      	cmp	r7, #88	; 0x58
 8004db4:	f000 80c0 	beq.w	8004f38 <_printf_i+0x1a8>
 8004db8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004dc0:	e03a      	b.n	8004e38 <_printf_i+0xa8>
 8004dc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dc6:	2b15      	cmp	r3, #21
 8004dc8:	d8f6      	bhi.n	8004db8 <_printf_i+0x28>
 8004dca:	a101      	add	r1, pc, #4	; (adr r1, 8004dd0 <_printf_i+0x40>)
 8004dcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004dd0:	08004e29 	.word	0x08004e29
 8004dd4:	08004e3d 	.word	0x08004e3d
 8004dd8:	08004db9 	.word	0x08004db9
 8004ddc:	08004db9 	.word	0x08004db9
 8004de0:	08004db9 	.word	0x08004db9
 8004de4:	08004db9 	.word	0x08004db9
 8004de8:	08004e3d 	.word	0x08004e3d
 8004dec:	08004db9 	.word	0x08004db9
 8004df0:	08004db9 	.word	0x08004db9
 8004df4:	08004db9 	.word	0x08004db9
 8004df8:	08004db9 	.word	0x08004db9
 8004dfc:	08004f41 	.word	0x08004f41
 8004e00:	08004e69 	.word	0x08004e69
 8004e04:	08004efb 	.word	0x08004efb
 8004e08:	08004db9 	.word	0x08004db9
 8004e0c:	08004db9 	.word	0x08004db9
 8004e10:	08004f63 	.word	0x08004f63
 8004e14:	08004db9 	.word	0x08004db9
 8004e18:	08004e69 	.word	0x08004e69
 8004e1c:	08004db9 	.word	0x08004db9
 8004e20:	08004db9 	.word	0x08004db9
 8004e24:	08004f03 	.word	0x08004f03
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	1d1a      	adds	r2, r3, #4
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	602a      	str	r2, [r5, #0]
 8004e30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e09f      	b.n	8004f7c <_printf_i+0x1ec>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	682b      	ldr	r3, [r5, #0]
 8004e40:	0607      	lsls	r7, r0, #24
 8004e42:	f103 0104 	add.w	r1, r3, #4
 8004e46:	6029      	str	r1, [r5, #0]
 8004e48:	d501      	bpl.n	8004e4e <_printf_i+0xbe>
 8004e4a:	681e      	ldr	r6, [r3, #0]
 8004e4c:	e003      	b.n	8004e56 <_printf_i+0xc6>
 8004e4e:	0646      	lsls	r6, r0, #25
 8004e50:	d5fb      	bpl.n	8004e4a <_printf_i+0xba>
 8004e52:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004e56:	2e00      	cmp	r6, #0
 8004e58:	da03      	bge.n	8004e62 <_printf_i+0xd2>
 8004e5a:	232d      	movs	r3, #45	; 0x2d
 8004e5c:	4276      	negs	r6, r6
 8004e5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e62:	485a      	ldr	r0, [pc, #360]	; (8004fcc <_printf_i+0x23c>)
 8004e64:	230a      	movs	r3, #10
 8004e66:	e012      	b.n	8004e8e <_printf_i+0xfe>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	6820      	ldr	r0, [r4, #0]
 8004e6c:	1d19      	adds	r1, r3, #4
 8004e6e:	6029      	str	r1, [r5, #0]
 8004e70:	0605      	lsls	r5, r0, #24
 8004e72:	d501      	bpl.n	8004e78 <_printf_i+0xe8>
 8004e74:	681e      	ldr	r6, [r3, #0]
 8004e76:	e002      	b.n	8004e7e <_printf_i+0xee>
 8004e78:	0641      	lsls	r1, r0, #25
 8004e7a:	d5fb      	bpl.n	8004e74 <_printf_i+0xe4>
 8004e7c:	881e      	ldrh	r6, [r3, #0]
 8004e7e:	4853      	ldr	r0, [pc, #332]	; (8004fcc <_printf_i+0x23c>)
 8004e80:	2f6f      	cmp	r7, #111	; 0x6f
 8004e82:	bf0c      	ite	eq
 8004e84:	2308      	moveq	r3, #8
 8004e86:	230a      	movne	r3, #10
 8004e88:	2100      	movs	r1, #0
 8004e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e8e:	6865      	ldr	r5, [r4, #4]
 8004e90:	60a5      	str	r5, [r4, #8]
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	bfa2      	ittt	ge
 8004e96:	6821      	ldrge	r1, [r4, #0]
 8004e98:	f021 0104 	bicge.w	r1, r1, #4
 8004e9c:	6021      	strge	r1, [r4, #0]
 8004e9e:	b90e      	cbnz	r6, 8004ea4 <_printf_i+0x114>
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	d04b      	beq.n	8004f3c <_printf_i+0x1ac>
 8004ea4:	4615      	mov	r5, r2
 8004ea6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004eaa:	fb03 6711 	mls	r7, r3, r1, r6
 8004eae:	5dc7      	ldrb	r7, [r0, r7]
 8004eb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004eb4:	4637      	mov	r7, r6
 8004eb6:	42bb      	cmp	r3, r7
 8004eb8:	460e      	mov	r6, r1
 8004eba:	d9f4      	bls.n	8004ea6 <_printf_i+0x116>
 8004ebc:	2b08      	cmp	r3, #8
 8004ebe:	d10b      	bne.n	8004ed8 <_printf_i+0x148>
 8004ec0:	6823      	ldr	r3, [r4, #0]
 8004ec2:	07de      	lsls	r6, r3, #31
 8004ec4:	d508      	bpl.n	8004ed8 <_printf_i+0x148>
 8004ec6:	6923      	ldr	r3, [r4, #16]
 8004ec8:	6861      	ldr	r1, [r4, #4]
 8004eca:	4299      	cmp	r1, r3
 8004ecc:	bfde      	ittt	le
 8004ece:	2330      	movle	r3, #48	; 0x30
 8004ed0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ed4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ed8:	1b52      	subs	r2, r2, r5
 8004eda:	6122      	str	r2, [r4, #16]
 8004edc:	f8cd a000 	str.w	sl, [sp]
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	aa03      	add	r2, sp, #12
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff fee4 	bl	8004cb4 <_printf_common>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d14a      	bne.n	8004f86 <_printf_i+0x1f6>
 8004ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ef4:	b004      	add	sp, #16
 8004ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	f043 0320 	orr.w	r3, r3, #32
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	4833      	ldr	r0, [pc, #204]	; (8004fd0 <_printf_i+0x240>)
 8004f04:	2778      	movs	r7, #120	; 0x78
 8004f06:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f0a:	6823      	ldr	r3, [r4, #0]
 8004f0c:	6829      	ldr	r1, [r5, #0]
 8004f0e:	061f      	lsls	r7, r3, #24
 8004f10:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f14:	d402      	bmi.n	8004f1c <_printf_i+0x18c>
 8004f16:	065f      	lsls	r7, r3, #25
 8004f18:	bf48      	it	mi
 8004f1a:	b2b6      	uxthmi	r6, r6
 8004f1c:	07df      	lsls	r7, r3, #31
 8004f1e:	bf48      	it	mi
 8004f20:	f043 0320 	orrmi.w	r3, r3, #32
 8004f24:	6029      	str	r1, [r5, #0]
 8004f26:	bf48      	it	mi
 8004f28:	6023      	strmi	r3, [r4, #0]
 8004f2a:	b91e      	cbnz	r6, 8004f34 <_printf_i+0x1a4>
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	f023 0320 	bic.w	r3, r3, #32
 8004f32:	6023      	str	r3, [r4, #0]
 8004f34:	2310      	movs	r3, #16
 8004f36:	e7a7      	b.n	8004e88 <_printf_i+0xf8>
 8004f38:	4824      	ldr	r0, [pc, #144]	; (8004fcc <_printf_i+0x23c>)
 8004f3a:	e7e4      	b.n	8004f06 <_printf_i+0x176>
 8004f3c:	4615      	mov	r5, r2
 8004f3e:	e7bd      	b.n	8004ebc <_printf_i+0x12c>
 8004f40:	682b      	ldr	r3, [r5, #0]
 8004f42:	6826      	ldr	r6, [r4, #0]
 8004f44:	6961      	ldr	r1, [r4, #20]
 8004f46:	1d18      	adds	r0, r3, #4
 8004f48:	6028      	str	r0, [r5, #0]
 8004f4a:	0635      	lsls	r5, r6, #24
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	d501      	bpl.n	8004f54 <_printf_i+0x1c4>
 8004f50:	6019      	str	r1, [r3, #0]
 8004f52:	e002      	b.n	8004f5a <_printf_i+0x1ca>
 8004f54:	0670      	lsls	r0, r6, #25
 8004f56:	d5fb      	bpl.n	8004f50 <_printf_i+0x1c0>
 8004f58:	8019      	strh	r1, [r3, #0]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6123      	str	r3, [r4, #16]
 8004f5e:	4615      	mov	r5, r2
 8004f60:	e7bc      	b.n	8004edc <_printf_i+0x14c>
 8004f62:	682b      	ldr	r3, [r5, #0]
 8004f64:	1d1a      	adds	r2, r3, #4
 8004f66:	602a      	str	r2, [r5, #0]
 8004f68:	681d      	ldr	r5, [r3, #0]
 8004f6a:	6862      	ldr	r2, [r4, #4]
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f7fb f956 	bl	8000220 <memchr>
 8004f74:	b108      	cbz	r0, 8004f7a <_printf_i+0x1ea>
 8004f76:	1b40      	subs	r0, r0, r5
 8004f78:	6060      	str	r0, [r4, #4]
 8004f7a:	6863      	ldr	r3, [r4, #4]
 8004f7c:	6123      	str	r3, [r4, #16]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f84:	e7aa      	b.n	8004edc <_printf_i+0x14c>
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	462a      	mov	r2, r5
 8004f8a:	4649      	mov	r1, r9
 8004f8c:	4640      	mov	r0, r8
 8004f8e:	47d0      	blx	sl
 8004f90:	3001      	adds	r0, #1
 8004f92:	d0ad      	beq.n	8004ef0 <_printf_i+0x160>
 8004f94:	6823      	ldr	r3, [r4, #0]
 8004f96:	079b      	lsls	r3, r3, #30
 8004f98:	d413      	bmi.n	8004fc2 <_printf_i+0x232>
 8004f9a:	68e0      	ldr	r0, [r4, #12]
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	bfb8      	it	lt
 8004fa2:	4618      	movlt	r0, r3
 8004fa4:	e7a6      	b.n	8004ef4 <_printf_i+0x164>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4632      	mov	r2, r6
 8004faa:	4649      	mov	r1, r9
 8004fac:	4640      	mov	r0, r8
 8004fae:	47d0      	blx	sl
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d09d      	beq.n	8004ef0 <_printf_i+0x160>
 8004fb4:	3501      	adds	r5, #1
 8004fb6:	68e3      	ldr	r3, [r4, #12]
 8004fb8:	9903      	ldr	r1, [sp, #12]
 8004fba:	1a5b      	subs	r3, r3, r1
 8004fbc:	42ab      	cmp	r3, r5
 8004fbe:	dcf2      	bgt.n	8004fa6 <_printf_i+0x216>
 8004fc0:	e7eb      	b.n	8004f9a <_printf_i+0x20a>
 8004fc2:	2500      	movs	r5, #0
 8004fc4:	f104 0619 	add.w	r6, r4, #25
 8004fc8:	e7f5      	b.n	8004fb6 <_printf_i+0x226>
 8004fca:	bf00      	nop
 8004fcc:	080065f5 	.word	0x080065f5
 8004fd0:	08006606 	.word	0x08006606

08004fd4 <memmove>:
 8004fd4:	4288      	cmp	r0, r1
 8004fd6:	b510      	push	{r4, lr}
 8004fd8:	eb01 0402 	add.w	r4, r1, r2
 8004fdc:	d902      	bls.n	8004fe4 <memmove+0x10>
 8004fde:	4284      	cmp	r4, r0
 8004fe0:	4623      	mov	r3, r4
 8004fe2:	d807      	bhi.n	8004ff4 <memmove+0x20>
 8004fe4:	1e43      	subs	r3, r0, #1
 8004fe6:	42a1      	cmp	r1, r4
 8004fe8:	d008      	beq.n	8004ffc <memmove+0x28>
 8004fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ff2:	e7f8      	b.n	8004fe6 <memmove+0x12>
 8004ff4:	4402      	add	r2, r0
 8004ff6:	4601      	mov	r1, r0
 8004ff8:	428a      	cmp	r2, r1
 8004ffa:	d100      	bne.n	8004ffe <memmove+0x2a>
 8004ffc:	bd10      	pop	{r4, pc}
 8004ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005006:	e7f7      	b.n	8004ff8 <memmove+0x24>

08005008 <_sbrk_r>:
 8005008:	b538      	push	{r3, r4, r5, lr}
 800500a:	4d06      	ldr	r5, [pc, #24]	; (8005024 <_sbrk_r+0x1c>)
 800500c:	2300      	movs	r3, #0
 800500e:	4604      	mov	r4, r0
 8005010:	4608      	mov	r0, r1
 8005012:	602b      	str	r3, [r5, #0]
 8005014:	f7fb fe24 	bl	8000c60 <_sbrk>
 8005018:	1c43      	adds	r3, r0, #1
 800501a:	d102      	bne.n	8005022 <_sbrk_r+0x1a>
 800501c:	682b      	ldr	r3, [r5, #0]
 800501e:	b103      	cbz	r3, 8005022 <_sbrk_r+0x1a>
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	bd38      	pop	{r3, r4, r5, pc}
 8005024:	20000708 	.word	0x20000708

08005028 <_realloc_r>:
 8005028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502c:	4680      	mov	r8, r0
 800502e:	4614      	mov	r4, r2
 8005030:	460e      	mov	r6, r1
 8005032:	b921      	cbnz	r1, 800503e <_realloc_r+0x16>
 8005034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005038:	4611      	mov	r1, r2
 800503a:	f7ff bc57 	b.w	80048ec <_malloc_r>
 800503e:	b92a      	cbnz	r2, 800504c <_realloc_r+0x24>
 8005040:	f7ff fbe8 	bl	8004814 <_free_r>
 8005044:	4625      	mov	r5, r4
 8005046:	4628      	mov	r0, r5
 8005048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800504c:	f000 f81b 	bl	8005086 <_malloc_usable_size_r>
 8005050:	4284      	cmp	r4, r0
 8005052:	4607      	mov	r7, r0
 8005054:	d802      	bhi.n	800505c <_realloc_r+0x34>
 8005056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800505a:	d812      	bhi.n	8005082 <_realloc_r+0x5a>
 800505c:	4621      	mov	r1, r4
 800505e:	4640      	mov	r0, r8
 8005060:	f7ff fc44 	bl	80048ec <_malloc_r>
 8005064:	4605      	mov	r5, r0
 8005066:	2800      	cmp	r0, #0
 8005068:	d0ed      	beq.n	8005046 <_realloc_r+0x1e>
 800506a:	42bc      	cmp	r4, r7
 800506c:	4622      	mov	r2, r4
 800506e:	4631      	mov	r1, r6
 8005070:	bf28      	it	cs
 8005072:	463a      	movcs	r2, r7
 8005074:	f7ff fbc0 	bl	80047f8 <memcpy>
 8005078:	4631      	mov	r1, r6
 800507a:	4640      	mov	r0, r8
 800507c:	f7ff fbca 	bl	8004814 <_free_r>
 8005080:	e7e1      	b.n	8005046 <_realloc_r+0x1e>
 8005082:	4635      	mov	r5, r6
 8005084:	e7df      	b.n	8005046 <_realloc_r+0x1e>

08005086 <_malloc_usable_size_r>:
 8005086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800508a:	1f18      	subs	r0, r3, #4
 800508c:	2b00      	cmp	r3, #0
 800508e:	bfbc      	itt	lt
 8005090:	580b      	ldrlt	r3, [r1, r0]
 8005092:	18c0      	addlt	r0, r0, r3
 8005094:	4770      	bx	lr
	...

08005098 <_init>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	bf00      	nop
 800509c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800509e:	bc08      	pop	{r3}
 80050a0:	469e      	mov	lr, r3
 80050a2:	4770      	bx	lr

080050a4 <_fini>:
 80050a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050a6:	bf00      	nop
 80050a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050aa:	bc08      	pop	{r3}
 80050ac:	469e      	mov	lr, r3
 80050ae:	4770      	bx	lr
