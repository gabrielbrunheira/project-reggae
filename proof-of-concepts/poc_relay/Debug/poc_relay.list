
poc_relay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c10  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e28  08002e28  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e30  08002e30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08002e44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08002e44  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcae  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c71  00000000  00000000  0002bd2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000753  00000000  00000000  0002e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002429c  00000000  00000000  0002ea8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c98a  00000000  00000000  00052d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5926  00000000  00000000  0005f6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000025c8  00000000  00000000  00144fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001475a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08002dd0 	.word	0x08002dd0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08002dd0 	.word	0x08002dd0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b08a      	sub	sp, #40	; 0x28
 8000518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051a:	f107 0314 	add.w	r3, r7, #20
 800051e:	2200      	movs	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	605a      	str	r2, [r3, #4]
 8000524:	609a      	str	r2, [r3, #8]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052a:	4b42      	ldr	r3, [pc, #264]	; (8000634 <MX_GPIO_Init+0x120>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	4a41      	ldr	r2, [pc, #260]	; (8000634 <MX_GPIO_Init+0x120>)
 8000530:	f043 0304 	orr.w	r3, r3, #4
 8000534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <MX_GPIO_Init+0x120>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	f003 0304 	and.w	r3, r3, #4
 800053e:	613b      	str	r3, [r7, #16]
 8000540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000542:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <MX_GPIO_Init+0x120>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	4a3b      	ldr	r2, [pc, #236]	; (8000634 <MX_GPIO_Init+0x120>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <MX_GPIO_Init+0x120>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b36      	ldr	r3, [pc, #216]	; (8000634 <MX_GPIO_Init+0x120>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	4a35      	ldr	r2, [pc, #212]	; (8000634 <MX_GPIO_Init+0x120>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <MX_GPIO_Init+0x120>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60bb      	str	r3, [r7, #8]
 8000570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <MX_GPIO_Init+0x120>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <MX_GPIO_Init+0x120>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <MX_GPIO_Init+0x120>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2120      	movs	r1, #32
 800058e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000592:	f000 fd09 	bl	8000fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a2:	2300      	movs	r3, #0
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4822      	ldr	r0, [pc, #136]	; (8000638 <MX_GPIO_Init+0x124>)
 80005ae:	f000 fb79 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005b2:	2320      	movs	r3, #32
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fb6a 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_TOGGLE_Pin;
 80005d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_TOGGLE_GPIO_Port, &GPIO_InitStruct);
 80005e0:	f107 0314 	add.w	r3, r7, #20
 80005e4:	4619      	mov	r1, r3
 80005e6:	4815      	ldr	r0, [pc, #84]	; (800063c <MX_GPIO_Init+0x128>)
 80005e8:	f000 fb5c 	bl	8000ca4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin;
 80005ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_SELECT_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4619      	mov	r1, r3
 8000602:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000606:	f000 fb4d 	bl	8000ca4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	2017      	movs	r0, #23
 8000610:	f000 fb13 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000614:	2017      	movs	r0, #23
 8000616:	f000 fb2a 	bl	8000c6e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	2028      	movs	r0, #40	; 0x28
 8000620:	f000 fb0b 	bl	8000c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000624:	2028      	movs	r0, #40	; 0x28
 8000626:	f000 fb22 	bl	8000c6e <HAL_NVIC_EnableIRQ>

}
 800062a:	bf00      	nop
 800062c:	3728      	adds	r7, #40	; 0x28
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	48000800 	.word	0x48000800
 800063c:	48000400 	.word	0x48000400

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 f9ad 	bl	80009a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f805 	bl	8000656 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f7ff ff62 	bl	8000514 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000650:	f000 f8dc 	bl	800080c <MX_LPUART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000654:	e7fe      	b.n	8000654 <main+0x14>

08000656 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b094      	sub	sp, #80	; 0x50
 800065a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065c:	f107 0318 	add.w	r3, r7, #24
 8000660:	2238      	movs	r2, #56	; 0x38
 8000662:	2100      	movs	r1, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f002 fb87 	bl	8002d78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000678:	2000      	movs	r0, #0
 800067a:	f000 fcdf 	bl	800103c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067e:	2302      	movs	r3, #2
 8000680:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000682:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2340      	movs	r3, #64	; 0x40
 800068a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000694:	2304      	movs	r3, #4
 8000696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000698:	2355      	movs	r3, #85	; 0x55
 800069a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a4:	2302      	movs	r3, #2
 80006a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0318 	add.w	r3, r7, #24
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 fd79 	bl	80011a4 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006b8:	f000 f82f 	bl	800071a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	230f      	movs	r3, #15
 80006be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c0:	2303      	movs	r3, #3
 80006c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2104      	movs	r1, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f001 f877 	bl	80017c8 <HAL_RCC_ClockConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e0:	f000 f81b 	bl	800071a <Error_Handler>
  }
}
 80006e4:	bf00      	nop
 80006e6:	3750      	adds	r7, #80	; 0x50
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006fc:	d002      	beq.n	8000704 <HAL_GPIO_EXTI_Callback+0x18>
 80006fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000702:	d105      	bne.n	8000710 <HAL_GPIO_EXTI_Callback+0x24>
	{
		case BUTTON_SELECT_Pin:
		case BUTTON_TOGGLE_Pin:
			//HAL_GPIO_TogglePin(RELAY_GPIO_Port, RELAY_Pin);
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000704:	2120      	movs	r1, #32
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070a:	f000 fc65 	bl	8000fd8 <HAL_GPIO_TogglePin>
			break;
 800070e:	e000      	b.n	8000712 <HAL_GPIO_EXTI_Callback+0x26>
		default:
			break;
 8000710:	bf00      	nop
	}
}
 8000712:	bf00      	nop
 8000714:	3708      	adds	r7, #8
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071e:	b672      	cpsid	i
}
 8000720:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000722:	e7fe      	b.n	8000722 <Error_Handler+0x8>

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <HAL_MspInit+0x44>)
 800072c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800072e:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <HAL_MspInit+0x44>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	6613      	str	r3, [r2, #96]	; 0x60
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <HAL_MspInit+0x44>)
 8000738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_MspInit+0x44>)
 8000744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_MspInit+0x44>)
 8000748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800074c:	6593      	str	r3, [r2, #88]	; 0x58
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_MspInit+0x44>)
 8000750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800075a:	f000 fd13 	bl	8001184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000770:	e7fe      	b.n	8000770 <NMI_Handler+0x4>

08000772 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <MemManage_Handler+0x4>

0800077e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <UsageFault_Handler+0x4>

0800078a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr

080007a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007aa:	bf00      	nop
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr

080007b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007b8:	f000 f946 	bl	8000a48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SELECT_Pin);
 80007c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80007c8:	f000 fc20 	bl	800100c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}

080007d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_TOGGLE_Pin);
 80007d4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80007d8:	f000 fc18 	bl	800100c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80007dc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80007e0:	f000 fc14 	bl	800100c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <SystemInit+0x20>)
 80007ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f2:	4a05      	ldr	r2, [pc, #20]	; (8000808 <SystemInit+0x20>)
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000810:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000812:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_LPUART1_UART_Init+0x90>)
 8000814:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b1e      	ldr	r3, [pc, #120]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800082a:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b19      	ldr	r3, [pc, #100]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083c:	4b16      	ldr	r3, [pc, #88]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000850:	f001 fc24 	bl	800209c <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f7ff ff5e 	bl	800071a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800085e:	2100      	movs	r1, #0
 8000860:	480d      	ldr	r0, [pc, #52]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000862:	f002 f9bf 	bl	8002be4 <HAL_UARTEx_SetTxFifoThreshold>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800086c:	f7ff ff55 	bl	800071a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000870:	2100      	movs	r1, #0
 8000872:	4809      	ldr	r0, [pc, #36]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000874:	f002 f9f4 	bl	8002c60 <HAL_UARTEx_SetRxFifoThreshold>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800087e:	f7ff ff4c 	bl	800071a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000882:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_LPUART1_UART_Init+0x8c>)
 8000884:	f002 f975 	bl	8002b72 <HAL_UARTEx_DisableFifoMode>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800088e:	f7ff ff44 	bl	800071a <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000892:	bf00      	nop
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000028 	.word	0x20000028
 800089c:	40008000 	.word	0x40008000

080008a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b09e      	sub	sp, #120	; 0x78
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2254      	movs	r2, #84	; 0x54
 80008be:	2100      	movs	r1, #0
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fa59 	bl	8002d78 <memset>
  if(uartHandle->Instance==LPUART1)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a1f      	ldr	r2, [pc, #124]	; (8000948 <HAL_UART_MspInit+0xa8>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d136      	bne.n	800093e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80008d0:	2320      	movs	r3, #32
 80008d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0310 	add.w	r3, r7, #16
 80008dc:	4618      	mov	r0, r3
 80008de:	f001 f98f 	bl	8001c00 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008e8:	f7ff ff17 	bl	800071a <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80008ec:	4b17      	ldr	r3, [pc, #92]	; (800094c <HAL_UART_MspInit+0xac>)
 80008ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008f0:	4a16      	ldr	r2, [pc, #88]	; (800094c <HAL_UART_MspInit+0xac>)
 80008f2:	f043 0301 	orr.w	r3, r3, #1
 80008f6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <HAL_UART_MspInit+0xac>)
 80008fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80008fc:	f003 0301 	and.w	r3, r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000904:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_UART_MspInit+0xac>)
 8000906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000908:	4a10      	ldr	r2, [pc, #64]	; (800094c <HAL_UART_MspInit+0xac>)
 800090a:	f043 0301 	orr.w	r3, r3, #1
 800090e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000910:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_UART_MspInit+0xac>)
 8000912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800091c:	230c      	movs	r3, #12
 800091e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800092c:	230c      	movs	r3, #12
 800092e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 f9b3 	bl	8000ca4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800093e:	bf00      	nop
 8000940:	3778      	adds	r7, #120	; 0x78
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40008000 	.word	0x40008000
 800094c:	40021000 	.word	0x40021000

08000950 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000952:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000954:	f7ff ff48 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000958:	480c      	ldr	r0, [pc, #48]	; (800098c <LoopForever+0x6>)
  ldr r1, =_edata
 800095a:	490d      	ldr	r1, [pc, #52]	; (8000990 <LoopForever+0xa>)
  ldr r2, =_sidata
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <LoopForever+0xe>)
  movs r3, #0
 800095e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000960:	e002      	b.n	8000968 <LoopCopyDataInit>

08000962 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000962:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000964:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000966:	3304      	adds	r3, #4

08000968 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000968:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800096a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800096c:	d3f9      	bcc.n	8000962 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000970:	4c0a      	ldr	r4, [pc, #40]	; (800099c <LoopForever+0x16>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000974:	e001      	b.n	800097a <LoopFillZerobss>

08000976 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000976:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000978:	3204      	adds	r2, #4

0800097a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800097a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800097c:	d3fb      	bcc.n	8000976 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800097e:	f002 fa03 	bl	8002d88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000982:	f7ff fe5d 	bl	8000640 <main>

08000986 <LoopForever>:

LoopForever:
    b LoopForever
 8000986:	e7fe      	b.n	8000986 <LoopForever>
  ldr   r0, =_estack
 8000988:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800098c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000990:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000994:	08002e38 	.word	0x08002e38
  ldr r2, =_sbss
 8000998:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800099c:	200000c0 	.word	0x200000c0

080009a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009a0:	e7fe      	b.n	80009a0 <ADC1_2_IRQHandler>

080009a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b082      	sub	sp, #8
 80009a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009a8:	2300      	movs	r3, #0
 80009aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f939 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f80e 	bl	80009d4 <HAL_InitTick>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d002      	beq.n	80009c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	71fb      	strb	r3, [r7, #7]
 80009c2:	e001      	b.n	80009c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009c4:	f7ff feae 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009c8:	79fb      	ldrb	r3, [r7, #7]

}
 80009ca:	4618      	mov	r0, r3
 80009cc:	3708      	adds	r7, #8
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_InitTick+0x68>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d022      	beq.n	8000a2e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009e8:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_InitTick+0x6c>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4b13      	ldr	r3, [pc, #76]	; (8000a3c <HAL_InitTick+0x68>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f944 	bl	8000c8a <HAL_SYSTICK_Config>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d10f      	bne.n	8000a28 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d809      	bhi.n	8000a22 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	f04f 30ff 	mov.w	r0, #4294967295
 8000a16:	f000 f910 	bl	8000c3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <HAL_InitTick+0x70>)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e007      	b.n	8000a32 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	73fb      	strb	r3, [r7, #15]
 8000a26:	e004      	b.n	8000a32 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e001      	b.n	8000a32 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000000 	.word	0x20000000
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <HAL_IncTick+0x20>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4413      	add	r3, r2
 8000a56:	4a03      	ldr	r2, [pc, #12]	; (8000a64 <HAL_IncTick+0x1c>)
 8000a58:	6013      	str	r3, [r2, #0]
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	200000bc 	.word	0x200000bc
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000bc 	.word	0x200000bc

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ff29 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b086      	sub	sp, #24
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	4603      	mov	r3, r0
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
 8000c46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c48:	f7ff ff40 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	68b9      	ldr	r1, [r7, #8]
 8000c52:	6978      	ldr	r0, [r7, #20]
 8000c54:	f7ff ff90 	bl	8000b78 <NVIC_EncodePriority>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff ff5f 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c66:	bf00      	nop
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b082      	sub	sp, #8
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff33 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffa4 	bl	8000be0 <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b087      	sub	sp, #28
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cb2:	e15a      	b.n	8000f6a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	f000 814c 	beq.w	8000f64 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f003 0303 	and.w	r3, r3, #3
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d005      	beq.n	8000ce4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d130      	bne.n	8000d46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	693a      	ldr	r2, [r7, #16]
 8000d12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	693a      	ldr	r2, [r7, #16]
 8000d26:	4013      	ands	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	091b      	lsrs	r3, r3, #4
 8000d30:	f003 0201 	and.w	r2, r3, #1
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d017      	beq.n	8000d82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b02      	cmp	r3, #2
 8000d8c:	d123      	bne.n	8000dd6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	08da      	lsrs	r2, r3, #3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3208      	adds	r2, #8
 8000d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	220f      	movs	r2, #15
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4013      	ands	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	691a      	ldr	r2, [r3, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	f003 0307 	and.w	r3, r3, #7
 8000dbc:	009b      	lsls	r3, r3, #2
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	08da      	lsrs	r2, r3, #3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3208      	adds	r2, #8
 8000dd0:	6939      	ldr	r1, [r7, #16]
 8000dd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0203 	and.w	r2, r3, #3
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	693a      	ldr	r2, [r7, #16]
 8000e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f000 80a6 	beq.w	8000f64 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e18:	4b5b      	ldr	r3, [pc, #364]	; (8000f88 <HAL_GPIO_Init+0x2e4>)
 8000e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1c:	4a5a      	ldr	r2, [pc, #360]	; (8000f88 <HAL_GPIO_Init+0x2e4>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6613      	str	r3, [r2, #96]	; 0x60
 8000e24:	4b58      	ldr	r3, [pc, #352]	; (8000f88 <HAL_GPIO_Init+0x2e4>)
 8000e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e28:	f003 0301 	and.w	r3, r3, #1
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e30:	4a56      	ldr	r2, [pc, #344]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	089b      	lsrs	r3, r3, #2
 8000e36:	3302      	adds	r3, #2
 8000e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	220f      	movs	r2, #15
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4013      	ands	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5a:	d01f      	beq.n	8000e9c <HAL_GPIO_Init+0x1f8>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a4c      	ldr	r2, [pc, #304]	; (8000f90 <HAL_GPIO_Init+0x2ec>)
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d019      	beq.n	8000e98 <HAL_GPIO_Init+0x1f4>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <HAL_GPIO_Init+0x2f0>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d013      	beq.n	8000e94 <HAL_GPIO_Init+0x1f0>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4a4a      	ldr	r2, [pc, #296]	; (8000f98 <HAL_GPIO_Init+0x2f4>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d00d      	beq.n	8000e90 <HAL_GPIO_Init+0x1ec>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a49      	ldr	r2, [pc, #292]	; (8000f9c <HAL_GPIO_Init+0x2f8>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d007      	beq.n	8000e8c <HAL_GPIO_Init+0x1e8>
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <HAL_GPIO_Init+0x2fc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d101      	bne.n	8000e88 <HAL_GPIO_Init+0x1e4>
 8000e84:	2305      	movs	r3, #5
 8000e86:	e00a      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e88:	2306      	movs	r3, #6
 8000e8a:	e008      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	e006      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e90:	2303      	movs	r3, #3
 8000e92:	e004      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e94:	2302      	movs	r3, #2
 8000e96:	e002      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e000      	b.n	8000e9e <HAL_GPIO_Init+0x1fa>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	4093      	lsls	r3, r2
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eae:	4937      	ldr	r1, [pc, #220]	; (8000f8c <HAL_GPIO_Init+0x2e8>)
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ebc:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000ee0:	4a30      	ldr	r2, [pc, #192]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ee6:	4b2f      	ldr	r3, [pc, #188]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d003      	beq.n	8000f0a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f0a:	4a26      	ldr	r2, [pc, #152]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000f10:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f3a:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <HAL_GPIO_Init+0x300>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	fa22 f303 	lsr.w	r3, r2, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f47f ae9d 	bne.w	8000cb4 <HAL_GPIO_Init+0x10>
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	371c      	adds	r7, #28
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40021000 	.word	0x40021000
 8000f8c:	40010000 	.word	0x40010000
 8000f90:	48000400 	.word	0x48000400
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000
 8000fa0:	48001400 	.word	0x48001400
 8000fa4:	40010400 	.word	0x40010400

08000fa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	807b      	strh	r3, [r7, #2]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fb8:	787b      	ldrb	r3, [r7, #1]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fbe:	887a      	ldrh	r2, [r7, #2]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc4:	e002      	b.n	8000fcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fc6:	887a      	ldrh	r2, [r7, #2]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	695b      	ldr	r3, [r3, #20]
 8000fe8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fea:	887a      	ldrh	r2, [r7, #2]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43d9      	mvns	r1, r3
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	400b      	ands	r3, r1
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
}
 8001000:	bf00      	nop
 8001002:	3714      	adds	r7, #20
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	4013      	ands	r3, r2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001022:	4a05      	ldr	r2, [pc, #20]	; (8001038 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fb5e 	bl	80006ec <HAL_GPIO_EXTI_Callback>
  }
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d141      	bne.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800104a:	4b4b      	ldr	r3, [pc, #300]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001056:	d131      	bne.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001058:	4b47      	ldr	r3, [pc, #284]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800105a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800105e:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001068:	4b43      	ldr	r3, [pc, #268]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001070:	4a41      	ldr	r2, [pc, #260]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001078:	4b40      	ldr	r3, [pc, #256]	; (800117c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2232      	movs	r2, #50	; 0x32
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	4a3f      	ldr	r2, [pc, #252]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	0c9b      	lsrs	r3, r3, #18
 800108a:	3301      	adds	r3, #1
 800108c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800108e:	e002      	b.n	8001096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3b01      	subs	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001096:	4b38      	ldr	r3, [pc, #224]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800109e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010a2:	d102      	bne.n	80010aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f2      	bne.n	8001090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010aa:	4b33      	ldr	r3, [pc, #204]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ac:	695b      	ldr	r3, [r3, #20]
 80010ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010b6:	d158      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010b8:	2303      	movs	r3, #3
 80010ba:	e057      	b.n	800116c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010bc:	4b2e      	ldr	r3, [pc, #184]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010c2:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010cc:	e04d      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d4:	d141      	bne.n	800115a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010d6:	4b28      	ldr	r3, [pc, #160]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e2:	d131      	bne.n	8001148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e4:	4b24      	ldr	r3, [pc, #144]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010fc:	4a1e      	ldr	r2, [pc, #120]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2232      	movs	r2, #50	; 0x32
 800110a:	fb02 f303 	mul.w	r3, r2, r3
 800110e:	4a1c      	ldr	r2, [pc, #112]	; (8001180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001110:	fba2 2303 	umull	r2, r3, r2, r3
 8001114:	0c9b      	lsrs	r3, r3, #18
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111a:	e002      	b.n	8001122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3b01      	subs	r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800112e:	d102      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1f2      	bne.n	800111c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001142:	d112      	bne.n	800116a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e011      	b.n	800116c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001158:	e007      	b.n	800116a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001164:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40007000 	.word	0x40007000
 800117c:	20000000 	.word	0x20000000
 8001180:	431bde83 	.word	0x431bde83

08001184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001188:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800118e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001192:	6093      	str	r3, [r2, #8]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40007000 	.word	0x40007000

080011a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e2fe      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d075      	beq.n	80012ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c2:	4b97      	ldr	r3, [pc, #604]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 030c 	and.w	r3, r3, #12
 80011ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011cc:	4b94      	ldr	r3, [pc, #592]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d102      	bne.n	80011e2 <HAL_RCC_OscConfig+0x3e>
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d002      	beq.n	80011e8 <HAL_RCC_OscConfig+0x44>
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d10b      	bne.n	8001200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e8:	4b8d      	ldr	r3, [pc, #564]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d05b      	beq.n	80012ac <HAL_RCC_OscConfig+0x108>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d157      	bne.n	80012ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e2d9      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d106      	bne.n	8001218 <HAL_RCC_OscConfig+0x74>
 800120a:	4b85      	ldr	r3, [pc, #532]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a84      	ldr	r2, [pc, #528]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	e01d      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001220:	d10c      	bne.n	800123c <HAL_RCC_OscConfig+0x98>
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a7e      	ldr	r2, [pc, #504]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	4b7c      	ldr	r3, [pc, #496]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7b      	ldr	r2, [pc, #492]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0xb0>
 800123c:	4b78      	ldr	r3, [pc, #480]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a77      	ldr	r2, [pc, #476]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b75      	ldr	r3, [pc, #468]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a74      	ldr	r2, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d013      	beq.n	8001284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125c:	f7ff fc06 	bl	8000a6c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc02 	bl	8000a6c <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e29e      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001276:	4b6a      	ldr	r3, [pc, #424]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xc0>
 8001282:	e014      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fbf2 	bl	8000a6c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fbee 	bl	8000a6c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b64      	cmp	r3, #100	; 0x64
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e28a      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129e:	4b60      	ldr	r3, [pc, #384]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f0      	bne.n	800128c <HAL_RCC_OscConfig+0xe8>
 80012aa:	e000      	b.n	80012ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d075      	beq.n	80013a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ba:	4b59      	ldr	r3, [pc, #356]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c4:	4b56      	ldr	r3, [pc, #344]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	2b0c      	cmp	r3, #12
 80012d2:	d102      	bne.n	80012da <HAL_RCC_OscConfig+0x136>
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d002      	beq.n	80012e0 <HAL_RCC_OscConfig+0x13c>
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b04      	cmp	r3, #4
 80012de:	d11f      	bne.n	8001320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e0:	4b4f      	ldr	r3, [pc, #316]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x154>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e25d      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f8:	4b49      	ldr	r3, [pc, #292]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	061b      	lsls	r3, r3, #24
 8001306:	4946      	ldr	r1, [pc, #280]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001308:	4313      	orrs	r3, r2
 800130a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800130c:	4b45      	ldr	r3, [pc, #276]	; (8001424 <HAL_RCC_OscConfig+0x280>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fb5f 	bl	80009d4 <HAL_InitTick>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d043      	beq.n	80013a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e249      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d023      	beq.n	8001370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001328:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800132e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001334:	f7ff fb9a 	bl	8000a6c <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133c:	f7ff fb96 	bl	8000a6c <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e232      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134e:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f0      	beq.n	800133c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	691b      	ldr	r3, [r3, #16]
 8001366:	061b      	lsls	r3, r3, #24
 8001368:	492d      	ldr	r1, [pc, #180]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 800136a:	4313      	orrs	r3, r2
 800136c:	604b      	str	r3, [r1, #4]
 800136e:	e01a      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001370:	4b2b      	ldr	r3, [pc, #172]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a2a      	ldr	r2, [pc, #168]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001376:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800137a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800137c:	f7ff fb76 	bl	8000a6c <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001384:	f7ff fb72 	bl	8000a6c <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b02      	cmp	r3, #2
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e20e      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1f0      	bne.n	8001384 <HAL_RCC_OscConfig+0x1e0>
 80013a2:	e000      	b.n	80013a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0308 	and.w	r3, r3, #8
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d041      	beq.n	8001436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d01c      	beq.n	80013f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80013bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c0:	4a17      	ldr	r2, [pc, #92]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fb4f 	bl	8000a6c <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013d0:	e008      	b.n	80013e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fb4b 	bl	8000a6c <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d901      	bls.n	80013e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e1e7      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80013e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0ef      	beq.n	80013d2 <HAL_RCC_OscConfig+0x22e>
 80013f2:	e020      	b.n	8001436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f4:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80013f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_RCC_OscConfig+0x27c>)
 80013fc:	f023 0301 	bic.w	r3, r3, #1
 8001400:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001404:	f7ff fb32 	bl	8000a6c <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800140a:	e00d      	b.n	8001428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140c:	f7ff fb2e 	bl	8000a6c <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d906      	bls.n	8001428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e1ca      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001428:	4b8c      	ldr	r3, [pc, #560]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800142a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d1ea      	bne.n	800140c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0304 	and.w	r3, r3, #4
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 80a6 	beq.w	8001590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001444:	2300      	movs	r3, #0
 8001446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001448:	4b84      	ldr	r3, [pc, #528]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <HAL_RCC_OscConfig+0x2b4>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <HAL_RCC_OscConfig+0x2b6>
 8001458:	2300      	movs	r3, #0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00d      	beq.n	800147a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	4b7f      	ldr	r3, [pc, #508]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	4a7e      	ldr	r2, [pc, #504]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6593      	str	r3, [r2, #88]	; 0x58
 800146a:	4b7c      	ldr	r3, [pc, #496]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001476:	2301      	movs	r3, #1
 8001478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800147a:	4b79      	ldr	r3, [pc, #484]	; (8001660 <HAL_RCC_OscConfig+0x4bc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001482:	2b00      	cmp	r3, #0
 8001484:	d118      	bne.n	80014b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001486:	4b76      	ldr	r3, [pc, #472]	; (8001660 <HAL_RCC_OscConfig+0x4bc>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a75      	ldr	r2, [pc, #468]	; (8001660 <HAL_RCC_OscConfig+0x4bc>)
 800148c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001492:	f7ff faeb 	bl	8000a6c <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800149a:	f7ff fae7 	bl	8000a6c <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e183      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014ac:	4b6c      	ldr	r3, [pc, #432]	; (8001660 <HAL_RCC_OscConfig+0x4bc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d108      	bne.n	80014d2 <HAL_RCC_OscConfig+0x32e>
 80014c0:	4b66      	ldr	r3, [pc, #408]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a65      	ldr	r2, [pc, #404]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014d0:	e024      	b.n	800151c <HAL_RCC_OscConfig+0x378>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d110      	bne.n	80014fc <HAL_RCC_OscConfig+0x358>
 80014da:	4b60      	ldr	r3, [pc, #384]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e0:	4a5e      	ldr	r2, [pc, #376]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ea:	4b5c      	ldr	r3, [pc, #368]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014f0:	4a5a      	ldr	r2, [pc, #360]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014fa:	e00f      	b.n	800151c <HAL_RCC_OscConfig+0x378>
 80014fc:	4b57      	ldr	r3, [pc, #348]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80014fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001502:	4a56      	ldr	r2, [pc, #344]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001504:	f023 0301 	bic.w	r3, r3, #1
 8001508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800150c:	4b53      	ldr	r3, [pc, #332]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800150e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001512:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001514:	f023 0304 	bic.w	r3, r3, #4
 8001518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d016      	beq.n	8001552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001524:	f7ff faa2 	bl	8000a6c <HAL_GetTick>
 8001528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800152c:	f7ff fa9e 	bl	8000a6c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e138      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001542:	4b46      	ldr	r3, [pc, #280]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001548:	f003 0302 	and.w	r3, r3, #2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d0ed      	beq.n	800152c <HAL_RCC_OscConfig+0x388>
 8001550:	e015      	b.n	800157e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001552:	f7ff fa8b 	bl	8000a6c <HAL_GetTick>
 8001556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001558:	e00a      	b.n	8001570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155a:	f7ff fa87 	bl	8000a6c <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	f241 3288 	movw	r2, #5000	; 0x1388
 8001568:	4293      	cmp	r3, r2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e121      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001570:	4b3a      	ldr	r3, [pc, #232]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001576:	f003 0302 	and.w	r3, r3, #2
 800157a:	2b00      	cmp	r3, #0
 800157c:	d1ed      	bne.n	800155a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800157e:	7ffb      	ldrb	r3, [r7, #31]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d105      	bne.n	8001590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001584:	4b35      	ldr	r3, [pc, #212]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	4a34      	ldr	r2, [pc, #208]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800158a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0320 	and.w	r3, r3, #32
 8001598:	2b00      	cmp	r3, #0
 800159a:	d03c      	beq.n	8001616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	699b      	ldr	r3, [r3, #24]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d01c      	beq.n	80015de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80015a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015aa:	4a2c      	ldr	r2, [pc, #176]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fa5a 	bl	8000a6c <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015bc:	f7ff fa56 	bl	8000a6c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e0f2      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ce:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80015d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d0ef      	beq.n	80015bc <HAL_RCC_OscConfig+0x418>
 80015dc:	e01b      	b.n	8001616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015de:	4b1f      	ldr	r3, [pc, #124]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80015e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e4:	4a1d      	ldr	r2, [pc, #116]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ee:	f7ff fa3d 	bl	8000a6c <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f6:	f7ff fa39 	bl	8000a6c <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0d5      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001608:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800160a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ef      	bne.n	80015f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80c9 	beq.w	80017b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001620:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f003 030c 	and.w	r3, r3, #12
 8001628:	2b0c      	cmp	r3, #12
 800162a:	f000 8083 	beq.w	8001734 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d15e      	bne.n	80016f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001636:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_RCC_OscConfig+0x4b8>)
 800163c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fa13 	bl	8000a6c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001648:	e00c      	b.n	8001664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fa0f 	bl	8000a6c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d905      	bls.n	8001664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e0ab      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
 800165c:	40021000 	.word	0x40021000
 8001660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001664:	4b55      	ldr	r3, [pc, #340]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ec      	bne.n	800164a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001670:	4b52      	ldr	r3, [pc, #328]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <HAL_RCC_OscConfig+0x61c>)
 8001676:	4013      	ands	r3, r2
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6a11      	ldr	r1, [r2, #32]
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001680:	3a01      	subs	r2, #1
 8001682:	0112      	lsls	r2, r2, #4
 8001684:	4311      	orrs	r1, r2
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800168a:	0212      	lsls	r2, r2, #8
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001692:	0852      	lsrs	r2, r2, #1
 8001694:	3a01      	subs	r2, #1
 8001696:	0552      	lsls	r2, r2, #21
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800169e:	0852      	lsrs	r2, r2, #1
 80016a0:	3a01      	subs	r2, #1
 80016a2:	0652      	lsls	r2, r2, #25
 80016a4:	4311      	orrs	r1, r2
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80016aa:	06d2      	lsls	r2, r2, #27
 80016ac:	430a      	orrs	r2, r1
 80016ae:	4943      	ldr	r1, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a40      	ldr	r2, [pc, #256]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016c0:	4b3e      	ldr	r3, [pc, #248]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	4a3d      	ldr	r2, [pc, #244]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f9ce 	bl	8000a6c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d4:	f7ff f9ca 	bl	8000a6c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e066      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016e6:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x530>
 80016f2:	e05e      	b.n	80017b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f4:	4b31      	ldr	r3, [pc, #196]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a30      	ldr	r2, [pc, #192]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 80016fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff f9b4 	bl	8000a6c <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001708:	f7ff f9b0 	bl	8000a6c <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e04c      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800171a:	4b28      	ldr	r3, [pc, #160]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1f0      	bne.n	8001708 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001726:	4b25      	ldr	r3, [pc, #148]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	4924      	ldr	r1, [pc, #144]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 800172c:	4b25      	ldr	r3, [pc, #148]	; (80017c4 <HAL_RCC_OscConfig+0x620>)
 800172e:	4013      	ands	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]
 8001732:	e03e      	b.n	80017b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d101      	bne.n	8001740 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e039      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001740:	4b1e      	ldr	r3, [pc, #120]	; (80017bc <HAL_RCC_OscConfig+0x618>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	429a      	cmp	r2, r3
 8001752:	d12c      	bne.n	80017ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	3b01      	subs	r3, #1
 8001760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d123      	bne.n	80017ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001770:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d11b      	bne.n	80017ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001780:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d113      	bne.n	80017ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	085b      	lsrs	r3, r3, #1
 8001792:	3b01      	subs	r3, #1
 8001794:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d109      	bne.n	80017ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3720      	adds	r7, #32
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40021000 	.word	0x40021000
 80017c0:	019f800c 	.word	0x019f800c
 80017c4:	feeefffc 	.word	0xfeeefffc

080017c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e11e      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e0:	4b91      	ldr	r3, [pc, #580]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d910      	bls.n	8001810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b8e      	ldr	r3, [pc, #568]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f023 020f 	bic.w	r2, r3, #15
 80017f6:	498c      	ldr	r1, [pc, #560]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fe:	4b8a      	ldr	r3, [pc, #552]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	683a      	ldr	r2, [r7, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d001      	beq.n	8001810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e106      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d073      	beq.n	8001904 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d129      	bne.n	8001878 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001824:	4b81      	ldr	r3, [pc, #516]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0f4      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001834:	f000 f99e 	bl	8001b74 <RCC_GetSysClockFreqFromPLLSource>
 8001838:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4a7c      	ldr	r2, [pc, #496]	; (8001a30 <HAL_RCC_ClockConfig+0x268>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d93f      	bls.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001842:	4b7a      	ldr	r3, [pc, #488]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d009      	beq.n	8001862 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001856:	2b00      	cmp	r3, #0
 8001858:	d033      	beq.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800185e:	2b00      	cmp	r3, #0
 8001860:	d12f      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800186a:	4a70      	ldr	r2, [pc, #448]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001872:	2380      	movs	r3, #128	; 0x80
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e024      	b.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d107      	bne.n	8001890 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001880:	4b6a      	ldr	r3, [pc, #424]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e0c6      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001890:	4b66      	ldr	r3, [pc, #408]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d101      	bne.n	80018a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e0be      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018a0:	f000 f8ce 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	4a61      	ldr	r2, [pc, #388]	; (8001a30 <HAL_RCC_ClockConfig+0x268>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d909      	bls.n	80018c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018ae:	4b5f      	ldr	r3, [pc, #380]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018b6:	4a5d      	ldr	r2, [pc, #372]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018be:	2380      	movs	r3, #128	; 0x80
 80018c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f023 0203 	bic.w	r2, r3, #3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4957      	ldr	r1, [pc, #348]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018d4:	f7ff f8ca 	bl	8000a6c <HAL_GetTick>
 80018d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018da:	e00a      	b.n	80018f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018dc:	f7ff f8c6 	bl	8000a6c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e095      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f2:	4b4e      	ldr	r3, [pc, #312]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 020c 	and.w	r2, r3, #12
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	429a      	cmp	r2, r3
 8001902:	d1eb      	bne.n	80018dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d023      	beq.n	8001958 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800191c:	4b43      	ldr	r3, [pc, #268]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a42      	ldr	r2, [pc, #264]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001922:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001926:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d007      	beq.n	8001944 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001934:	4b3d      	ldr	r3, [pc, #244]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800193c:	4a3b      	ldr	r2, [pc, #236]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 800193e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b39      	ldr	r3, [pc, #228]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4936      	ldr	r1, [pc, #216]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
 8001956:	e008      	b.n	800196a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	2b80      	cmp	r3, #128	; 0x80
 800195c:	d105      	bne.n	800196a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800195e:	4b33      	ldr	r3, [pc, #204]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a32      	ldr	r2, [pc, #200]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 8001964:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001968:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800196a:	4b2f      	ldr	r3, [pc, #188]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d21d      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f023 020f 	bic.w	r2, r3, #15
 8001980:	4929      	ldr	r1, [pc, #164]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001988:	f7ff f870 	bl	8000a6c <HAL_GetTick>
 800198c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198e:	e00a      	b.n	80019a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001990:	f7ff f86c 	bl	8000a6c <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	f241 3288 	movw	r2, #5000	; 0x1388
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e03b      	b.n	8001a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <HAL_RCC_ClockConfig+0x260>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ed      	bne.n	8001990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d008      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c0:	4b1a      	ldr	r3, [pc, #104]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	4917      	ldr	r1, [pc, #92]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d009      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019de:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	490f      	ldr	r1, [pc, #60]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f2:	f000 f825 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80019f6:	4602      	mov	r2, r0
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <HAL_RCC_ClockConfig+0x264>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	091b      	lsrs	r3, r3, #4
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	490c      	ldr	r1, [pc, #48]	; (8001a34 <HAL_RCC_ClockConfig+0x26c>)
 8001a04:	5ccb      	ldrb	r3, [r1, r3]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <HAL_RCC_ClockConfig+0x270>)
 8001a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe ffdc 	bl	80009d4 <HAL_InitTick>
 8001a1c:	4603      	mov	r3, r0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40022000 	.word	0x40022000
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	04c4b400 	.word	0x04c4b400
 8001a34:	08002de8 	.word	0x08002de8
 8001a38:	20000000 	.word	0x20000000
 8001a3c:	20000004 	.word	0x20000004

08001a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b087      	sub	sp, #28
 8001a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a46:	4b2c      	ldr	r3, [pc, #176]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 030c 	and.w	r3, r3, #12
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d102      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a52:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e047      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a58:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 030c 	and.w	r3, r3, #12
 8001a60:	2b08      	cmp	r3, #8
 8001a62:	d102      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	e03e      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a6a:	4b23      	ldr	r3, [pc, #140]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 030c 	and.w	r3, r3, #12
 8001a72:	2b0c      	cmp	r3, #12
 8001a74:	d136      	bne.n	8001ae4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	091b      	lsrs	r3, r3, #4
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d10c      	bne.n	8001aae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a94:	4a1a      	ldr	r2, [pc, #104]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a9c:	4a16      	ldr	r2, [pc, #88]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a9e:	68d2      	ldr	r2, [r2, #12]
 8001aa0:	0a12      	lsrs	r2, r2, #8
 8001aa2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aa6:	fb02 f303 	mul.w	r3, r2, r3
 8001aaa:	617b      	str	r3, [r7, #20]
      break;
 8001aac:	e00c      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ab8:	68d2      	ldr	r2, [r2, #12]
 8001aba:	0a12      	lsrs	r2, r2, #8
 8001abc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac0:	fb02 f303 	mul.w	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
      break;
 8001ac6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	0e5b      	lsrs	r3, r3, #25
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e001      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001ae8:	693b      	ldr	r3, [r7, #16]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	016e3600 	.word	0x016e3600

08001b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a1b      	lsrs	r3, r3, #8
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4904      	ldr	r1, [pc, #16]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08002df8 	.word	0x08002df8

08001b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b4c:	f7ff ffda 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0adb      	lsrs	r3, r3, #11
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4904      	ldr	r1, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	08002df8 	.word	0x08002df8

08001b74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b7a:	4b1e      	ldr	r3, [pc, #120]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f003 0303 	and.w	r3, r3, #3
 8001b82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d10c      	bne.n	8001bb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001b98:	4a17      	ldr	r2, [pc, #92]	; (8001bf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba0:	4a14      	ldr	r2, [pc, #80]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001ba2:	68d2      	ldr	r2, [r2, #12]
 8001ba4:	0a12      	lsrs	r2, r2, #8
 8001ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001baa:	fb02 f303 	mul.w	r3, r2, r3
 8001bae:	617b      	str	r3, [r7, #20]
    break;
 8001bb0:	e00c      	b.n	8001bcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bb2:	4a12      	ldr	r2, [pc, #72]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bbc:	68d2      	ldr	r2, [r2, #12]
 8001bbe:	0a12      	lsrs	r2, r2, #8
 8001bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bc4:	fb02 f303 	mul.w	r3, r2, r3
 8001bc8:	617b      	str	r3, [r7, #20]
    break;
 8001bca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bcc:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0e5b      	lsrs	r3, r3, #25
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	371c      	adds	r7, #28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	016e3600 	.word	0x016e3600
 8001bfc:	00f42400 	.word	0x00f42400

08001c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c08:	2300      	movs	r3, #0
 8001c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	f000 8098 	beq.w	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c22:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c2e:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	4a3f      	ldr	r2, [pc, #252]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c38:	6593      	str	r3, [r2, #88]	; 0x58
 8001c3a:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c46:	2301      	movs	r3, #1
 8001c48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a39      	ldr	r2, [pc, #228]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c56:	f7fe ff09 	bl	8000a6c <HAL_GetTick>
 8001c5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7fe ff05 	bl	8000a6c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d902      	bls.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	74fb      	strb	r3, [r7, #19]
        break;
 8001c70:	e005      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0ef      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c7e:	7cfb      	ldrb	r3, [r7, #19]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d159      	bne.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01e      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d019      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca0:	4b23      	ldr	r3, [pc, #140]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001caa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cac:	4b20      	ldr	r3, [pc, #128]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cb2:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001ccc:	4a18      	ldr	r2, [pc, #96]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d016      	beq.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7fe fec5 	bl	8000a6c <HAL_GetTick>
 8001ce2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ce4:	e00b      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce6:	f7fe fec1 	bl	8000a6c <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d902      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	74fb      	strb	r3, [r7, #19]
            break;
 8001cfc:	e006      	b.n	8001d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	f003 0302 	and.w	r3, r3, #2
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d0ec      	beq.n	8001ce6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d0c:	7cfb      	ldrb	r3, [r7, #19]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10b      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d12:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d20:	4903      	ldr	r1, [pc, #12]	; (8001d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d28:	e008      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	74bb      	strb	r3, [r7, #18]
 8001d2e:	e005      	b.n	8001d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d38:	7cfb      	ldrb	r3, [r7, #19]
 8001d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d3c:	7c7b      	ldrb	r3, [r7, #17]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d105      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d42:	4ba7      	ldr	r3, [pc, #668]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d46:	4aa6      	ldr	r2, [pc, #664]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d5a:	4ba1      	ldr	r3, [pc, #644]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d60:	f023 0203 	bic.w	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	499d      	ldr	r1, [pc, #628]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d7c:	4b98      	ldr	r3, [pc, #608]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d82:	f023 020c 	bic.w	r2, r3, #12
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4995      	ldr	r1, [pc, #596]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0304 	and.w	r3, r3, #4
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d9e:	4b90      	ldr	r3, [pc, #576]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001da4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	498c      	ldr	r1, [pc, #560]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc0:	4b87      	ldr	r3, [pc, #540]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	4984      	ldr	r1, [pc, #528]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0310 	and.w	r3, r3, #16
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001de2:	4b7f      	ldr	r3, [pc, #508]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	497b      	ldr	r1, [pc, #492]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e04:	4b76      	ldr	r3, [pc, #472]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	4973      	ldr	r1, [pc, #460]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	496a      	ldr	r1, [pc, #424]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4962      	ldr	r1, [pc, #392]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e6a:	4b5d      	ldr	r3, [pc, #372]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e70:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e78:	4959      	ldr	r1, [pc, #356]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e8c:	4b54      	ldr	r3, [pc, #336]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e92:	f023 0203 	bic.w	r2, r3, #3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e9a:	4951      	ldr	r1, [pc, #324]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eae:	4b4c      	ldr	r3, [pc, #304]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	4948      	ldr	r1, [pc, #288]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed0:	4b43      	ldr	r3, [pc, #268]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ed6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4940      	ldr	r1, [pc, #256]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eee:	d105      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef0:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001efa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d015      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f08:	4b35      	ldr	r3, [pc, #212]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	4932      	ldr	r1, [pc, #200]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f26:	d105      	bne.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f28:	4b2d      	ldr	r3, [pc, #180]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	4a2c      	ldr	r2, [pc, #176]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d015      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f40:	4b27      	ldr	r3, [pc, #156]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4e:	4924      	ldr	r1, [pc, #144]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f5e:	d105      	bne.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f60:	4b1f      	ldr	r3, [pc, #124]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	4a1e      	ldr	r2, [pc, #120]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d015      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f78:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f86:	4916      	ldr	r1, [pc, #88]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f96:	d105      	bne.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4a10      	ldr	r2, [pc, #64]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d019      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	4908      	ldr	r1, [pc, #32]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fce:	d109      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd0:	4b03      	ldr	r3, [pc, #12]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a02      	ldr	r2, [pc, #8]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fda:	60d3      	str	r3, [r2, #12]
 8001fdc:	e002      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8001fde:	bf00      	nop
 8001fe0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4926      	ldr	r1, [pc, #152]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002010:	4b21      	ldr	r3, [pc, #132]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	4a20      	ldr	r2, [pc, #128]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800202a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800202e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	4918      	ldr	r1, [pc, #96]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002038:	4313      	orrs	r3, r2
 800203a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002046:	d105      	bne.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002048:	4b13      	ldr	r3, [pc, #76]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002052:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d015      	beq.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002066:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206e:	490a      	ldr	r1, [pc, #40]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800207e:	d105      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002080:	4b05      	ldr	r3, [pc, #20]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	4a04      	ldr	r2, [pc, #16]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800208a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800208c:	7cbb      	ldrb	r3, [r7, #18]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e042      	b.n	8002134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7fe fbed 	bl	80008a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2224      	movs	r2, #36	; 0x24
 80020ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0201 	bic.w	r2, r2, #1
 80020dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d002      	beq.n	80020ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fb24 	bl	8002734 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f825 	bl	800213c <UART_SetConfig>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01b      	b.n	8002134 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800210a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800211a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fba3 	bl	8002878 <UART_CheckIdleState>
 8002132:	4603      	mov	r3, r0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800213c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002140:	b08c      	sub	sp, #48	; 0x30
 8002142:	af00      	add	r7, sp, #0
 8002144:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	431a      	orrs	r2, r3
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	431a      	orrs	r2, r3
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	4313      	orrs	r3, r2
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	4baa      	ldr	r3, [pc, #680]	; (8002414 <UART_SetConfig+0x2d8>)
 800216c:	4013      	ands	r3, r2
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002174:	430b      	orrs	r3, r1
 8002176:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	430a      	orrs	r2, r1
 800218c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a9f      	ldr	r2, [pc, #636]	; (8002418 <UART_SetConfig+0x2dc>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d004      	beq.n	80021a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80021a4:	4313      	orrs	r3, r2
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80021bc:	430b      	orrs	r3, r1
 80021be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f023 010f 	bic.w	r1, r3, #15
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	430a      	orrs	r2, r1
 80021d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a90      	ldr	r2, [pc, #576]	; (800241c <UART_SetConfig+0x2e0>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d125      	bne.n	800222c <UART_SetConfig+0xf0>
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <UART_SetConfig+0x2e4>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d81a      	bhi.n	8002224 <UART_SetConfig+0xe8>
 80021ee:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <UART_SetConfig+0xb8>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002205 	.word	0x08002205
 80021f8:	08002215 	.word	0x08002215
 80021fc:	0800220d 	.word	0x0800220d
 8002200:	0800221d 	.word	0x0800221d
 8002204:	2301      	movs	r3, #1
 8002206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800220a:	e116      	b.n	800243a <UART_SetConfig+0x2fe>
 800220c:	2302      	movs	r3, #2
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002212:	e112      	b.n	800243a <UART_SetConfig+0x2fe>
 8002214:	2304      	movs	r3, #4
 8002216:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800221a:	e10e      	b.n	800243a <UART_SetConfig+0x2fe>
 800221c:	2308      	movs	r3, #8
 800221e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002222:	e10a      	b.n	800243a <UART_SetConfig+0x2fe>
 8002224:	2310      	movs	r3, #16
 8002226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800222a:	e106      	b.n	800243a <UART_SetConfig+0x2fe>
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <UART_SetConfig+0x2e8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d138      	bne.n	80022a8 <UART_SetConfig+0x16c>
 8002236:	4b7a      	ldr	r3, [pc, #488]	; (8002420 <UART_SetConfig+0x2e4>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f003 030c 	and.w	r3, r3, #12
 8002240:	2b0c      	cmp	r3, #12
 8002242:	d82d      	bhi.n	80022a0 <UART_SetConfig+0x164>
 8002244:	a201      	add	r2, pc, #4	; (adr r2, 800224c <UART_SetConfig+0x110>)
 8002246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800224a:	bf00      	nop
 800224c:	08002281 	.word	0x08002281
 8002250:	080022a1 	.word	0x080022a1
 8002254:	080022a1 	.word	0x080022a1
 8002258:	080022a1 	.word	0x080022a1
 800225c:	08002291 	.word	0x08002291
 8002260:	080022a1 	.word	0x080022a1
 8002264:	080022a1 	.word	0x080022a1
 8002268:	080022a1 	.word	0x080022a1
 800226c:	08002289 	.word	0x08002289
 8002270:	080022a1 	.word	0x080022a1
 8002274:	080022a1 	.word	0x080022a1
 8002278:	080022a1 	.word	0x080022a1
 800227c:	08002299 	.word	0x08002299
 8002280:	2300      	movs	r3, #0
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002286:	e0d8      	b.n	800243a <UART_SetConfig+0x2fe>
 8002288:	2302      	movs	r3, #2
 800228a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800228e:	e0d4      	b.n	800243a <UART_SetConfig+0x2fe>
 8002290:	2304      	movs	r3, #4
 8002292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002296:	e0d0      	b.n	800243a <UART_SetConfig+0x2fe>
 8002298:	2308      	movs	r3, #8
 800229a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800229e:	e0cc      	b.n	800243a <UART_SetConfig+0x2fe>
 80022a0:	2310      	movs	r3, #16
 80022a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022a6:	e0c8      	b.n	800243a <UART_SetConfig+0x2fe>
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a5e      	ldr	r2, [pc, #376]	; (8002428 <UART_SetConfig+0x2ec>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d125      	bne.n	80022fe <UART_SetConfig+0x1c2>
 80022b2:	4b5b      	ldr	r3, [pc, #364]	; (8002420 <UART_SetConfig+0x2e4>)
 80022b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022bc:	2b30      	cmp	r3, #48	; 0x30
 80022be:	d016      	beq.n	80022ee <UART_SetConfig+0x1b2>
 80022c0:	2b30      	cmp	r3, #48	; 0x30
 80022c2:	d818      	bhi.n	80022f6 <UART_SetConfig+0x1ba>
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d00a      	beq.n	80022de <UART_SetConfig+0x1a2>
 80022c8:	2b20      	cmp	r3, #32
 80022ca:	d814      	bhi.n	80022f6 <UART_SetConfig+0x1ba>
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <UART_SetConfig+0x19a>
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d008      	beq.n	80022e6 <UART_SetConfig+0x1aa>
 80022d4:	e00f      	b.n	80022f6 <UART_SetConfig+0x1ba>
 80022d6:	2300      	movs	r3, #0
 80022d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022dc:	e0ad      	b.n	800243a <UART_SetConfig+0x2fe>
 80022de:	2302      	movs	r3, #2
 80022e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022e4:	e0a9      	b.n	800243a <UART_SetConfig+0x2fe>
 80022e6:	2304      	movs	r3, #4
 80022e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022ec:	e0a5      	b.n	800243a <UART_SetConfig+0x2fe>
 80022ee:	2308      	movs	r3, #8
 80022f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022f4:	e0a1      	b.n	800243a <UART_SetConfig+0x2fe>
 80022f6:	2310      	movs	r3, #16
 80022f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80022fc:	e09d      	b.n	800243a <UART_SetConfig+0x2fe>
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a4a      	ldr	r2, [pc, #296]	; (800242c <UART_SetConfig+0x2f0>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d125      	bne.n	8002354 <UART_SetConfig+0x218>
 8002308:	4b45      	ldr	r3, [pc, #276]	; (8002420 <UART_SetConfig+0x2e4>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002312:	2bc0      	cmp	r3, #192	; 0xc0
 8002314:	d016      	beq.n	8002344 <UART_SetConfig+0x208>
 8002316:	2bc0      	cmp	r3, #192	; 0xc0
 8002318:	d818      	bhi.n	800234c <UART_SetConfig+0x210>
 800231a:	2b80      	cmp	r3, #128	; 0x80
 800231c:	d00a      	beq.n	8002334 <UART_SetConfig+0x1f8>
 800231e:	2b80      	cmp	r3, #128	; 0x80
 8002320:	d814      	bhi.n	800234c <UART_SetConfig+0x210>
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <UART_SetConfig+0x1f0>
 8002326:	2b40      	cmp	r3, #64	; 0x40
 8002328:	d008      	beq.n	800233c <UART_SetConfig+0x200>
 800232a:	e00f      	b.n	800234c <UART_SetConfig+0x210>
 800232c:	2300      	movs	r3, #0
 800232e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002332:	e082      	b.n	800243a <UART_SetConfig+0x2fe>
 8002334:	2302      	movs	r3, #2
 8002336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800233a:	e07e      	b.n	800243a <UART_SetConfig+0x2fe>
 800233c:	2304      	movs	r3, #4
 800233e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002342:	e07a      	b.n	800243a <UART_SetConfig+0x2fe>
 8002344:	2308      	movs	r3, #8
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800234a:	e076      	b.n	800243a <UART_SetConfig+0x2fe>
 800234c:	2310      	movs	r3, #16
 800234e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002352:	e072      	b.n	800243a <UART_SetConfig+0x2fe>
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a35      	ldr	r2, [pc, #212]	; (8002430 <UART_SetConfig+0x2f4>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d12a      	bne.n	80023b4 <UART_SetConfig+0x278>
 800235e:	4b30      	ldr	r3, [pc, #192]	; (8002420 <UART_SetConfig+0x2e4>)
 8002360:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002364:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800236c:	d01a      	beq.n	80023a4 <UART_SetConfig+0x268>
 800236e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002372:	d81b      	bhi.n	80023ac <UART_SetConfig+0x270>
 8002374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002378:	d00c      	beq.n	8002394 <UART_SetConfig+0x258>
 800237a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800237e:	d815      	bhi.n	80023ac <UART_SetConfig+0x270>
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <UART_SetConfig+0x250>
 8002384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002388:	d008      	beq.n	800239c <UART_SetConfig+0x260>
 800238a:	e00f      	b.n	80023ac <UART_SetConfig+0x270>
 800238c:	2300      	movs	r3, #0
 800238e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002392:	e052      	b.n	800243a <UART_SetConfig+0x2fe>
 8002394:	2302      	movs	r3, #2
 8002396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800239a:	e04e      	b.n	800243a <UART_SetConfig+0x2fe>
 800239c:	2304      	movs	r3, #4
 800239e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023a2:	e04a      	b.n	800243a <UART_SetConfig+0x2fe>
 80023a4:	2308      	movs	r3, #8
 80023a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023aa:	e046      	b.n	800243a <UART_SetConfig+0x2fe>
 80023ac:	2310      	movs	r3, #16
 80023ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023b2:	e042      	b.n	800243a <UART_SetConfig+0x2fe>
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a17      	ldr	r2, [pc, #92]	; (8002418 <UART_SetConfig+0x2dc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d13a      	bne.n	8002434 <UART_SetConfig+0x2f8>
 80023be:	4b18      	ldr	r3, [pc, #96]	; (8002420 <UART_SetConfig+0x2e4>)
 80023c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023cc:	d01a      	beq.n	8002404 <UART_SetConfig+0x2c8>
 80023ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023d2:	d81b      	bhi.n	800240c <UART_SetConfig+0x2d0>
 80023d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023d8:	d00c      	beq.n	80023f4 <UART_SetConfig+0x2b8>
 80023da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023de:	d815      	bhi.n	800240c <UART_SetConfig+0x2d0>
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <UART_SetConfig+0x2b0>
 80023e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e8:	d008      	beq.n	80023fc <UART_SetConfig+0x2c0>
 80023ea:	e00f      	b.n	800240c <UART_SetConfig+0x2d0>
 80023ec:	2300      	movs	r3, #0
 80023ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023f2:	e022      	b.n	800243a <UART_SetConfig+0x2fe>
 80023f4:	2302      	movs	r3, #2
 80023f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80023fa:	e01e      	b.n	800243a <UART_SetConfig+0x2fe>
 80023fc:	2304      	movs	r3, #4
 80023fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002402:	e01a      	b.n	800243a <UART_SetConfig+0x2fe>
 8002404:	2308      	movs	r3, #8
 8002406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800240a:	e016      	b.n	800243a <UART_SetConfig+0x2fe>
 800240c:	2310      	movs	r3, #16
 800240e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002412:	e012      	b.n	800243a <UART_SetConfig+0x2fe>
 8002414:	cfff69f3 	.word	0xcfff69f3
 8002418:	40008000 	.word	0x40008000
 800241c:	40013800 	.word	0x40013800
 8002420:	40021000 	.word	0x40021000
 8002424:	40004400 	.word	0x40004400
 8002428:	40004800 	.word	0x40004800
 800242c:	40004c00 	.word	0x40004c00
 8002430:	40005000 	.word	0x40005000
 8002434:	2310      	movs	r3, #16
 8002436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4aae      	ldr	r2, [pc, #696]	; (80026f8 <UART_SetConfig+0x5bc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	f040 8097 	bne.w	8002574 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002446:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800244a:	2b08      	cmp	r3, #8
 800244c:	d823      	bhi.n	8002496 <UART_SetConfig+0x35a>
 800244e:	a201      	add	r2, pc, #4	; (adr r2, 8002454 <UART_SetConfig+0x318>)
 8002450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002454:	08002479 	.word	0x08002479
 8002458:	08002497 	.word	0x08002497
 800245c:	08002481 	.word	0x08002481
 8002460:	08002497 	.word	0x08002497
 8002464:	08002487 	.word	0x08002487
 8002468:	08002497 	.word	0x08002497
 800246c:	08002497 	.word	0x08002497
 8002470:	08002497 	.word	0x08002497
 8002474:	0800248f 	.word	0x0800248f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002478:	f7ff fb50 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 800247c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800247e:	e010      	b.n	80024a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002480:	4b9e      	ldr	r3, [pc, #632]	; (80026fc <UART_SetConfig+0x5c0>)
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002484:	e00d      	b.n	80024a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002486:	f7ff fadb 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 800248a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800248c:	e009      	b.n	80024a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002494:	e005      	b.n	80024a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80024a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 8130 	beq.w	800270a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	4a94      	ldr	r2, [pc, #592]	; (8002700 <UART_SetConfig+0x5c4>)
 80024b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024b4:	461a      	mov	r2, r3
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d305      	bcc.n	80024da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d903      	bls.n	80024e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80024e0:	e113      	b.n	800270a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	2200      	movs	r2, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	60fa      	str	r2, [r7, #12]
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	4a84      	ldr	r2, [pc, #528]	; (8002700 <UART_SetConfig+0x5c4>)
 80024f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002500:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002504:	f7fd fe88 	bl	8000218 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4610      	mov	r0, r2
 800250e:	4619      	mov	r1, r3
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	020b      	lsls	r3, r1, #8
 800251a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800251e:	0202      	lsls	r2, r0, #8
 8002520:	6979      	ldr	r1, [r7, #20]
 8002522:	6849      	ldr	r1, [r1, #4]
 8002524:	0849      	lsrs	r1, r1, #1
 8002526:	2000      	movs	r0, #0
 8002528:	460c      	mov	r4, r1
 800252a:	4605      	mov	r5, r0
 800252c:	eb12 0804 	adds.w	r8, r2, r4
 8002530:	eb43 0905 	adc.w	r9, r3, r5
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	469a      	mov	sl, r3
 800253c:	4693      	mov	fp, r2
 800253e:	4652      	mov	r2, sl
 8002540:	465b      	mov	r3, fp
 8002542:	4640      	mov	r0, r8
 8002544:	4649      	mov	r1, r9
 8002546:	f7fd fe67 	bl	8000218 <__aeabi_uldivmod>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4613      	mov	r3, r2
 8002550:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002552:	6a3b      	ldr	r3, [r7, #32]
 8002554:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002558:	d308      	bcc.n	800256c <UART_SetConfig+0x430>
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002560:	d204      	bcs.n	800256c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6a3a      	ldr	r2, [r7, #32]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	e0ce      	b.n	800270a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002572:	e0ca      	b.n	800270a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257c:	d166      	bne.n	800264c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800257e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002582:	2b08      	cmp	r3, #8
 8002584:	d827      	bhi.n	80025d6 <UART_SetConfig+0x49a>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <UART_SetConfig+0x450>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025b1 	.word	0x080025b1
 8002590:	080025b9 	.word	0x080025b9
 8002594:	080025c1 	.word	0x080025c1
 8002598:	080025d7 	.word	0x080025d7
 800259c:	080025c7 	.word	0x080025c7
 80025a0:	080025d7 	.word	0x080025d7
 80025a4:	080025d7 	.word	0x080025d7
 80025a8:	080025d7 	.word	0x080025d7
 80025ac:	080025cf 	.word	0x080025cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025b0:	f7ff fab4 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 80025b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025b6:	e014      	b.n	80025e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7ff fac6 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 80025bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025be:	e010      	b.n	80025e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025c0:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <UART_SetConfig+0x5c0>)
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025c4:	e00d      	b.n	80025e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025c6:	f7ff fa3b 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 80025ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80025cc:	e009      	b.n	80025e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80025d4:	e005      	b.n	80025e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80025d6:	2300      	movs	r3, #0
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80025e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 8090 	beq.w	800270a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ee:	4a44      	ldr	r2, [pc, #272]	; (8002700 <UART_SetConfig+0x5c4>)
 80025f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	085b      	lsrs	r3, r3, #1
 8002604:	441a      	add	r2, r3
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d916      	bls.n	8002644 <UART_SetConfig+0x508>
 8002616:	6a3b      	ldr	r3, [r7, #32]
 8002618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261c:	d212      	bcs.n	8002644 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f023 030f 	bic.w	r3, r3, #15
 8002626:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	085b      	lsrs	r3, r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	b29a      	uxth	r2, r3
 8002634:	8bfb      	ldrh	r3, [r7, #30]
 8002636:	4313      	orrs	r3, r2
 8002638:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	8bfa      	ldrh	r2, [r7, #30]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e062      	b.n	800270a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800264a:	e05e      	b.n	800270a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800264c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002650:	2b08      	cmp	r3, #8
 8002652:	d828      	bhi.n	80026a6 <UART_SetConfig+0x56a>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <UART_SetConfig+0x520>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002681 	.word	0x08002681
 8002660:	08002689 	.word	0x08002689
 8002664:	08002691 	.word	0x08002691
 8002668:	080026a7 	.word	0x080026a7
 800266c:	08002697 	.word	0x08002697
 8002670:	080026a7 	.word	0x080026a7
 8002674:	080026a7 	.word	0x080026a7
 8002678:	080026a7 	.word	0x080026a7
 800267c:	0800269f 	.word	0x0800269f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002680:	f7ff fa4c 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002684:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002686:	e014      	b.n	80026b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002688:	f7ff fa5e 	bl	8001b48 <HAL_RCC_GetPCLK2Freq>
 800268c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800268e:	e010      	b.n	80026b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <UART_SetConfig+0x5c0>)
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002694:	e00d      	b.n	80026b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002696:	f7ff f9d3 	bl	8001a40 <HAL_RCC_GetSysClockFreq>
 800269a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800269c:	e009      	b.n	80026b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800269e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80026a4:	e005      	b.n	80026b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80026b0:	bf00      	nop
    }

    if (pclk != 0U)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d028      	beq.n	800270a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	4a10      	ldr	r2, [pc, #64]	; (8002700 <UART_SetConfig+0x5c4>)
 80026be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026c2:	461a      	mov	r2, r3
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	085b      	lsrs	r3, r3, #1
 80026d0:	441a      	add	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	d910      	bls.n	8002704 <UART_SetConfig+0x5c8>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e8:	d20c      	bcs.n	8002704 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	b29a      	uxth	r2, r3
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	e009      	b.n	800270a <UART_SetConfig+0x5ce>
 80026f6:	bf00      	nop
 80026f8:	40008000 	.word	0x40008000
 80026fc:	00f42400 	.word	0x00f42400
 8002700:	08002e00 	.word	0x08002e00
      }
      else
      {
        ret = HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2201      	movs	r2, #1
 800270e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2201      	movs	r2, #1
 8002716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	2200      	movs	r2, #0
 800271e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2200      	movs	r2, #0
 8002724:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002726:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800272a:	4618      	mov	r0, r3
 800272c:	3730      	adds	r7, #48	; 0x30
 800272e:	46bd      	mov	sp, r7
 8002730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002734 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d00a      	beq.n	80027e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	f003 0320 	and.w	r3, r3, #32
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	430a      	orrs	r2, r1
 8002806:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b00      	cmp	r3, #0
 8002812:	d01a      	beq.n	800284a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d10a      	bne.n	800284a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	430a      	orrs	r2, r1
 8002848:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  }
}
 800286c:	bf00      	nop
 800286e:	370c      	adds	r7, #12
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b098      	sub	sp, #96	; 0x60
 800287c:	af02      	add	r7, sp, #8
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002888:	f7fe f8f0 	bl	8000a6c <HAL_GetTick>
 800288c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b08      	cmp	r3, #8
 800289a:	d12f      	bne.n	80028fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800289c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028a4:	2200      	movs	r2, #0
 80028a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f88e 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d022      	beq.n	80028fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028ca:	653b      	str	r3, [r7, #80]	; 0x50
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	461a      	mov	r2, r3
 80028d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028d4:	647b      	str	r3, [r7, #68]	; 0x44
 80028d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028dc:	e841 2300 	strex	r3, r2, [r1]
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e6      	bne.n	80028b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e063      	b.n	80029c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0304 	and.w	r3, r3, #4
 8002906:	2b04      	cmp	r3, #4
 8002908:	d149      	bne.n	800299e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800290a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800290e:	9300      	str	r3, [sp, #0]
 8002910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002912:	2200      	movs	r2, #0
 8002914:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f857 	bl	80029cc <UART_WaitOnFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d03c      	beq.n	800299e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	e853 3f00 	ldrex	r3, [r3]
 8002930:	623b      	str	r3, [r7, #32]
   return(result);
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	461a      	mov	r2, r3
 8002940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
 8002944:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002946:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002948:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294a:	e841 2300 	strex	r3, r2, [r1]
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1e6      	bne.n	8002924 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3308      	adds	r3, #8
 800295c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	60fb      	str	r3, [r7, #12]
   return(result);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f023 0301 	bic.w	r3, r3, #1
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3308      	adds	r3, #8
 8002974:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002976:	61fa      	str	r2, [r7, #28]
 8002978:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	69b9      	ldr	r1, [r7, #24]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	617b      	str	r3, [r7, #20]
   return(result);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2220      	movs	r2, #32
 800298e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e012      	b.n	80029c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3758      	adds	r7, #88	; 0x58
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80029dc:	e04f      	b.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d04b      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7fe f841 	bl	8000a6c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <UART_WaitOnFlagUntilTimeout+0x30>
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e04e      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0304 	and.w	r3, r3, #4
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d037      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b80      	cmp	r3, #128	; 0x80
 8002a12:	d034      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d031      	beq.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b08      	cmp	r3, #8
 8002a26:	d110      	bne.n	8002a4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 f838 	bl	8002aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2208      	movs	r2, #8
 8002a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e029      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a58:	d111      	bne.n	8002a7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f81e 	bl	8002aa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2220      	movs	r2, #32
 8002a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e00f      	b.n	8002a9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	69da      	ldr	r2, [r3, #28]
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	4013      	ands	r3, r2
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	bf0c      	ite	eq
 8002a8e:	2301      	moveq	r3, #1
 8002a90:	2300      	movne	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d0a0      	beq.n	80029de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b095      	sub	sp, #84	; 0x54
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ab6:	e853 3f00 	ldrex	r3, [r3]
 8002aba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	461a      	mov	r2, r3
 8002aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002acc:	643b      	str	r3, [r7, #64]	; 0x40
 8002ace:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002ad2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e6      	bne.n	8002aae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3308      	adds	r3, #8
 8002ae6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ae8:	6a3b      	ldr	r3, [r7, #32]
 8002aea:	e853 3f00 	ldrex	r3, [r3]
 8002aee:	61fb      	str	r3, [r7, #28]
   return(result);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3308      	adds	r3, #8
 8002b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b0c:	e841 2300 	strex	r3, r2, [r1]
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1e3      	bne.n	8002ae0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d118      	bne.n	8002b52 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	e853 3f00 	ldrex	r3, [r3]
 8002b2c:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f023 0310 	bic.w	r3, r3, #16
 8002b34:	647b      	str	r3, [r7, #68]	; 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	6979      	ldr	r1, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	e841 2300 	strex	r3, r2, [r1]
 8002b4a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1e6      	bne.n	8002b20 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	675a      	str	r2, [r3, #116]	; 0x74
}
 8002b66:	bf00      	nop
 8002b68:	3754      	adds	r7, #84	; 0x54
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b085      	sub	sp, #20
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_UARTEx_DisableFifoMode+0x16>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e027      	b.n	8002bd8 <HAL_UARTEx_DisableFifoMode+0x66>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	; 0x24
 8002b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002bb6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e02d      	b.n	8002c58 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2224      	movs	r2, #36	; 0x24
 8002c08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0201 	bic.w	r2, r2, #1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002c38:	6878      	ldr	r0, [r7, #4]
 8002c3a:	f000 f84f 	bl	8002cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d101      	bne.n	8002c78 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e02d      	b.n	8002cd4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2224      	movs	r2, #36	; 0x24
 8002c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f811 	bl	8002cdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d108      	bne.n	8002cfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002cfc:	e031      	b.n	8002d62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002cfe:	2308      	movs	r3, #8
 8002d00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002d02:	2308      	movs	r3, #8
 8002d04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	0e5b      	lsrs	r3, r3, #25
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	0f5b      	lsrs	r3, r3, #29
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	7b3a      	ldrb	r2, [r7, #12]
 8002d2a:	4911      	ldr	r1, [pc, #68]	; (8002d70 <UARTEx_SetNbDataToProcess+0x94>)
 8002d2c:	5c8a      	ldrb	r2, [r1, r2]
 8002d2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8002d32:	7b3a      	ldrb	r2, [r7, #12]
 8002d34:	490f      	ldr	r1, [pc, #60]	; (8002d74 <UARTEx_SetNbDataToProcess+0x98>)
 8002d36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
 8002d46:	7b7a      	ldrb	r2, [r7, #13]
 8002d48:	4909      	ldr	r1, [pc, #36]	; (8002d70 <UARTEx_SetNbDataToProcess+0x94>)
 8002d4a:	5c8a      	ldrb	r2, [r1, r2]
 8002d4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8002d50:	7b7a      	ldrb	r2, [r7, #13]
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <UARTEx_SetNbDataToProcess+0x98>)
 8002d54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8002d62:	bf00      	nop
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	08002e18 	.word	0x08002e18
 8002d74:	08002e20 	.word	0x08002e20

08002d78 <memset>:
 8002d78:	4402      	add	r2, r0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <memset+0xa>
 8002d80:	4770      	bx	lr
 8002d82:	f803 1b01 	strb.w	r1, [r3], #1
 8002d86:	e7f9      	b.n	8002d7c <memset+0x4>

08002d88 <__libc_init_array>:
 8002d88:	b570      	push	{r4, r5, r6, lr}
 8002d8a:	4d0d      	ldr	r5, [pc, #52]	; (8002dc0 <__libc_init_array+0x38>)
 8002d8c:	4c0d      	ldr	r4, [pc, #52]	; (8002dc4 <__libc_init_array+0x3c>)
 8002d8e:	1b64      	subs	r4, r4, r5
 8002d90:	10a4      	asrs	r4, r4, #2
 8002d92:	2600      	movs	r6, #0
 8002d94:	42a6      	cmp	r6, r4
 8002d96:	d109      	bne.n	8002dac <__libc_init_array+0x24>
 8002d98:	4d0b      	ldr	r5, [pc, #44]	; (8002dc8 <__libc_init_array+0x40>)
 8002d9a:	4c0c      	ldr	r4, [pc, #48]	; (8002dcc <__libc_init_array+0x44>)
 8002d9c:	f000 f818 	bl	8002dd0 <_init>
 8002da0:	1b64      	subs	r4, r4, r5
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	2600      	movs	r6, #0
 8002da6:	42a6      	cmp	r6, r4
 8002da8:	d105      	bne.n	8002db6 <__libc_init_array+0x2e>
 8002daa:	bd70      	pop	{r4, r5, r6, pc}
 8002dac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db0:	4798      	blx	r3
 8002db2:	3601      	adds	r6, #1
 8002db4:	e7ee      	b.n	8002d94 <__libc_init_array+0xc>
 8002db6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dba:	4798      	blx	r3
 8002dbc:	3601      	adds	r6, #1
 8002dbe:	e7f2      	b.n	8002da6 <__libc_init_array+0x1e>
 8002dc0:	08002e30 	.word	0x08002e30
 8002dc4:	08002e30 	.word	0x08002e30
 8002dc8:	08002e30 	.word	0x08002e30
 8002dcc:	08002e34 	.word	0x08002e34

08002dd0 <_init>:
 8002dd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dd2:	bf00      	nop
 8002dd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd6:	bc08      	pop	{r3}
 8002dd8:	469e      	mov	lr, r3
 8002dda:	4770      	bx	lr

08002ddc <_fini>:
 8002ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dde:	bf00      	nop
 8002de0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002de2:	bc08      	pop	{r3}
 8002de4:	469e      	mov	lr, r3
 8002de6:	4770      	bx	lr
