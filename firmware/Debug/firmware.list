
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c338  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001dd0  0800c518  0800c518  0001c518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e2e8  0800e2e8  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800e2e8  0800e2e8  0001e2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e2f0  0800e2f0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e2f0  0800e2f0  0001e2f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e2f4  0800e2f4  0001e2f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800e2f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000565c  20000080  0800e378  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200056dc  0800e378  000256dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cb86  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b5c  00000000  00000000  0004cc79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022d0  00000000  00000000  000527d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001ae0  00000000  00000000  00054aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e1a0  00000000  00000000  00056588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c344  00000000  00000000  00084728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00127d10  00000000  00000000  000b0a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009964  00000000  00000000  001d877c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001e20e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c500 	.word	0x0800c500

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	0800c500 	.word	0x0800c500

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08c      	sub	sp, #48	; 0x30
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	2220      	movs	r2, #32
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f00a fe9b 	bl	800bb4c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e16:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e18:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e1c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e1e:	4b30      	ldr	r3, [pc, #192]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e20:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e24:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e26:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e32:	4b2b      	ldr	r3, [pc, #172]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e38:	4b29      	ldr	r3, [pc, #164]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e44:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e50:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b22      	ldr	r3, [pc, #136]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e5e:	4b20      	ldr	r3, [pc, #128]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b1e      	ldr	r3, [pc, #120]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e72:	4b1b      	ldr	r3, [pc, #108]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e78:	4b19      	ldr	r3, [pc, #100]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e80:	4817      	ldr	r0, [pc, #92]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e82:	f001 fc69 	bl	8002758 <HAL_ADC_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000e8c:	f000 fef6 	bl	8001c7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000e9c:	f002 fc06 	bl	80036ac <HAL_ADCEx_MultiModeConfigChannel>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ea6:	f000 fee9 	bl	8001c7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_ADC1_Init+0xec>)
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eae:	2306      	movs	r3, #6
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb6:	237f      	movs	r3, #127	; 0x7f
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4806      	ldr	r0, [pc, #24]	; (8000ee0 <MX_ADC1_Init+0xe8>)
 8000ec8:	f001 fef4 	bl	8002cb4 <HAL_ADC_ConfigChannel>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ed2:	f000 fed3 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	3730      	adds	r7, #48	; 0x30
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	2000009c 	.word	0x2000009c
 8000ee4:	08600004 	.word	0x08600004

08000ee8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b09e      	sub	sp, #120	; 0x78
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	2254      	movs	r2, #84	; 0x54
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00a fe1f 	bl	800bb4c <memset>
  if(adcHandle->Instance==ADC1)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f16:	d134      	bne.n	8000f82 <HAL_ADC_MspInit+0x9a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f1e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fa65 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f34:	f000 fea2 	bl	8001c7c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b0e      	ldr	r3, [pc, #56]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f54:	4a0d      	ldr	r2, [pc, #52]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f5c:	4b0b      	ldr	r3, [pc, #44]	; (8000f8c <HAL_ADC_MspInit+0xa4>)
 8000f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f74:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7e:	f002 fd7d 	bl	8003a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3778      	adds	r7, #120	; 0x78
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutexLogData */
  mutexLogDataHandle = osMutexNew(&mutexLogData_attributes);
 8000f94:	482a      	ldr	r0, [pc, #168]	; (8001040 <MX_FREERTOS_Init+0xb0>)
 8000f96:	f007 fa8f 	bl	80084b8 <osMutexNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <MX_FREERTOS_Init+0xb4>)
 8000f9e:	6013      	str	r3, [r2, #0]

  /* creation of mutexFLASH */
  mutexFLASHHandle = osMutexNew(&mutexFLASH_attributes);
 8000fa0:	4829      	ldr	r0, [pc, #164]	; (8001048 <MX_FREERTOS_Init+0xb8>)
 8000fa2:	f007 fa89 	bl	80084b8 <osMutexNew>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	4a28      	ldr	r2, [pc, #160]	; (800104c <MX_FREERTOS_Init+0xbc>)
 8000faa:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of queueReturnUART */
  queueReturnUARTHandle = osMessageQueueNew (16, sizeof(uint8_t), &queueReturnUART_attributes);
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <MX_FREERTOS_Init+0xc0>)
 8000fae:	2101      	movs	r1, #1
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f007 fb8f 	bl	80086d4 <osMessageQueueNew>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <MX_FREERTOS_Init+0xc4>)
 8000fba:	6013      	str	r3, [r2, #0]

  /* creation of queueConfigureWateringCommand */
  queueConfigureWateringCommandHandle = osMessageQueueNew (5, sizeof(uint16_t), &queueConfigureWateringCommand_attributes);
 8000fbc:	4a26      	ldr	r2, [pc, #152]	; (8001058 <MX_FREERTOS_Init+0xc8>)
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	2005      	movs	r0, #5
 8000fc2:	f007 fb87 	bl	80086d4 <osMessageQueueNew>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4a24      	ldr	r2, [pc, #144]	; (800105c <MX_FREERTOS_Init+0xcc>)
 8000fca:	6013      	str	r3, [r2, #0]

  /* creation of queueConfigureWateringControl */
  queueConfigureWateringControlHandle = osMessageQueueNew (5, sizeof(uint16_t), &queueConfigureWateringControl_attributes);
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <MX_FREERTOS_Init+0xd0>)
 8000fce:	2102      	movs	r1, #2
 8000fd0:	2005      	movs	r0, #5
 8000fd2:	f007 fb7f 	bl	80086d4 <osMessageQueueNew>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	4a22      	ldr	r2, [pc, #136]	; (8001064 <MX_FREERTOS_Init+0xd4>)
 8000fda:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of transmitUART */
  transmitUARTHandle = osThreadNew(transmitUARTTask, NULL, &transmitUART_attributes);
 8000fdc:	4a22      	ldr	r2, [pc, #136]	; (8001068 <MX_FREERTOS_Init+0xd8>)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4822      	ldr	r0, [pc, #136]	; (800106c <MX_FREERTOS_Init+0xdc>)
 8000fe2:	f007 f8ed 	bl	80081c0 <osThreadNew>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	4a21      	ldr	r2, [pc, #132]	; (8001070 <MX_FREERTOS_Init+0xe0>)
 8000fea:	6013      	str	r3, [r2, #0]

  /* creation of updateDisplay */
  updateDisplayHandle = osThreadNew(updateDisplayTask, NULL, &updateDisplay_attributes);
 8000fec:	4a21      	ldr	r2, [pc, #132]	; (8001074 <MX_FREERTOS_Init+0xe4>)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4821      	ldr	r0, [pc, #132]	; (8001078 <MX_FREERTOS_Init+0xe8>)
 8000ff2:	f007 f8e5 	bl	80081c0 <osThreadNew>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4a20      	ldr	r2, [pc, #128]	; (800107c <MX_FREERTOS_Init+0xec>)
 8000ffa:	6013      	str	r3, [r2, #0]

  /* creation of readSensorsRTC */
  readSensorsRTCHandle = osThreadNew(readSensorsRTCTask, NULL, &readSensorsRTC_attributes);
 8000ffc:	4a20      	ldr	r2, [pc, #128]	; (8001080 <MX_FREERTOS_Init+0xf0>)
 8000ffe:	2100      	movs	r1, #0
 8001000:	4820      	ldr	r0, [pc, #128]	; (8001084 <MX_FREERTOS_Init+0xf4>)
 8001002:	f007 f8dd 	bl	80081c0 <osThreadNew>
 8001006:	4603      	mov	r3, r0
 8001008:	4a1f      	ldr	r2, [pc, #124]	; (8001088 <MX_FREERTOS_Init+0xf8>)
 800100a:	6013      	str	r3, [r2, #0]

  /* creation of controlWatering */
  controlWateringHandle = osThreadNew(controlWateringTask, NULL, &controlWatering_attributes);
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <MX_FREERTOS_Init+0xfc>)
 800100e:	2100      	movs	r1, #0
 8001010:	481f      	ldr	r0, [pc, #124]	; (8001090 <MX_FREERTOS_Init+0x100>)
 8001012:	f007 f8d5 	bl	80081c0 <osThreadNew>
 8001016:	4603      	mov	r3, r0
 8001018:	4a1e      	ldr	r2, [pc, #120]	; (8001094 <MX_FREERTOS_Init+0x104>)
 800101a:	6013      	str	r3, [r2, #0]

  /* creation of updateLog */
  updateLogHandle = osThreadNew(updateLogTask, NULL, &updateLog_attributes);
 800101c:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_FREERTOS_Init+0x108>)
 800101e:	2100      	movs	r1, #0
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <MX_FREERTOS_Init+0x10c>)
 8001022:	f007 f8cd 	bl	80081c0 <osThreadNew>
 8001026:	4603      	mov	r3, r0
 8001028:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <MX_FREERTOS_Init+0x110>)
 800102a:	6013      	str	r3, [r2, #0]

  /* creation of cfgWatering */
  cfgWateringHandle = osThreadNew(cfgWateringTask, NULL, &cfgWatering_attributes);
 800102c:	4a1d      	ldr	r2, [pc, #116]	; (80010a4 <MX_FREERTOS_Init+0x114>)
 800102e:	2100      	movs	r1, #0
 8001030:	481d      	ldr	r0, [pc, #116]	; (80010a8 <MX_FREERTOS_Init+0x118>)
 8001032:	f007 f8c5 	bl	80081c0 <osThreadNew>
 8001036:	4603      	mov	r3, r0
 8001038:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <MX_FREERTOS_Init+0x11c>)
 800103a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}
 8001040:	0800c778 	.word	0x0800c778
 8001044:	2000014c 	.word	0x2000014c
 8001048:	0800c788 	.word	0x0800c788
 800104c:	200001a0 	.word	0x200001a0
 8001050:	0800c730 	.word	0x0800c730
 8001054:	20000140 	.word	0x20000140
 8001058:	0800c748 	.word	0x0800c748
 800105c:	20000144 	.word	0x20000144
 8001060:	0800c760 	.word	0x0800c760
 8001064:	20000148 	.word	0x20000148
 8001068:	0800c658 	.word	0x0800c658
 800106c:	080010b1 	.word	0x080010b1
 8001070:	20000128 	.word	0x20000128
 8001074:	0800c67c 	.word	0x0800c67c
 8001078:	080010c1 	.word	0x080010c1
 800107c:	2000012c 	.word	0x2000012c
 8001080:	0800c6a0 	.word	0x0800c6a0
 8001084:	08001535 	.word	0x08001535
 8001088:	20000130 	.word	0x20000130
 800108c:	0800c6c4 	.word	0x0800c6c4
 8001090:	080016d1 	.word	0x080016d1
 8001094:	20000134 	.word	0x20000134
 8001098:	0800c6e8 	.word	0x0800c6e8
 800109c:	0800175d 	.word	0x0800175d
 80010a0:	20000138 	.word	0x20000138
 80010a4:	0800c70c 	.word	0x0800c70c
 80010a8:	0800176d 	.word	0x0800176d
 80010ac:	2000013c 	.word	0x2000013c

080010b0 <transmitUARTTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_transmitUARTTask */
void transmitUARTTask(void *argument)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN transmitUARTTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f007 f9e2 	bl	8008482 <osDelay>
 80010be:	e7fb      	b.n	80010b8 <transmitUARTTask+0x8>

080010c0 <updateDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateDisplayTask */
void updateDisplayTask(void *argument)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b090      	sub	sp, #64	; 0x40
 80010c4:	af02      	add	r7, sp, #8
 80010c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateDisplayTask */
  char cDate[9], cTime[9], cHum[4], cSoil[4][4];
  uint8_t uiRelaySelected, uiRelayStatus;

  ssd1306_Init();
 80010c8:	f006 fcfc 	bl	8007ac4 <ssd1306_Init>
  ssd1306_FillRectangle(0, 0, 127, 15, White);
 80010cc:	2301      	movs	r3, #1
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	230f      	movs	r3, #15
 80010d2:	227f      	movs	r2, #127	; 0x7f
 80010d4:	2100      	movs	r1, #0
 80010d6:	2000      	movs	r0, #0
 80010d8:	f006 ff65 	bl	8007fa6 <ssd1306_FillRectangle>

  ssd1306_SetCursor(0, 16);
 80010dc:	2110      	movs	r1, #16
 80010de:	2000      	movs	r0, #0
 80010e0:	f006 fea6 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("CH1", Font_7x10, White);
 80010e4:	4bbe      	ldr	r3, [pc, #760]	; (80013e0 <updateDisplayTask+0x320>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	9200      	str	r2, [sp, #0]
 80010ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010ec:	48bd      	ldr	r0, [pc, #756]	; (80013e4 <updateDisplayTask+0x324>)
 80010ee:	f006 fe79 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 27);
 80010f2:	211b      	movs	r1, #27
 80010f4:	2000      	movs	r0, #0
 80010f6:	f006 fe9b 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("68%", Font_7x10, White);
 80010fa:	4bb9      	ldr	r3, [pc, #740]	; (80013e0 <updateDisplayTask+0x320>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	9200      	str	r2, [sp, #0]
 8001100:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001102:	48b9      	ldr	r0, [pc, #740]	; (80013e8 <updateDisplayTask+0x328>)
 8001104:	f006 fe6e 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_DrawRectangle( 23, 16, 34, 36, White);
 8001108:	2301      	movs	r3, #1
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2324      	movs	r3, #36	; 0x24
 800110e:	2222      	movs	r2, #34	; 0x22
 8001110:	2110      	movs	r1, #16
 8001112:	2017      	movs	r0, #23
 8001114:	f006 ff10 	bl	8007f38 <ssd1306_DrawRectangle>

  ssd1306_SetCursor(38, 16);
 8001118:	2110      	movs	r1, #16
 800111a:	2026      	movs	r0, #38	; 0x26
 800111c:	f006 fe88 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("CH2", Font_7x10, White);
 8001120:	4baf      	ldr	r3, [pc, #700]	; (80013e0 <updateDisplayTask+0x320>)
 8001122:	2201      	movs	r2, #1
 8001124:	9200      	str	r2, [sp, #0]
 8001126:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001128:	48b0      	ldr	r0, [pc, #704]	; (80013ec <updateDisplayTask+0x32c>)
 800112a:	f006 fe5b 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_SetCursor(38, 27);
 800112e:	211b      	movs	r1, #27
 8001130:	2026      	movs	r0, #38	; 0x26
 8001132:	f006 fe7d 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("52%", Font_7x10, White);
 8001136:	4baa      	ldr	r3, [pc, #680]	; (80013e0 <updateDisplayTask+0x320>)
 8001138:	2201      	movs	r2, #1
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800113e:	48ac      	ldr	r0, [pc, #688]	; (80013f0 <updateDisplayTask+0x330>)
 8001140:	f006 fe50 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_DrawRectangle( 61, 16, 72, 36, White);
 8001144:	2301      	movs	r3, #1
 8001146:	9300      	str	r3, [sp, #0]
 8001148:	2324      	movs	r3, #36	; 0x24
 800114a:	2248      	movs	r2, #72	; 0x48
 800114c:	2110      	movs	r1, #16
 800114e:	203d      	movs	r0, #61	; 0x3d
 8001150:	f006 fef2 	bl	8007f38 <ssd1306_DrawRectangle>

  ssd1306_SetCursor(0, 41);
 8001154:	2129      	movs	r1, #41	; 0x29
 8001156:	2000      	movs	r0, #0
 8001158:	f006 fe6a 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("CH3", Font_7x10, White);
 800115c:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <updateDisplayTask+0x320>)
 800115e:	2201      	movs	r2, #1
 8001160:	9200      	str	r2, [sp, #0]
 8001162:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001164:	48a3      	ldr	r0, [pc, #652]	; (80013f4 <updateDisplayTask+0x334>)
 8001166:	f006 fe3d 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_SetCursor(0, 52);
 800116a:	2134      	movs	r1, #52	; 0x34
 800116c:	2000      	movs	r0, #0
 800116e:	f006 fe5f 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("00%", Font_7x10, White);
 8001172:	4b9b      	ldr	r3, [pc, #620]	; (80013e0 <updateDisplayTask+0x320>)
 8001174:	2201      	movs	r2, #1
 8001176:	9200      	str	r2, [sp, #0]
 8001178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800117a:	489f      	ldr	r0, [pc, #636]	; (80013f8 <updateDisplayTask+0x338>)
 800117c:	f006 fe32 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_DrawRectangle( 23, 41, 34, 61, White);
 8001180:	2301      	movs	r3, #1
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	233d      	movs	r3, #61	; 0x3d
 8001186:	2222      	movs	r2, #34	; 0x22
 8001188:	2129      	movs	r1, #41	; 0x29
 800118a:	2017      	movs	r0, #23
 800118c:	f006 fed4 	bl	8007f38 <ssd1306_DrawRectangle>

  ssd1306_SetCursor(38, 41);
 8001190:	2129      	movs	r1, #41	; 0x29
 8001192:	2026      	movs	r0, #38	; 0x26
 8001194:	f006 fe4c 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("CH4", Font_7x10, White);
 8001198:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <updateDisplayTask+0x320>)
 800119a:	2201      	movs	r2, #1
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a0:	4896      	ldr	r0, [pc, #600]	; (80013fc <updateDisplayTask+0x33c>)
 80011a2:	f006 fe1f 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_SetCursor(38, 52);
 80011a6:	2134      	movs	r1, #52	; 0x34
 80011a8:	2026      	movs	r0, #38	; 0x26
 80011aa:	f006 fe41 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString("99%", Font_7x10, White);
 80011ae:	4b8c      	ldr	r3, [pc, #560]	; (80013e0 <updateDisplayTask+0x320>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	9200      	str	r2, [sp, #0]
 80011b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011b6:	4892      	ldr	r0, [pc, #584]	; (8001400 <updateDisplayTask+0x340>)
 80011b8:	f006 fe14 	bl	8007de4 <ssd1306_WriteString>
  ssd1306_DrawRectangle( 61, 41, 72, 61, White);
 80011bc:	2301      	movs	r3, #1
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	233d      	movs	r3, #61	; 0x3d
 80011c2:	2248      	movs	r2, #72	; 0x48
 80011c4:	2129      	movs	r1, #41	; 0x29
 80011c6:	203d      	movs	r0, #61	; 0x3d
 80011c8:	f006 feb6 	bl	8007f38 <ssd1306_DrawRectangle>

  ssd1306_SetCursor(74, 16);
 80011cc:	2110      	movs	r1, #16
 80011ce:	204a      	movs	r0, #74	; 0x4a
 80011d0:	f006 fe2e 	bl	8007e30 <ssd1306_SetCursor>
  ssd1306_WriteString(" Ambient ", Font_6x8, Black);
 80011d4:	4b8b      	ldr	r3, [pc, #556]	; (8001404 <updateDisplayTask+0x344>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011dc:	488a      	ldr	r0, [pc, #552]	; (8001408 <updateDisplayTask+0x348>)
 80011de:	f006 fe01 	bl	8007de4 <ssd1306_WriteString>

  ssd1306_UpdateScreen();
 80011e2:	f006 fcf1 	bl	8007bc8 <ssd1306_UpdateScreen>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 80011e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011ea:	f007 f94a 	bl	8008482 <osDelay>
    if(osMutexAcquire(mutexLogDataHandle, osWaitForever) == osOK)
 80011ee:	4b87      	ldr	r3, [pc, #540]	; (800140c <updateDisplayTask+0x34c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f04f 31ff 	mov.w	r1, #4294967295
 80011f6:	4618      	mov	r0, r3
 80011f8:	f007 f9e4 	bl	80085c4 <osMutexAcquire>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f1      	bne.n	80011e6 <updateDisplayTask+0x126>
    {
    	sprintf(cDate, "%02d/%02d/%02d", xLogData.s.day, xLogData.s.month, xLogData.s.year);
 8001202:	4b83      	ldr	r3, [pc, #524]	; (8001410 <updateDisplayTask+0x350>)
 8001204:	789b      	ldrb	r3, [r3, #2]
 8001206:	461a      	mov	r2, r3
 8001208:	4b81      	ldr	r3, [pc, #516]	; (8001410 <updateDisplayTask+0x350>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	4619      	mov	r1, r3
 800120e:	4b80      	ldr	r3, [pc, #512]	; (8001410 <updateDisplayTask+0x350>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8001216:	9300      	str	r3, [sp, #0]
 8001218:	460b      	mov	r3, r1
 800121a:	497e      	ldr	r1, [pc, #504]	; (8001414 <updateDisplayTask+0x354>)
 800121c:	f00a fc76 	bl	800bb0c <siprintf>
    	sprintf(cTime, "%02d:%02d:%02d", xLogData.s.hour, xLogData.s.minute, xLogData.s.second);
 8001220:	4b7b      	ldr	r3, [pc, #492]	; (8001410 <updateDisplayTask+0x350>)
 8001222:	78db      	ldrb	r3, [r3, #3]
 8001224:	461a      	mov	r2, r3
 8001226:	4b7a      	ldr	r3, [pc, #488]	; (8001410 <updateDisplayTask+0x350>)
 8001228:	791b      	ldrb	r3, [r3, #4]
 800122a:	4619      	mov	r1, r3
 800122c:	4b78      	ldr	r3, [pc, #480]	; (8001410 <updateDisplayTask+0x350>)
 800122e:	795b      	ldrb	r3, [r3, #5]
 8001230:	f107 0020 	add.w	r0, r7, #32
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	460b      	mov	r3, r1
 8001238:	4977      	ldr	r1, [pc, #476]	; (8001418 <updateDisplayTask+0x358>)
 800123a:	f00a fc67 	bl	800bb0c <siprintf>

    	sprintf(cHum, "%d%%", xLogData.s.ambHumidity);
 800123e:	4b74      	ldr	r3, [pc, #464]	; (8001410 <updateDisplayTask+0x350>)
 8001240:	7a5b      	ldrb	r3, [r3, #9]
 8001242:	461a      	mov	r2, r3
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4974      	ldr	r1, [pc, #464]	; (800141c <updateDisplayTask+0x35c>)
 800124a:	4618      	mov	r0, r3
 800124c:	f00a fc5e 	bl	800bb0c <siprintf>
    	ssd1306_WriteTemp(xLogData.s.ambTemperature, 84, 46, White);
 8001250:	4b6f      	ldr	r3, [pc, #444]	; (8001410 <updateDisplayTask+0x350>)
 8001252:	7a18      	ldrb	r0, [r3, #8]
 8001254:	2301      	movs	r3, #1
 8001256:	222e      	movs	r2, #46	; 0x2e
 8001258:	2154      	movs	r1, #84	; 0x54
 800125a:	f000 fa8f 	bl	800177c <ssd1306_WriteTemp>

    	sprintf(cSoil[0], "%d%%", xLogData.s.soilHumidity[0]);
 800125e:	4b6c      	ldr	r3, [pc, #432]	; (8001410 <updateDisplayTask+0x350>)
 8001260:	7a9b      	ldrb	r3, [r3, #10]
 8001262:	461a      	mov	r2, r3
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	496c      	ldr	r1, [pc, #432]	; (800141c <updateDisplayTask+0x35c>)
 800126a:	4618      	mov	r0, r3
 800126c:	f00a fc4e 	bl	800bb0c <siprintf>
    	sprintf(cSoil[1], "%d%%", xLogData.s.soilHumidity[1]);
 8001270:	4b67      	ldr	r3, [pc, #412]	; (8001410 <updateDisplayTask+0x350>)
 8001272:	7adb      	ldrb	r3, [r3, #11]
 8001274:	461a      	mov	r2, r3
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	3304      	adds	r3, #4
 800127c:	4967      	ldr	r1, [pc, #412]	; (800141c <updateDisplayTask+0x35c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f00a fc44 	bl	800bb0c <siprintf>
    	sprintf(cSoil[2], "%d%%", xLogData.s.soilHumidity[2]);
 8001284:	4b62      	ldr	r3, [pc, #392]	; (8001410 <updateDisplayTask+0x350>)
 8001286:	7b1b      	ldrb	r3, [r3, #12]
 8001288:	461a      	mov	r2, r3
 800128a:	f107 030c 	add.w	r3, r7, #12
 800128e:	3308      	adds	r3, #8
 8001290:	4962      	ldr	r1, [pc, #392]	; (800141c <updateDisplayTask+0x35c>)
 8001292:	4618      	mov	r0, r3
 8001294:	f00a fc3a 	bl	800bb0c <siprintf>
    	sprintf(cSoil[3], "%d%%", xLogData.s.soilHumidity[3]);
 8001298:	4b5d      	ldr	r3, [pc, #372]	; (8001410 <updateDisplayTask+0x350>)
 800129a:	7b5b      	ldrb	r3, [r3, #13]
 800129c:	461a      	mov	r2, r3
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	330c      	adds	r3, #12
 80012a4:	495d      	ldr	r1, [pc, #372]	; (800141c <updateDisplayTask+0x35c>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00a fc30 	bl	800bb0c <siprintf>

    	uiRelaySelected = xLogData.s.relaySelected;
 80012ac:	4b58      	ldr	r3, [pc, #352]	; (8001410 <updateDisplayTask+0x350>)
 80012ae:	79db      	ldrb	r3, [r3, #7]
 80012b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    	uiRelayStatus = xLogData.s.relayStatus;
 80012b4:	4b56      	ldr	r3, [pc, #344]	; (8001410 <updateDisplayTask+0x350>)
 80012b6:	799b      	ldrb	r3, [r3, #6]
 80012b8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    	osMutexRelease(mutexLogDataHandle);
 80012bc:	4b53      	ldr	r3, [pc, #332]	; (800140c <updateDisplayTask+0x34c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f007 f9ca 	bl	800865a <osMutexRelease>

    	ssd1306_SetCursor(2, 3);
 80012c6:	2103      	movs	r1, #3
 80012c8:	2002      	movs	r0, #2
 80012ca:	f006 fdb1 	bl	8007e30 <ssd1306_SetCursor>
    	ssd1306_WriteString(cDate, Font_7x10, Black);
 80012ce:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <updateDisplayTask+0x320>)
 80012d0:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80012d4:	2200      	movs	r2, #0
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012da:	f006 fd83 	bl	8007de4 <ssd1306_WriteString>

    	ssd1306_SetCursor(70, 3);
 80012de:	2103      	movs	r1, #3
 80012e0:	2046      	movs	r0, #70	; 0x46
 80012e2:	f006 fda5 	bl	8007e30 <ssd1306_SetCursor>
    	ssd1306_WriteString(cTime, Font_7x10, Black);
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <updateDisplayTask+0x320>)
 80012e8:	f107 0020 	add.w	r0, r7, #32
 80012ec:	2200      	movs	r2, #0
 80012ee:	9200      	str	r2, [sp, #0]
 80012f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f2:	f006 fd77 	bl	8007de4 <ssd1306_WriteString>

    	ssd1306_SetCursor(84, 28);
 80012f6:	211c      	movs	r1, #28
 80012f8:	2054      	movs	r0, #84	; 0x54
 80012fa:	f006 fd99 	bl	8007e30 <ssd1306_SetCursor>
    	ssd1306_WriteString(cHum, Font_11x18, White);
 80012fe:	4b48      	ldr	r3, [pc, #288]	; (8001420 <updateDisplayTask+0x360>)
 8001300:	f107 001c 	add.w	r0, r7, #28
 8001304:	2201      	movs	r2, #1
 8001306:	9200      	str	r2, [sp, #0]
 8001308:	cb0e      	ldmia	r3, {r1, r2, r3}
 800130a:	f006 fd6b 	bl	8007de4 <ssd1306_WriteString>

    	ssd1306_FillRectangle( 24, 17, 33, 35, 0x01 &  uiRelayStatus);
 800130e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2323      	movs	r3, #35	; 0x23
 800131c:	2221      	movs	r2, #33	; 0x21
 800131e:	2111      	movs	r1, #17
 8001320:	2018      	movs	r0, #24
 8001322:	f006 fe40 	bl	8007fa6 <ssd1306_FillRectangle>
    	ssd1306_FillRectangle( 62, 17, 71, 35, 0x01 & (uiRelayStatus >> 1));
 8001326:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	2323      	movs	r3, #35	; 0x23
 8001338:	2247      	movs	r2, #71	; 0x47
 800133a:	2111      	movs	r1, #17
 800133c:	203e      	movs	r0, #62	; 0x3e
 800133e:	f006 fe32 	bl	8007fa6 <ssd1306_FillRectangle>
    	ssd1306_FillRectangle( 24, 42, 33, 60, 0x01 & (uiRelayStatus >> 2));
 8001342:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001346:	089b      	lsrs	r3, r3, #2
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	b2db      	uxtb	r3, r3
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	233c      	movs	r3, #60	; 0x3c
 8001354:	2221      	movs	r2, #33	; 0x21
 8001356:	212a      	movs	r1, #42	; 0x2a
 8001358:	2018      	movs	r0, #24
 800135a:	f006 fe24 	bl	8007fa6 <ssd1306_FillRectangle>
    	ssd1306_FillRectangle( 62, 42, 71, 60, 0x01 & (uiRelayStatus >> 3));
 800135e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001362:	08db      	lsrs	r3, r3, #3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	233c      	movs	r3, #60	; 0x3c
 8001370:	2247      	movs	r2, #71	; 0x47
 8001372:	212a      	movs	r1, #42	; 0x2a
 8001374:	203e      	movs	r0, #62	; 0x3e
 8001376:	f006 fe16 	bl	8007fa6 <ssd1306_FillRectangle>

    	switch(uiRelaySelected)
 800137a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800137e:	3b01      	subs	r3, #1
 8001380:	2b03      	cmp	r3, #3
 8001382:	f200 80b2 	bhi.w	80014ea <updateDisplayTask+0x42a>
 8001386:	a201      	add	r2, pc, #4	; (adr r2, 800138c <updateDisplayTask+0x2cc>)
 8001388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138c:	0800139d 	.word	0x0800139d
 8001390:	08001425 	.word	0x08001425
 8001394:	08001467 	.word	0x08001467
 8001398:	080014a9 	.word	0x080014a9
		{
    		case 0x01:
			  ssd1306_Line(0, 38, 34, 38, White);
 800139c:	2301      	movs	r3, #1
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2326      	movs	r3, #38	; 0x26
 80013a2:	2222      	movs	r2, #34	; 0x22
 80013a4:	2126      	movs	r1, #38	; 0x26
 80013a6:	2000      	movs	r0, #0
 80013a8:	f006 fd5a 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 38, 72, 38, Black);
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2326      	movs	r3, #38	; 0x26
 80013b2:	2248      	movs	r2, #72	; 0x48
 80013b4:	2126      	movs	r1, #38	; 0x26
 80013b6:	2026      	movs	r0, #38	; 0x26
 80013b8:	f006 fd52 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(0, 63, 34, 63, Black);
 80013bc:	2300      	movs	r3, #0
 80013be:	9300      	str	r3, [sp, #0]
 80013c0:	233f      	movs	r3, #63	; 0x3f
 80013c2:	2222      	movs	r2, #34	; 0x22
 80013c4:	213f      	movs	r1, #63	; 0x3f
 80013c6:	2000      	movs	r0, #0
 80013c8:	f006 fd4a 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 63, 72, 63, Black);
 80013cc:	2300      	movs	r3, #0
 80013ce:	9300      	str	r3, [sp, #0]
 80013d0:	233f      	movs	r3, #63	; 0x3f
 80013d2:	2248      	movs	r2, #72	; 0x48
 80013d4:	213f      	movs	r1, #63	; 0x3f
 80013d6:	2026      	movs	r0, #38	; 0x26
 80013d8:	f006 fd42 	bl	8007e60 <ssd1306_Line>

			  break;
 80013dc:	e0a6      	b.n	800152c <updateDisplayTask+0x46c>
 80013de:	bf00      	nop
 80013e0:	0800e29c 	.word	0x0800e29c
 80013e4:	0800c5dc 	.word	0x0800c5dc
 80013e8:	0800c5e0 	.word	0x0800c5e0
 80013ec:	0800c5e4 	.word	0x0800c5e4
 80013f0:	0800c5e8 	.word	0x0800c5e8
 80013f4:	0800c5ec 	.word	0x0800c5ec
 80013f8:	0800c5f0 	.word	0x0800c5f0
 80013fc:	0800c5f4 	.word	0x0800c5f4
 8001400:	0800c5f8 	.word	0x0800c5f8
 8001404:	0800e290 	.word	0x0800e290
 8001408:	0800c5fc 	.word	0x0800c5fc
 800140c:	2000014c 	.word	0x2000014c
 8001410:	20000118 	.word	0x20000118
 8001414:	0800c608 	.word	0x0800c608
 8001418:	0800c618 	.word	0x0800c618
 800141c:	0800c628 	.word	0x0800c628
 8001420:	0800e2a8 	.word	0x0800e2a8
    		case 0x02:
			  ssd1306_Line(0, 38, 34, 38, Black);
 8001424:	2300      	movs	r3, #0
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2326      	movs	r3, #38	; 0x26
 800142a:	2222      	movs	r2, #34	; 0x22
 800142c:	2126      	movs	r1, #38	; 0x26
 800142e:	2000      	movs	r0, #0
 8001430:	f006 fd16 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 38, 72, 38, White);
 8001434:	2301      	movs	r3, #1
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	2326      	movs	r3, #38	; 0x26
 800143a:	2248      	movs	r2, #72	; 0x48
 800143c:	2126      	movs	r1, #38	; 0x26
 800143e:	2026      	movs	r0, #38	; 0x26
 8001440:	f006 fd0e 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(0, 63, 34, 63, Black);
 8001444:	2300      	movs	r3, #0
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	233f      	movs	r3, #63	; 0x3f
 800144a:	2222      	movs	r2, #34	; 0x22
 800144c:	213f      	movs	r1, #63	; 0x3f
 800144e:	2000      	movs	r0, #0
 8001450:	f006 fd06 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 63, 72, 63, Black);
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	233f      	movs	r3, #63	; 0x3f
 800145a:	2248      	movs	r2, #72	; 0x48
 800145c:	213f      	movs	r1, #63	; 0x3f
 800145e:	2026      	movs	r0, #38	; 0x26
 8001460:	f006 fcfe 	bl	8007e60 <ssd1306_Line>
			  break;
 8001464:	e062      	b.n	800152c <updateDisplayTask+0x46c>
    		case 0x03:
			  ssd1306_Line(0, 38, 34, 38, Black);
 8001466:	2300      	movs	r3, #0
 8001468:	9300      	str	r3, [sp, #0]
 800146a:	2326      	movs	r3, #38	; 0x26
 800146c:	2222      	movs	r2, #34	; 0x22
 800146e:	2126      	movs	r1, #38	; 0x26
 8001470:	2000      	movs	r0, #0
 8001472:	f006 fcf5 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 38, 72, 38, Black);
 8001476:	2300      	movs	r3, #0
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	2326      	movs	r3, #38	; 0x26
 800147c:	2248      	movs	r2, #72	; 0x48
 800147e:	2126      	movs	r1, #38	; 0x26
 8001480:	2026      	movs	r0, #38	; 0x26
 8001482:	f006 fced 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(0, 63, 34, 63, White);
 8001486:	2301      	movs	r3, #1
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	233f      	movs	r3, #63	; 0x3f
 800148c:	2222      	movs	r2, #34	; 0x22
 800148e:	213f      	movs	r1, #63	; 0x3f
 8001490:	2000      	movs	r0, #0
 8001492:	f006 fce5 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 63, 72, 63, Black);
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	233f      	movs	r3, #63	; 0x3f
 800149c:	2248      	movs	r2, #72	; 0x48
 800149e:	213f      	movs	r1, #63	; 0x3f
 80014a0:	2026      	movs	r0, #38	; 0x26
 80014a2:	f006 fcdd 	bl	8007e60 <ssd1306_Line>
			  break;
 80014a6:	e041      	b.n	800152c <updateDisplayTask+0x46c>
    		case 0x04:
			  ssd1306_Line(0, 38, 34, 38, Black);
 80014a8:	2300      	movs	r3, #0
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	2326      	movs	r3, #38	; 0x26
 80014ae:	2222      	movs	r2, #34	; 0x22
 80014b0:	2126      	movs	r1, #38	; 0x26
 80014b2:	2000      	movs	r0, #0
 80014b4:	f006 fcd4 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 38, 72, 38, Black);
 80014b8:	2300      	movs	r3, #0
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2326      	movs	r3, #38	; 0x26
 80014be:	2248      	movs	r2, #72	; 0x48
 80014c0:	2126      	movs	r1, #38	; 0x26
 80014c2:	2026      	movs	r0, #38	; 0x26
 80014c4:	f006 fccc 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(0, 63, 34, 63, Black);
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	233f      	movs	r3, #63	; 0x3f
 80014ce:	2222      	movs	r2, #34	; 0x22
 80014d0:	213f      	movs	r1, #63	; 0x3f
 80014d2:	2000      	movs	r0, #0
 80014d4:	f006 fcc4 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 63, 72, 63, White);
 80014d8:	2301      	movs	r3, #1
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	233f      	movs	r3, #63	; 0x3f
 80014de:	2248      	movs	r2, #72	; 0x48
 80014e0:	213f      	movs	r1, #63	; 0x3f
 80014e2:	2026      	movs	r0, #38	; 0x26
 80014e4:	f006 fcbc 	bl	8007e60 <ssd1306_Line>
			  break;
 80014e8:	e020      	b.n	800152c <updateDisplayTask+0x46c>
    		default:
			  ssd1306_Line(0, 38, 34, 38, Black);
 80014ea:	2300      	movs	r3, #0
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2326      	movs	r3, #38	; 0x26
 80014f0:	2222      	movs	r2, #34	; 0x22
 80014f2:	2126      	movs	r1, #38	; 0x26
 80014f4:	2000      	movs	r0, #0
 80014f6:	f006 fcb3 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 38, 72, 38, Black);
 80014fa:	2300      	movs	r3, #0
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2326      	movs	r3, #38	; 0x26
 8001500:	2248      	movs	r2, #72	; 0x48
 8001502:	2126      	movs	r1, #38	; 0x26
 8001504:	2026      	movs	r0, #38	; 0x26
 8001506:	f006 fcab 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(0, 63, 34, 63, Black);
 800150a:	2300      	movs	r3, #0
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	233f      	movs	r3, #63	; 0x3f
 8001510:	2222      	movs	r2, #34	; 0x22
 8001512:	213f      	movs	r1, #63	; 0x3f
 8001514:	2000      	movs	r0, #0
 8001516:	f006 fca3 	bl	8007e60 <ssd1306_Line>
			  ssd1306_Line(38, 63, 72, 63, Black);
 800151a:	2300      	movs	r3, #0
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	233f      	movs	r3, #63	; 0x3f
 8001520:	2248      	movs	r2, #72	; 0x48
 8001522:	213f      	movs	r1, #63	; 0x3f
 8001524:	2026      	movs	r0, #38	; 0x26
 8001526:	f006 fc9b 	bl	8007e60 <ssd1306_Line>
			  break;
 800152a:	bf00      	nop
	    ssd1306_WriteString(cSoil[2], Font_7x10, White);

	    ssd1306_SetCursor(38, 52);
	    ssd1306_WriteString(cSoil[3], Font_7x10, White);*/

    	ssd1306_UpdateScreen();
 800152c:	f006 fb4c 	bl	8007bc8 <ssd1306_UpdateScreen>
    osDelay(1000);
 8001530:	e659      	b.n	80011e6 <updateDisplayTask+0x126>
 8001532:	bf00      	nop

08001534 <readSensorsRTCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_readSensorsRTCTask */
void readSensorsRTCTask(void *argument)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b092      	sub	sp, #72	; 0x48
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef rtc_time;

  float soilHumidity[4];

  // Initialize ADCs
  HAL_ADC_Start(&hadc1);
 800153c:	485a      	ldr	r0, [pc, #360]	; (80016a8 <readSensorsRTCTask+0x174>)
 800153e:	f001 fac7 	bl	8002ad0 <HAL_ADC_Start>
  /*HAL_ADC_Start(&hadc2);
  HAL_ADC_Start(&hadc3);
  HAL_ADC_Start(&hadc4);*/

  // Initialize DHT11
  init_dht11(&dht11, &htim7, DHT11_GPIO_Port, DHT11_Pin);
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	4a59      	ldr	r2, [pc, #356]	; (80016ac <readSensorsRTCTask+0x178>)
 8001548:	4959      	ldr	r1, [pc, #356]	; (80016b0 <readSensorsRTCTask+0x17c>)
 800154a:	485a      	ldr	r0, [pc, #360]	; (80016b4 <readSensorsRTCTask+0x180>)
 800154c:	f006 f8b8 	bl	80076c0 <init_dht11>

  // Initialize RTC
  rtc_date = (RTC_DateTypeDef){.WeekDay = 3, .Date = 12, .Month = 11, .Year = 24};
 8001550:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <readSensorsRTCTask+0x184>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	647b      	str	r3, [r7, #68]	; 0x44
  rtc_time = (RTC_TimeTypeDef){.Hours = 23, .Minutes = 47, .Seconds= 0};
 8001556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]
 8001564:	611a      	str	r2, [r3, #16]
 8001566:	2317      	movs	r3, #23
 8001568:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 800156c:	232f      	movs	r3, #47	; 0x2f
 800156e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  HAL_RTC_SetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001572:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4850      	ldr	r0, [pc, #320]	; (80016bc <readSensorsRTCTask+0x188>)
 800157c:	f004 fb02 	bl	8005b84 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001580:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001584:	2200      	movs	r2, #0
 8001586:	4619      	mov	r1, r3
 8001588:	484c      	ldr	r0, [pc, #304]	; (80016bc <readSensorsRTCTask+0x188>)
 800158a:	f004 fa02 	bl	8005992 <HAL_RTC_SetTime>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 800158e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001592:	f006 ff76 	bl	8008482 <osDelay>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001596:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800159a:	2200      	movs	r2, #0
 800159c:	4619      	mov	r1, r3
 800159e:	4847      	ldr	r0, [pc, #284]	; (80016bc <readSensorsRTCTask+0x188>)
 80015a0:	f004 fa94 	bl	8005acc <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80015a4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015a8:	2200      	movs	r2, #0
 80015aa:	4619      	mov	r1, r3
 80015ac:	4843      	ldr	r0, [pc, #268]	; (80016bc <readSensorsRTCTask+0x188>)
 80015ae:	f004 fb70 	bl	8005c92 <HAL_RTC_GetDate>
    //HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
    /*HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
    HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
    HAL_ADC_PollForConversion(&hadc4, HAL_MAX_DELAY);*/

    soilHumidity[0] = (float) HAL_ADC_GetValue(&hadc1) * 100.0/4096.0;
 80015b2:	483d      	ldr	r0, [pc, #244]	; (80016a8 <readSensorsRTCTask+0x174>)
 80015b4:	f001 fb70 	bl	8002c98 <HAL_ADC_GetValue>
 80015b8:	ee07 0a90 	vmov	s15, r0
 80015bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c0:	ee17 0a90 	vmov	r0, s15
 80015c4:	f7fe ffe0 	bl	8000588 <__aeabi_f2d>
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <readSensorsRTCTask+0x18c>)
 80015ce:	f7ff f833 	bl	8000638 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f04f 0200 	mov.w	r2, #0
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <readSensorsRTCTask+0x190>)
 80015e0:	f7ff f954 	bl	800088c <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	f7ff fa36 	bl	8000a5c <__aeabi_d2f>
 80015f0:	4603      	mov	r3, r0
 80015f2:	623b      	str	r3, [r7, #32]
    /*soilHumidity[1] = (float) HAL_ADC_GetValue(&hadc2) * 100.0/4096.0;
    soilHumidity[2] = (float) HAL_ADC_GetValue(&hadc3) * 100.0/4096.0;
    soilHumidity[3] = (float) HAL_ADC_GetValue(&hadc4) * 100.0/4096.0;*/

    readDHT11(&dht11);
 80015f4:	482f      	ldr	r0, [pc, #188]	; (80016b4 <readSensorsRTCTask+0x180>)
 80015f6:	f006 f8b4 	bl	8007762 <readDHT11>

    if(osMutexAcquire(mutexLogDataHandle, 100) == osOK)
 80015fa:	4b33      	ldr	r3, [pc, #204]	; (80016c8 <readSensorsRTCTask+0x194>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2164      	movs	r1, #100	; 0x64
 8001600:	4618      	mov	r0, r3
 8001602:	f006 ffdf 	bl	80085c4 <osMutexAcquire>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1c0      	bne.n	800158e <readSensorsRTCTask+0x5a>
    {
    	xLogData.s.year= rtc_date.Year;
 800160c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8001610:	4b2e      	ldr	r3, [pc, #184]	; (80016cc <readSensorsRTCTask+0x198>)
 8001612:	701a      	strb	r2, [r3, #0]
    	xLogData.s.month = rtc_date.Month;
 8001614:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8001618:	4b2c      	ldr	r3, [pc, #176]	; (80016cc <readSensorsRTCTask+0x198>)
 800161a:	705a      	strb	r2, [r3, #1]
    	xLogData.s.day = rtc_date.Date;
 800161c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <readSensorsRTCTask+0x198>)
 8001622:	709a      	strb	r2, [r3, #2]
    	xLogData.s.hour = rtc_time.Hours;
 8001624:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001628:	4b28      	ldr	r3, [pc, #160]	; (80016cc <readSensorsRTCTask+0x198>)
 800162a:	70da      	strb	r2, [r3, #3]
    	xLogData.s.minute = rtc_time.Minutes;
 800162c:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8001630:	4b26      	ldr	r3, [pc, #152]	; (80016cc <readSensorsRTCTask+0x198>)
 8001632:	711a      	strb	r2, [r3, #4]
    	xLogData.s.second = rtc_time.Seconds;
 8001634:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <readSensorsRTCTask+0x198>)
 800163a:	715a      	strb	r2, [r3, #5]

    	xLogData.s.ambHumidity = dht11.humidty;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <readSensorsRTCTask+0x180>)
 800163e:	7b5a      	ldrb	r2, [r3, #13]
 8001640:	4b22      	ldr	r3, [pc, #136]	; (80016cc <readSensorsRTCTask+0x198>)
 8001642:	725a      	strb	r2, [r3, #9]
    	xLogData.s.ambTemperature = dht11.temperature;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <readSensorsRTCTask+0x180>)
 8001646:	7b1a      	ldrb	r2, [r3, #12]
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <readSensorsRTCTask+0x198>)
 800164a:	721a      	strb	r2, [r3, #8]

    	xLogData.s.soilHumidity[0] = soilHumidity[0];
 800164c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	edc7 7a00 	vstr	s15, [r7]
 8001658:	783b      	ldrb	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <readSensorsRTCTask+0x198>)
 800165e:	729a      	strb	r2, [r3, #10]
    	xLogData.s.soilHumidity[1] = soilHumidity[1];
 8001660:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001668:	edc7 7a00 	vstr	s15, [r7]
 800166c:	783b      	ldrb	r3, [r7, #0]
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <readSensorsRTCTask+0x198>)
 8001672:	72da      	strb	r2, [r3, #11]
    	xLogData.s.soilHumidity[2] = soilHumidity[2];
 8001674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800167c:	edc7 7a00 	vstr	s15, [r7]
 8001680:	783b      	ldrb	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <readSensorsRTCTask+0x198>)
 8001686:	731a      	strb	r2, [r3, #12]
    	xLogData.s.soilHumidity[3] = soilHumidity[3];
 8001688:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800168c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001690:	edc7 7a00 	vstr	s15, [r7]
 8001694:	783b      	ldrb	r3, [r7, #0]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <readSensorsRTCTask+0x198>)
 800169a:	735a      	strb	r2, [r3, #13]

    	osMutexRelease(mutexLogDataHandle);
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <readSensorsRTCTask+0x194>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f006 ffda 	bl	800865a <osMutexRelease>
    osDelay(1000);
 80016a6:	e772      	b.n	800158e <readSensorsRTCTask+0x5a>
 80016a8:	2000009c 	.word	0x2000009c
 80016ac:	48000800 	.word	0x48000800
 80016b0:	200002c0 	.word	0x200002c0
 80016b4:	20000108 	.word	0x20000108
 80016b8:	0800c630 	.word	0x0800c630
 80016bc:	20000248 	.word	0x20000248
 80016c0:	40590000 	.word	0x40590000
 80016c4:	40b00000 	.word	0x40b00000
 80016c8:	2000014c 	.word	0x2000014c
 80016cc:	20000118 	.word	0x20000118

080016d0 <controlWateringTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_controlWateringTask */
void controlWateringTask(void *argument)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN controlWateringTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80016d8:	200a      	movs	r0, #10
 80016da:	f006 fed2 	bl	8008482 <osDelay>
    osThreadFlagsWait(0x0001, osFlagsWaitAll, osWaitForever);
 80016de:	f04f 32ff 	mov.w	r2, #4294967295
 80016e2:	2101      	movs	r1, #1
 80016e4:	2001      	movs	r0, #1
 80016e6:	f006 fe4b 	bl	8008380 <osThreadFlagsWait>
	osMutexAcquire(mutexLogDataHandle, 500);
 80016ea:	4b18      	ldr	r3, [pc, #96]	; (800174c <controlWateringTask+0x7c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80016f2:	4618      	mov	r0, r3
 80016f4:	f006 ff66 	bl	80085c4 <osMutexAcquire>
	if(xLogData.s.relaySelected > 0)
 80016f8:	4b15      	ldr	r3, [pc, #84]	; (8001750 <controlWateringTask+0x80>)
 80016fa:	79db      	ldrb	r3, [r3, #7]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d01e      	beq.n	800173e <controlWateringTask+0x6e>
	{
		xLogData.s.relayStatus ^= (0x01 << (xLogData.s.relaySelected-1));
 8001700:	4b13      	ldr	r3, [pc, #76]	; (8001750 <controlWateringTask+0x80>)
 8001702:	799b      	ldrb	r3, [r3, #6]
 8001704:	b25a      	sxtb	r2, r3
 8001706:	4b12      	ldr	r3, [pc, #72]	; (8001750 <controlWateringTask+0x80>)
 8001708:	79db      	ldrb	r3, [r3, #7]
 800170a:	3b01      	subs	r3, #1
 800170c:	2101      	movs	r1, #1
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	b25b      	sxtb	r3, r3
 8001714:	4053      	eors	r3, r2
 8001716:	b25b      	sxtb	r3, r3
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <controlWateringTask+0x80>)
 800171c:	719a      	strb	r2, [r3, #6]
		HAL_GPIO_TogglePin(xRelayPorts[xLogData.s.relaySelected],
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <controlWateringTask+0x80>)
 8001720:	79db      	ldrb	r3, [r3, #7]
 8001722:	461a      	mov	r2, r3
 8001724:	4b0b      	ldr	r3, [pc, #44]	; (8001754 <controlWateringTask+0x84>)
 8001726:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				           uiRelayPins[xLogData.s.relaySelected]);
 800172a:	4a09      	ldr	r2, [pc, #36]	; (8001750 <controlWateringTask+0x80>)
 800172c:	79d2      	ldrb	r2, [r2, #7]
 800172e:	4611      	mov	r1, r2
		HAL_GPIO_TogglePin(xRelayPorts[xLogData.s.relaySelected],
 8001730:	4a09      	ldr	r2, [pc, #36]	; (8001758 <controlWateringTask+0x88>)
 8001732:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8001736:	4611      	mov	r1, r2
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fb51 	bl	8003de0 <HAL_GPIO_TogglePin>
	}
	osMutexRelease(mutexLogDataHandle);
 800173e:	4b03      	ldr	r3, [pc, #12]	; (800174c <controlWateringTask+0x7c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f006 ff89 	bl	800865a <osMutexRelease>
    osDelay(10);
 8001748:	e7c6      	b.n	80016d8 <controlWateringTask+0x8>
 800174a:	bf00      	nop
 800174c:	2000014c 	.word	0x2000014c
 8001750:	20000118 	.word	0x20000118
 8001754:	20000000 	.word	0x20000000
 8001758:	20000014 	.word	0x20000014

0800175c <updateLogTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_updateLogTask */
void updateLogTask(void *argument)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN updateLogTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001764:	2001      	movs	r0, #1
 8001766:	f006 fe8c 	bl	8008482 <osDelay>
 800176a:	e7fb      	b.n	8001764 <updateLogTask+0x8>

0800176c <cfgWateringTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_cfgWateringTask */
void cfgWateringTask(void *argument)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cfgWateringTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001774:	2001      	movs	r0, #1
 8001776:	f006 fe84 	bl	8008482 <osDelay>
 800177a:	e7fb      	b.n	8001774 <cfgWateringTask+0x8>

0800177c <ssd1306_WriteTemp>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void ssd1306_WriteTemp(uint8_t temp, uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b087      	sub	sp, #28
 8001780:	af02      	add	r7, sp, #8
 8001782:	4604      	mov	r4, r0
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4623      	mov	r3, r4
 800178c:	71fb      	strb	r3, [r7, #7]
 800178e:	4603      	mov	r3, r0
 8001790:	71bb      	strb	r3, [r7, #6]
 8001792:	460b      	mov	r3, r1
 8001794:	717b      	strb	r3, [r7, #5]
 8001796:	4613      	mov	r3, r2
 8001798:	713b      	strb	r3, [r7, #4]
	char cTemp[3];

	sprintf(cTemp, "%d", temp);
 800179a:	79fa      	ldrb	r2, [r7, #7]
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4919      	ldr	r1, [pc, #100]	; (8001808 <ssd1306_WriteTemp+0x8c>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00a f9b2 	bl	800bb0c <siprintf>
	ssd1306_SetCursor(x, y);
 80017a8:	797a      	ldrb	r2, [r7, #5]
 80017aa:	79bb      	ldrb	r3, [r7, #6]
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f006 fb3e 	bl	8007e30 <ssd1306_SetCursor>
	ssd1306_WriteString(cTemp, Font_11x18, color);
 80017b4:	4b15      	ldr	r3, [pc, #84]	; (800180c <ssd1306_WriteTemp+0x90>)
 80017b6:	f107 000c 	add.w	r0, r7, #12
 80017ba:	793a      	ldrb	r2, [r7, #4]
 80017bc:	9200      	str	r2, [sp, #0]
 80017be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017c0:	f006 fb10 	bl	8007de4 <ssd1306_WriteString>
	ssd1306_SetCursor(x+2*11+1, y);
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	3317      	adds	r3, #23
 80017c8:	b2db      	uxtb	r3, r3
 80017ca:	797a      	ldrb	r2, [r7, #5]
 80017cc:	4611      	mov	r1, r2
 80017ce:	4618      	mov	r0, r3
 80017d0:	f006 fb2e 	bl	8007e30 <ssd1306_SetCursor>
	ssd1306_WriteString("o", Font_7x10, color);
 80017d4:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <ssd1306_WriteTemp+0x94>)
 80017d6:	793a      	ldrb	r2, [r7, #4]
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <ssd1306_WriteTemp+0x98>)
 80017de:	f006 fb01 	bl	8007de4 <ssd1306_WriteString>
	ssd1306_SetCursor(x+3*11-3, y);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	331e      	adds	r3, #30
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	797a      	ldrb	r2, [r7, #5]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f006 fb1f 	bl	8007e30 <ssd1306_SetCursor>
	ssd1306_WriteString("C", Font_11x18, color);
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <ssd1306_WriteTemp+0x90>)
 80017f4:	793a      	ldrb	r2, [r7, #4]
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017fa:	4807      	ldr	r0, [pc, #28]	; (8001818 <ssd1306_WriteTemp+0x9c>)
 80017fc:	f006 faf2 	bl	8007de4 <ssd1306_WriteString>
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	bd90      	pop	{r4, r7, pc}
 8001808:	0800c634 	.word	0x0800c634
 800180c:	0800e2a8 	.word	0x0800e2a8
 8001810:	0800e29c 	.word	0x0800e29c
 8001814:	0800c638 	.word	0x0800c638
 8001818:	0800c63c 	.word	0x0800c63c

0800181c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	4603      	mov	r3, r0
 8001824:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin)
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b40      	cmp	r3, #64	; 0x40
 800182a:	d003      	beq.n	8001834 <HAL_GPIO_EXTI_Callback+0x18>
 800182c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001830:	d01d      	beq.n	800186e <HAL_GPIO_EXTI_Callback+0x52>

		case BUTTON_TOGGLE_Pin:
			osThreadFlagsSet(controlWateringHandle, 0x0001);
			break;
		default:
			break;
 8001832:	e023      	b.n	800187c <HAL_GPIO_EXTI_Callback+0x60>
			osMutexAcquire(mutexLogDataHandle, 500);
 8001834:	4b13      	ldr	r3, [pc, #76]	; (8001884 <HAL_GPIO_EXTI_Callback+0x68>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800183c:	4618      	mov	r0, r3
 800183e:	f006 fec1 	bl	80085c4 <osMutexAcquire>
			if(xLogData.s.relaySelected++ == 4)
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001844:	79db      	ldrb	r3, [r3, #7]
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	b2d1      	uxtb	r1, r2
 800184a:	4a0f      	ldr	r2, [pc, #60]	; (8001888 <HAL_GPIO_EXTI_Callback+0x6c>)
 800184c:	71d1      	strb	r1, [r2, #7]
 800184e:	2b04      	cmp	r3, #4
 8001850:	d102      	bne.n	8001858 <HAL_GPIO_EXTI_Callback+0x3c>
				xLogData.s.relaySelected = 0;
 8001852:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001854:	2200      	movs	r2, #0
 8001856:	71da      	strb	r2, [r3, #7]
			osMutexRelease(mutexLogDataHandle);
 8001858:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_GPIO_EXTI_Callback+0x68>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4618      	mov	r0, r3
 800185e:	f006 fefc 	bl	800865a <osMutexRelease>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001862:	2120      	movs	r1, #32
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f002 faba 	bl	8003de0 <HAL_GPIO_TogglePin>
			break;
 800186c:	e006      	b.n	800187c <HAL_GPIO_EXTI_Callback+0x60>
			osThreadFlagsSet(controlWateringHandle, 0x0001);
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <HAL_GPIO_EXTI_Callback+0x70>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f006 fd35 	bl	80082e4 <osThreadFlagsSet>
			break;
 800187a:	bf00      	nop
	}
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	2000014c 	.word	0x2000014c
 8001888:	20000118 	.word	0x20000118
 800188c:	20000134 	.word	0x20000134

08001890 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
 80018a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a6:	4b55      	ldr	r3, [pc, #340]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	4a54      	ldr	r2, [pc, #336]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b2:	4b52      	ldr	r3, [pc, #328]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018be:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c2:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018c4:	f043 0320 	orr.w	r3, r3, #32
 80018c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ce:	f003 0320 	and.w	r3, r3, #32
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	4b49      	ldr	r3, [pc, #292]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018da:	4a48      	ldr	r2, [pc, #288]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e2:	4b46      	ldr	r3, [pc, #280]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4b43      	ldr	r3, [pc, #268]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f2:	4a42      	ldr	r2, [pc, #264]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018f4:	f043 0302 	orr.w	r3, r3, #2
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <MX_GPIO_Init+0x16c>)
 80018fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|RELAY1_Pin|RELAY4_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 800190c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001910:	f002 fa4e 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2180      	movs	r1, #128	; 0x80
 8001918:	4839      	ldr	r0, [pc, #228]	; (8001a00 <MX_GPIO_Init+0x170>)
 800191a:	f002 fa49 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2140      	movs	r1, #64	; 0x40
 8001922:	4838      	ldr	r0, [pc, #224]	; (8001a04 <MX_GPIO_Init+0x174>)
 8001924:	f002 fa44 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001928:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001938:	f107 0314 	add.w	r3, r7, #20
 800193c:	4619      	mov	r1, r3
 800193e:	4830      	ldr	r0, [pc, #192]	; (8001a00 <MX_GPIO_Init+0x170>)
 8001940:	f002 f89c 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|RELAY1_Pin|RELAY4_Pin;
 8001944:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194a:	2301      	movs	r3, #1
 800194c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f107 0314 	add.w	r3, r7, #20
 800195a:	4619      	mov	r1, r3
 800195c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001960:	f002 f88c 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUTTON_SELECT_Pin|BUTTON_TOGGLE_Pin;
 8001964:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800196a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800196e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f002 f87d 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY3_Pin;
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY3_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 0314 	add.w	r3, r7, #20
 8001996:	4619      	mov	r1, r3
 8001998:	4819      	ldr	r0, [pc, #100]	; (8001a00 <MX_GPIO_Init+0x170>)
 800199a:	f002 f86f 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 0314 	add.w	r3, r7, #20
 80019b0:	4619      	mov	r1, r3
 80019b2:	4813      	ldr	r0, [pc, #76]	; (8001a00 <MX_GPIO_Init+0x170>)
 80019b4:	f002 f862 	bl	8003a7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY2_Pin;
 80019b8:	2340      	movs	r3, #64	; 0x40
 80019ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019bc:	2301      	movs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RELAY2_GPIO_Port, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	480d      	ldr	r0, [pc, #52]	; (8001a04 <MX_GPIO_Init+0x174>)
 80019d0:	f002 f854 	bl	8003a7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2105      	movs	r1, #5
 80019d8:	2017      	movs	r0, #23
 80019da:	f002 f827 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019de:	2017      	movs	r0, #23
 80019e0:	f002 f83e 	bl	8003a60 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2105      	movs	r1, #5
 80019e8:	2028      	movs	r0, #40	; 0x28
 80019ea:	f002 f81f 	bl	8003a2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ee:	2028      	movs	r0, #40	; 0x28
 80019f0:	f002 f836 	bl	8003a60 <HAL_NVIC_EnableIRQ>

}
 80019f4:	bf00      	nop
 80019f6:	3728      	adds	r7, #40	; 0x28
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48000800 	.word	0x48000800
 8001a04:	48000400 	.word	0x48000400

08001a08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <MX_I2C1_Init+0x78>)
 8001a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a14:	4a1b      	ldr	r2, [pc, #108]	; (8001a84 <MX_I2C1_Init+0x7c>)
 8001a16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1e:	4b17      	ldr	r3, [pc, #92]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3c:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a42:	480e      	ldr	r0, [pc, #56]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a44:	f002 f9fe 	bl	8003e44 <HAL_I2C_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001a4e:	f000 f915 	bl	8001c7c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	4809      	ldr	r0, [pc, #36]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a56:	f002 fe13 	bl	8004680 <HAL_I2CEx_ConfigAnalogFilter>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001a60:	f000 f90c 	bl	8001c7c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a64:	2100      	movs	r1, #0
 8001a66:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a68:	f002 fe55 	bl	8004716 <HAL_I2CEx_ConfigDigitalFilter>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001a72:	f000 f903 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200001f4 	.word	0x200001f4
 8001a80:	40005400 	.word	0x40005400
 8001a84:	30a0a7fb 	.word	0x30a0a7fb

08001a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b09e      	sub	sp, #120	; 0x78
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2254      	movs	r2, #84	; 0x54
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00a f84f 	bl	800bb4c <memset>
  if(i2cHandle->Instance==I2C1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_I2C_MspInit+0xa8>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d136      	bne.n	8001b26 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 fc97 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f000 f8d4 	bl	8001c7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad4:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001ada:	f043 0302 	orr.w	r3, r3, #2
 8001ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	2312      	movs	r3, #18
 8001af4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afe:	2304      	movs	r3, #4
 8001b00:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b06:	4619      	mov	r1, r3
 8001b08:	480b      	ldr	r0, [pc, #44]	; (8001b38 <HAL_I2C_MspInit+0xb0>)
 8001b0a:	f001 ffb7 	bl	8003a7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_I2C_MspInit+0xac>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b26:	bf00      	nop
 8001b28:	3778      	adds	r7, #120	; 0x78
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40005400 	.word	0x40005400
 8001b34:	40021000 	.word	0x40021000
 8001b38:	48000400 	.word	0x48000400

08001b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b40:	f000 fba5 	bl	800228e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b44:	f000 f82e 	bl	8001ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b48:	f7ff fea2 	bl	8001890 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8001b4c:	f000 fad4 	bl	80020f8 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8001b50:	f7ff f952 	bl	8000df8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001b54:	f7ff ff58 	bl	8001a08 <MX_I2C1_Init>
  MX_RTC_Init();
 8001b58:	f000 f896 	bl	8001c88 <MX_RTC_Init>
  MX_TIM7_Init();
 8001b5c:	f000 fa76 	bl	800204c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RELAY1_GPIO_Port, RELAY1_Pin, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b68:	f002 f922 	bl	8003db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY2_GPIO_Port, RELAY2_Pin, GPIO_PIN_SET);
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	2140      	movs	r1, #64	; 0x40
 8001b70:	480a      	ldr	r0, [pc, #40]	; (8001b9c <main+0x60>)
 8001b72:	f002 f91d 	bl	8003db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY3_GPIO_Port, RELAY3_Pin, GPIO_PIN_SET);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	4809      	ldr	r0, [pc, #36]	; (8001ba0 <main+0x64>)
 8001b7c:	f002 f918 	bl	8003db0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RELAY4_GPIO_Port, RELAY4_Pin, GPIO_PIN_SET);
 8001b80:	2201      	movs	r2, #1
 8001b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b8a:	f002 f911 	bl	8003db0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001b8e:	f006 facd 	bl	800812c <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001b92:	f7ff f9fd 	bl	8000f90 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b96:	f006 faed 	bl	8008174 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b9a:	e7fe      	b.n	8001b9a <main+0x5e>
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	48000800 	.word	0x48000800

08001ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b094      	sub	sp, #80	; 0x50
 8001ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001baa:	f107 0318 	add.w	r3, r7, #24
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f009 ffca 	bl	800bb4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001bc6:	2000      	movs	r0, #0
 8001bc8:	f002 fe02 	bl	80047d0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bcc:	f002 fdf0 	bl	80047b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bd0:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <SystemClock_Config+0xb0>)
 8001bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd6:	4a1f      	ldr	r2, [pc, #124]	; (8001c54 <SystemClock_Config+0xb0>)
 8001bd8:	f023 0318 	bic.w	r3, r3, #24
 8001bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001be0:	2306      	movs	r3, #6
 8001be2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001bfe:	2355      	movs	r3, #85	; 0x55
 8001c00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f002 fe90 	bl	8004938 <HAL_RCC_OscConfig>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8001c1e:	f000 f82d 	bl	8001c7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c22:	230f      	movs	r3, #15
 8001c24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c26:	2303      	movs	r3, #3
 8001c28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c36:	1d3b      	adds	r3, r7, #4
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f003 f98e 	bl	8004f5c <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001c46:	f000 f819 	bl	8001c7c <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	; 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000

08001c58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c6a:	f000 fb29 	bl	80022c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40001000 	.word	0x40001000

08001c7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c80:	b672      	cpsid	i
}
 8001c82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c84:	e7fe      	b.n	8001c84 <Error_Handler+0x8>
	...

08001c88 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b090      	sub	sp, #64	; 0x40
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001c8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	2228      	movs	r2, #40	; 0x28
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f009 ff4f 	bl	800bb4c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001cae:	4b3e      	ldr	r3, [pc, #248]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cb0:	4a3e      	ldr	r2, [pc, #248]	; (8001dac <MX_RTC_Init+0x124>)
 8001cb2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cbc:	227f      	movs	r2, #127	; 0x7f
 8001cbe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001cc0:	4b39      	ldr	r3, [pc, #228]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cc2:	22ff      	movs	r2, #255	; 0xff
 8001cc4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001cc6:	4b38      	ldr	r3, [pc, #224]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001ccc:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001cd2:	4b35      	ldr	r3, [pc, #212]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <MX_RTC_Init+0x120>)
 8001cda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cde:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001ce0:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <MX_RTC_Init+0x120>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001ce6:	4830      	ldr	r0, [pc, #192]	; (8001da8 <MX_RTC_Init+0x120>)
 8001ce8:	f003 fdd4 	bl	8005894 <HAL_RTC_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_RTC_Init+0x6e>
  {
    Error_Handler();
 8001cf2:	f7ff ffc3 	bl	8001c7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.SubSeconds = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001d10:	2300      	movs	r3, #0
 8001d12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001d14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4822      	ldr	r0, [pc, #136]	; (8001da8 <MX_RTC_Init+0x120>)
 8001d1e:	f003 fe38 	bl	8005992 <HAL_RTC_SetTime>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_RTC_Init+0xa4>
  {
    Error_Handler();
 8001d28:	f7ff ffa8 	bl	8001c7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	2200      	movs	r2, #0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4816      	ldr	r0, [pc, #88]	; (8001da8 <MX_RTC_Init+0x120>)
 8001d4e:	f003 ff19 	bl	8005b84 <HAL_RTC_SetDate>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_RTC_Init+0xd4>
  {
    Error_Handler();
 8001d58:	f7ff ff90 	bl	8001c7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmMask = RTC_ALARMMASK_SECONDS;
 8001d6c:	2380      	movs	r3, #128	; 0x80
 8001d6e:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 1;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_RTC_Init+0x120>)
 8001d8c:	f003 ffce 	bl	8005d2c <HAL_RTC_SetAlarm>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_RTC_Init+0x112>
  {
    Error_Handler();
 8001d96:	f7ff ff71 	bl	8001c7c <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001d9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	3740      	adds	r7, #64	; 0x40
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000248 	.word	0x20000248
 8001dac:	40002800 	.word	0x40002800

08001db0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b098      	sub	sp, #96	; 0x60
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	2254      	movs	r2, #84	; 0x54
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f009 fec3 	bl	800bb4c <memset>
  if(rtcHandle->Instance==RTC)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <HAL_RTC_MspInit+0x70>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d123      	bne.n	8001e18 <HAL_RTC_MspInit+0x68>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001dd0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001dd4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ddc:	f107 030c 	add.w	r3, r7, #12
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fb09 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001dec:	f7ff ff46 	bl	8001c7c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_RTC_MspInit+0x74>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	4a0b      	ldr	r2, [pc, #44]	; (8001e24 <HAL_RTC_MspInit+0x74>)
 8001df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RTC_MspInit+0x74>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RTC_MspInit+0x74>)
 8001e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RTC_MspInit+0x74>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	60bb      	str	r3, [r7, #8]
 8001e16:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001e18:	bf00      	nop
 8001e1a:	3760      	adds	r7, #96	; 0x60
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40002800 	.word	0x40002800
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_MspInit+0x50>)
 8001e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_MspInit+0x50>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6613      	str	r3, [r2, #96]	; 0x60
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_MspInit+0x50>)
 8001e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_MspInit+0x50>)
 8001e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	; (8001e78 <HAL_MspInit+0x50>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e50:	6593      	str	r3, [r2, #88]	; 0x58
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_MspInit+0x50>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	210f      	movs	r1, #15
 8001e62:	f06f 0001 	mvn.w	r0, #1
 8001e66:	f001 fde1 	bl	8003a2c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e6a:	f002 fd55 	bl	8004918 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_InitTick+0xc4>)
 8001e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e90:	4a2b      	ldr	r2, [pc, #172]	; (8001f40 <HAL_InitTick+0xc4>)
 8001e92:	f043 0310 	orr.w	r3, r3, #16
 8001e96:	6593      	str	r3, [r2, #88]	; 0x58
 8001e98:	4b29      	ldr	r3, [pc, #164]	; (8001f40 <HAL_InitTick+0xc4>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 0310 	and.w	r3, r3, #16
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ea4:	f107 020c 	add.w	r2, r7, #12
 8001ea8:	f107 0310 	add.w	r3, r7, #16
 8001eac:	4611      	mov	r1, r2
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f003 fa2a 	bl	8005308 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001eb4:	f003 f9fc 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8001eb8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebc:	4a21      	ldr	r2, [pc, #132]	; (8001f44 <HAL_InitTick+0xc8>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	0c9b      	lsrs	r3, r3, #18
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ec8:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <HAL_InitTick+0xcc>)
 8001eca:	4a20      	ldr	r2, [pc, #128]	; (8001f4c <HAL_InitTick+0xd0>)
 8001ecc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001ece:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_InitTick+0xcc>)
 8001ed0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ed4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001ed6:	4a1c      	ldr	r2, [pc, #112]	; (8001f48 <HAL_InitTick+0xcc>)
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001edc:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_InitTick+0xcc>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_InitTick+0xcc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001ee8:	4817      	ldr	r0, [pc, #92]	; (8001f48 <HAL_InitTick+0xcc>)
 8001eea:	f004 f90c 	bl	8006106 <HAL_TIM_Base_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d11b      	bne.n	8001f34 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001efc:	4812      	ldr	r0, [pc, #72]	; (8001f48 <HAL_InitTick+0xcc>)
 8001efe:	f004 f9f1 	bl	80062e4 <HAL_TIM_Base_Start_IT>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d111      	bne.n	8001f34 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f10:	2036      	movs	r0, #54	; 0x36
 8001f12:	f001 fda5 	bl	8003a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b0f      	cmp	r3, #15
 8001f1a:	d808      	bhi.n	8001f2e <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2036      	movs	r0, #54	; 0x36
 8001f22:	f001 fd83 	bl	8003a2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_InitTick+0xd4>)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	e002      	b.n	8001f34 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3730      	adds	r7, #48	; 0x30
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	20000270 	.word	0x20000270
 8001f4c:	40001000 	.word	0x40001000
 8001f50:	20000024 	.word	0x20000024

08001f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f58:	e7fe      	b.n	8001f58 <NMI_Handler+0x4>

08001f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <HardFault_Handler+0x4>

08001f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <MemManage_Handler+0x4>

08001f66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f6a:	e7fe      	b.n	8001f6a <BusFault_Handler+0x4>

08001f6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f70:	e7fe      	b.n	8001f70 <UsageFault_Handler+0x4>

08001f72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f72:	b480      	push	{r7}
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SELECT_Pin);
 8001f84:	2040      	movs	r0, #64	; 0x40
 8001f86:	f001 ff45 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_TOGGLE_Pin);
 8001f92:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001f96:	f001 ff3d 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001f9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001f9e:	f001 ff39 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
	...

08001fa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001fac:	4802      	ldr	r0, [pc, #8]	; (8001fb8 <TIM6_DAC_IRQHandler+0x10>)
 8001fae:	f004 fa11 	bl	80063d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000270 	.word	0x20000270

08001fbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fc4:	4a14      	ldr	r2, [pc, #80]	; (8002018 <_sbrk+0x5c>)
 8001fc6:	4b15      	ldr	r3, [pc, #84]	; (800201c <_sbrk+0x60>)
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fd0:	4b13      	ldr	r3, [pc, #76]	; (8002020 <_sbrk+0x64>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d102      	bne.n	8001fde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <_sbrk+0x64>)
 8001fda:	4a12      	ldr	r2, [pc, #72]	; (8002024 <_sbrk+0x68>)
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d207      	bcs.n	8001ffc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fec:	f009 fe0c 	bl	800bc08 <__errno>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8001ffa:	e009      	b.n	8002010 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <_sbrk+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <_sbrk+0x64>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4413      	add	r3, r2
 800200a:	4a05      	ldr	r2, [pc, #20]	; (8002020 <_sbrk+0x64>)
 800200c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800200e:	68fb      	ldr	r3, [r7, #12]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20020000 	.word	0x20020000
 800201c:	00000400 	.word	0x00000400
 8002020:	200002bc 	.word	0x200002bc
 8002024:	200056e0 	.word	0x200056e0

08002028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <SystemInit+0x20>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	4a05      	ldr	r2, [pc, #20]	; (8002048 <SystemInit+0x20>)
 8002034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800203c:	bf00      	nop
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002052:	1d3b      	adds	r3, r7, #4
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800205c:	4b14      	ldr	r3, [pc, #80]	; (80020b0 <MX_TIM7_Init+0x64>)
 800205e:	4a15      	ldr	r2, [pc, #84]	; (80020b4 <MX_TIM7_Init+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 169;
 8002062:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <MX_TIM7_Init+0x64>)
 8002064:	22a9      	movs	r2, #169	; 0xa9
 8002066:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <MX_TIM7_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <MX_TIM7_Init+0x64>)
 8002070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002074:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <MX_TIM7_Init+0x64>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800207c:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_TIM7_Init+0x64>)
 800207e:	f004 f842 	bl	8006106 <HAL_TIM_Base_Init>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002088:	f7ff fdf8 	bl	8001c7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	4619      	mov	r1, r3
 8002098:	4805      	ldr	r0, [pc, #20]	; (80020b0 <MX_TIM7_Init+0x64>)
 800209a:	f004 fbc7 	bl	800682c <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80020a4:	f7ff fdea 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	200002c0 	.word	0x200002c0
 80020b4:	40001400 	.word	0x40001400

080020b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_TIM_Base_MspInit+0x38>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10b      	bne.n	80020e2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_TIM_Base_MspInit+0x3c>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	4a09      	ldr	r2, [pc, #36]	; (80020f4 <HAL_TIM_Base_MspInit+0x3c>)
 80020d0:	f043 0320 	orr.w	r3, r3, #32
 80020d4:	6593      	str	r3, [r2, #88]	; 0x58
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <HAL_TIM_Base_MspInit+0x3c>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f003 0320 	and.w	r3, r3, #32
 80020de:	60fb      	str	r3, [r7, #12]
 80020e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40001400 	.word	0x40001400
 80020f4:	40021000 	.word	0x40021000

080020f8 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80020fc:	4b21      	ldr	r3, [pc, #132]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 80020fe:	4a22      	ldr	r2, [pc, #136]	; (8002188 <MX_LPUART1_UART_Init+0x90>)
 8002100:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002102:	4b20      	ldr	r3, [pc, #128]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002108:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002110:	4b1c      	ldr	r3, [pc, #112]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002118:	2200      	movs	r2, #0
 800211a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 800211e:	220c      	movs	r2, #12
 8002120:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002122:	4b18      	ldr	r3, [pc, #96]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002124:	2200      	movs	r2, #0
 8002126:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002128:	4b16      	ldr	r3, [pc, #88]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 800212a:	2200      	movs	r2, #0
 800212c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800212e:	4b15      	ldr	r3, [pc, #84]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002136:	2200      	movs	r2, #0
 8002138:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800213a:	4812      	ldr	r0, [pc, #72]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 800213c:	f004 fc52 	bl	80069e4 <HAL_UART_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002146:	f7ff fd99 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214a:	2100      	movs	r1, #0
 800214c:	480d      	ldr	r0, [pc, #52]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 800214e:	f005 f9ed 	bl	800752c <HAL_UARTEx_SetTxFifoThreshold>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002158:	f7ff fd90 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800215c:	2100      	movs	r1, #0
 800215e:	4809      	ldr	r0, [pc, #36]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002160:	f005 fa22 	bl	80075a8 <HAL_UARTEx_SetRxFifoThreshold>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800216a:	f7ff fd87 	bl	8001c7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 800216e:	4805      	ldr	r0, [pc, #20]	; (8002184 <MX_LPUART1_UART_Init+0x8c>)
 8002170:	f005 f9a3 	bl	80074ba <HAL_UARTEx_DisableFifoMode>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800217a:	f7ff fd7f 	bl	8001c7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000030c 	.word	0x2000030c
 8002188:	40008000 	.word	0x40008000

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b09e      	sub	sp, #120	; 0x78
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	2254      	movs	r2, #84	; 0x54
 80021aa:	2100      	movs	r1, #0
 80021ac:	4618      	mov	r0, r3
 80021ae:	f009 fccd 	bl	800bb4c <memset>
  if(uartHandle->Instance==LPUART1)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1f      	ldr	r2, [pc, #124]	; (8002234 <HAL_UART_MspInit+0xa8>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d136      	bne.n	800222a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80021bc:	2320      	movs	r3, #32
 80021be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80021c0:	2300      	movs	r3, #0
 80021c2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	4618      	mov	r0, r3
 80021ca:	f003 f915 	bl	80053f8 <HAL_RCCEx_PeriphCLKConfig>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80021d4:	f7ff fd52 	bl	8001c7c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80021d8:	4b17      	ldr	r3, [pc, #92]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	4a16      	ldr	r2, [pc, #88]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021de:	f043 0301 	orr.w	r3, r3, #1
 80021e2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80021e4:	4b14      	ldr	r3, [pc, #80]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	60fb      	str	r3, [r7, #12]
 80021ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b11      	ldr	r3, [pc, #68]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	4a10      	ldr	r2, [pc, #64]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fc:	4b0e      	ldr	r3, [pc, #56]	; (8002238 <HAL_UART_MspInit+0xac>)
 80021fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002208:	230c      	movs	r3, #12
 800220a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002218:	230c      	movs	r3, #12
 800221a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800221c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002226:	f001 fc29 	bl	8003a7c <HAL_GPIO_Init>

  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800222a:	bf00      	nop
 800222c:	3778      	adds	r7, #120	; 0x78
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40008000 	.word	0x40008000
 8002238:	40021000 	.word	0x40021000

0800223c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800223c:	480d      	ldr	r0, [pc, #52]	; (8002274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800223e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002240:	f7ff fef2 	bl	8002028 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <LoopForever+0x6>)
  ldr r1, =_edata
 8002246:	490d      	ldr	r1, [pc, #52]	; (800227c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002248:	4a0d      	ldr	r2, [pc, #52]	; (8002280 <LoopForever+0xe>)
  movs r3, #0
 800224a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800224c:	e002      	b.n	8002254 <LoopCopyDataInit>

0800224e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800224e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002252:	3304      	adds	r3, #4

08002254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002258:	d3f9      	bcc.n	800224e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <LoopForever+0x16>)
  movs r3, #0
 800225e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002260:	e001      	b.n	8002266 <LoopFillZerobss>

08002262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002264:	3204      	adds	r2, #4

08002266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002268:	d3fb      	bcc.n	8002262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800226a:	f009 fcd3 	bl	800bc14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800226e:	f7ff fc65 	bl	8001b3c <main>

08002272 <LoopForever>:

LoopForever:
    b LoopForever
 8002272:	e7fe      	b.n	8002272 <LoopForever>
  ldr   r0, =_estack
 8002274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800227c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002280:	0800e2f8 	.word	0x0800e2f8
  ldr r2, =_sbss
 8002284:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002288:	200056dc 	.word	0x200056dc

0800228c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800228c:	e7fe      	b.n	800228c <ADC1_2_IRQHandler>

0800228e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002298:	2003      	movs	r0, #3
 800229a:	f001 fbbc 	bl	8003a16 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800229e:	200f      	movs	r0, #15
 80022a0:	f7ff fdec 	bl	8001e7c <HAL_InitTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
 80022ae:	e001      	b.n	80022b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022b0:	f7ff fdba 	bl	8001e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022b4:	79fb      	ldrb	r3, [r7, #7]

}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c4:	4b05      	ldr	r3, [pc, #20]	; (80022dc <HAL_IncTick+0x1c>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b05      	ldr	r3, [pc, #20]	; (80022e0 <HAL_IncTick+0x20>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	4a03      	ldr	r2, [pc, #12]	; (80022dc <HAL_IncTick+0x1c>)
 80022d0:	6013      	str	r3, [r2, #0]
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	200003a0 	.word	0x200003a0
 80022e0:	20000028 	.word	0x20000028

080022e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return uwTick;
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_GetTick+0x14>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	200003a0 	.word	0x200003a0

080022fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff ffee 	bl	80022e4 <HAL_GetTick>
 8002308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002314:	d004      	beq.n	8002320 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_Delay+0x40>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4413      	add	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002320:	bf00      	nop
 8002322:	f7ff ffdf 	bl	80022e4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	d8f7      	bhi.n	8002322 <HAL_Delay+0x26>
  {
  }
}
 8002332:	bf00      	nop
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	20000028 	.word	0x20000028

08002340 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	609a      	str	r2, [r3, #8]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	609a      	str	r2, [r3, #8]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	3360      	adds	r3, #96	; 0x60
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <LL_ADC_SetOffset+0x44>)
 80023ca:	4013      	ands	r3, r2
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	4313      	orrs	r3, r2
 80023d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	03fff000 	.word	0x03fff000

080023f0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3360      	adds	r3, #96	; 0x60
 80023fe:	461a      	mov	r2, r3
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800241c:	b480      	push	{r7}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	3360      	adds	r3, #96	; 0x60
 800242c:	461a      	mov	r2, r3
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	431a      	orrs	r2, r3
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002446:	bf00      	nop
 8002448:	371c      	adds	r7, #28
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002452:	b480      	push	{r7}
 8002454:	b087      	sub	sp, #28
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3360      	adds	r3, #96	; 0x60
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	431a      	orrs	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800247c:	bf00      	nop
 800247e:	371c      	adds	r7, #28
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002488:	b480      	push	{r7}
 800248a:	b087      	sub	sp, #28
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3360      	adds	r3, #96	; 0x60
 8002498:	461a      	mov	r2, r3
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	4413      	add	r3, r2
 80024a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	431a      	orrs	r2, r3
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80024b2:	bf00      	nop
 80024b4:	371c      	adds	r7, #28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr

080024be <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	615a      	str	r2, [r3, #20]
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	3330      	adds	r3, #48	; 0x30
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	f003 030c 	and.w	r3, r3, #12
 8002500:	4413      	add	r3, r2
 8002502:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 031f 	and.w	r3, r3, #31
 800250e:	211f      	movs	r1, #31
 8002510:	fa01 f303 	lsl.w	r3, r1, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	401a      	ands	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	f003 011f 	and.w	r1, r3, #31
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f003 031f 	and.w	r3, r3, #31
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	431a      	orrs	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002530:	bf00      	nop
 8002532:	371c      	adds	r7, #28
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800253c:	b480      	push	{r7}
 800253e:	b087      	sub	sp, #28
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	60b9      	str	r1, [r7, #8]
 8002546:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	3314      	adds	r3, #20
 800254c:	461a      	mov	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	4413      	add	r3, r2
 800255a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	0d1b      	lsrs	r3, r3, #20
 8002564:	f003 031f 	and.w	r3, r3, #31
 8002568:	2107      	movs	r1, #7
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	401a      	ands	r2, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	0d1b      	lsrs	r3, r3, #20
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	431a      	orrs	r2, r3
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ac:	43db      	mvns	r3, r3
 80025ae:	401a      	ands	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0318 	and.w	r3, r3, #24
 80025b6:	4908      	ldr	r1, [pc, #32]	; (80025d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025b8:	40d9      	lsrs	r1, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	400b      	ands	r3, r1
 80025be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025c2:	431a      	orrs	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	0007ffff 	.word	0x0007ffff

080025dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 031f 	and.w	r3, r3, #31
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6093      	str	r3, [r2, #8]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800262c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002630:	d101      	bne.n	8002636 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002654:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002658:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002680:	d101      	bne.n	8002686 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002686:	2300      	movs	r3, #0
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026a8:	f043 0201 	orr.w	r2, r3, #1
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80026b0:	bf00      	nop
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d101      	bne.n	80026d4 <LL_ADC_IsEnabled+0x18>
 80026d0:	2301      	movs	r3, #1
 80026d2:	e000      	b.n	80026d6 <LL_ADC_IsEnabled+0x1a>
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80026f2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026f6:	f043 0204 	orr.w	r2, r3, #4
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	2b04      	cmp	r3, #4
 800271c:	d101      	bne.n	8002722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b08      	cmp	r3, #8
 8002742:	d101      	bne.n	8002748 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002744:	2301      	movs	r3, #1
 8002746:	e000      	b.n	800274a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
	...

08002758 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b089      	sub	sp, #36	; 0x24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002760:	2300      	movs	r3, #0
 8002762:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002764:	2300      	movs	r3, #0
 8002766:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1a9      	b.n	8002ac6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d109      	bne.n	8002794 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7fe fbb1 	bl	8000ee8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff3f 	bl	800261c <LL_ADC_IsDeepPowerDownEnabled>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d004      	beq.n	80027ae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff25 	bl	80025f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff ff5a 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d115      	bne.n	80027ea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff ff3e 	bl	8002644 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027c8:	4b9c      	ldr	r3, [pc, #624]	; (8002a3c <HAL_ADC_Init+0x2e4>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	4a9c      	ldr	r2, [pc, #624]	; (8002a40 <HAL_ADC_Init+0x2e8>)
 80027d0:	fba2 2303 	umull	r2, r3, r2, r3
 80027d4:	099b      	lsrs	r3, r3, #6
 80027d6:	3301      	adds	r3, #1
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027dc:	e002      	b.n	80027e4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d1f9      	bne.n	80027de <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7ff ff3c 	bl	800266c <LL_ADC_IsInternalRegulatorEnabled>
 80027f4:	4603      	mov	r3, r0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	f043 0210 	orr.w	r2, r3, #16
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	f043 0201 	orr.w	r2, r3, #1
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff75 	bl	800270a <LL_ADC_REG_IsConversionOngoing>
 8002820:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 8142 	bne.w	8002ab4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f040 813e 	bne.w	8002ab4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002840:	f043 0202 	orr.w	r2, r3, #2
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff ff35 	bl	80026bc <LL_ADC_IsEnabled>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d141      	bne.n	80028dc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002860:	d004      	beq.n	800286c <HAL_ADC_Init+0x114>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a77      	ldr	r2, [pc, #476]	; (8002a44 <HAL_ADC_Init+0x2ec>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d10f      	bne.n	800288c <HAL_ADC_Init+0x134>
 800286c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002870:	f7ff ff24 	bl	80026bc <LL_ADC_IsEnabled>
 8002874:	4604      	mov	r4, r0
 8002876:	4873      	ldr	r0, [pc, #460]	; (8002a44 <HAL_ADC_Init+0x2ec>)
 8002878:	f7ff ff20 	bl	80026bc <LL_ADC_IsEnabled>
 800287c:	4603      	mov	r3, r0
 800287e:	4323      	orrs	r3, r4
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	e012      	b.n	80028b2 <HAL_ADC_Init+0x15a>
 800288c:	486e      	ldr	r0, [pc, #440]	; (8002a48 <HAL_ADC_Init+0x2f0>)
 800288e:	f7ff ff15 	bl	80026bc <LL_ADC_IsEnabled>
 8002892:	4604      	mov	r4, r0
 8002894:	486d      	ldr	r0, [pc, #436]	; (8002a4c <HAL_ADC_Init+0x2f4>)
 8002896:	f7ff ff11 	bl	80026bc <LL_ADC_IsEnabled>
 800289a:	4603      	mov	r3, r0
 800289c:	431c      	orrs	r4, r3
 800289e:	486c      	ldr	r0, [pc, #432]	; (8002a50 <HAL_ADC_Init+0x2f8>)
 80028a0:	f7ff ff0c 	bl	80026bc <LL_ADC_IsEnabled>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4323      	orrs	r3, r4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d012      	beq.n	80028dc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028be:	d004      	beq.n	80028ca <HAL_ADC_Init+0x172>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a5f      	ldr	r2, [pc, #380]	; (8002a44 <HAL_ADC_Init+0x2ec>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_ADC_Init+0x176>
 80028ca:	4a62      	ldr	r2, [pc, #392]	; (8002a54 <HAL_ADC_Init+0x2fc>)
 80028cc:	e000      	b.n	80028d0 <HAL_ADC_Init+0x178>
 80028ce:	4a62      	ldr	r2, [pc, #392]	; (8002a58 <HAL_ADC_Init+0x300>)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	4619      	mov	r1, r3
 80028d6:	4610      	mov	r0, r2
 80028d8:	f7ff fd32 	bl	8002340 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	7f5b      	ldrb	r3, [r3, #29]
 80028e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80028ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80028f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002906:	2b01      	cmp	r3, #1
 8002908:	d106      	bne.n	8002918 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800290e:	3b01      	subs	r3, #1
 8002910:	045b      	lsls	r3, r3, #17
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	2b00      	cmp	r3, #0
 800291e:	d009      	beq.n	8002934 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68da      	ldr	r2, [r3, #12]
 800293a:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_ADC_Init+0x304>)
 800293c:	4013      	ands	r3, r2
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	69b9      	ldr	r1, [r7, #24]
 8002944:	430b      	orrs	r3, r1
 8002946:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fee4 	bl	8002730 <LL_ADC_INJ_IsConversionOngoing>
 8002968:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d17f      	bne.n	8002a70 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d17c      	bne.n	8002a70 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800297a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002982:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002992:	f023 0302 	bic.w	r3, r3, #2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6812      	ldr	r2, [r2, #0]
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	430b      	orrs	r3, r1
 800299e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d017      	beq.n	80029d8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6911      	ldr	r1, [r2, #16]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80029d6:	e013      	b.n	8002a00 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	691a      	ldr	r2, [r3, #16]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80029e6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80029fc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d12a      	bne.n	8002a60 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a20:	4311      	orrs	r1, r2
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0201 	orr.w	r2, r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
 8002a3a:	e019      	b.n	8002a70 <HAL_ADC_Init+0x318>
 8002a3c:	20000020 	.word	0x20000020
 8002a40:	053e2d63 	.word	0x053e2d63
 8002a44:	50000100 	.word	0x50000100
 8002a48:	50000400 	.word	0x50000400
 8002a4c:	50000500 	.word	0x50000500
 8002a50:	50000600 	.word	0x50000600
 8002a54:	50000300 	.word	0x50000300
 8002a58:	50000700 	.word	0x50000700
 8002a5c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d10c      	bne.n	8002a92 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	f023 010f 	bic.w	r1, r3, #15
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	1e5a      	subs	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a90:	e007      	b.n	8002aa2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 020f 	bic.w	r2, r2, #15
 8002aa0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002ab2:	e007      	b.n	8002ac4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3724      	adds	r7, #36	; 0x24
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd90      	pop	{r4, r7, pc}
 8002ace:	bf00      	nop

08002ad0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_Start+0x1c>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_ADC_Start+0x1b4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_ADC_Start+0x20>
 8002aec:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <HAL_ADC_Start+0x1b8>)
 8002aee:	e000      	b.n	8002af2 <HAL_ADC_Start+0x22>
 8002af0:	4b66      	ldr	r3, [pc, #408]	; (8002c8c <HAL_ADC_Start+0x1bc>)
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff fd72 	bl	80025dc <LL_ADC_GetMultimode>
 8002af8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff fe03 	bl	800270a <LL_ADC_REG_IsConversionOngoing>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80b4 	bne.w	8002c74 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Start+0x4a>
 8002b16:	2302      	movs	r3, #2
 8002b18:	e0af      	b.n	8002c7a <HAL_ADC_Start+0x1aa>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fd06 	bl	8003534 <ADC_Enable>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f040 809b 	bne.w	8002c6a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b3c:	f023 0301 	bic.w	r3, r3, #1
 8002b40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a4d      	ldr	r2, [pc, #308]	; (8002c84 <HAL_ADC_Start+0x1b4>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d009      	beq.n	8002b66 <HAL_ADC_Start+0x96>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a4e      	ldr	r2, [pc, #312]	; (8002c90 <HAL_ADC_Start+0x1c0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d002      	beq.n	8002b62 <HAL_ADC_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	e003      	b.n	8002b6a <HAL_ADC_Start+0x9a>
 8002b62:	4b4c      	ldr	r3, [pc, #304]	; (8002c94 <HAL_ADC_Start+0x1c4>)
 8002b64:	e001      	b.n	8002b6a <HAL_ADC_Start+0x9a>
 8002b66:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d002      	beq.n	8002b78 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d105      	bne.n	8002b84 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b90:	d106      	bne.n	8002ba0 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b96:	f023 0206 	bic.w	r2, r3, #6
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b9e:	e002      	b.n	8002ba6 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	221c      	movs	r2, #28
 8002bac:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a32      	ldr	r2, [pc, #200]	; (8002c84 <HAL_ADC_Start+0x1b4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_ADC_Start+0x104>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a32      	ldr	r2, [pc, #200]	; (8002c90 <HAL_ADC_Start+0x1c0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d002      	beq.n	8002bd0 <HAL_ADC_Start+0x100>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	e003      	b.n	8002bd8 <HAL_ADC_Start+0x108>
 8002bd0:	4b30      	ldr	r3, [pc, #192]	; (8002c94 <HAL_ADC_Start+0x1c4>)
 8002bd2:	e001      	b.n	8002bd8 <HAL_ADC_Start+0x108>
 8002bd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d008      	beq.n	8002bf2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d002      	beq.n	8002bf2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b09      	cmp	r3, #9
 8002bf0:	d114      	bne.n	8002c1c <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d007      	beq.n	8002c10 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fd64 	bl	80026e2 <LL_ADC_REG_StartConversion>
 8002c1a:	e02d      	b.n	8002c78 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a15      	ldr	r2, [pc, #84]	; (8002c84 <HAL_ADC_Start+0x1b4>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_ADC_Start+0x176>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a16      	ldr	r2, [pc, #88]	; (8002c90 <HAL_ADC_Start+0x1c0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d002      	beq.n	8002c42 <HAL_ADC_Start+0x172>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	e003      	b.n	8002c4a <HAL_ADC_Start+0x17a>
 8002c42:	4b14      	ldr	r3, [pc, #80]	; (8002c94 <HAL_ADC_Start+0x1c4>)
 8002c44:	e001      	b.n	8002c4a <HAL_ADC_Start+0x17a>
 8002c46:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002c4a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d00f      	beq.n	8002c78 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c68:	e006      	b.n	8002c78 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002c72:	e001      	b.n	8002c78 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002c74:	2302      	movs	r3, #2
 8002c76:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	50000100 	.word	0x50000100
 8002c88:	50000300 	.word	0x50000300
 8002c8c:	50000700 	.word	0x50000700
 8002c90:	50000500 	.word	0x50000500
 8002c94:	50000400 	.word	0x50000400

08002c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b0b6      	sub	sp, #216	; 0xd8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d102      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x24>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	f000 bc13 	b.w	80034fe <HAL_ADC_ConfigChannel+0x84a>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fd10 	bl	800270a <LL_ADC_REG_IsConversionOngoing>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f040 83f3 	bne.w	80034d8 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	6859      	ldr	r1, [r3, #4]
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	f7ff fbf0 	bl	80024e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff fcfe 	bl	800270a <LL_ADC_REG_IsConversionOngoing>
 8002d0e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fd0a 	bl	8002730 <LL_ADC_INJ_IsConversionOngoing>
 8002d1c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d20:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f040 81d9 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f040 81d4 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d3c:	d10f      	bne.n	8002d5e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	4619      	mov	r1, r3
 8002d4a:	f7ff fbf7 	bl	800253c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fbb1 	bl	80024be <LL_ADC_SetSamplingTimeCommonConfig>
 8002d5c:	e00e      	b.n	8002d7c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f7ff fbe6 	bl	800253c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fba1 	bl	80024be <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	08db      	lsrs	r3, r3, #3
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	2b04      	cmp	r3, #4
 8002d9c:	d022      	beq.n	8002de4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6919      	ldr	r1, [r3, #16]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002dae:	f7ff fafb 	bl	80023a8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6818      	ldr	r0, [r3, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	6919      	ldr	r1, [r3, #16]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	f7ff fb47 	bl	8002452 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d102      	bne.n	8002dda <HAL_ADC_ConfigChannel+0x126>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_ConfigChannel+0x128>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f7ff fb53 	bl	8002488 <LL_ADC_SetOffsetSaturation>
 8002de2:	e17b      	b.n	80030dc <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fb00 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x15c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2100      	movs	r1, #0
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff faf5 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002e06:	4603      	mov	r3, r0
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 021f 	and.w	r2, r3, #31
 8002e0e:	e01e      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x19a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2100      	movs	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7ff faea 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002e26:	fa93 f3a3 	rbit	r3, r3
 8002e2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002e3e:	2320      	movs	r3, #32
 8002e40:	e004      	b.n	8002e4c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002e42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e46:	fab3 f383 	clz	r3, r3
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d105      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x1b2>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	0e9b      	lsrs	r3, r3, #26
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	e018      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x1e4>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e72:	fa93 f3a3 	rbit	r3, r3
 8002e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	e004      	b.n	8002e98 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002e8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e92:	fab3 f383 	clz	r3, r3
 8002e96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d106      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fab9 	bl	800241c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fa9d 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x222>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7ff fa92 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	e01e      	b.n	8002f14 <HAL_ADC_ConfigChannel+0x260>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2101      	movs	r1, #1
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff fa87 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002eec:	fa93 f3a3 	rbit	r3, r3
 8002ef0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ef8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002efc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002f04:	2320      	movs	r3, #32
 8002f06:	e004      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002f08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f0c:	fab3 f383 	clz	r3, r3
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x278>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	0e9b      	lsrs	r3, r3, #26
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	e018      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x2aa>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f38:	fa93 f3a3 	rbit	r3, r3
 8002f3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002f50:	2320      	movs	r3, #32
 8002f52:	e004      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f58:	fab3 f383 	clz	r3, r3
 8002f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d106      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2200      	movs	r2, #0
 8002f68:	2101      	movs	r1, #1
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7ff fa56 	bl	800241c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff fa3a 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x2e8>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff fa2f 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	0e9b      	lsrs	r3, r3, #26
 8002f96:	f003 021f 	and.w	r2, r3, #31
 8002f9a:	e01e      	b.n	8002fda <HAL_ADC_ConfigChannel+0x326>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2102      	movs	r1, #2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fa24 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fb2:	fa93 f3a3 	rbit	r3, r3
 8002fb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002fba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	e004      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002fce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fd2:	fab3 f383 	clz	r3, r3
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d105      	bne.n	8002ff2 <HAL_ADC_ConfigChannel+0x33e>
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0e9b      	lsrs	r3, r3, #26
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	e016      	b.n	8003020 <HAL_ADC_ConfigChannel+0x36c>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ffe:	fa93 f3a3 	rbit	r3, r3
 8003002:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003004:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800300a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003012:	2320      	movs	r3, #32
 8003014:	e004      	b.n	8003020 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003020:	429a      	cmp	r2, r3
 8003022:	d106      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2200      	movs	r2, #0
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f7ff f9f5 	bl	800241c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2103      	movs	r1, #3
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f9d9 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <HAL_ADC_ConfigChannel+0x3aa>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2103      	movs	r1, #3
 800304e:	4618      	mov	r0, r3
 8003050:	f7ff f9ce 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	f003 021f 	and.w	r2, r3, #31
 800305c:	e017      	b.n	800308e <HAL_ADC_ConfigChannel+0x3da>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2103      	movs	r1, #3
 8003064:	4618      	mov	r0, r3
 8003066:	f7ff f9c3 	bl	80023f0 <LL_ADC_GetOffsetChannel>
 800306a:	4603      	mov	r3, r0
 800306c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003070:	fa93 f3a3 	rbit	r3, r3
 8003074:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003076:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003078:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800307a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003080:	2320      	movs	r3, #32
 8003082:	e003      	b.n	800308c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003086:	fab3 f383 	clz	r3, r3
 800308a:	b2db      	uxtb	r3, r3
 800308c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003096:	2b00      	cmp	r3, #0
 8003098:	d105      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x3f2>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	0e9b      	lsrs	r3, r3, #26
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	e011      	b.n	80030ca <HAL_ADC_ConfigChannel+0x416>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030ae:	fa93 f3a3 	rbit	r3, r3
 80030b2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80030b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030b6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80030b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80030be:	2320      	movs	r3, #32
 80030c0:	e003      	b.n	80030ca <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80030c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030c4:	fab3 f383 	clz	r3, r3
 80030c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d106      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2200      	movs	r2, #0
 80030d4:	2103      	movs	r1, #3
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f9a0 	bl	800241c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4618      	mov	r0, r3
 80030e2:	f7ff faeb 	bl	80026bc <LL_ADC_IsEnabled>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f040 813d 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7ff fa4a 	bl	8002594 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	4aa2      	ldr	r2, [pc, #648]	; (8003390 <HAL_ADC_ConfigChannel+0x6dc>)
 8003106:	4293      	cmp	r3, r2
 8003108:	f040 812e 	bne.w	8003368 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10b      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x480>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	3301      	adds	r3, #1
 8003124:	f003 031f 	and.w	r3, r3, #31
 8003128:	2b09      	cmp	r3, #9
 800312a:	bf94      	ite	ls
 800312c:	2301      	movls	r3, #1
 800312e:	2300      	movhi	r3, #0
 8003130:	b2db      	uxtb	r3, r3
 8003132:	e019      	b.n	8003168 <HAL_ADC_ConfigChannel+0x4b4>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003144:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003146:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e003      	b.n	8003158 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003150:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2b09      	cmp	r3, #9
 8003160:	bf94      	ite	ls
 8003162:	2301      	movls	r3, #1
 8003164:	2300      	movhi	r3, #0
 8003166:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003168:	2b00      	cmp	r3, #0
 800316a:	d079      	beq.n	8003260 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x4d4>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	0e9b      	lsrs	r3, r3, #26
 800317e:	3301      	adds	r3, #1
 8003180:	069b      	lsls	r3, r3, #26
 8003182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003186:	e015      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x500>
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003190:	fa93 f3a3 	rbit	r3, r3
 8003194:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003198:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800319a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800319c:	2b00      	cmp	r3, #0
 800319e:	d101      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80031a0:	2320      	movs	r3, #32
 80031a2:	e003      	b.n	80031ac <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80031a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3301      	adds	r3, #1
 80031ae:	069b      	lsls	r3, r3, #26
 80031b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_ADC_ConfigChannel+0x520>
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	0e9b      	lsrs	r3, r3, #26
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	e017      	b.n	8003204 <HAL_ADC_ConfigChannel+0x550>
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031dc:	fa93 f3a3 	rbit	r3, r3
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80031ec:	2320      	movs	r3, #32
 80031ee:	e003      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80031f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	3301      	adds	r3, #1
 80031fa:	f003 031f 	and.w	r3, r3, #31
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	ea42 0103 	orr.w	r1, r2, r3
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003210:	2b00      	cmp	r3, #0
 8003212:	d10a      	bne.n	800322a <HAL_ADC_ConfigChannel+0x576>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	0e9b      	lsrs	r3, r3, #26
 800321a:	3301      	adds	r3, #1
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4613      	mov	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	4413      	add	r3, r2
 8003226:	051b      	lsls	r3, r3, #20
 8003228:	e018      	b.n	800325c <HAL_ADC_ConfigChannel+0x5a8>
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800323c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003242:	2320      	movs	r3, #32
 8003244:	e003      	b.n	800324e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	3301      	adds	r3, #1
 8003250:	f003 021f 	and.w	r2, r3, #31
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325c:	430b      	orrs	r3, r1
 800325e:	e07e      	b.n	800335e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_ADC_ConfigChannel+0x5c8>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	3301      	adds	r3, #1
 8003274:	069b      	lsls	r3, r3, #26
 8003276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327a:	e015      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x5f4>
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003294:	2320      	movs	r3, #32
 8003296:	e003      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329a:	fab3 f383 	clz	r3, r3
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	3301      	adds	r3, #1
 80032a2:	069b      	lsls	r3, r3, #26
 80032a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x614>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	0e9b      	lsrs	r3, r3, #26
 80032ba:	3301      	adds	r3, #1
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	e017      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x644>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ce:	6a3b      	ldr	r3, [r7, #32]
 80032d0:	fa93 f3a3 	rbit	r3, r3
 80032d4:	61fb      	str	r3, [r7, #28]
  return result;
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80032e0:	2320      	movs	r3, #32
 80032e2:	e003      	b.n	80032ec <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3301      	adds	r3, #1
 80032ee:	f003 031f 	and.w	r3, r3, #31
 80032f2:	2101      	movs	r1, #1
 80032f4:	fa01 f303 	lsl.w	r3, r1, r3
 80032f8:	ea42 0103 	orr.w	r1, r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003304:	2b00      	cmp	r3, #0
 8003306:	d10d      	bne.n	8003324 <HAL_ADC_ConfigChannel+0x670>
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	0e9b      	lsrs	r3, r3, #26
 800330e:	3301      	adds	r3, #1
 8003310:	f003 021f 	and.w	r2, r3, #31
 8003314:	4613      	mov	r3, r2
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	4413      	add	r3, r2
 800331a:	3b1e      	subs	r3, #30
 800331c:	051b      	lsls	r3, r3, #20
 800331e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003322:	e01b      	b.n	800335c <HAL_ADC_ConfigChannel+0x6a8>
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa93 f3a3 	rbit	r3, r3
 8003330:	613b      	str	r3, [r7, #16]
  return result;
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d101      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800333c:	2320      	movs	r3, #32
 800333e:	e003      	b.n	8003348 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	fab3 f383 	clz	r3, r3
 8003346:	b2db      	uxtb	r3, r3
 8003348:	3301      	adds	r3, #1
 800334a:	f003 021f 	and.w	r2, r3, #31
 800334e:	4613      	mov	r3, r2
 8003350:	005b      	lsls	r3, r3, #1
 8003352:	4413      	add	r3, r2
 8003354:	3b1e      	subs	r3, #30
 8003356:	051b      	lsls	r3, r3, #20
 8003358:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800335c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003362:	4619      	mov	r1, r3
 8003364:	f7ff f8ea 	bl	800253c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b09      	ldr	r3, [pc, #36]	; (8003394 <HAL_ADC_ConfigChannel+0x6e0>)
 800336e:	4013      	ands	r3, r2
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80be 	beq.w	80034f2 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337e:	d004      	beq.n	800338a <HAL_ADC_ConfigChannel+0x6d6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_ADC_ConfigChannel+0x6e4>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d10a      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x6ec>
 800338a:	4b04      	ldr	r3, [pc, #16]	; (800339c <HAL_ADC_ConfigChannel+0x6e8>)
 800338c:	e009      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x6ee>
 800338e:	bf00      	nop
 8003390:	407f0000 	.word	0x407f0000
 8003394:	80080000 	.word	0x80080000
 8003398:	50000100 	.word	0x50000100
 800339c:	50000300 	.word	0x50000300
 80033a0:	4b59      	ldr	r3, [pc, #356]	; (8003508 <HAL_ADC_ConfigChannel+0x854>)
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fe fff2 	bl	800238c <LL_ADC_GetCommonPathInternalCh>
 80033a8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_ADC_ConfigChannel+0x858>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d004      	beq.n	80033c0 <HAL_ADC_ConfigChannel+0x70c>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a55      	ldr	r2, [pc, #340]	; (8003510 <HAL_ADC_ConfigChannel+0x85c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d13a      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80033c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d134      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033d4:	d005      	beq.n	80033e2 <HAL_ADC_ConfigChannel+0x72e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a4e      	ldr	r2, [pc, #312]	; (8003514 <HAL_ADC_ConfigChannel+0x860>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	f040 8085 	bne.w	80034ec <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80033ea:	d004      	beq.n	80033f6 <HAL_ADC_ConfigChannel+0x742>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a49      	ldr	r2, [pc, #292]	; (8003518 <HAL_ADC_ConfigChannel+0x864>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0x746>
 80033f6:	4a49      	ldr	r2, [pc, #292]	; (800351c <HAL_ADC_ConfigChannel+0x868>)
 80033f8:	e000      	b.n	80033fc <HAL_ADC_ConfigChannel+0x748>
 80033fa:	4a43      	ldr	r2, [pc, #268]	; (8003508 <HAL_ADC_ConfigChannel+0x854>)
 80033fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003400:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fe ffad 	bl	8002366 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <HAL_ADC_ConfigChannel+0x86c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	099b      	lsrs	r3, r3, #6
 8003412:	4a44      	ldr	r2, [pc, #272]	; (8003524 <HAL_ADC_ConfigChannel+0x870>)
 8003414:	fba2 2303 	umull	r2, r3, r2, r3
 8003418:	099b      	lsrs	r3, r3, #6
 800341a:	1c5a      	adds	r2, r3, #1
 800341c:	4613      	mov	r3, r2
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003426:	e002      	b.n	800342e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	3b01      	subs	r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1f9      	bne.n	8003428 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003434:	e05a      	b.n	80034ec <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a3b      	ldr	r2, [pc, #236]	; (8003528 <HAL_ADC_ConfigChannel+0x874>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d125      	bne.n	800348c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d11f      	bne.n	800348c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a31      	ldr	r2, [pc, #196]	; (8003518 <HAL_ADC_ConfigChannel+0x864>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d104      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x7ac>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_ADC_ConfigChannel+0x878>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d047      	beq.n	80034f0 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003468:	d004      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x7c0>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <HAL_ADC_ConfigChannel+0x864>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d101      	bne.n	8003478 <HAL_ADC_ConfigChannel+0x7c4>
 8003474:	4a29      	ldr	r2, [pc, #164]	; (800351c <HAL_ADC_ConfigChannel+0x868>)
 8003476:	e000      	b.n	800347a <HAL_ADC_ConfigChannel+0x7c6>
 8003478:	4a23      	ldr	r2, [pc, #140]	; (8003508 <HAL_ADC_ConfigChannel+0x854>)
 800347a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800347e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f7fe ff6e 	bl	8002366 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800348a:	e031      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a27      	ldr	r2, [pc, #156]	; (8003530 <HAL_ADC_ConfigChannel+0x87c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d12d      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003496:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800349a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d127      	bne.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_ADC_ConfigChannel+0x864>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034b4:	d004      	beq.n	80034c0 <HAL_ADC_ConfigChannel+0x80c>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a17      	ldr	r2, [pc, #92]	; (8003518 <HAL_ADC_ConfigChannel+0x864>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d101      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x810>
 80034c0:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_ADC_ConfigChannel+0x868>)
 80034c2:	e000      	b.n	80034c6 <HAL_ADC_ConfigChannel+0x812>
 80034c4:	4a10      	ldr	r2, [pc, #64]	; (8003508 <HAL_ADC_ConfigChannel+0x854>)
 80034c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80034ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034ce:	4619      	mov	r1, r3
 80034d0:	4610      	mov	r0, r2
 80034d2:	f7fe ff48 	bl	8002366 <LL_ADC_SetCommonPathInternalCh>
 80034d6:	e00c      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	f043 0220 	orr.w	r2, r3, #32
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80034ea:	e002      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ec:	bf00      	nop
 80034ee:	e000      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80034f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80034fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80034fe:	4618      	mov	r0, r3
 8003500:	37d8      	adds	r7, #216	; 0xd8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	50000700 	.word	0x50000700
 800350c:	c3210000 	.word	0xc3210000
 8003510:	90c00010 	.word	0x90c00010
 8003514:	50000600 	.word	0x50000600
 8003518:	50000100 	.word	0x50000100
 800351c:	50000300 	.word	0x50000300
 8003520:	20000020 	.word	0x20000020
 8003524:	053e2d63 	.word	0x053e2d63
 8003528:	c7520000 	.word	0xc7520000
 800352c:	50000500 	.word	0x50000500
 8003530:	cb840000 	.word	0xcb840000

08003534 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800353c:	2300      	movs	r3, #0
 800353e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f8b9 	bl	80026bc <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d176      	bne.n	800363e <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689a      	ldr	r2, [r3, #8]
 8003556:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <ADC_Enable+0x114>)
 8003558:	4013      	ands	r3, r2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e062      	b.n	8003640 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff f888 	bl	8002694 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800358c:	d004      	beq.n	8003598 <ADC_Enable+0x64>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2e      	ldr	r2, [pc, #184]	; (800364c <ADC_Enable+0x118>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d101      	bne.n	800359c <ADC_Enable+0x68>
 8003598:	4b2d      	ldr	r3, [pc, #180]	; (8003650 <ADC_Enable+0x11c>)
 800359a:	e000      	b.n	800359e <ADC_Enable+0x6a>
 800359c:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <ADC_Enable+0x120>)
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fe fef4 	bl	800238c <LL_ADC_GetCommonPathInternalCh>
 80035a4:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80035a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d013      	beq.n	80035d6 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ae:	4b2a      	ldr	r3, [pc, #168]	; (8003658 <ADC_Enable+0x124>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	099b      	lsrs	r3, r3, #6
 80035b4:	4a29      	ldr	r2, [pc, #164]	; (800365c <ADC_Enable+0x128>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035c8:	e002      	b.n	80035d0 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80035d6:	f7fe fe85 	bl	80022e4 <HAL_GetTick>
 80035da:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80035dc:	e028      	b.n	8003630 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f86a 	bl	80026bc <LL_ADC_IsEnabled>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff f84e 	bl	8002694 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80035f8:	f7fe fe74 	bl	80022e4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d914      	bls.n	8003630 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b01      	cmp	r3, #1
 8003612:	d00d      	beq.n	8003630 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003618:	f043 0210 	orr.w	r2, r3, #16
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003624:	f043 0201 	orr.w	r2, r3, #1
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e007      	b.n	8003640 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d1cf      	bne.n	80035de <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800363e:	2300      	movs	r3, #0
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	8000003f 	.word	0x8000003f
 800364c:	50000100 	.word	0x50000100
 8003650:	50000300 	.word	0x50000300
 8003654:	50000700 	.word	0x50000700
 8003658:	20000020 	.word	0x20000020
 800365c:	053e2d63 	.word	0x053e2d63

08003660 <LL_ADC_IsEnabled>:
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b01      	cmp	r3, #1
 8003672:	d101      	bne.n	8003678 <LL_ADC_IsEnabled+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_ADC_IsEnabled+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_ADC_REG_IsConversionOngoing>:
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d101      	bne.n	800369e <LL_ADC_REG_IsConversionOngoing+0x18>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b0a1      	sub	sp, #132	; 0x84
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0e7      	b.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80036d2:	2300      	movs	r3, #0
 80036d4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80036d6:	2300      	movs	r3, #0
 80036d8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036e2:	d102      	bne.n	80036ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036e4:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036e6:	60bb      	str	r3, [r7, #8]
 80036e8:	e009      	b.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a6e      	ldr	r2, [pc, #440]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d102      	bne.n	80036fa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80036f4:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80036f6:	60bb      	str	r3, [r7, #8]
 80036f8:	e001      	b.n	80036fe <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10b      	bne.n	800371c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	f043 0220 	orr.w	r2, r3, #32
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e0be      	b.n	800389a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ffb1 	bl	8003686 <LL_ADC_REG_IsConversionOngoing>
 8003724:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ffab 	bl	8003686 <LL_ADC_REG_IsConversionOngoing>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 80a0 	bne.w	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800373a:	2b00      	cmp	r3, #0
 800373c:	f040 809c 	bne.w	8003878 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003748:	d004      	beq.n	8003754 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a55      	ldr	r2, [pc, #340]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d101      	bne.n	8003758 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003754:	4b56      	ldr	r3, [pc, #344]	; (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003756:	e000      	b.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003758:	4b56      	ldr	r3, [pc, #344]	; (80038b4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800375a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d04b      	beq.n	80037fc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003764:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003776:	035b      	lsls	r3, r3, #13
 8003778:	430b      	orrs	r3, r1
 800377a:	431a      	orrs	r2, r3
 800377c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003788:	d004      	beq.n	8003794 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a45      	ldr	r2, [pc, #276]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d10f      	bne.n	80037b4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003794:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003798:	f7ff ff62 	bl	8003660 <LL_ADC_IsEnabled>
 800379c:	4604      	mov	r4, r0
 800379e:	4841      	ldr	r0, [pc, #260]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80037a0:	f7ff ff5e 	bl	8003660 <LL_ADC_IsEnabled>
 80037a4:	4603      	mov	r3, r0
 80037a6:	4323      	orrs	r3, r4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	e012      	b.n	80037da <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80037b4:	483c      	ldr	r0, [pc, #240]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80037b6:	f7ff ff53 	bl	8003660 <LL_ADC_IsEnabled>
 80037ba:	4604      	mov	r4, r0
 80037bc:	483b      	ldr	r0, [pc, #236]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80037be:	f7ff ff4f 	bl	8003660 <LL_ADC_IsEnabled>
 80037c2:	4603      	mov	r3, r0
 80037c4:	431c      	orrs	r4, r3
 80037c6:	483c      	ldr	r0, [pc, #240]	; (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80037c8:	f7ff ff4a 	bl	8003660 <LL_ADC_IsEnabled>
 80037cc:	4603      	mov	r3, r0
 80037ce:	4323      	orrs	r3, r4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d056      	beq.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80037de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037e6:	f023 030f 	bic.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6811      	ldr	r1, [r2, #0]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	431a      	orrs	r2, r3
 80037f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037fa:	e047      	b.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80037fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003806:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003810:	d004      	beq.n	800381c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a23      	ldr	r2, [pc, #140]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d10f      	bne.n	800383c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 800381c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003820:	f7ff ff1e 	bl	8003660 <LL_ADC_IsEnabled>
 8003824:	4604      	mov	r4, r0
 8003826:	481f      	ldr	r0, [pc, #124]	; (80038a4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003828:	f7ff ff1a 	bl	8003660 <LL_ADC_IsEnabled>
 800382c:	4603      	mov	r3, r0
 800382e:	4323      	orrs	r3, r4
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf0c      	ite	eq
 8003834:	2301      	moveq	r3, #1
 8003836:	2300      	movne	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	e012      	b.n	8003862 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800383c:	481a      	ldr	r0, [pc, #104]	; (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800383e:	f7ff ff0f 	bl	8003660 <LL_ADC_IsEnabled>
 8003842:	4604      	mov	r4, r0
 8003844:	4819      	ldr	r0, [pc, #100]	; (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003846:	f7ff ff0b 	bl	8003660 <LL_ADC_IsEnabled>
 800384a:	4603      	mov	r3, r0
 800384c:	431c      	orrs	r4, r3
 800384e:	481a      	ldr	r0, [pc, #104]	; (80038b8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003850:	f7ff ff06 	bl	8003660 <LL_ADC_IsEnabled>
 8003854:	4603      	mov	r3, r0
 8003856:	4323      	orrs	r3, r4
 8003858:	2b00      	cmp	r3, #0
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d012      	beq.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800386e:	f023 030f 	bic.w	r3, r3, #15
 8003872:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003874:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003876:	e009      	b.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	f043 0220 	orr.w	r2, r3, #32
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800388a:	e000      	b.n	800388e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800388c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003896:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800389a:	4618      	mov	r0, r3
 800389c:	3784      	adds	r7, #132	; 0x84
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd90      	pop	{r4, r7, pc}
 80038a2:	bf00      	nop
 80038a4:	50000100 	.word	0x50000100
 80038a8:	50000400 	.word	0x50000400
 80038ac:	50000500 	.word	0x50000500
 80038b0:	50000300 	.word	0x50000300
 80038b4:	50000700 	.word	0x50000700
 80038b8:	50000600 	.word	0x50000600

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	; (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	; (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	; (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	; 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7ff ff4c 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a24:	bf00      	nop
 8003a26:	3708      	adds	r7, #8
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
 8003a38:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a3a:	f7ff ff63 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	6978      	ldr	r0, [r7, #20]
 8003a46:	f7ff ffb3 	bl	80039b0 <NVIC_EncodePriority>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a50:	4611      	mov	r1, r2
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff ff82 	bl	800395c <__NVIC_SetPriority>
}
 8003a58:	bf00      	nop
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff ff56 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003a74:	bf00      	nop
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a8a:	e15a      	b.n	8003d42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 814c 	beq.w	8003d3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d005      	beq.n	8003abc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d130      	bne.n	8003b1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003af2:	2201      	movs	r2, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0201 	and.w	r2, r3, #1
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d123      	bne.n	8003bae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80a6 	beq.w	8003d3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_GPIO_Init+0x2e4>)
 8003bf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bf4:	4a5a      	ldr	r2, [pc, #360]	; (8003d60 <HAL_GPIO_Init+0x2e4>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6613      	str	r3, [r2, #96]	; 0x60
 8003bfc:	4b58      	ldr	r3, [pc, #352]	; (8003d60 <HAL_GPIO_Init+0x2e4>)
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c08:	4a56      	ldr	r2, [pc, #344]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c32:	d01f      	beq.n	8003c74 <HAL_GPIO_Init+0x1f8>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a4c      	ldr	r2, [pc, #304]	; (8003d68 <HAL_GPIO_Init+0x2ec>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d019      	beq.n	8003c70 <HAL_GPIO_Init+0x1f4>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a4b      	ldr	r2, [pc, #300]	; (8003d6c <HAL_GPIO_Init+0x2f0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_GPIO_Init+0x1f0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a4a      	ldr	r2, [pc, #296]	; (8003d70 <HAL_GPIO_Init+0x2f4>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d00d      	beq.n	8003c68 <HAL_GPIO_Init+0x1ec>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a49      	ldr	r2, [pc, #292]	; (8003d74 <HAL_GPIO_Init+0x2f8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d007      	beq.n	8003c64 <HAL_GPIO_Init+0x1e8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a48      	ldr	r2, [pc, #288]	; (8003d78 <HAL_GPIO_Init+0x2fc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_GPIO_Init+0x1e4>
 8003c5c:	2305      	movs	r3, #5
 8003c5e:	e00a      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c60:	2306      	movs	r3, #6
 8003c62:	e008      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c64:	2304      	movs	r3, #4
 8003c66:	e006      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e004      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	e002      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_GPIO_Init+0x1fa>
 8003c74:	2300      	movs	r3, #0
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	f002 0203 	and.w	r2, r2, #3
 8003c7c:	0092      	lsls	r2, r2, #2
 8003c7e:	4093      	lsls	r3, r2
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c86:	4937      	ldr	r1, [pc, #220]	; (8003d64 <HAL_GPIO_Init+0x2e8>)
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	089b      	lsrs	r3, r3, #2
 8003c8c:	3302      	adds	r3, #2
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cb8:	4a30      	ldr	r2, [pc, #192]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	4013      	ands	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ce2:	4a26      	ldr	r2, [pc, #152]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003ce8:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d003      	beq.n	8003d0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d0c:	4a1b      	ldr	r2, [pc, #108]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d36:	4a11      	ldr	r2, [pc, #68]	; (8003d7c <HAL_GPIO_Init+0x300>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f47f ae9d 	bne.w	8003a8c <HAL_GPIO_Init+0x10>
  }
}
 8003d52:	bf00      	nop
 8003d54:	bf00      	nop
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40010000 	.word	0x40010000
 8003d68:	48000400 	.word	0x48000400
 8003d6c:	48000800 	.word	0x48000800
 8003d70:	48000c00 	.word	0x48000c00
 8003d74:	48001000 	.word	0x48001000
 8003d78:	48001400 	.word	0x48001400
 8003d7c:	40010400 	.word	0x40010400

08003d80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	4013      	ands	r3, r2
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d002      	beq.n	8003d9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e001      	b.n	8003da2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003dcc:	e002      	b.n	8003dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	695b      	ldr	r3, [r3, #20]
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003df2:	887a      	ldrh	r2, [r7, #2]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4013      	ands	r3, r2
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	43d9      	mvns	r1, r3
 8003dfe:	887b      	ldrh	r3, [r7, #2]
 8003e00:	400b      	ands	r3, r1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
}
 8003e08:	bf00      	nop
 8003e0a:	3714      	adds	r7, #20
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e2a:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fd fcf2 	bl	800181c <HAL_GPIO_EXTI_Callback>
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40010400 	.word	0x40010400

08003e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e08d      	b.n	8003f72 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7fd fe0c 	bl	8001a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003e94:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	68db      	ldr	r3, [r3, #12]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d107      	bne.n	8003ebe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689a      	ldr	r2, [r3, #8]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	e006      	b.n	8003ecc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003eca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d108      	bne.n	8003ee6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee2:	605a      	str	r2, [r3, #4]
 8003ee4:	e007      	b.n	8003ef6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	6812      	ldr	r2, [r2, #0]
 8003f00:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f08:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f18:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691a      	ldr	r2, [r3, #16]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69d9      	ldr	r1, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1a      	ldr	r2, [r3, #32]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af02      	add	r7, sp, #8
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	4608      	mov	r0, r1
 8003f86:	4611      	mov	r1, r2
 8003f88:	461a      	mov	r2, r3
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	817b      	strh	r3, [r7, #10]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	813b      	strh	r3, [r7, #8]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	f040 80f9 	bne.w	8004196 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d002      	beq.n	8003fb0 <HAL_I2C_Mem_Write+0x34>
 8003faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0ed      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_I2C_Mem_Write+0x4e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0e6      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fe f987 	bl	80022e4 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	2319      	movs	r3, #25
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f955 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e0d1      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2221      	movs	r2, #33	; 0x21
 8003ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2240      	movs	r2, #64	; 0x40
 8004000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800401c:	88f8      	ldrh	r0, [r7, #6]
 800401e:	893a      	ldrh	r2, [r7, #8]
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	9301      	str	r3, [sp, #4]
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	4603      	mov	r3, r0
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f8b9 	bl	80041a4 <I2C_RequestMemoryWrite>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e0a9      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2bff      	cmp	r3, #255	; 0xff
 800404c:	d90e      	bls.n	800406c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	22ff      	movs	r2, #255	; 0xff
 8004052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	b2da      	uxtb	r2, r3
 800405a:	8979      	ldrh	r1, [r7, #10]
 800405c:	2300      	movs	r3, #0
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 fad9 	bl	800461c <I2C_TransferConfig>
 800406a:	e00f      	b.n	800408c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004070:	b29a      	uxth	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800407a:	b2da      	uxtb	r2, r3
 800407c:	8979      	ldrh	r1, [r7, #10]
 800407e:	2300      	movs	r3, #0
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fac8 	bl	800461c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 f958 	bl	8004346 <I2C_WaitOnTXISFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e07b      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	781a      	ldrb	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	3b01      	subs	r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d034      	beq.n	8004144 <HAL_I2C_Mem_Write+0x1c8>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d130      	bne.n	8004144 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e8:	2200      	movs	r2, #0
 80040ea:	2180      	movs	r1, #128	; 0x80
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f8d1 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e04d      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	2bff      	cmp	r3, #255	; 0xff
 8004104:	d90e      	bls.n	8004124 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	22ff      	movs	r2, #255	; 0xff
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004110:	b2da      	uxtb	r2, r3
 8004112:	8979      	ldrh	r1, [r7, #10]
 8004114:	2300      	movs	r3, #0
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fa7d 	bl	800461c <I2C_TransferConfig>
 8004122:	e00f      	b.n	8004144 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004128:	b29a      	uxth	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004132:	b2da      	uxtb	r2, r3
 8004134:	8979      	ldrh	r1, [r7, #10]
 8004136:	2300      	movs	r3, #0
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 fa6c 	bl	800461c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d19e      	bne.n	800408c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f000 f93e 	bl	80043d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e01a      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2220      	movs	r2, #32
 8004168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <HAL_I2C_Mem_Write+0x224>)
 8004176:	400b      	ands	r3, r1
 8004178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2220      	movs	r2, #32
 800417e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004192:	2300      	movs	r3, #0
 8004194:	e000      	b.n	8004198 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004196:	2302      	movs	r3, #2
  }
}
 8004198:	4618      	mov	r0, r3
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	fe00e800 	.word	0xfe00e800

080041a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af02      	add	r7, sp, #8
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	4608      	mov	r0, r1
 80041ae:	4611      	mov	r1, r2
 80041b0:	461a      	mov	r2, r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	817b      	strh	r3, [r7, #10]
 80041b6:	460b      	mov	r3, r1
 80041b8:	813b      	strh	r3, [r7, #8]
 80041ba:	4613      	mov	r3, r2
 80041bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80041be:	88fb      	ldrh	r3, [r7, #6]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	4b20      	ldr	r3, [pc, #128]	; (8004248 <I2C_RequestMemoryWrite+0xa4>)
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa25 	bl	800461c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d2:	69fa      	ldr	r2, [r7, #28]
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f8b5 	bl	8004346 <I2C_WaitOnTXISFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e02c      	b.n	8004240 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041e6:	88fb      	ldrh	r3, [r7, #6]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d105      	bne.n	80041f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80041ec:	893b      	ldrh	r3, [r7, #8]
 80041ee:	b2da      	uxtb	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	629a      	str	r2, [r3, #40]	; 0x28
 80041f6:	e015      	b.n	8004224 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80041f8:	893b      	ldrh	r3, [r7, #8]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	69b9      	ldr	r1, [r7, #24]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 f89b 	bl	8004346 <I2C_WaitOnTXISFlagUntilTimeout>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e012      	b.n	8004240 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800421a:	893b      	ldrh	r3, [r7, #8]
 800421c:	b2da      	uxtb	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2200      	movs	r2, #0
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f830 	bl	8004294 <I2C_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e000      	b.n	8004240 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	80002000 	.word	0x80002000

0800424c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b02      	cmp	r3, #2
 8004260:	d103      	bne.n	800426a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2200      	movs	r2, #0
 8004268:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	f003 0301 	and.w	r3, r3, #1
 8004274:	2b01      	cmp	r3, #1
 8004276:	d007      	beq.n	8004288 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	619a      	str	r2, [r3, #24]
  }
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	603b      	str	r3, [r7, #0]
 80042a0:	4613      	mov	r3, r2
 80042a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a4:	e03b      	b.n	800431e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	6839      	ldr	r1, [r7, #0]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8d6 	bl	800445c <I2C_IsErrorOccurred>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e041      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d02d      	beq.n	800431e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe f80f 	bl	80022e4 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d122      	bne.n	800431e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	79fb      	ldrb	r3, [r7, #7]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d113      	bne.n	800431e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	f043 0220 	orr.w	r2, r3, #32
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e00f      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	699a      	ldr	r2, [r3, #24]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4013      	ands	r3, r2
 8004328:	68ba      	ldr	r2, [r7, #8]
 800432a:	429a      	cmp	r2, r3
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	461a      	mov	r2, r3
 8004336:	79fb      	ldrb	r3, [r7, #7]
 8004338:	429a      	cmp	r2, r3
 800433a:	d0b4      	beq.n	80042a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	60f8      	str	r0, [r7, #12]
 800434e:	60b9      	str	r1, [r7, #8]
 8004350:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004352:	e033      	b.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f87f 	bl	800445c <I2C_IsErrorOccurred>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e031      	b.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436e:	d025      	beq.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004370:	f7fd ffb8 	bl	80022e4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11a      	bne.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d013      	beq.n	80043bc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004398:	f043 0220 	orr.w	r2, r3, #32
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e007      	b.n	80043cc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d1c4      	bne.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043e0:	e02f      	b.n	8004442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	68b9      	ldr	r1, [r7, #8]
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f000 f838 	bl	800445c <I2C_IsErrorOccurred>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e02d      	b.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f6:	f7fd ff75 	bl	80022e4 <HAL_GetTick>
 80043fa:	4602      	mov	r2, r0
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d302      	bcc.n	800440c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d11a      	bne.n	8004442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f003 0320 	and.w	r3, r3, #32
 8004416:	2b20      	cmp	r3, #32
 8004418:	d013      	beq.n	8004442 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2220      	movs	r2, #32
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2200      	movs	r2, #0
 800443a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e007      	b.n	8004452 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b20      	cmp	r3, #32
 800444e:	d1c8      	bne.n	80043e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
	...

0800445c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b08a      	sub	sp, #40	; 0x28
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004468:	2300      	movs	r3, #0
 800446a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2b00      	cmp	r3, #0
 8004486:	d068      	beq.n	800455a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004490:	e049      	b.n	8004526 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004498:	d045      	beq.n	8004526 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fd ff23 	bl	80022e4 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_IsErrorOccurred+0x54>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d13a      	bne.n	8004526 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044d2:	d121      	bne.n	8004518 <I2C_IsErrorOccurred+0xbc>
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044da:	d01d      	beq.n	8004518 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80044dc:	7cfb      	ldrb	r3, [r7, #19]
 80044de:	2b20      	cmp	r3, #32
 80044e0:	d01a      	beq.n	8004518 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80044f2:	f7fd fef7 	bl	80022e4 <HAL_GetTick>
 80044f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044f8:	e00e      	b.n	8004518 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80044fa:	f7fd fef3 	bl	80022e4 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b19      	cmp	r3, #25
 8004506:	d907      	bls.n	8004518 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	f043 0320 	orr.w	r3, r3, #32
 800450e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004516:	e006      	b.n	8004526 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f003 0320 	and.w	r3, r3, #32
 8004522:	2b20      	cmp	r3, #32
 8004524:	d1e9      	bne.n	80044fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d003      	beq.n	800453c <I2C_IsErrorOccurred+0xe0>
 8004534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0aa      	beq.n	8004492 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800453c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2220      	movs	r2, #32
 800454a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800454c:	6a3b      	ldr	r3, [r7, #32]
 800454e:	f043 0304 	orr.w	r3, r3, #4
 8004552:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f043 0301 	orr.w	r3, r3, #1
 8004572:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800457c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00b      	beq.n	80045a6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800458e:	6a3b      	ldr	r3, [r7, #32]
 8004590:	f043 0308 	orr.w	r3, r3, #8
 8004594:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800459e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80045b0:	6a3b      	ldr	r3, [r7, #32]
 80045b2:	f043 0302 	orr.w	r3, r3, #2
 80045b6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80045c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d01c      	beq.n	800460a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fe3b 	bl	800424c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6859      	ldr	r1, [r3, #4]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <I2C_IsErrorOccurred+0x1bc>)
 80045e2:	400b      	ands	r3, r1
 80045e4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800460a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800460e:	4618      	mov	r0, r3
 8004610:	3728      	adds	r7, #40	; 0x28
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	fe00e800 	.word	0xfe00e800

0800461c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	817b      	strh	r3, [r7, #10]
 800462a:	4613      	mov	r3, r2
 800462c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800462e:	897b      	ldrh	r3, [r7, #10]
 8004630:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004634:	7a7b      	ldrb	r3, [r7, #9]
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800463c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	4313      	orrs	r3, r2
 8004646:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800464a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	0d5b      	lsrs	r3, r3, #21
 8004656:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800465a:	4b08      	ldr	r3, [pc, #32]	; (800467c <I2C_TransferConfig+0x60>)
 800465c:	430b      	orrs	r3, r1
 800465e:	43db      	mvns	r3, r3
 8004660:	ea02 0103 	and.w	r1, r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	03ff63ff 	.word	0x03ff63ff

08004680 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b20      	cmp	r3, #32
 8004694:	d138      	bne.n	8004708 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800469c:	2b01      	cmp	r3, #1
 800469e:	d101      	bne.n	80046a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80046a0:	2302      	movs	r3, #2
 80046a2:	e032      	b.n	800470a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2224      	movs	r2, #36	; 0x24
 80046b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0201 	bic.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6819      	ldr	r1, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004704:	2300      	movs	r3, #0
 8004706:	e000      	b.n	800470a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004708:	2302      	movs	r3, #2
  }
}
 800470a:	4618      	mov	r0, r3
 800470c:	370c      	adds	r7, #12
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr

08004716 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004716:	b480      	push	{r7}
 8004718:	b085      	sub	sp, #20
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
 800471e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b20      	cmp	r3, #32
 800472a:	d139      	bne.n	80047a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004732:	2b01      	cmp	r3, #1
 8004734:	d101      	bne.n	800473a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004736:	2302      	movs	r3, #2
 8004738:	e033      	b.n	80047a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2224      	movs	r2, #36	; 0x24
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004768:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	e000      	b.n	80047a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
	...

080047b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80047b0:	b480      	push	{r7}
 80047b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047b4:	4b05      	ldr	r3, [pc, #20]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a04      	ldr	r2, [pc, #16]	; (80047cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80047ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40007000 	.word	0x40007000

080047d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d141      	bne.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047de:	4b4b      	ldr	r3, [pc, #300]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ea:	d131      	bne.n	8004850 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047ec:	4b47      	ldr	r3, [pc, #284]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047f2:	4a46      	ldr	r2, [pc, #280]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047fc:	4b43      	ldr	r3, [pc, #268]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004804:	4a41      	ldr	r2, [pc, #260]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004806:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800480a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2232      	movs	r2, #50	; 0x32
 8004812:	fb02 f303 	mul.w	r3, r2, r3
 8004816:	4a3f      	ldr	r2, [pc, #252]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004818:	fba2 2303 	umull	r2, r3, r2, r3
 800481c:	0c9b      	lsrs	r3, r3, #18
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	e002      	b.n	800482a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3b01      	subs	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800482a:	4b38      	ldr	r3, [pc, #224]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	d102      	bne.n	800483e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f2      	bne.n	8004824 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800483e:	4b33      	ldr	r3, [pc, #204]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484a:	d158      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e057      	b.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004850:	4b2e      	ldr	r3, [pc, #184]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004856:	4a2d      	ldr	r2, [pc, #180]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800485c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004860:	e04d      	b.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004868:	d141      	bne.n	80048ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800486a:	4b28      	ldr	r3, [pc, #160]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004876:	d131      	bne.n	80048dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004878:	4b24      	ldr	r3, [pc, #144]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800487a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004884:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004888:	4b20      	ldr	r3, [pc, #128]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004892:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004896:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004898:	4b1d      	ldr	r3, [pc, #116]	; (8004910 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2232      	movs	r2, #50	; 0x32
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	4a1c      	ldr	r2, [pc, #112]	; (8004914 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048ae:	e002      	b.n	80048b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048b6:	4b15      	ldr	r3, [pc, #84]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b8:	695b      	ldr	r3, [r3, #20]
 80048ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048c2:	d102      	bne.n	80048ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f2      	bne.n	80048b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80048ca:	4b10      	ldr	r3, [pc, #64]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048d6:	d112      	bne.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e011      	b.n	8004900 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048dc:	4b0b      	ldr	r3, [pc, #44]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e2:	4a0a      	ldr	r2, [pc, #40]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80048ec:	e007      	b.n	80048fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80048ee:	4b07      	ldr	r3, [pc, #28]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048f6:	4a05      	ldr	r2, [pc, #20]	; (800490c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	40007000 	.word	0x40007000
 8004910:	20000020 	.word	0x20000020
 8004914:	431bde83 	.word	0x431bde83

08004918 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004918:	b480      	push	{r7}
 800491a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	4a04      	ldr	r2, [pc, #16]	; (8004934 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004926:	6093      	str	r3, [r2, #8]
}
 8004928:	bf00      	nop
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40007000 	.word	0x40007000

08004938 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e2fe      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d075      	beq.n	8004a42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004956:	4b97      	ldr	r3, [pc, #604]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f003 030c 	and.w	r3, r3, #12
 800495e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004960:	4b94      	ldr	r3, [pc, #592]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	f003 0303 	and.w	r3, r3, #3
 8004968:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	2b0c      	cmp	r3, #12
 800496e:	d102      	bne.n	8004976 <HAL_RCC_OscConfig+0x3e>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b03      	cmp	r3, #3
 8004974:	d002      	beq.n	800497c <HAL_RCC_OscConfig+0x44>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d10b      	bne.n	8004994 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800497c:	4b8d      	ldr	r3, [pc, #564]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004984:	2b00      	cmp	r3, #0
 8004986:	d05b      	beq.n	8004a40 <HAL_RCC_OscConfig+0x108>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d157      	bne.n	8004a40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e2d9      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499c:	d106      	bne.n	80049ac <HAL_RCC_OscConfig+0x74>
 800499e:	4b85      	ldr	r3, [pc, #532]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a84      	ldr	r2, [pc, #528]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6013      	str	r3, [r2, #0]
 80049aa:	e01d      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b4:	d10c      	bne.n	80049d0 <HAL_RCC_OscConfig+0x98>
 80049b6:	4b7f      	ldr	r3, [pc, #508]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a7e      	ldr	r2, [pc, #504]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	4b7c      	ldr	r3, [pc, #496]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a7b      	ldr	r2, [pc, #492]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e00b      	b.n	80049e8 <HAL_RCC_OscConfig+0xb0>
 80049d0:	4b78      	ldr	r3, [pc, #480]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a77      	ldr	r2, [pc, #476]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	6013      	str	r3, [r2, #0]
 80049dc:	4b75      	ldr	r3, [pc, #468]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a74      	ldr	r2, [pc, #464]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 80049e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd fc78 	bl	80022e4 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fc74 	bl	80022e4 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e29e      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a0a:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0xc0>
 8004a16:	e014      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a18:	f7fd fc64 	bl	80022e4 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a20:	f7fd fc60 	bl	80022e4 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b64      	cmp	r3, #100	; 0x64
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e28a      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a32:	4b60      	ldr	r3, [pc, #384]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0xe8>
 8004a3e:	e000      	b.n	8004a42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d075      	beq.n	8004b3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a4e:	4b59      	ldr	r3, [pc, #356]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a58:	4b56      	ldr	r3, [pc, #344]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f003 0303 	and.w	r3, r3, #3
 8004a60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b0c      	cmp	r3, #12
 8004a66:	d102      	bne.n	8004a6e <HAL_RCC_OscConfig+0x136>
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d002      	beq.n	8004a74 <HAL_RCC_OscConfig+0x13c>
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2b04      	cmp	r3, #4
 8004a72:	d11f      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a74:	4b4f      	ldr	r3, [pc, #316]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x154>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e25d      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8c:	4b49      	ldr	r3, [pc, #292]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	061b      	lsls	r3, r3, #24
 8004a9a:	4946      	ldr	r1, [pc, #280]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004aa0:	4b45      	ldr	r3, [pc, #276]	; (8004bb8 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd f9e9 	bl	8001e7c <HAL_InitTick>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d043      	beq.n	8004b38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e249      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d023      	beq.n	8004b04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004abc:	4b3d      	ldr	r3, [pc, #244]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a3c      	ldr	r2, [pc, #240]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fc0c 	bl	80022e4 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fc08 	bl	80022e4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e232      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae2:	4b34      	ldr	r3, [pc, #208]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	061b      	lsls	r3, r3, #24
 8004afc:	492d      	ldr	r1, [pc, #180]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004afe:	4313      	orrs	r3, r2
 8004b00:	604b      	str	r3, [r1, #4]
 8004b02:	e01a      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b04:	4b2b      	ldr	r3, [pc, #172]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fbe8 	bl	80022e4 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b18:	f7fd fbe4 	bl	80022e4 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e20e      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b2a:	4b22      	ldr	r3, [pc, #136]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x1e0>
 8004b36:	e000      	b.n	8004b3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0308 	and.w	r3, r3, #8
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d041      	beq.n	8004bca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d01c      	beq.n	8004b88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b4e:	4b19      	ldr	r3, [pc, #100]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b54:	4a17      	ldr	r2, [pc, #92]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fbc1 	bl	80022e4 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b66:	f7fd fbbd 	bl	80022e4 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e1e7      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0ef      	beq.n	8004b66 <HAL_RCC_OscConfig+0x22e>
 8004b86:	e020      	b.n	8004bca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b88:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_RCC_OscConfig+0x27c>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fd fba4 	bl	80022e4 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b9e:	e00d      	b.n	8004bbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fba0 	bl	80022e4 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d906      	bls.n	8004bbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e1ca      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
 8004bb2:	bf00      	nop
 8004bb4:	40021000 	.word	0x40021000
 8004bb8:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004bbc:	4b8c      	ldr	r3, [pc, #560]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1ea      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 80a6 	beq.w	8004d24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bdc:	4b84      	ldr	r3, [pc, #528]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_RCC_OscConfig+0x2b4>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <HAL_RCC_OscConfig+0x2b6>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00d      	beq.n	8004c0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bf2:	4b7f      	ldr	r3, [pc, #508]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf6:	4a7e      	ldr	r2, [pc, #504]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bfe:	4b7c      	ldr	r3, [pc, #496]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c0e:	4b79      	ldr	r3, [pc, #484]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d118      	bne.n	8004c4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c1a:	4b76      	ldr	r3, [pc, #472]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a75      	ldr	r2, [pc, #468]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c26:	f7fd fb5d 	bl	80022e4 <HAL_GetTick>
 8004c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c2c:	e008      	b.n	8004c40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c2e:	f7fd fb59 	bl	80022e4 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d901      	bls.n	8004c40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e183      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	4b6c      	ldr	r3, [pc, #432]	; (8004df4 <HAL_RCC_OscConfig+0x4bc>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d0f0      	beq.n	8004c2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d108      	bne.n	8004c66 <HAL_RCC_OscConfig+0x32e>
 8004c54:	4b66      	ldr	r3, [pc, #408]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c5a:	4a65      	ldr	r2, [pc, #404]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c5c:	f043 0301 	orr.w	r3, r3, #1
 8004c60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c64:	e024      	b.n	8004cb0 <HAL_RCC_OscConfig+0x378>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b05      	cmp	r3, #5
 8004c6c:	d110      	bne.n	8004c90 <HAL_RCC_OscConfig+0x358>
 8004c6e:	4b60      	ldr	r3, [pc, #384]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c74:	4a5e      	ldr	r2, [pc, #376]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c76:	f043 0304 	orr.w	r3, r3, #4
 8004c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c7e:	4b5c      	ldr	r3, [pc, #368]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c84:	4a5a      	ldr	r2, [pc, #360]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c86:	f043 0301 	orr.w	r3, r3, #1
 8004c8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004c8e:	e00f      	b.n	8004cb0 <HAL_RCC_OscConfig+0x378>
 8004c90:	4b57      	ldr	r3, [pc, #348]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c96:	4a56      	ldr	r2, [pc, #344]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004c98:	f023 0301 	bic.w	r3, r3, #1
 8004c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ca0:	4b53      	ldr	r3, [pc, #332]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ca6:	4a52      	ldr	r2, [pc, #328]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004ca8:	f023 0304 	bic.w	r3, r3, #4
 8004cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d016      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb8:	f7fd fb14 	bl	80022e4 <HAL_GetTick>
 8004cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc0:	f7fd fb10 	bl	80022e4 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e138      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd6:	4b46      	ldr	r3, [pc, #280]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cdc:	f003 0302 	and.w	r3, r3, #2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0ed      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x388>
 8004ce4:	e015      	b.n	8004d12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce6:	f7fd fafd 	bl	80022e4 <HAL_GetTick>
 8004cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cee:	f7fd faf9 	bl	80022e4 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e121      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d04:	4b3a      	ldr	r3, [pc, #232]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ed      	bne.n	8004cee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b35      	ldr	r3, [pc, #212]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	4a34      	ldr	r2, [pc, #208]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d03c      	beq.n	8004daa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d01c      	beq.n	8004d72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004d38:	4b2d      	ldr	r3, [pc, #180]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d3e:	4a2c      	ldr	r2, [pc, #176]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fd facc 	bl	80022e4 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d50:	f7fd fac8 	bl	80022e4 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e0f2      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ef      	beq.n	8004d50 <HAL_RCC_OscConfig+0x418>
 8004d70:	e01b      	b.n	8004daa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004d72:	4b1f      	ldr	r3, [pc, #124]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d78:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d82:	f7fd faaf 	bl	80022e4 <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d8a:	f7fd faab 	bl	80022e4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b02      	cmp	r3, #2
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0d5      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d9c:	4b14      	ldr	r3, [pc, #80]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1ef      	bne.n	8004d8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f000 80c9 	beq.w	8004f46 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f003 030c 	and.w	r3, r3, #12
 8004dbc:	2b0c      	cmp	r3, #12
 8004dbe:	f000 8083 	beq.w	8004ec8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d15e      	bne.n	8004e88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dca:	4b09      	ldr	r3, [pc, #36]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a08      	ldr	r2, [pc, #32]	; (8004df0 <HAL_RCC_OscConfig+0x4b8>)
 8004dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd6:	f7fd fa85 	bl	80022e4 <HAL_GetTick>
 8004dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ddc:	e00c      	b.n	8004df8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dde:	f7fd fa81 	bl	80022e4 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d905      	bls.n	8004df8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e0ab      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
 8004df0:	40021000 	.word	0x40021000
 8004df4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004df8:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1ec      	bne.n	8004dde <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e04:	4b52      	ldr	r3, [pc, #328]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	4b52      	ldr	r3, [pc, #328]	; (8004f54 <HAL_RCC_OscConfig+0x61c>)
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6a11      	ldr	r1, [r2, #32]
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	4311      	orrs	r1, r2
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004e1e:	0212      	lsls	r2, r2, #8
 8004e20:	4311      	orrs	r1, r2
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e26:	0852      	lsrs	r2, r2, #1
 8004e28:	3a01      	subs	r2, #1
 8004e2a:	0552      	lsls	r2, r2, #21
 8004e2c:	4311      	orrs	r1, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e32:	0852      	lsrs	r2, r2, #1
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0652      	lsls	r2, r2, #25
 8004e38:	4311      	orrs	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004e3e:	06d2      	lsls	r2, r2, #27
 8004e40:	430a      	orrs	r2, r1
 8004e42:	4943      	ldr	r1, [pc, #268]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e48:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a40      	ldr	r2, [pc, #256]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e54:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	4a3d      	ldr	r2, [pc, #244]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e60:	f7fd fa40 	bl	80022e4 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fd fa3c 	bl	80022e4 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e066      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e7a:	4b35      	ldr	r3, [pc, #212]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d0f0      	beq.n	8004e68 <HAL_RCC_OscConfig+0x530>
 8004e86:	e05e      	b.n	8004f46 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e88:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a30      	ldr	r2, [pc, #192]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e94:	f7fd fa26 	bl	80022e4 <HAL_GetTick>
 8004e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e9a:	e008      	b.n	8004eae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e9c:	f7fd fa22 	bl	80022e4 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04c      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eae:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d1f0      	bne.n	8004e9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004eba:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	4924      	ldr	r1, [pc, #144]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_OscConfig+0x620>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	60cb      	str	r3, [r1, #12]
 8004ec6:	e03e      	b.n	8004f46 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e039      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004ed4:	4b1e      	ldr	r3, [pc, #120]	; (8004f50 <HAL_RCC_OscConfig+0x618>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f003 0203 	and.w	r2, r3, #3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a1b      	ldr	r3, [r3, #32]
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d12c      	bne.n	8004f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d123      	bne.n	8004f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d11b      	bne.n	8004f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f14:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d113      	bne.n	8004f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f24:	085b      	lsrs	r3, r3, #1
 8004f26:	3b01      	subs	r3, #1
 8004f28:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f38:	085b      	lsrs	r3, r3, #1
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d001      	beq.n	8004f46 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e000      	b.n	8004f48 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3720      	adds	r7, #32
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	40021000 	.word	0x40021000
 8004f54:	019f800c 	.word	0x019f800c
 8004f58:	feeefffc 	.word	0xfeeefffc

08004f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e11e      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f74:	4b91      	ldr	r3, [pc, #580]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 030f 	and.w	r3, r3, #15
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d910      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f82:	4b8e      	ldr	r3, [pc, #568]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f023 020f 	bic.w	r2, r3, #15
 8004f8a:	498c      	ldr	r1, [pc, #560]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b8a      	ldr	r3, [pc, #552]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 030f 	and.w	r3, r3, #15
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e106      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0301 	and.w	r3, r3, #1
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d073      	beq.n	8005098 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d129      	bne.n	800500c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fb8:	4b81      	ldr	r3, [pc, #516]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0f4      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004fc8:	f000 f9d0 	bl	800536c <RCC_GetSysClockFreqFromPLLSource>
 8004fcc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4a7c      	ldr	r2, [pc, #496]	; (80051c4 <HAL_RCC_ClockConfig+0x268>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d93f      	bls.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fd6:	4b7a      	ldr	r3, [pc, #488]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d009      	beq.n	8004ff6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d033      	beq.n	8005056 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d12f      	bne.n	8005056 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004ff6:	4b72      	ldr	r3, [pc, #456]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ffe:	4a70      	ldr	r2, [pc, #448]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005004:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005006:	2380      	movs	r3, #128	; 0x80
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	e024      	b.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b02      	cmp	r3, #2
 8005012:	d107      	bne.n	8005024 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005014:	4b6a      	ldr	r3, [pc, #424]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d109      	bne.n	8005034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e0c6      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005024:	4b66      	ldr	r3, [pc, #408]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800502c:	2b00      	cmp	r3, #0
 800502e:	d101      	bne.n	8005034 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e0be      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005034:	f000 f8ce 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8005038:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	4a61      	ldr	r2, [pc, #388]	; (80051c4 <HAL_RCC_ClockConfig+0x268>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d909      	bls.n	8005056 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005042:	4b5f      	ldr	r3, [pc, #380]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800504a:	4a5d      	ldr	r2, [pc, #372]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 800504c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005050:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005052:	2380      	movs	r3, #128	; 0x80
 8005054:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005056:	4b5a      	ldr	r3, [pc, #360]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f023 0203 	bic.w	r2, r3, #3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	4957      	ldr	r1, [pc, #348]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005064:	4313      	orrs	r3, r2
 8005066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005068:	f7fd f93c 	bl	80022e4 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506e:	e00a      	b.n	8005086 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005070:	f7fd f938 	bl	80022e4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e095      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005086:	4b4e      	ldr	r3, [pc, #312]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 020c 	and.w	r2, r3, #12
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	429a      	cmp	r2, r3
 8005096:	d1eb      	bne.n	8005070 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d023      	beq.n	80050ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0304 	and.w	r3, r3, #4
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d005      	beq.n	80050bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050b0:	4b43      	ldr	r3, [pc, #268]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	4a42      	ldr	r2, [pc, #264]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050c8:	4b3d      	ldr	r3, [pc, #244]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050d0:	4a3b      	ldr	r2, [pc, #236]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050d8:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4936      	ldr	r1, [pc, #216]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
 80050ea:	e008      	b.n	80050fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80050f2:	4b33      	ldr	r3, [pc, #204]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	4a32      	ldr	r2, [pc, #200]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 80050f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050fe:	4b2f      	ldr	r3, [pc, #188]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d21d      	bcs.n	8005148 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f023 020f 	bic.w	r2, r3, #15
 8005114:	4929      	ldr	r1, [pc, #164]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	4313      	orrs	r3, r2
 800511a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800511c:	f7fd f8e2 	bl	80022e4 <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005122:	e00a      	b.n	800513a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005124:	f7fd f8de 	bl	80022e4 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005132:	4293      	cmp	r3, r2
 8005134:	d901      	bls.n	800513a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e03b      	b.n	80051b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800513a:	4b20      	ldr	r3, [pc, #128]	; (80051bc <HAL_RCC_ClockConfig+0x260>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	683a      	ldr	r2, [r7, #0]
 8005144:	429a      	cmp	r2, r3
 8005146:	d1ed      	bne.n	8005124 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d008      	beq.n	8005166 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005154:	4b1a      	ldr	r3, [pc, #104]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4917      	ldr	r1, [pc, #92]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	00db      	lsls	r3, r3, #3
 8005180:	490f      	ldr	r1, [pc, #60]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 8005182:	4313      	orrs	r3, r2
 8005184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005186:	f000 f825 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 800518a:	4602      	mov	r2, r0
 800518c:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <HAL_RCC_ClockConfig+0x264>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	091b      	lsrs	r3, r3, #4
 8005192:	f003 030f 	and.w	r3, r3, #15
 8005196:	490c      	ldr	r1, [pc, #48]	; (80051c8 <HAL_RCC_ClockConfig+0x26c>)
 8005198:	5ccb      	ldrb	r3, [r1, r3]
 800519a:	f003 031f 	and.w	r3, r3, #31
 800519e:	fa22 f303 	lsr.w	r3, r2, r3
 80051a2:	4a0a      	ldr	r2, [pc, #40]	; (80051cc <HAL_RCC_ClockConfig+0x270>)
 80051a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_RCC_ClockConfig+0x274>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fc fe66 	bl	8001e7c <HAL_InitTick>
 80051b0:	4603      	mov	r3, r0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40022000 	.word	0x40022000
 80051c0:	40021000 	.word	0x40021000
 80051c4:	04c4b400 	.word	0x04c4b400
 80051c8:	0800c798 	.word	0x0800c798
 80051cc:	20000020 	.word	0x20000020
 80051d0:	20000024 	.word	0x20000024

080051d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b087      	sub	sp, #28
 80051d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80051da:	4b2c      	ldr	r3, [pc, #176]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d102      	bne.n	80051ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80051e6:	4b2a      	ldr	r3, [pc, #168]	; (8005290 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051e8:	613b      	str	r3, [r7, #16]
 80051ea:	e047      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 030c 	and.w	r3, r3, #12
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d102      	bne.n	80051fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80051f8:	4b26      	ldr	r3, [pc, #152]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc0>)
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	e03e      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80051fe:	4b23      	ldr	r3, [pc, #140]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005200:	689b      	ldr	r3, [r3, #8]
 8005202:	f003 030c 	and.w	r3, r3, #12
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d136      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	091b      	lsrs	r3, r3, #4
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	3301      	adds	r3, #1
 8005220:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2b03      	cmp	r3, #3
 8005226:	d10c      	bne.n	8005242 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005228:	4a1a      	ldr	r2, [pc, #104]	; (8005294 <HAL_RCC_GetSysClockFreq+0xc0>)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005230:	4a16      	ldr	r2, [pc, #88]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 8005232:	68d2      	ldr	r2, [r2, #12]
 8005234:	0a12      	lsrs	r2, r2, #8
 8005236:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800523a:	fb02 f303 	mul.w	r3, r2, r3
 800523e:	617b      	str	r3, [r7, #20]
      break;
 8005240:	e00c      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005242:	4a13      	ldr	r2, [pc, #76]	; (8005290 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	fbb2 f3f3 	udiv	r3, r2, r3
 800524a:	4a10      	ldr	r2, [pc, #64]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800524c:	68d2      	ldr	r2, [r2, #12]
 800524e:	0a12      	lsrs	r2, r2, #8
 8005250:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005254:	fb02 f303 	mul.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
      break;
 800525a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800525c:	4b0b      	ldr	r3, [pc, #44]	; (800528c <HAL_RCC_GetSysClockFreq+0xb8>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	0e5b      	lsrs	r3, r3, #25
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	3301      	adds	r3, #1
 8005268:	005b      	lsls	r3, r3, #1
 800526a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	fbb2 f3f3 	udiv	r3, r2, r3
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e001      	b.n	800527c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800527c:	693b      	ldr	r3, [r7, #16]
}
 800527e:	4618      	mov	r0, r3
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	40021000 	.word	0x40021000
 8005290:	00f42400 	.word	0x00f42400
 8005294:	016e3600 	.word	0x016e3600

08005298 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800529c:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_RCC_GetHCLKFreq+0x14>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
 80052aa:	bf00      	nop
 80052ac:	20000020 	.word	0x20000020

080052b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052b4:	f7ff fff0 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0a1b      	lsrs	r3, r3, #8
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4904      	ldr	r1, [pc, #16]	; (80052d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40021000 	.word	0x40021000
 80052d8:	0800c7a8 	.word	0x0800c7a8

080052dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80052e0:	f7ff ffda 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b06      	ldr	r3, [pc, #24]	; (8005300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	0adb      	lsrs	r3, r3, #11
 80052ec:	f003 0307 	and.w	r3, r3, #7
 80052f0:	4904      	ldr	r1, [pc, #16]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x28>)
 80052f2:	5ccb      	ldrb	r3, [r1, r3]
 80052f4:	f003 031f 	and.w	r3, r3, #31
 80052f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40021000 	.word	0x40021000
 8005304:	0800c7a8 	.word	0x0800c7a8

08005308 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	220f      	movs	r2, #15
 8005316:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005318:	4b12      	ldr	r3, [pc, #72]	; (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0203 	and.w	r2, r3, #3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005324:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005330:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800533c:	4b09      	ldr	r3, [pc, #36]	; (8005364 <HAL_RCC_GetClockConfig+0x5c>)
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	08db      	lsrs	r3, r3, #3
 8005342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800534a:	4b07      	ldr	r3, [pc, #28]	; (8005368 <HAL_RCC_GetClockConfig+0x60>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 020f 	and.w	r2, r3, #15
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	601a      	str	r2, [r3, #0]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40021000 	.word	0x40021000
 8005368:	40022000 	.word	0x40022000

0800536c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005372:	4b1e      	ldr	r3, [pc, #120]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800537c:	4b1b      	ldr	r3, [pc, #108]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3301      	adds	r3, #1
 8005388:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d10c      	bne.n	80053aa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005390:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	fbb2 f3f3 	udiv	r3, r2, r3
 8005398:	4a14      	ldr	r2, [pc, #80]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800539a:	68d2      	ldr	r2, [r2, #12]
 800539c:	0a12      	lsrs	r2, r2, #8
 800539e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053a2:	fb02 f303 	mul.w	r3, r2, r3
 80053a6:	617b      	str	r3, [r7, #20]
    break;
 80053a8:	e00c      	b.n	80053c4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b2:	4a0e      	ldr	r2, [pc, #56]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053b4:	68d2      	ldr	r2, [r2, #12]
 80053b6:	0a12      	lsrs	r2, r2, #8
 80053b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80053bc:	fb02 f303 	mul.w	r3, r2, r3
 80053c0:	617b      	str	r3, [r7, #20]
    break;
 80053c2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0e5b      	lsrs	r3, r3, #25
 80053ca:	f003 0303 	and.w	r3, r3, #3
 80053ce:	3301      	adds	r3, #1
 80053d0:	005b      	lsls	r3, r3, #1
 80053d2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80053d4:	697a      	ldr	r2, [r7, #20]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053dc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80053de:	687b      	ldr	r3, [r7, #4]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40021000 	.word	0x40021000
 80053f0:	016e3600 	.word	0x016e3600
 80053f4:	00f42400 	.word	0x00f42400

080053f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005400:	2300      	movs	r3, #0
 8005402:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005404:	2300      	movs	r3, #0
 8005406:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8098 	beq.w	8005546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541a:	4b43      	ldr	r3, [pc, #268]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005426:	4b40      	ldr	r3, [pc, #256]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800542a:	4a3f      	ldr	r2, [pc, #252]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800542c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005430:	6593      	str	r3, [r2, #88]	; 0x58
 8005432:	4b3d      	ldr	r3, [pc, #244]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800543e:	2301      	movs	r3, #1
 8005440:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005442:	4b3a      	ldr	r3, [pc, #232]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a39      	ldr	r2, [pc, #228]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800544c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800544e:	f7fc ff49 	bl	80022e4 <HAL_GetTick>
 8005452:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005454:	e009      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005456:	f7fc ff45 	bl	80022e4 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	2b02      	cmp	r3, #2
 8005462:	d902      	bls.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005464:	2303      	movs	r3, #3
 8005466:	74fb      	strb	r3, [r7, #19]
        break;
 8005468:	e005      	b.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800546a:	4b30      	ldr	r3, [pc, #192]	; (800552c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0ef      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005476:	7cfb      	ldrb	r3, [r7, #19]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d159      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800547c:	4b2a      	ldr	r3, [pc, #168]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005486:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01e      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	429a      	cmp	r2, r3
 8005496:	d019      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005498:	4b23      	ldr	r3, [pc, #140]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800549a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054a4:	4b20      	ldr	r3, [pc, #128]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054aa:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054b4:	4b1c      	ldr	r3, [pc, #112]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054c4:	4a18      	ldr	r2, [pc, #96]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f003 0301 	and.w	r3, r3, #1
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d016      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fc ff05 	bl	80022e4 <HAL_GetTick>
 80054da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054dc:	e00b      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fc ff01 	bl	80022e4 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d902      	bls.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	74fb      	strb	r3, [r7, #19]
            break;
 80054f4:	e006      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054f6:	4b0c      	ldr	r3, [pc, #48]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b00      	cmp	r3, #0
 8005502:	d0ec      	beq.n	80054de <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005504:	7cfb      	ldrb	r3, [r7, #19]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d10b      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800550c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005510:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800551a:	4313      	orrs	r3, r2
 800551c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005520:	e008      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005522:	7cfb      	ldrb	r3, [r7, #19]
 8005524:	74bb      	strb	r3, [r7, #18]
 8005526:	e005      	b.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005528:	40021000 	.word	0x40021000
 800552c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005534:	7c7b      	ldrb	r3, [r7, #17]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d105      	bne.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800553a:	4ba7      	ldr	r3, [pc, #668]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800553c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553e:	4aa6      	ldr	r2, [pc, #664]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005544:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00a      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005552:	4ba1      	ldr	r3, [pc, #644]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005558:	f023 0203 	bic.w	r2, r3, #3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	499d      	ldr	r1, [pc, #628]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005562:	4313      	orrs	r3, r2
 8005564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005574:	4b98      	ldr	r3, [pc, #608]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557a:	f023 020c 	bic.w	r2, r3, #12
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	4995      	ldr	r1, [pc, #596]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005584:	4313      	orrs	r3, r2
 8005586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 0304 	and.w	r3, r3, #4
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00a      	beq.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005596:	4b90      	ldr	r3, [pc, #576]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	498c      	ldr	r1, [pc, #560]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d00a      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055b8:	4b87      	ldr	r3, [pc, #540]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	4984      	ldr	r1, [pc, #528]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055da:	4b7f      	ldr	r3, [pc, #508]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	497b      	ldr	r1, [pc, #492]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00a      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055fc:	4b76      	ldr	r3, [pc, #472]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005602:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	4973      	ldr	r1, [pc, #460]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800560c:	4313      	orrs	r3, r2
 800560e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800561e:	4b6e      	ldr	r3, [pc, #440]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005624:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	496a      	ldr	r1, [pc, #424]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005640:	4b65      	ldr	r3, [pc, #404]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005646:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	4962      	ldr	r1, [pc, #392]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005650:	4313      	orrs	r3, r2
 8005652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005662:	4b5d      	ldr	r3, [pc, #372]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005668:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005670:	4959      	ldr	r1, [pc, #356]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005672:	4313      	orrs	r3, r2
 8005674:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005684:	4b54      	ldr	r3, [pc, #336]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005686:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800568a:	f023 0203 	bic.w	r2, r3, #3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	4951      	ldr	r1, [pc, #324]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005694:	4313      	orrs	r3, r2
 8005696:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056a6:	4b4c      	ldr	r3, [pc, #304]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056b4:	4948      	ldr	r1, [pc, #288]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d015      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056c8:	4b43      	ldr	r3, [pc, #268]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	4940      	ldr	r1, [pc, #256]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056e6:	d105      	bne.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056e8:	4b3b      	ldr	r3, [pc, #236]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	4a3a      	ldr	r2, [pc, #232]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d015      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005700:	4b35      	ldr	r3, [pc, #212]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800570e:	4932      	ldr	r1, [pc, #200]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800571e:	d105      	bne.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005720:	4b2d      	ldr	r3, [pc, #180]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	4a2c      	ldr	r2, [pc, #176]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d015      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005738:	4b27      	ldr	r3, [pc, #156]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800573a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800573e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005746:	4924      	ldr	r1, [pc, #144]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005752:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005756:	d105      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005758:	4b1f      	ldr	r3, [pc, #124]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	4a1e      	ldr	r2, [pc, #120]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800575e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005762:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d015      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005770:	4b19      	ldr	r3, [pc, #100]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800577e:	4916      	ldr	r1, [pc, #88]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d019      	beq.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a8:	4b0b      	ldr	r3, [pc, #44]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	4908      	ldr	r1, [pc, #32]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057c6:	d109      	bne.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a02      	ldr	r2, [pc, #8]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057d2:	60d3      	str	r3, [r2, #12]
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80057d6:	bf00      	nop
 80057d8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d015      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057e8:	4b29      	ldr	r3, [pc, #164]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f6:	4926      	ldr	r1, [pc, #152]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005802:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005806:	d105      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005808:	4b21      	ldr	r3, [pc, #132]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	4a20      	ldr	r2, [pc, #128]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800580e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005812:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d015      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005826:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800582e:	4918      	ldr	r1, [pc, #96]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005830:	4313      	orrs	r3, r2
 8005832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d105      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005840:	4b13      	ldr	r3, [pc, #76]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	4a12      	ldr	r2, [pc, #72]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d015      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005858:	4b0d      	ldr	r3, [pc, #52]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800585a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800585e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005866:	490a      	ldr	r1, [pc, #40]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005876:	d105      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005878:	4b05      	ldr	r3, [pc, #20]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a04      	ldr	r2, [pc, #16]	; (8005890 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800587e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005882:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005884:	7cbb      	ldrb	r3, [r7, #18]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40021000 	.word	0x40021000

08005894 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d070      	beq.n	8005988 <HAL_RTC_Init+0xf4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d106      	bne.n	80058c0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f7fc fa78 	bl	8001db0 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f003 0310 	and.w	r3, r3, #16
 80058d2:	2b10      	cmp	r3, #16
 80058d4:	d04f      	beq.n	8005976 <HAL_RTC_Init+0xe2>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	22ca      	movs	r2, #202	; 0xca
 80058dc:	625a      	str	r2, [r3, #36]	; 0x24
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2253      	movs	r2, #83	; 0x53
 80058e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fb58 	bl	8005f9c <RTC_EnterInitMode>
 80058ec:	4603      	mov	r3, r0
 80058ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d126      	bne.n	8005944 <HAL_RTC_Init+0xb0>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6812      	ldr	r2, [r2, #0]
 8005900:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005908:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(hrtc->Instance->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6999      	ldr	r1, [r3, #24]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	431a      	orrs	r2, r3
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	430a      	orrs	r2, r1
 8005926:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(hrtc->Instance->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68d9      	ldr	r1, [r3, #12]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	041a      	lsls	r2, r3, #16
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	430a      	orrs	r2, r1
 8005938:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 fb64 	bl	8006008 <RTC_ExitInitMode>
 8005940:	4603      	mov	r3, r0
 8005942:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8005944:	7bfb      	ldrb	r3, [r7, #15]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d110      	bne.n	800596c <HAL_RTC_Init+0xd8>
      {
        MODIFY_REG(hrtc->Instance->CR, \
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699b      	ldr	r3, [r3, #24]
 8005950:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a1a      	ldr	r2, [r3, #32]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	69db      	ldr	r3, [r3, #28]
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	22ff      	movs	r2, #255	; 0xff
 8005972:	625a      	str	r2, [r3, #36]	; 0x24
 8005974:	e001      	b.n	800597a <HAL_RTC_Init+0xe6>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800597a:	7bfb      	ldrb	r3, [r7, #15]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d103      	bne.n	8005988 <HAL_RTC_Init+0xf4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005988:	7bfb      	ldrb	r3, [r7, #15]
}
 800598a:	4618      	mov	r0, r3
 800598c:	3710      	adds	r7, #16
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005992:	b590      	push	{r4, r7, lr}
 8005994:	b087      	sub	sp, #28
 8005996:	af00      	add	r7, sp, #0
 8005998:	60f8      	str	r0, [r7, #12]
 800599a:	60b9      	str	r1, [r7, #8]
 800599c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d101      	bne.n	80059ac <HAL_RTC_SetTime+0x1a>
 80059a8:	2302      	movs	r3, #2
 80059aa:	e08b      	b.n	8005ac4 <HAL_RTC_SetTime+0x132>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	22ca      	movs	r2, #202	; 0xca
 80059c2:	625a      	str	r2, [r3, #36]	; 0x24
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2253      	movs	r2, #83	; 0x53
 80059ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fae5 	bl	8005f9c <RTC_EnterInitMode>
 80059d2:	4603      	mov	r3, r0
 80059d4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80059d6:	7cfb      	ldrb	r3, [r7, #19]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d163      	bne.n	8005aa4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d126      	bne.n	8005a30 <HAL_RTC_SetTime+0x9e>
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2200      	movs	r2, #0
 80059f4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 fb47 	bl	800608e <RTC_ByteToBcd2>
 8005a00:	4603      	mov	r3, r0
 8005a02:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	785b      	ldrb	r3, [r3, #1]
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fb40 	bl	800608e <RTC_ByteToBcd2>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a12:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	789b      	ldrb	r3, [r3, #2]
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f000 fb38 	bl	800608e <RTC_ByteToBcd2>
 8005a1e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a20:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	78db      	ldrb	r3, [r3, #3]
 8005a28:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e018      	b.n	8005a62 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d102      	bne.n	8005a44 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	2200      	movs	r2, #0
 8005a42:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	785b      	ldrb	r3, [r3, #1]
 8005a4e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a50:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005a56:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	78db      	ldrb	r3, [r3, #3]
 8005a5c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(hrtc->Instance->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005a6c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005a70:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BKP);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a80:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(hrtc->Instance->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6999      	ldr	r1, [r3, #24]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	68da      	ldr	r2, [r3, #12]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	431a      	orrs	r2, r3
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f000 fab4 	bl	8006008 <RTC_ExitInitMode>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	74fb      	strb	r3, [r7, #19]
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	22ff      	movs	r2, #255	; 0xff
 8005aaa:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_RTC_SetTime+0x128>
  {
     hrtc->State = HAL_RTC_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
    __HAL_UNLOCK(hrtc);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005ac2:	7cfb      	ldrb	r3, [r7, #19]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	371c      	adds	r7, #28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd90      	pop	{r4, r7, pc}

08005acc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(hrtc->Instance->SSR);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(hrtc->Instance->PRER) & RTC_PRER_PREDIV_S);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(hrtc->Instance->TR) & RTC_TR_RESERVED_MASK);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005afa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005afe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	0c1b      	lsrs	r3, r3, #16
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b0a:	b2da      	uxtb	r2, r3
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	0a1b      	lsrs	r3, r3, #8
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b28:	b2da      	uxtb	r2, r3
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	0d9b      	lsrs	r3, r3, #22
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d11a      	bne.n	8005b7a <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f000 fac0 	bl	80060ce <RTC_Bcd2ToByte>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	785b      	ldrb	r3, [r3, #1]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f000 fab7 	bl	80060ce <RTC_Bcd2ToByte>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	789b      	ldrb	r3, [r3, #2]
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f000 faae 	bl	80060ce <RTC_Bcd2ToByte>
 8005b72:	4603      	mov	r3, r0
 8005b74:	461a      	mov	r2, r3
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b84:	b590      	push	{r4, r7, lr}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d101      	bne.n	8005b9e <HAL_RTC_SetDate+0x1a>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e075      	b.n	8005c8a <HAL_RTC_SetDate+0x106>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2202      	movs	r2, #2
 8005baa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10e      	bne.n	8005bd2 <HAL_RTC_SetDate+0x4e>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	785b      	ldrb	r3, [r3, #1]
 8005bb8:	f003 0310 	and.w	r3, r3, #16
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d008      	beq.n	8005bd2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	785b      	ldrb	r3, [r3, #1]
 8005bc4:	f023 0310 	bic.w	r3, r3, #16
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	330a      	adds	r3, #10
 8005bcc:	b2da      	uxtb	r2, r3
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d11c      	bne.n	8005c12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	78db      	ldrb	r3, [r3, #3]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f000 fa56 	bl	800608e <RTC_ByteToBcd2>
 8005be2:	4603      	mov	r3, r0
 8005be4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 fa4f 	bl	800608e <RTC_ByteToBcd2>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005bf4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	789b      	ldrb	r3, [r3, #2]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fa47 	bl	800608e <RTC_ByteToBcd2>
 8005c00:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005c02:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]
 8005c10:	e00e      	b.n	8005c30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	78db      	ldrb	r3, [r3, #3]
 8005c16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	785b      	ldrb	r3, [r3, #1]
 8005c1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005c24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	22ca      	movs	r2, #202	; 0xca
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2253      	movs	r2, #83	; 0x53
 8005c3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f9ab 	bl	8005f9c <RTC_EnterInitMode>
 8005c46:	4603      	mov	r3, r0
 8005c48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005c4a:	7cfb      	ldrb	r3, [r7, #19]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10c      	bne.n	8005c6a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    WRITE_REG(hrtc->Instance->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005c5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c5e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005c60:	68f8      	ldr	r0, [r7, #12]
 8005c62:	f000 f9d1 	bl	8006008 <RTC_ExitInitMode>
 8005c66:	4603      	mov	r3, r0
 8005c68:	74fb      	strb	r3, [r7, #19]
  }
	
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	22ff      	movs	r2, #255	; 0xff
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24
 
  if (status == HAL_OK)
 8005c72:	7cfb      	ldrb	r3, [r7, #19]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d103      	bne.n	8005c80 <HAL_RTC_SetDate+0xfc>
  {

    hrtc->State = HAL_RTC_STATE_READY ;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005c88:	7cfb      	ldrb	r3, [r7, #19]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}

08005c92 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(hrtc->Instance->DR) & RTC_DR_RESERVED_MASK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ca8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005cac:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	0c1b      	lsrs	r3, r3, #16
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	0a1b      	lsrs	r3, r3, #8
 8005cbc:	b2db      	uxtb	r3, r3
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	b2da      	uxtb	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cd0:	b2da      	uxtb	r2, r3
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	0b5b      	lsrs	r3, r3, #13
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	f003 0307 	and.w	r3, r3, #7
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d11a      	bne.n	8005d22 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	78db      	ldrb	r3, [r3, #3]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f9ec 	bl	80060ce <RTC_Bcd2ToByte>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 f9e3 	bl	80060ce <RTC_Bcd2ToByte>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	789b      	ldrb	r3, [r3, #2]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f9da 	bl	80060ce <RTC_Bcd2ToByte>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b089      	sub	sp, #36	; 0x24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_RTC_SetAlarm+0x1a>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e101      	b.n	8005f4a <HAL_RTC_SetAlarm+0x21e>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2202      	movs	r2, #2
 8005d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if (Format == RTC_FORMAT_BIN)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d137      	bne.n	8005dcc <HAL_RTC_SetAlarm+0xa0>
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <HAL_RTC_SetAlarm+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
#endif /* USE_FULL_ASSERT*/
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f98a 	bl	800608e <RTC_ByteToBcd2>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f983 	bl	800608e <RTC_ByteToBcd2>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005d8c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	789b      	ldrb	r3, [r3, #2]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 f97b 	bl	800608e <RTC_ByteToBcd2>
 8005d98:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005d9a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	78db      	ldrb	r3, [r3, #3]
 8005da2:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005da4:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f96d 	bl	800608e <RTC_ByteToBcd2>
 8005db4:	4603      	mov	r3, r0
 8005db6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005db8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005dc0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e023      	b.n	8005e14 <HAL_RTC_SetAlarm+0xe8>
  }
  else /* Format BCD */
  {
    if (READ_BIT(hrtc->Instance->CR, RTC_CR_FMT) != 0U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d102      	bne.n	8005de0 <HAL_RTC_SetAlarm+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	785b      	ldrb	r3, [r3, #1]
 8005dea:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005dec:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005df2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	78db      	ldrb	r3, [r3, #3]
 8005df8:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005dfa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e02:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005e04:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005e0a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8005e10:	4313      	orrs	r3, r2
 8005e12:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	685a      	ldr	r2, [r3, #4]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	699b      	ldr	r3, [r3, #24]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	22ca      	movs	r2, #202	; 0xca
 8005e26:	625a      	str	r2, [r3, #36]	; 0x24
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2253      	movs	r2, #83	; 0x53
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e38:	d13d      	bne.n	8005eb6 <HAL_RTC_SetAlarm+0x18a>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8005e48:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRAF);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005e52:	f7fc fa47 	bl	80022e4 <HAL_GetTick>
 8005e56:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8005e58:	e015      	b.n	8005e86 <HAL_RTC_SetAlarm+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e5a:	f7fc fa43 	bl	80022e4 <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e68:	d90d      	bls.n	8005e86 <HAL_RTC_SetAlarm+0x15a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	22ff      	movs	r2, #255	; 0xff
 8005e70:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2203      	movs	r2, #3
 8005e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005e82:	2303      	movs	r3, #3
 8005e84:	e061      	b.n	8005f4a <HAL_RTC_SetAlarm+0x21e>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRAWF) == 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d0e2      	beq.n	8005e5a <HAL_RTC_SetAlarm+0x12e>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMAR, tmpreg);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	69fa      	ldr	r2, [r7, #28]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configure the Alarm A Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMASSR, subsecondtmpreg);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(hrtc->Instance->CR, RTC_CR_ALRAE);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	699a      	ldr	r2, [r3, #24]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb2:	619a      	str	r2, [r3, #24]
 8005eb4:	e03c      	b.n	8005f30 <HAL_RTC_SetAlarm+0x204>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(hrtc->Instance->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	699a      	ldr	r2, [r3, #24]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8005ec4:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm B */
    WRITE_REG(hrtc->Instance->SCR, RTC_SCR_CALRBF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	65da      	str	r2, [r3, #92]	; 0x5c

    tickstart = HAL_GetTick();
 8005ece:	f7fc fa09 	bl	80022e4 <HAL_GetTick>
 8005ed2:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 8005ed4:	e015      	b.n	8005f02 <HAL_RTC_SetAlarm+0x1d6>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ed6:	f7fc fa05 	bl	80022e4 <HAL_GetTick>
 8005eda:	4602      	mov	r2, r0
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1ad3      	subs	r3, r2, r3
 8005ee0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ee4:	d90d      	bls.n	8005f02 <HAL_RTC_SetAlarm+0x1d6>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	22ff      	movs	r2, #255	; 0xff
 8005eec:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2203      	movs	r2, #3
 8005ef2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

        return HAL_TIMEOUT;
 8005efe:	2303      	movs	r3, #3
 8005f00:	e023      	b.n	8005f4a <HAL_RTC_SetAlarm+0x21e>
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_ALRBWF) == 0U)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0e2      	beq.n	8005ed6 <HAL_RTC_SetAlarm+0x1aa>
      }
    }

    WRITE_REG(hrtc->Instance->ALRMBR, tmpreg);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69fa      	ldr	r2, [r7, #28]
 8005f16:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm B Sub Second register */
    WRITE_REG(hrtc->Instance->ALRMBSSR, subsecondtmpreg);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(hrtc->Instance->CR, RTC_CR_ALRBE);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f2e:	619a      	str	r2, [r3, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	22ff      	movs	r2, #255	; 0xff
 8005f36:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f48:	2300      	movs	r3, #0
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3724      	adds	r7, #36	; 0x24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd90      	pop	{r4, r7, pc}
	...

08005f54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <HAL_RTC_WaitForSynchro+0x44>)
 8005f62:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8005f64:	f7fc f9be 	bl	80022e4 <HAL_GetTick>
 8005f68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005f6a:	e009      	b.n	8005f80 <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005f6c:	f7fc f9ba 	bl	80022e4 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f7a:	d901      	bls.n	8005f80 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e007      	b.n	8005f90 <HAL_RTC_WaitForSynchro+0x3c>
  while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_RSF) == 0U)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
 8005f86:	f003 0320 	and.w	r3, r3, #32
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d0ee      	beq.n	8005f6c <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	0001005f 	.word	0x0001005f

08005f9c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d123      	bne.n	8005ffe <RTC_EnterInitMode+0x62>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68da      	ldr	r2, [r3, #12]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fc4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005fc6:	f7fc f98d 	bl	80022e4 <HAL_GetTick>
 8005fca:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fcc:	e00d      	b.n	8005fea <RTC_EnterInitMode+0x4e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005fce:	f7fc f989 	bl	80022e4 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fdc:	d905      	bls.n	8005fea <RTC_EnterInitMode+0x4e>
      {
        status = HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2203      	movs	r2, #3
 8005fe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <RTC_EnterInitMode+0x62>
 8005ff8:	7bfb      	ldrb	r3, [r7, #15]
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d1e7      	bne.n	8005fce <RTC_EnterInitMode+0x32>
      }
    }
  }

  return status;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006010:	2300      	movs	r3, #0
 8006012:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006022:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	699b      	ldr	r3, [r3, #24]
 800602a:	f003 0320 	and.w	r3, r3, #32
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10c      	bne.n	800604c <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff8e 	bl	8005f54 <HAL_RTC_WaitForSynchro>
 8006038:	4603      	mov	r3, r0
 800603a:	2b00      	cmp	r3, #0
 800603c:	d022      	beq.n	8006084 <RTC_ExitInitMode+0x7c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2203      	movs	r2, #3
 8006042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	e01b      	b.n	8006084 <RTC_ExitInitMode+0x7c>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0220 	bic.w	r2, r2, #32
 800605a:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff ff79 	bl	8005f54 <HAL_RTC_WaitForSynchro>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d005      	beq.n	8006074 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2203      	movs	r2, #3
 800606c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699a      	ldr	r2, [r3, #24]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0220 	orr.w	r2, r2, #32
 8006082:	619a      	str	r2, [r3, #24]
  }

  return status;
 8006084:	7bfb      	ldrb	r3, [r7, #15]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3710      	adds	r7, #16
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	4603      	mov	r3, r0
 8006096:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006098:	2300      	movs	r3, #0
 800609a:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80060a0:	e005      	b.n	80060ae <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	3301      	adds	r3, #1
 80060a6:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	3b0a      	subs	r3, #10
 80060ac:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80060ae:	7afb      	ldrb	r3, [r7, #11]
 80060b0:	2b09      	cmp	r3, #9
 80060b2:	d8f6      	bhi.n	80060a2 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	b2db      	uxtb	r3, r3
 80060b8:	011b      	lsls	r3, r3, #4
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	7afb      	ldrb	r3, [r7, #11]
 80060be:	4313      	orrs	r3, r2
 80060c0:	b2db      	uxtb	r3, r3
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b085      	sub	sp, #20
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	4603      	mov	r3, r0
 80060d6:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80060d8:	79fb      	ldrb	r3, [r7, #7]
 80060da:	091b      	lsrs	r3, r3, #4
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	f003 030f 	and.w	r3, r3, #15
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	4413      	add	r3, r2
 80060f8:	b2db      	uxtb	r3, r3
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3714      	adds	r7, #20
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr

08006106 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b082      	sub	sp, #8
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	e049      	b.n	80061ac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f7fb ffc3 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2202      	movs	r2, #2
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	3304      	adds	r3, #4
 8006142:	4619      	mov	r1, r3
 8006144:	4610      	mov	r0, r2
 8006146:	f000 fabd 	bl	80066c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d001      	beq.n	80061cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e04c      	b.n	8006266 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2202      	movs	r2, #2
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a26      	ldr	r2, [pc, #152]	; (8006274 <HAL_TIM_Base_Start+0xc0>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d022      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061e6:	d01d      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a22      	ldr	r2, [pc, #136]	; (8006278 <HAL_TIM_Base_Start+0xc4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d018      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a21      	ldr	r2, [pc, #132]	; (800627c <HAL_TIM_Base_Start+0xc8>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d013      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a1f      	ldr	r2, [pc, #124]	; (8006280 <HAL_TIM_Base_Start+0xcc>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a1e      	ldr	r2, [pc, #120]	; (8006284 <HAL_TIM_Base_Start+0xd0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_TIM_Base_Start+0xd4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d004      	beq.n	8006224 <HAL_TIM_Base_Start+0x70>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_TIM_Base_Start+0xd8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d115      	bne.n	8006250 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689a      	ldr	r2, [r3, #8]
 800622a:	4b19      	ldr	r3, [pc, #100]	; (8006290 <HAL_TIM_Base_Start+0xdc>)
 800622c:	4013      	ands	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b06      	cmp	r3, #6
 8006234:	d015      	beq.n	8006262 <HAL_TIM_Base_Start+0xae>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d011      	beq.n	8006262 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f042 0201 	orr.w	r2, r2, #1
 800624c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624e:	e008      	b.n	8006262 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f042 0201 	orr.w	r2, r2, #1
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e000      	b.n	8006264 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3714      	adds	r7, #20
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	40012c00 	.word	0x40012c00
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40013400 	.word	0x40013400
 8006288:	40014000 	.word	0x40014000
 800628c:	40015000 	.word	0x40015000
 8006290:	00010007 	.word	0x00010007

08006294 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6a1a      	ldr	r2, [r3, #32]
 80062a2:	f241 1311 	movw	r3, #4369	; 0x1111
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10f      	bne.n	80062cc <HAL_TIM_Base_Stop+0x38>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6a1a      	ldr	r2, [r3, #32]
 80062b2:	f244 4344 	movw	r3, #17476	; 0x4444
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d107      	bne.n	80062cc <HAL_TIM_Base_Stop+0x38>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2201      	movs	r2, #1
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062f2:	b2db      	uxtb	r3, r3
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d001      	beq.n	80062fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e054      	b.n	80063a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f042 0201 	orr.w	r2, r2, #1
 8006312:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a26      	ldr	r2, [pc, #152]	; (80063b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d022      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006326:	d01d      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a22      	ldr	r2, [pc, #136]	; (80063b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d018      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a21      	ldr	r2, [pc, #132]	; (80063bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a1f      	ldr	r2, [pc, #124]	; (80063c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d00e      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a1e      	ldr	r2, [pc, #120]	; (80063c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d009      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a1c      	ldr	r2, [pc, #112]	; (80063c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d004      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x80>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a1b      	ldr	r2, [pc, #108]	; (80063cc <HAL_TIM_Base_Start_IT+0xe8>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d115      	bne.n	8006390 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	689a      	ldr	r2, [r3, #8]
 800636a:	4b19      	ldr	r3, [pc, #100]	; (80063d0 <HAL_TIM_Base_Start_IT+0xec>)
 800636c:	4013      	ands	r3, r2
 800636e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2b06      	cmp	r3, #6
 8006374:	d015      	beq.n	80063a2 <HAL_TIM_Base_Start_IT+0xbe>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800637c:	d011      	beq.n	80063a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f042 0201 	orr.w	r2, r2, #1
 800638c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638e:	e008      	b.n	80063a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f042 0201 	orr.w	r2, r2, #1
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e000      	b.n	80063a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3714      	adds	r7, #20
 80063aa:	46bd      	mov	sp, r7
 80063ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	40012c00 	.word	0x40012c00
 80063b8:	40000400 	.word	0x40000400
 80063bc:	40000800 	.word	0x40000800
 80063c0:	40000c00 	.word	0x40000c00
 80063c4:	40013400 	.word	0x40013400
 80063c8:	40014000 	.word	0x40014000
 80063cc:	40015000 	.word	0x40015000
 80063d0:	00010007 	.word	0x00010007

080063d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0302 	and.w	r3, r3, #2
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d020      	beq.n	8006438 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0202 	mvn.w	r2, #2
 8006408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f931 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f923 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f934 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0304 	and.w	r3, r3, #4
 800643e:	2b00      	cmp	r3, #0
 8006440:	d020      	beq.n	8006484 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0304 	and.w	r3, r3, #4
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0204 	mvn.w	r2, #4
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f90b 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f8fd 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 f90e 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d020      	beq.n	80064d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0308 	and.w	r3, r3, #8
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01b      	beq.n	80064d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0208 	mvn.w	r2, #8
 80064a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2204      	movs	r2, #4
 80064a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0303 	and.w	r3, r3, #3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f8e5 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 f8d7 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 f8e8 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0310 	and.w	r3, r3, #16
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d020      	beq.n	800651c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0310 	and.w	r3, r3, #16
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01b      	beq.n	800651c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0210 	mvn.w	r2, #16
 80064ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2208      	movs	r2, #8
 80064f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8bf 	bl	8006686 <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8b1 	bl	8006672 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f8c2 	bl	800669a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00c      	beq.n	8006540 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d007      	beq.n	8006540 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0201 	mvn.w	r2, #1
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7fb fb8c 	bl	8001c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006546:	2b00      	cmp	r3, #0
 8006548:	d104      	bne.n	8006554 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00c      	beq.n	800656e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f9ff 	bl	800696c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006574:	2b00      	cmp	r3, #0
 8006576:	d00c      	beq.n	8006592 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800657e:	2b00      	cmp	r3, #0
 8006580:	d007      	beq.n	8006592 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800658a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f9f7 	bl	8006980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00c      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d007      	beq.n	80065b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f87c 	bl	80066ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	f003 0320 	and.w	r3, r3, #32
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00c      	beq.n	80065da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f003 0320 	and.w	r3, r3, #32
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d007      	beq.n	80065da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f06f 0220 	mvn.w	r2, #32
 80065d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9bf 	bl	8006958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00c      	beq.n	80065fe <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80065f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9cb 	bl	8006994 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00c      	beq.n	8006622 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d007      	beq.n	8006622 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800661a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f9c3 	bl	80069a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00c      	beq.n	8006646 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d007      	beq.n	8006646 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800663e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f9bb 	bl	80069bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00c      	beq.n	800666a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f9b3 	bl	80069d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a4c      	ldr	r2, [pc, #304]	; (8006808 <TIM_Base_SetConfig+0x144>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d017      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066e2:	d013      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a49      	ldr	r2, [pc, #292]	; (800680c <TIM_Base_SetConfig+0x148>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d00f      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a48      	ldr	r2, [pc, #288]	; (8006810 <TIM_Base_SetConfig+0x14c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d00b      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a47      	ldr	r2, [pc, #284]	; (8006814 <TIM_Base_SetConfig+0x150>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d007      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a46      	ldr	r2, [pc, #280]	; (8006818 <TIM_Base_SetConfig+0x154>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_Base_SetConfig+0x48>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a45      	ldr	r2, [pc, #276]	; (800681c <TIM_Base_SetConfig+0x158>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d108      	bne.n	800671e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	4313      	orrs	r3, r2
 800671c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a39      	ldr	r2, [pc, #228]	; (8006808 <TIM_Base_SetConfig+0x144>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d023      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672c:	d01f      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a36      	ldr	r2, [pc, #216]	; (800680c <TIM_Base_SetConfig+0x148>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d01b      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a35      	ldr	r2, [pc, #212]	; (8006810 <TIM_Base_SetConfig+0x14c>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d017      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a34      	ldr	r2, [pc, #208]	; (8006814 <TIM_Base_SetConfig+0x150>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d013      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	4a33      	ldr	r2, [pc, #204]	; (8006818 <TIM_Base_SetConfig+0x154>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d00f      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	4a33      	ldr	r2, [pc, #204]	; (8006820 <TIM_Base_SetConfig+0x15c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d00b      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a32      	ldr	r2, [pc, #200]	; (8006824 <TIM_Base_SetConfig+0x160>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d007      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a31      	ldr	r2, [pc, #196]	; (8006828 <TIM_Base_SetConfig+0x164>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_Base_SetConfig+0xaa>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a2c      	ldr	r2, [pc, #176]	; (800681c <TIM_Base_SetConfig+0x158>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d108      	bne.n	8006780 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4313      	orrs	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	695b      	ldr	r3, [r3, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	689a      	ldr	r2, [r3, #8]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a18      	ldr	r2, [pc, #96]	; (8006808 <TIM_Base_SetConfig+0x144>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d013      	beq.n	80067d4 <TIM_Base_SetConfig+0x110>
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <TIM_Base_SetConfig+0x154>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00f      	beq.n	80067d4 <TIM_Base_SetConfig+0x110>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a1a      	ldr	r2, [pc, #104]	; (8006820 <TIM_Base_SetConfig+0x15c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d00b      	beq.n	80067d4 <TIM_Base_SetConfig+0x110>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a19      	ldr	r2, [pc, #100]	; (8006824 <TIM_Base_SetConfig+0x160>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d007      	beq.n	80067d4 <TIM_Base_SetConfig+0x110>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TIM_Base_SetConfig+0x164>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d003      	beq.n	80067d4 <TIM_Base_SetConfig+0x110>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a13      	ldr	r2, [pc, #76]	; (800681c <TIM_Base_SetConfig+0x158>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d103      	bne.n	80067dc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	691a      	ldr	r2, [r3, #16]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d105      	bne.n	80067fa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	f023 0201 	bic.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	611a      	str	r2, [r3, #16]
  }
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40000400 	.word	0x40000400
 8006810:	40000800 	.word	0x40000800
 8006814:	40000c00 	.word	0x40000c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40015000 	.word	0x40015000
 8006820:	40014000 	.word	0x40014000
 8006824:	40014400 	.word	0x40014400
 8006828:	40014800 	.word	0x40014800

0800682c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800683c:	2b01      	cmp	r3, #1
 800683e:	d101      	bne.n	8006844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006840:	2302      	movs	r3, #2
 8006842:	e074      	b.n	800692e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2202      	movs	r2, #2
 8006850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a34      	ldr	r2, [pc, #208]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d009      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a33      	ldr	r2, [pc, #204]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d004      	beq.n	8006882 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a31      	ldr	r2, [pc, #196]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d108      	bne.n	8006894 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006888:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4313      	orrs	r3, r2
 8006892:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a21      	ldr	r2, [pc, #132]	; (800693c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068c4:	d01d      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1f      	ldr	r2, [pc, #124]	; (8006948 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d018      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1d      	ldr	r2, [pc, #116]	; (800694c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d013      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a1c      	ldr	r2, [pc, #112]	; (8006950 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d00e      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a15      	ldr	r2, [pc, #84]	; (8006940 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d009      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a18      	ldr	r2, [pc, #96]	; (8006954 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d004      	beq.n	8006902 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a11      	ldr	r2, [pc, #68]	; (8006944 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10c      	bne.n	800691c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4313      	orrs	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800692c:	2300      	movs	r3, #0
}
 800692e:	4618      	mov	r0, r3
 8006930:	3714      	adds	r7, #20
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40012c00 	.word	0x40012c00
 8006940:	40013400 	.word	0x40013400
 8006944:	40015000 	.word	0x40015000
 8006948:	40000400 	.word	0x40000400
 800694c:	40000800 	.word	0x40000800
 8006950:	40000c00 	.word	0x40000c00
 8006954:	40014000 	.word	0x40014000

08006958 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e042      	b.n	8006a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fb fbbf 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2224      	movs	r2, #36	; 0x24
 8006a12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f022 0201 	bic.w	r2, r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fb24 	bl	800707c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f825 	bl	8006a84 <UART_SetConfig>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e01b      	b.n	8006a7c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	689a      	ldr	r2, [r3, #8]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0201 	orr.w	r2, r2, #1
 8006a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 fba3 	bl	80071c0 <UART_CheckIdleState>
 8006a7a:	4603      	mov	r3, r0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a88:	b08c      	sub	sp, #48	; 0x30
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	689a      	ldr	r2, [r3, #8]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	431a      	orrs	r2, r3
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4baa      	ldr	r3, [pc, #680]	; (8006d5c <UART_SetConfig+0x2d8>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	6812      	ldr	r2, [r2, #0]
 8006aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006abc:	430b      	orrs	r3, r1
 8006abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	68da      	ldr	r2, [r3, #12]
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	430a      	orrs	r2, r1
 8006ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a9f      	ldr	r2, [pc, #636]	; (8006d60 <UART_SetConfig+0x2dc>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d004      	beq.n	8006af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	4313      	orrs	r3, r2
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006afa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006afe:	697a      	ldr	r2, [r7, #20]
 8006b00:	6812      	ldr	r2, [r2, #0]
 8006b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b04:	430b      	orrs	r3, r1
 8006b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b0e:	f023 010f 	bic.w	r1, r3, #15
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	430a      	orrs	r2, r1
 8006b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a90      	ldr	r2, [pc, #576]	; (8006d64 <UART_SetConfig+0x2e0>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d125      	bne.n	8006b74 <UART_SetConfig+0xf0>
 8006b28:	4b8f      	ldr	r3, [pc, #572]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b2e:	f003 0303 	and.w	r3, r3, #3
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d81a      	bhi.n	8006b6c <UART_SetConfig+0xe8>
 8006b36:	a201      	add	r2, pc, #4	; (adr r2, 8006b3c <UART_SetConfig+0xb8>)
 8006b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b3c:	08006b4d 	.word	0x08006b4d
 8006b40:	08006b5d 	.word	0x08006b5d
 8006b44:	08006b55 	.word	0x08006b55
 8006b48:	08006b65 	.word	0x08006b65
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b52:	e116      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b54:	2302      	movs	r3, #2
 8006b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5a:	e112      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b62:	e10e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b64:	2308      	movs	r3, #8
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e10a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b6c:	2310      	movs	r3, #16
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b72:	e106      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a7c      	ldr	r2, [pc, #496]	; (8006d6c <UART_SetConfig+0x2e8>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d138      	bne.n	8006bf0 <UART_SetConfig+0x16c>
 8006b7e:	4b7a      	ldr	r3, [pc, #488]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b0c      	cmp	r3, #12
 8006b8a:	d82d      	bhi.n	8006be8 <UART_SetConfig+0x164>
 8006b8c:	a201      	add	r2, pc, #4	; (adr r2, 8006b94 <UART_SetConfig+0x110>)
 8006b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b92:	bf00      	nop
 8006b94:	08006bc9 	.word	0x08006bc9
 8006b98:	08006be9 	.word	0x08006be9
 8006b9c:	08006be9 	.word	0x08006be9
 8006ba0:	08006be9 	.word	0x08006be9
 8006ba4:	08006bd9 	.word	0x08006bd9
 8006ba8:	08006be9 	.word	0x08006be9
 8006bac:	08006be9 	.word	0x08006be9
 8006bb0:	08006be9 	.word	0x08006be9
 8006bb4:	08006bd1 	.word	0x08006bd1
 8006bb8:	08006be9 	.word	0x08006be9
 8006bbc:	08006be9 	.word	0x08006be9
 8006bc0:	08006be9 	.word	0x08006be9
 8006bc4:	08006be1 	.word	0x08006be1
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e0d8      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e0d4      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e0d0      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e0cc      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e0c8      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a5e      	ldr	r2, [pc, #376]	; (8006d70 <UART_SetConfig+0x2ec>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d125      	bne.n	8006c46 <UART_SetConfig+0x1c2>
 8006bfa:	4b5b      	ldr	r3, [pc, #364]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c04:	2b30      	cmp	r3, #48	; 0x30
 8006c06:	d016      	beq.n	8006c36 <UART_SetConfig+0x1b2>
 8006c08:	2b30      	cmp	r3, #48	; 0x30
 8006c0a:	d818      	bhi.n	8006c3e <UART_SetConfig+0x1ba>
 8006c0c:	2b20      	cmp	r3, #32
 8006c0e:	d00a      	beq.n	8006c26 <UART_SetConfig+0x1a2>
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d814      	bhi.n	8006c3e <UART_SetConfig+0x1ba>
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <UART_SetConfig+0x19a>
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d008      	beq.n	8006c2e <UART_SetConfig+0x1aa>
 8006c1c:	e00f      	b.n	8006c3e <UART_SetConfig+0x1ba>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c24:	e0ad      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c26:	2302      	movs	r3, #2
 8006c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2c:	e0a9      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c2e:	2304      	movs	r3, #4
 8006c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c34:	e0a5      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c36:	2308      	movs	r3, #8
 8006c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3c:	e0a1      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c3e:	2310      	movs	r3, #16
 8006c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c44:	e09d      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a4a      	ldr	r2, [pc, #296]	; (8006d74 <UART_SetConfig+0x2f0>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d125      	bne.n	8006c9c <UART_SetConfig+0x218>
 8006c50:	4b45      	ldr	r3, [pc, #276]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8006c5c:	d016      	beq.n	8006c8c <UART_SetConfig+0x208>
 8006c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c60:	d818      	bhi.n	8006c94 <UART_SetConfig+0x210>
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d00a      	beq.n	8006c7c <UART_SetConfig+0x1f8>
 8006c66:	2b80      	cmp	r3, #128	; 0x80
 8006c68:	d814      	bhi.n	8006c94 <UART_SetConfig+0x210>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <UART_SetConfig+0x1f0>
 8006c6e:	2b40      	cmp	r3, #64	; 0x40
 8006c70:	d008      	beq.n	8006c84 <UART_SetConfig+0x200>
 8006c72:	e00f      	b.n	8006c94 <UART_SetConfig+0x210>
 8006c74:	2300      	movs	r3, #0
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e082      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c7c:	2302      	movs	r3, #2
 8006c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c82:	e07e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c84:	2304      	movs	r3, #4
 8006c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8a:	e07a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c92:	e076      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c94:	2310      	movs	r3, #16
 8006c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9a:	e072      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a35      	ldr	r2, [pc, #212]	; (8006d78 <UART_SetConfig+0x2f4>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d12a      	bne.n	8006cfc <UART_SetConfig+0x278>
 8006ca6:	4b30      	ldr	r3, [pc, #192]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cb4:	d01a      	beq.n	8006cec <UART_SetConfig+0x268>
 8006cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cba:	d81b      	bhi.n	8006cf4 <UART_SetConfig+0x270>
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc0:	d00c      	beq.n	8006cdc <UART_SetConfig+0x258>
 8006cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006cc6:	d815      	bhi.n	8006cf4 <UART_SetConfig+0x270>
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <UART_SetConfig+0x250>
 8006ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd0:	d008      	beq.n	8006ce4 <UART_SetConfig+0x260>
 8006cd2:	e00f      	b.n	8006cf4 <UART_SetConfig+0x270>
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e052      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ce2:	e04e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006ce4:	2304      	movs	r3, #4
 8006ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cea:	e04a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cec:	2308      	movs	r3, #8
 8006cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cf2:	e046      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	e042      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a17      	ldr	r2, [pc, #92]	; (8006d60 <UART_SetConfig+0x2dc>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d13a      	bne.n	8006d7c <UART_SetConfig+0x2f8>
 8006d06:	4b18      	ldr	r3, [pc, #96]	; (8006d68 <UART_SetConfig+0x2e4>)
 8006d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d14:	d01a      	beq.n	8006d4c <UART_SetConfig+0x2c8>
 8006d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d1a:	d81b      	bhi.n	8006d54 <UART_SetConfig+0x2d0>
 8006d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d20:	d00c      	beq.n	8006d3c <UART_SetConfig+0x2b8>
 8006d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d26:	d815      	bhi.n	8006d54 <UART_SetConfig+0x2d0>
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <UART_SetConfig+0x2b0>
 8006d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d30:	d008      	beq.n	8006d44 <UART_SetConfig+0x2c0>
 8006d32:	e00f      	b.n	8006d54 <UART_SetConfig+0x2d0>
 8006d34:	2300      	movs	r3, #0
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e022      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d42:	e01e      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d44:	2304      	movs	r3, #4
 8006d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d4a:	e01a      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d4c:	2308      	movs	r3, #8
 8006d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e016      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d54:	2310      	movs	r3, #16
 8006d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	e012      	b.n	8006d82 <UART_SetConfig+0x2fe>
 8006d5c:	cfff69f3 	.word	0xcfff69f3
 8006d60:	40008000 	.word	0x40008000
 8006d64:	40013800 	.word	0x40013800
 8006d68:	40021000 	.word	0x40021000
 8006d6c:	40004400 	.word	0x40004400
 8006d70:	40004800 	.word	0x40004800
 8006d74:	40004c00 	.word	0x40004c00
 8006d78:	40005000 	.word	0x40005000
 8006d7c:	2310      	movs	r3, #16
 8006d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4aae      	ldr	r2, [pc, #696]	; (8007040 <UART_SetConfig+0x5bc>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	f040 8097 	bne.w	8006ebc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d92:	2b08      	cmp	r3, #8
 8006d94:	d823      	bhi.n	8006dde <UART_SetConfig+0x35a>
 8006d96:	a201      	add	r2, pc, #4	; (adr r2, 8006d9c <UART_SetConfig+0x318>)
 8006d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d9c:	08006dc1 	.word	0x08006dc1
 8006da0:	08006ddf 	.word	0x08006ddf
 8006da4:	08006dc9 	.word	0x08006dc9
 8006da8:	08006ddf 	.word	0x08006ddf
 8006dac:	08006dcf 	.word	0x08006dcf
 8006db0:	08006ddf 	.word	0x08006ddf
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006ddf 	.word	0x08006ddf
 8006dbc:	08006dd7 	.word	0x08006dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dc0:	f7fe fa76 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8006dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dc6:	e010      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dc8:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <UART_SetConfig+0x5c0>)
 8006dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dcc:	e00d      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dce:	f7fe fa01 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dd4:	e009      	b.n	8006dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ddc:	e005      	b.n	8006dea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8130 	beq.w	8007052 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006df2:	697b      	ldr	r3, [r7, #20]
 8006df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006df6:	4a94      	ldr	r2, [pc, #592]	; (8007048 <UART_SetConfig+0x5c4>)
 8006df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d305      	bcc.n	8006e22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d903      	bls.n	8006e2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e28:	e113      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	60fa      	str	r2, [r7, #12]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e36:	4a84      	ldr	r2, [pc, #528]	; (8007048 <UART_SetConfig+0x5c4>)
 8006e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	2200      	movs	r2, #0
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e4c:	f7f9 fe56 	bl	8000afc <__aeabi_uldivmod>
 8006e50:	4602      	mov	r2, r0
 8006e52:	460b      	mov	r3, r1
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	f04f 0200 	mov.w	r2, #0
 8006e5c:	f04f 0300 	mov.w	r3, #0
 8006e60:	020b      	lsls	r3, r1, #8
 8006e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e66:	0202      	lsls	r2, r0, #8
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	6849      	ldr	r1, [r1, #4]
 8006e6c:	0849      	lsrs	r1, r1, #1
 8006e6e:	2000      	movs	r0, #0
 8006e70:	460c      	mov	r4, r1
 8006e72:	4605      	mov	r5, r0
 8006e74:	eb12 0804 	adds.w	r8, r2, r4
 8006e78:	eb43 0905 	adc.w	r9, r3, r5
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	469a      	mov	sl, r3
 8006e84:	4693      	mov	fp, r2
 8006e86:	4652      	mov	r2, sl
 8006e88:	465b      	mov	r3, fp
 8006e8a:	4640      	mov	r0, r8
 8006e8c:	4649      	mov	r1, r9
 8006e8e:	f7f9 fe35 	bl	8000afc <__aeabi_uldivmod>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4613      	mov	r3, r2
 8006e98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ea0:	d308      	bcc.n	8006eb4 <UART_SetConfig+0x430>
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ea8:	d204      	bcs.n	8006eb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6a3a      	ldr	r2, [r7, #32]
 8006eb0:	60da      	str	r2, [r3, #12]
 8006eb2:	e0ce      	b.n	8007052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006eba:	e0ca      	b.n	8007052 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ec4:	d166      	bne.n	8006f94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d827      	bhi.n	8006f1e <UART_SetConfig+0x49a>
 8006ece:	a201      	add	r2, pc, #4	; (adr r2, 8006ed4 <UART_SetConfig+0x450>)
 8006ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed4:	08006ef9 	.word	0x08006ef9
 8006ed8:	08006f01 	.word	0x08006f01
 8006edc:	08006f09 	.word	0x08006f09
 8006ee0:	08006f1f 	.word	0x08006f1f
 8006ee4:	08006f0f 	.word	0x08006f0f
 8006ee8:	08006f1f 	.word	0x08006f1f
 8006eec:	08006f1f 	.word	0x08006f1f
 8006ef0:	08006f1f 	.word	0x08006f1f
 8006ef4:	08006f17 	.word	0x08006f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ef8:	f7fe f9da 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8006efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006efe:	e014      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f00:	f7fe f9ec 	bl	80052dc <HAL_RCC_GetPCLK2Freq>
 8006f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f06:	e010      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f08:	4b4e      	ldr	r3, [pc, #312]	; (8007044 <UART_SetConfig+0x5c0>)
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f0c:	e00d      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f0e:	f7fe f961 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f14:	e009      	b.n	8006f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f1c:	e005      	b.n	8006f2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	f000 8090 	beq.w	8007052 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f36:	4a44      	ldr	r2, [pc, #272]	; (8007048 <UART_SetConfig+0x5c4>)
 8006f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f44:	005a      	lsls	r2, r3, #1
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	085b      	lsrs	r3, r3, #1
 8006f4c:	441a      	add	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f58:	6a3b      	ldr	r3, [r7, #32]
 8006f5a:	2b0f      	cmp	r3, #15
 8006f5c:	d916      	bls.n	8006f8c <UART_SetConfig+0x508>
 8006f5e:	6a3b      	ldr	r3, [r7, #32]
 8006f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f64:	d212      	bcs.n	8006f8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	f023 030f 	bic.w	r3, r3, #15
 8006f6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f70:	6a3b      	ldr	r3, [r7, #32]
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	f003 0307 	and.w	r3, r3, #7
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	8bfb      	ldrh	r3, [r7, #30]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	8bfa      	ldrh	r2, [r7, #30]
 8006f88:	60da      	str	r2, [r3, #12]
 8006f8a:	e062      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f92:	e05e      	b.n	8007052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f98:	2b08      	cmp	r3, #8
 8006f9a:	d828      	bhi.n	8006fee <UART_SetConfig+0x56a>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <UART_SetConfig+0x520>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fc9 	.word	0x08006fc9
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fd9 	.word	0x08006fd9
 8006fb0:	08006fef 	.word	0x08006fef
 8006fb4:	08006fdf 	.word	0x08006fdf
 8006fb8:	08006fef 	.word	0x08006fef
 8006fbc:	08006fef 	.word	0x08006fef
 8006fc0:	08006fef 	.word	0x08006fef
 8006fc4:	08006fe7 	.word	0x08006fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fc8:	f7fe f972 	bl	80052b0 <HAL_RCC_GetPCLK1Freq>
 8006fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fce:	e014      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006fd0:	f7fe f984 	bl	80052dc <HAL_RCC_GetPCLK2Freq>
 8006fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fd6:	e010      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <UART_SetConfig+0x5c0>)
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fdc:	e00d      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fde:	f7fe f8f9 	bl	80051d4 <HAL_RCC_GetSysClockFreq>
 8006fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006fe4:	e009      	b.n	8006ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fec:	e005      	b.n	8006ffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d028      	beq.n	8007052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	4a10      	ldr	r2, [pc, #64]	; (8007048 <UART_SetConfig+0x5c4>)
 8007006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800700a:	461a      	mov	r2, r3
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	085b      	lsrs	r3, r3, #1
 8007018:	441a      	add	r2, r3
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	685b      	ldr	r3, [r3, #4]
 800701e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	2b0f      	cmp	r3, #15
 8007028:	d910      	bls.n	800704c <UART_SetConfig+0x5c8>
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007030:	d20c      	bcs.n	800704c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007032:	6a3b      	ldr	r3, [r7, #32]
 8007034:	b29a      	uxth	r2, r3
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60da      	str	r2, [r3, #12]
 800703c:	e009      	b.n	8007052 <UART_SetConfig+0x5ce>
 800703e:	bf00      	nop
 8007040:	40008000 	.word	0x40008000
 8007044:	00f42400 	.word	0x00f42400
 8007048:	0800c7b0 	.word	0x0800c7b0
      }
      else
      {
        ret = HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2201      	movs	r2, #1
 8007056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2201      	movs	r2, #1
 800705e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	2200      	movs	r2, #0
 8007066:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2200      	movs	r2, #0
 800706c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800706e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007072:	4618      	mov	r0, r3
 8007074:	3730      	adds	r7, #48	; 0x30
 8007076:	46bd      	mov	sp, r7
 8007078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800707c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007088:	f003 0308 	and.w	r3, r3, #8
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	430a      	orrs	r2, r1
 80070a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00a      	beq.n	80070c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	430a      	orrs	r2, r1
 80070c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	430a      	orrs	r2, r1
 80070e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	f003 0304 	and.w	r3, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	f003 0310 	and.w	r3, r3, #16
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007132:	f003 0320 	and.w	r3, r3, #32
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	430a      	orrs	r2, r1
 800714e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01a      	beq.n	8007192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	430a      	orrs	r2, r1
 8007170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800717a:	d10a      	bne.n	8007192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00a      	beq.n	80071b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	605a      	str	r2, [r3, #4]
  }
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b098      	sub	sp, #96	; 0x60
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071d0:	f7fb f888 	bl	80022e4 <HAL_GetTick>
 80071d4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0308 	and.w	r3, r3, #8
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d12f      	bne.n	8007244 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ec:	2200      	movs	r2, #0
 80071ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f88e 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d022      	beq.n	8007244 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800720c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800720e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007212:	653b      	str	r3, [r7, #80]	; 0x50
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	461a      	mov	r2, r3
 800721a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800721c:	647b      	str	r3, [r7, #68]	; 0x44
 800721e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e6      	bne.n	80071fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e063      	b.n	800730c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0304 	and.w	r3, r3, #4
 800724e:	2b04      	cmp	r3, #4
 8007250:	d149      	bne.n	80072e6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007252:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800725a:	2200      	movs	r2, #0
 800725c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f857 	bl	8007314 <UART_WaitOnFlagUntilTimeout>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d03c      	beq.n	80072e6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	623b      	str	r3, [r7, #32]
   return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007280:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
 800728c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007290:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e6      	bne.n	800726c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3308      	adds	r3, #8
 80072a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	e853 3f00 	ldrex	r3, [r3]
 80072ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f023 0301 	bic.w	r3, r3, #1
 80072b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	3308      	adds	r3, #8
 80072bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072be:	61fa      	str	r2, [r7, #28]
 80072c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	69b9      	ldr	r1, [r7, #24]
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	e841 2300 	strex	r3, r2, [r1]
 80072ca:	617b      	str	r3, [r7, #20]
   return(result);
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1e5      	bne.n	800729e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2220      	movs	r2, #32
 80072d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e012      	b.n	800730c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3758      	adds	r7, #88	; 0x58
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	603b      	str	r3, [r7, #0]
 8007320:	4613      	mov	r3, r2
 8007322:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007324:	e04f      	b.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732c:	d04b      	beq.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732e:	f7fa ffd9 	bl	80022e4 <HAL_GetTick>
 8007332:	4602      	mov	r2, r0
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	1ad3      	subs	r3, r2, r3
 8007338:	69ba      	ldr	r2, [r7, #24]
 800733a:	429a      	cmp	r2, r3
 800733c:	d302      	bcc.n	8007344 <UART_WaitOnFlagUntilTimeout+0x30>
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e04e      	b.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0304 	and.w	r3, r3, #4
 8007352:	2b00      	cmp	r3, #0
 8007354:	d037      	beq.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2b80      	cmp	r3, #128	; 0x80
 800735a:	d034      	beq.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	d031      	beq.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b08      	cmp	r3, #8
 800736e:	d110      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2208      	movs	r2, #8
 8007376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f838 	bl	80073ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2208      	movs	r2, #8
 8007382:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e029      	b.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69db      	ldr	r3, [r3, #28]
 8007398:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800739c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073a0:	d111      	bne.n	80073c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f000 f81e 	bl	80073ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2220      	movs	r2, #32
 80073b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2200      	movs	r2, #0
 80073be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80073c2:	2303      	movs	r3, #3
 80073c4:	e00f      	b.n	80073e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	69da      	ldr	r2, [r3, #28]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	4013      	ands	r3, r2
 80073d0:	68ba      	ldr	r2, [r7, #8]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	bf0c      	ite	eq
 80073d6:	2301      	moveq	r3, #1
 80073d8:	2300      	movne	r3, #0
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	461a      	mov	r2, r3
 80073de:	79fb      	ldrb	r3, [r7, #7]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d0a0      	beq.n	8007326 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b095      	sub	sp, #84	; 0x54
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	643b      	str	r3, [r7, #64]	; 0x40
 8007416:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800741a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e6      	bne.n	80073f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	61fb      	str	r3, [r7, #28]
   return(result);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	64bb      	str	r3, [r7, #72]	; 0x48
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800744c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800744e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007450:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007454:	e841 2300 	strex	r3, r2, [r1]
 8007458:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800745a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1e3      	bne.n	8007428 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007464:	2b01      	cmp	r3, #1
 8007466:	d118      	bne.n	800749a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	e853 3f00 	ldrex	r3, [r3]
 8007474:	60bb      	str	r3, [r7, #8]
   return(result);
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f023 0310 	bic.w	r3, r3, #16
 800747c:	647b      	str	r3, [r7, #68]	; 0x44
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	461a      	mov	r2, r3
 8007484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007486:	61bb      	str	r3, [r7, #24]
 8007488:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6979      	ldr	r1, [r7, #20]
 800748c:	69ba      	ldr	r2, [r7, #24]
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	613b      	str	r3, [r7, #16]
   return(result);
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e6      	bne.n	8007468 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	675a      	str	r2, [r3, #116]	; 0x74
}
 80074ae:	bf00      	nop
 80074b0:	3754      	adds	r7, #84	; 0x54
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d101      	bne.n	80074d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80074cc:	2302      	movs	r3, #2
 80074ce:	e027      	b.n	8007520 <HAL_UARTEx_DisableFifoMode+0x66>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	2201      	movs	r2, #1
 80074d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2224      	movs	r2, #36	; 0x24
 80074dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 0201 	bic.w	r2, r2, #1
 80074f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80074fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2220      	movs	r2, #32
 8007512:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800751e:	2300      	movs	r3, #0
}
 8007520:	4618      	mov	r0, r3
 8007522:	3714      	adds	r7, #20
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800753c:	2b01      	cmp	r3, #1
 800753e:	d101      	bne.n	8007544 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007540:	2302      	movs	r3, #2
 8007542:	e02d      	b.n	80075a0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2201      	movs	r2, #1
 8007548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2224      	movs	r2, #36	; 0x24
 8007550:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f022 0201 	bic.w	r2, r2, #1
 800756a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689b      	ldr	r3, [r3, #8]
 8007572:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	683a      	ldr	r2, [r7, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f84f 	bl	8007624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80075bc:	2302      	movs	r3, #2
 80075be:	e02d      	b.n	800761c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2224      	movs	r2, #36	; 0x24
 80075cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0201 	bic.w	r2, r2, #1
 80075e6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	430a      	orrs	r2, r1
 80075fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 f811 	bl	8007624 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2220      	movs	r2, #32
 800760e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007630:	2b00      	cmp	r3, #0
 8007632:	d108      	bne.n	8007646 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2201      	movs	r2, #1
 8007640:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007644:	e031      	b.n	80076aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007646:	2308      	movs	r3, #8
 8007648:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800764a:	2308      	movs	r3, #8
 800764c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	0e5b      	lsrs	r3, r3, #25
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 0307 	and.w	r3, r3, #7
 800765c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	0f5b      	lsrs	r3, r3, #29
 8007666:	b2db      	uxtb	r3, r3
 8007668:	f003 0307 	and.w	r3, r3, #7
 800766c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800766e:	7bbb      	ldrb	r3, [r7, #14]
 8007670:	7b3a      	ldrb	r2, [r7, #12]
 8007672:	4911      	ldr	r1, [pc, #68]	; (80076b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007674:	5c8a      	ldrb	r2, [r1, r2]
 8007676:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800767a:	7b3a      	ldrb	r2, [r7, #12]
 800767c:	490f      	ldr	r1, [pc, #60]	; (80076bc <UARTEx_SetNbDataToProcess+0x98>)
 800767e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007680:	fb93 f3f2 	sdiv	r3, r3, r2
 8007684:	b29a      	uxth	r2, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800768c:	7bfb      	ldrb	r3, [r7, #15]
 800768e:	7b7a      	ldrb	r2, [r7, #13]
 8007690:	4909      	ldr	r1, [pc, #36]	; (80076b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007692:	5c8a      	ldrb	r2, [r1, r2]
 8007694:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007698:	7b7a      	ldrb	r2, [r7, #13]
 800769a:	4908      	ldr	r1, [pc, #32]	; (80076bc <UARTEx_SetNbDataToProcess+0x98>)
 800769c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800769e:	fb93 f3f2 	sdiv	r3, r3, r2
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80076aa:	bf00      	nop
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	0800c7c8 	.word	0x0800c7c8
 80076bc:	0800c7d0 	.word	0x0800c7d0

080076c0 <init_dht11>:
 * @param htim TIMER for calculate delays ex:&htim2
 * @param port GPIO port ex:GPIOA
 * @param pin GPIO pin ex:GPIO_PIN_2
 * @param dht struct to configure ex:&dht
 */
void init_dht11(dht11_t *dht, TIM_HandleTypeDef *htim, GPIO_TypeDef* port, uint16_t pin){
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
 80076cc:	807b      	strh	r3, [r7, #2]
	dht->htim = htim;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]
	dht->port = port;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
	dht->pin = pin;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	887a      	ldrh	r2, [r7, #2]
 80076de:	809a      	strh	r2, [r3, #4]
}
 80076e0:	bf00      	nop
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <set_dht11_gpio_mode>:
 * @brief set DHT pin direction with given parameter
 * @param dht struct for dht
 * @param pMode GPIO Mode ex:INPUT or OUTPUT
 */
void set_dht11_gpio_mode(dht11_t *dht, uint8_t pMode)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	460b      	mov	r3, r1
 80076f6:	70fb      	strb	r3, [r7, #3]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076f8:	f107 030c 	add.w	r3, r7, #12
 80076fc:	2200      	movs	r2, #0
 80076fe:	601a      	str	r2, [r3, #0]
 8007700:	605a      	str	r2, [r3, #4]
 8007702:	609a      	str	r2, [r3, #8]
 8007704:	60da      	str	r2, [r3, #12]
 8007706:	611a      	str	r2, [r3, #16]

	if(pMode == OUTPUT)
 8007708:	78fb      	ldrb	r3, [r7, #3]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d111      	bne.n	8007732 <set_dht11_gpio_mode+0x46>
	{
	  GPIO_InitStruct.Pin = dht->pin;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	889b      	ldrh	r3, [r3, #4]
 8007712:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007714:	2301      	movs	r3, #1
 8007716:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800771c:	2303      	movs	r3, #3
 800771e:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f107 020c 	add.w	r2, r7, #12
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7fc f9a6 	bl	8003a7c <HAL_GPIO_Init>
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
	}
}
 8007730:	e013      	b.n	800775a <set_dht11_gpio_mode+0x6e>
	}else if(pMode == INPUT)
 8007732:	78fb      	ldrb	r3, [r7, #3]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d110      	bne.n	800775a <set_dht11_gpio_mode+0x6e>
	  GPIO_InitStruct.Pin = dht->pin;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	889b      	ldrh	r3, [r3, #4]
 800773c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800773e:	2300      	movs	r3, #0
 8007740:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007742:	2300      	movs	r3, #0
 8007744:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007746:	2303      	movs	r3, #3
 8007748:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(dht->port, &GPIO_InitStruct);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f107 020c 	add.w	r2, r7, #12
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f7fc f991 	bl	8003a7c <HAL_GPIO_Init>
}
 800775a:	bf00      	nop
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <readDHT11>:
 * @brief reads dht11 value
 * @param dht struct for dht11
 * @return 1 if read ok 0 if something wrong in read
 */
uint8_t readDHT11(dht11_t *dht)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b094      	sub	sp, #80	; 0x50
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
	uint16_t mTime1 = 0, mTime2 = 0, mBit = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800776e:	2300      	movs	r3, #0
 8007770:	86bb      	strh	r3, [r7, #52]	; 0x34
 8007772:	2300      	movs	r3, #0
 8007774:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t humVal = 0, tempVal = 0, parityVal = 0, genParity = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 800777e:	2300      	movs	r3, #0
 8007780:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8007784:	2300      	movs	r3, #0
 8007786:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800778a:	2300      	movs	r3, #0
 800778c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t mData[40];

	//start comm
	set_dht11_gpio_mode(dht, OUTPUT);			//set pin direction as input
 8007790:	2101      	movs	r1, #1
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff ffaa 	bl	80076ec <set_dht11_gpio_mode>
	HAL_GPIO_WritePin(dht->port, dht->pin, GPIO_PIN_RESET);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6818      	ldr	r0, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	889b      	ldrh	r3, [r3, #4]
 80077a0:	2200      	movs	r2, #0
 80077a2:	4619      	mov	r1, r3
 80077a4:	f7fc fb04 	bl	8003db0 <HAL_GPIO_WritePin>
	HAL_Delay(18);					//wait 18 ms in Low state
 80077a8:	2012      	movs	r0, #18
 80077aa:	f7fa fda7 	bl	80022fc <HAL_Delay>
  __ASM volatile ("cpsid i" : : : "memory");
 80077ae:	b672      	cpsid	i
}
 80077b0:	bf00      	nop
	__disable_irq();	//disable all interupts to do only read dht otherwise miss timer
	HAL_TIM_Base_Start(dht->htim); //start timer
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fe fcfc 	bl	80061b4 <HAL_TIM_Base_Start>
	set_dht11_gpio_mode(dht, INPUT);
 80077bc:	2100      	movs	r1, #0
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff ff94 	bl	80076ec <set_dht11_gpio_mode>
	//check dht answer
	__HAL_TIM_SET_COUNTER(dht->htim, 0);				//set timer counter to zero
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80077ce:	e00b      	b.n	80077e8 <readDHT11+0x86>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	b29b      	uxth	r3, r3
 80077da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80077de:	d903      	bls.n	80077e8 <readDHT11+0x86>
  __ASM volatile ("cpsie i" : : : "memory");
 80077e0:	b662      	cpsie	i
}
 80077e2:	bf00      	nop
			__enable_irq();
			return 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	e130      	b.n	8007a4a <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	889b      	ldrh	r3, [r3, #4]
 80077f0:	4619      	mov	r1, r3
 80077f2:	4610      	mov	r0, r2
 80077f4:	f7fc fac4 	bl	8003d80 <HAL_GPIO_ReadPin>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d0e8      	beq.n	80077d0 <readDHT11+0x6e>
		}
	}
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2200      	movs	r2, #0
 8007806:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8007808:	e00b      	b.n	8007822 <readDHT11+0xc0>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	b29b      	uxth	r3, r3
 8007814:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007818:	d903      	bls.n	8007822 <readDHT11+0xc0>
  __ASM volatile ("cpsie i" : : : "memory");
 800781a:	b662      	cpsie	i
}
 800781c:	bf00      	nop
			__enable_irq();
			return 0;
 800781e:	2300      	movs	r3, #0
 8007820:	e113      	b.n	8007a4a <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	4619      	mov	r1, r3
 800782c:	4610      	mov	r0, r2
 800782e:	f7fc faa7 	bl	8003d80 <HAL_GPIO_ReadPin>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0e8      	beq.n	800780a <readDHT11+0xa8>
		}
	}
	mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007840:	86fb      	strh	r3, [r7, #54]	; 0x36
	__HAL_TIM_SET_COUNTER(dht->htim, 0);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2200      	movs	r2, #0
 800784a:	625a      	str	r2, [r3, #36]	; 0x24
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800784c:	e00b      	b.n	8007866 <readDHT11+0x104>
		if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007856:	b29b      	uxth	r3, r3
 8007858:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800785c:	d903      	bls.n	8007866 <readDHT11+0x104>
  __ASM volatile ("cpsie i" : : : "memory");
 800785e:	b662      	cpsie	i
}
 8007860:	bf00      	nop
			__enable_irq();
			return 0;
 8007862:	2300      	movs	r3, #0
 8007864:	e0f1      	b.n	8007a4a <readDHT11+0x2e8>
	while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	889b      	ldrh	r3, [r3, #4]
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f7fc fa85 	bl	8003d80 <HAL_GPIO_ReadPin>
 8007876:	4603      	mov	r3, r0
 8007878:	2b01      	cmp	r3, #1
 800787a:	d0e8      	beq.n	800784e <readDHT11+0xec>
		}
	}
	mTime2 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	86bb      	strh	r3, [r7, #52]	; 0x34

	//if answer is wrong return
	if(mTime1 < 75 && mTime1 > 85 && mTime2 < 75 && mTime2 > 85)
 8007886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007888:	2b4a      	cmp	r3, #74	; 0x4a
 800788a:	d80c      	bhi.n	80078a6 <readDHT11+0x144>
 800788c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800788e:	2b55      	cmp	r3, #85	; 0x55
 8007890:	d909      	bls.n	80078a6 <readDHT11+0x144>
 8007892:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007894:	2b4a      	cmp	r3, #74	; 0x4a
 8007896:	d806      	bhi.n	80078a6 <readDHT11+0x144>
 8007898:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800789a:	2b55      	cmp	r3, #85	; 0x55
 800789c:	d903      	bls.n	80078a6 <readDHT11+0x144>
  __ASM volatile ("cpsie i" : : : "memory");
 800789e:	b662      	cpsie	i
}
 80078a0:	bf00      	nop
	{
		__enable_irq();
		return 0;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e0d1      	b.n	8007a4a <readDHT11+0x2e8>
	}

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
	for(int j = 0; j < 40; j++)
 80078a6:	2300      	movs	r3, #0
 80078a8:	647b      	str	r3, [r7, #68]	; 0x44
 80078aa:	e05d      	b.n	8007968 <readDHT11+0x206>
	{
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	689b      	ldr	r3, [r3, #8]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2200      	movs	r2, #0
 80078b4:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80078b6:	e00b      	b.n	80078d0 <readDHT11+0x16e>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80078c6:	d903      	bls.n	80078d0 <readDHT11+0x16e>
  __ASM volatile ("cpsie i" : : : "memory");
 80078c8:	b662      	cpsie	i
}
 80078ca:	bf00      	nop
				__enable_irq();
				return 0;
 80078cc:	2300      	movs	r3, #0
 80078ce:	e0bc      	b.n	8007a4a <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_RESET){
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	889b      	ldrh	r3, [r3, #4]
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fc fa50 	bl	8003d80 <HAL_GPIO_ReadPin>
 80078e0:	4603      	mov	r3, r0
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d0e8      	beq.n	80078b8 <readDHT11+0x156>
			}

		}
		__HAL_TIM_SET_COUNTER(dht->htim, 0);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2200      	movs	r2, #0
 80078ee:	625a      	str	r2, [r3, #36]	; 0x24
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 80078f0:	e00b      	b.n	800790a <readDHT11+0x1a8>
			if((uint16_t)__HAL_TIM_GET_COUNTER(dht->htim) > 500){
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007900:	d903      	bls.n	800790a <readDHT11+0x1a8>
  __ASM volatile ("cpsie i" : : : "memory");
 8007902:	b662      	cpsie	i
}
 8007904:	bf00      	nop
				__enable_irq();
				return 0;
 8007906:	2300      	movs	r3, #0
 8007908:	e09f      	b.n	8007a4a <readDHT11+0x2e8>
		while(HAL_GPIO_ReadPin(dht->port, dht->pin) == GPIO_PIN_SET){
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	889b      	ldrh	r3, [r3, #4]
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7fc fa33 	bl	8003d80 <HAL_GPIO_ReadPin>
 800791a:	4603      	mov	r3, r0
 800791c:	2b01      	cmp	r3, #1
 800791e:	d0e8      	beq.n	80078f2 <readDHT11+0x190>
			}

		}
		mTime1 = (uint16_t)__HAL_TIM_GET_COUNTER(dht->htim);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007928:	86fb      	strh	r3, [r7, #54]	; 0x36

		//check pass time in high state
		//if pass time 25uS set as LOW
		if(mTime1 > 20 && mTime1 < 30)
 800792a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800792c:	2b14      	cmp	r3, #20
 800792e:	d906      	bls.n	800793e <readDHT11+0x1dc>
 8007930:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007932:	2b1d      	cmp	r3, #29
 8007934:	d803      	bhi.n	800793e <readDHT11+0x1dc>
		{
			mBit = 0;
 8007936:	2300      	movs	r3, #0
 8007938:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800793c:	e008      	b.n	8007950 <readDHT11+0x1ee>
		}
		else if(mTime1 > 60 && mTime1 < 80) //if pass time 70 uS set as HIGH
 800793e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007940:	2b3c      	cmp	r3, #60	; 0x3c
 8007942:	d905      	bls.n	8007950 <readDHT11+0x1ee>
 8007944:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007946:	2b4f      	cmp	r3, #79	; 0x4f
 8007948:	d802      	bhi.n	8007950 <readDHT11+0x1ee>
		{
			 mBit = 1;
 800794a:	2301      	movs	r3, #1
 800794c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		}

		//set i th data in data buffer
		mData[j] = mBit;
 8007950:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007954:	b2d9      	uxtb	r1, r3
 8007956:	f107 0208 	add.w	r2, r7, #8
 800795a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800795c:	4413      	add	r3, r2
 800795e:	460a      	mov	r2, r1
 8007960:	701a      	strb	r2, [r3, #0]
	for(int j = 0; j < 40; j++)
 8007962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007964:	3301      	adds	r3, #1
 8007966:	647b      	str	r3, [r7, #68]	; 0x44
 8007968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800796a:	2b27      	cmp	r3, #39	; 0x27
 800796c:	dd9e      	ble.n	80078ac <readDHT11+0x14a>

	}

	HAL_TIM_Base_Stop(dht->htim); //stop timer
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	4618      	mov	r0, r3
 8007974:	f7fe fc8e 	bl	8006294 <HAL_TIM_Base_Stop>
  __ASM volatile ("cpsie i" : : : "memory");
 8007978:	b662      	cpsie	i
}
 800797a:	bf00      	nop
	__enable_irq(); //enable all interrupts

	//get hum value from data buffer
	for(int i = 0; i < 8; i++)
 800797c:	2300      	movs	r3, #0
 800797e:	643b      	str	r3, [r7, #64]	; 0x40
 8007980:	e011      	b.n	80079a6 <readDHT11+0x244>
	{
		humVal += mData[i];
 8007982:	f107 0208 	add.w	r2, r7, #8
 8007986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007988:	4413      	add	r3, r2
 800798a:	781a      	ldrb	r2, [r3, #0]
 800798c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007990:	4413      	add	r3, r2
 8007992:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
		humVal = humVal << 1;
 8007996:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	for(int i = 0; i < 8; i++)
 80079a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a2:	3301      	adds	r3, #1
 80079a4:	643b      	str	r3, [r7, #64]	; 0x40
 80079a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079a8:	2b07      	cmp	r3, #7
 80079aa:	ddea      	ble.n	8007982 <readDHT11+0x220>
	}

	//get temp value from data buffer
	for(int i = 16; i < 24; i++)
 80079ac:	2310      	movs	r3, #16
 80079ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079b0:	e011      	b.n	80079d6 <readDHT11+0x274>
	{
		tempVal += mData[i];
 80079b2:	f107 0208 	add.w	r2, r7, #8
 80079b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b8:	4413      	add	r3, r2
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80079c0:	4413      	add	r3, r2
 80079c2:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
		tempVal = tempVal << 1;
 80079c6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80079ca:	005b      	lsls	r3, r3, #1
 80079cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	for(int i = 16; i < 24; i++)
 80079d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d2:	3301      	adds	r3, #1
 80079d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079d8:	2b17      	cmp	r3, #23
 80079da:	ddea      	ble.n	80079b2 <readDHT11+0x250>
	}

	//get parity value from data buffer
	for(int i = 32; i < 40; i++)
 80079dc:	2320      	movs	r3, #32
 80079de:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e0:	e011      	b.n	8007a06 <readDHT11+0x2a4>
	{
		parityVal += mData[i];
 80079e2:	f107 0208 	add.w	r2, r7, #8
 80079e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e8:	4413      	add	r3, r2
 80079ea:	781a      	ldrb	r2, [r3, #0]
 80079ec:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80079f0:	4413      	add	r3, r2
 80079f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
		parityVal = parityVal << 1;
 80079f6:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	for(int i = 32; i < 40; i++)
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	3301      	adds	r3, #1
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	2b27      	cmp	r3, #39	; 0x27
 8007a0a:	ddea      	ble.n	80079e2 <readDHT11+0x280>
	}

	parityVal = parityVal >> 1;
 8007a0c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a10:	085b      	lsrs	r3, r3, #1
 8007a12:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	humVal = humVal >> 1;
 8007a16:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	tempVal = tempVal >> 1;
 8007a20:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	genParity = humVal + tempVal;
 8007a2a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007a2e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8007a32:	4413      	add	r3, r2
 8007a34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

//	if(genParity == parityVal)

	dht->temperature = tempVal;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f897 204c 	ldrb.w	r2, [r7, #76]	; 0x4c
 8007a3e:	731a      	strb	r2, [r3, #12]
	dht->humidty = humVal;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007a46:	735a      	strb	r2, [r3, #13]


	return 1;
 8007a48:	2301      	movs	r3, #1
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3750      	adds	r7, #80	; 0x50
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8007a52:	b480      	push	{r7}
 8007a54:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8007a56:	bf00      	nop
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b086      	sub	sp, #24
 8007a64:	af04      	add	r7, sp, #16
 8007a66:	4603      	mov	r3, r0
 8007a68:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8007a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	2301      	movs	r3, #1
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	1dfb      	adds	r3, r7, #7
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2178      	movs	r1, #120	; 0x78
 8007a7e:	4803      	ldr	r0, [pc, #12]	; (8007a8c <ssd1306_WriteCommand+0x2c>)
 8007a80:	f7fc fa7c 	bl	8003f7c <HAL_I2C_Mem_Write>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	200001f4 	.word	0x200001f4

08007a90 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af04      	add	r7, sp, #16
 8007a96:	6078      	str	r0, [r7, #4]
 8007a98:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	9202      	str	r2, [sp, #8]
 8007aa4:	9301      	str	r3, [sp, #4]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	2301      	movs	r3, #1
 8007aac:	2240      	movs	r2, #64	; 0x40
 8007aae:	2178      	movs	r1, #120	; 0x78
 8007ab0:	4803      	ldr	r0, [pc, #12]	; (8007ac0 <ssd1306_WriteData+0x30>)
 8007ab2:	f7fc fa63 	bl	8003f7c <HAL_I2C_Mem_Write>
}
 8007ab6:	bf00      	nop
 8007ab8:	3708      	adds	r7, #8
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200001f4 	.word	0x200001f4

08007ac4 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8007ac8:	f7ff ffc3 	bl	8007a52 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8007acc:	2064      	movs	r0, #100	; 0x64
 8007ace:	f7fa fc15 	bl	80022fc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8007ad2:	2000      	movs	r0, #0
 8007ad4:	f000 fac8 	bl	8008068 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8007ad8:	2020      	movs	r0, #32
 8007ada:	f7ff ffc1 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8007ade:	2000      	movs	r0, #0
 8007ae0:	f7ff ffbe 	bl	8007a60 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8007ae4:	20b0      	movs	r0, #176	; 0xb0
 8007ae6:	f7ff ffbb 	bl	8007a60 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8007aea:	20c8      	movs	r0, #200	; 0xc8
 8007aec:	f7ff ffb8 	bl	8007a60 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8007af0:	2000      	movs	r0, #0
 8007af2:	f7ff ffb5 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8007af6:	2010      	movs	r0, #16
 8007af8:	f7ff ffb2 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8007afc:	2040      	movs	r0, #64	; 0x40
 8007afe:	f7ff ffaf 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8007b02:	20ff      	movs	r0, #255	; 0xff
 8007b04:	f000 fa9d 	bl	8008042 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8007b08:	20a1      	movs	r0, #161	; 0xa1
 8007b0a:	f7ff ffa9 	bl	8007a60 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8007b0e:	20a6      	movs	r0, #166	; 0xa6
 8007b10:	f7ff ffa6 	bl	8007a60 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8007b14:	20a8      	movs	r0, #168	; 0xa8
 8007b16:	f7ff ffa3 	bl	8007a60 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8007b1a:	203f      	movs	r0, #63	; 0x3f
 8007b1c:	f7ff ffa0 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8007b20:	20a4      	movs	r0, #164	; 0xa4
 8007b22:	f7ff ff9d 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8007b26:	20d3      	movs	r0, #211	; 0xd3
 8007b28:	f7ff ff9a 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7ff ff97 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8007b32:	20d5      	movs	r0, #213	; 0xd5
 8007b34:	f7ff ff94 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8007b38:	20f0      	movs	r0, #240	; 0xf0
 8007b3a:	f7ff ff91 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8007b3e:	20d9      	movs	r0, #217	; 0xd9
 8007b40:	f7ff ff8e 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8007b44:	2022      	movs	r0, #34	; 0x22
 8007b46:	f7ff ff8b 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8007b4a:	20da      	movs	r0, #218	; 0xda
 8007b4c:	f7ff ff88 	bl	8007a60 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8007b50:	2012      	movs	r0, #18
 8007b52:	f7ff ff85 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8007b56:	20db      	movs	r0, #219	; 0xdb
 8007b58:	f7ff ff82 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8007b5c:	2020      	movs	r0, #32
 8007b5e:	f7ff ff7f 	bl	8007a60 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8007b62:	208d      	movs	r0, #141	; 0x8d
 8007b64:	f7ff ff7c 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8007b68:	2014      	movs	r0, #20
 8007b6a:	f7ff ff79 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8007b6e:	2001      	movs	r0, #1
 8007b70:	f000 fa7a 	bl	8008068 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8007b74:	2000      	movs	r0, #0
 8007b76:	f000 f80f 	bl	8007b98 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8007b7a:	f000 f825 	bl	8007bc8 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <ssd1306_Init+0xd0>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8007b84:	4b03      	ldr	r3, [pc, #12]	; (8007b94 <ssd1306_Init+0xd0>)
 8007b86:	2200      	movs	r2, #0
 8007b88:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8007b8a:	4b02      	ldr	r3, [pc, #8]	; (8007b94 <ssd1306_Init+0xd0>)
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	711a      	strb	r2, [r3, #4]
}
 8007b90:	bf00      	nop
 8007b92:	bd80      	pop	{r7, pc}
 8007b94:	200007a4 	.word	0x200007a4

08007b98 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8007ba2:	79fb      	ldrb	r3, [r7, #7]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <ssd1306_Fill+0x14>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	e000      	b.n	8007bae <ssd1306_Fill+0x16>
 8007bac:	23ff      	movs	r3, #255	; 0xff
 8007bae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	4803      	ldr	r0, [pc, #12]	; (8007bc4 <ssd1306_Fill+0x2c>)
 8007bb6:	f003 ffc9 	bl	800bb4c <memset>
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	200003a4 	.word	0x200003a4

08007bc8 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	71fb      	strb	r3, [r7, #7]
 8007bd2:	e016      	b.n	8007c02 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8007bd4:	79fb      	ldrb	r3, [r7, #7]
 8007bd6:	3b50      	subs	r3, #80	; 0x50
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f7ff ff40 	bl	8007a60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8007be0:	2000      	movs	r0, #0
 8007be2:	f7ff ff3d 	bl	8007a60 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8007be6:	2010      	movs	r0, #16
 8007be8:	f7ff ff3a 	bl	8007a60 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	01db      	lsls	r3, r3, #7
 8007bf0:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <ssd1306_UpdateScreen+0x4c>)
 8007bf2:	4413      	add	r3, r2
 8007bf4:	2180      	movs	r1, #128	; 0x80
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff ff4a 	bl	8007a90 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	71fb      	strb	r3, [r7, #7]
 8007c02:	79fb      	ldrb	r3, [r7, #7]
 8007c04:	2b07      	cmp	r3, #7
 8007c06:	d9e5      	bls.n	8007bd4 <ssd1306_UpdateScreen+0xc>
    }
}
 8007c08:	bf00      	nop
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	200003a4 	.word	0x200003a4

08007c18 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
 8007c22:	460b      	mov	r3, r1
 8007c24:	71bb      	strb	r3, [r7, #6]
 8007c26:	4613      	mov	r3, r2
 8007c28:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8007c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	db3d      	blt.n	8007cae <ssd1306_DrawPixel+0x96>
 8007c32:	79bb      	ldrb	r3, [r7, #6]
 8007c34:	2b3f      	cmp	r3, #63	; 0x3f
 8007c36:	d83a      	bhi.n	8007cae <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8007c38:	797b      	ldrb	r3, [r7, #5]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d11a      	bne.n	8007c74 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8007c3e:	79fa      	ldrb	r2, [r7, #7]
 8007c40:	79bb      	ldrb	r3, [r7, #6]
 8007c42:	08db      	lsrs	r3, r3, #3
 8007c44:	b2d8      	uxtb	r0, r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	01db      	lsls	r3, r3, #7
 8007c4a:	4413      	add	r3, r2
 8007c4c:	4a1b      	ldr	r2, [pc, #108]	; (8007cbc <ssd1306_DrawPixel+0xa4>)
 8007c4e:	5cd3      	ldrb	r3, [r2, r3]
 8007c50:	b25a      	sxtb	r2, r3
 8007c52:	79bb      	ldrb	r3, [r7, #6]
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	2101      	movs	r1, #1
 8007c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5e:	b25b      	sxtb	r3, r3
 8007c60:	4313      	orrs	r3, r2
 8007c62:	b259      	sxtb	r1, r3
 8007c64:	79fa      	ldrb	r2, [r7, #7]
 8007c66:	4603      	mov	r3, r0
 8007c68:	01db      	lsls	r3, r3, #7
 8007c6a:	4413      	add	r3, r2
 8007c6c:	b2c9      	uxtb	r1, r1
 8007c6e:	4a13      	ldr	r2, [pc, #76]	; (8007cbc <ssd1306_DrawPixel+0xa4>)
 8007c70:	54d1      	strb	r1, [r2, r3]
 8007c72:	e01d      	b.n	8007cb0 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8007c74:	79fa      	ldrb	r2, [r7, #7]
 8007c76:	79bb      	ldrb	r3, [r7, #6]
 8007c78:	08db      	lsrs	r3, r3, #3
 8007c7a:	b2d8      	uxtb	r0, r3
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	01db      	lsls	r3, r3, #7
 8007c80:	4413      	add	r3, r2
 8007c82:	4a0e      	ldr	r2, [pc, #56]	; (8007cbc <ssd1306_DrawPixel+0xa4>)
 8007c84:	5cd3      	ldrb	r3, [r2, r3]
 8007c86:	b25a      	sxtb	r2, r3
 8007c88:	79bb      	ldrb	r3, [r7, #6]
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2101      	movs	r1, #1
 8007c90:	fa01 f303 	lsl.w	r3, r1, r3
 8007c94:	b25b      	sxtb	r3, r3
 8007c96:	43db      	mvns	r3, r3
 8007c98:	b25b      	sxtb	r3, r3
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	b259      	sxtb	r1, r3
 8007c9e:	79fa      	ldrb	r2, [r7, #7]
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	01db      	lsls	r3, r3, #7
 8007ca4:	4413      	add	r3, r2
 8007ca6:	b2c9      	uxtb	r1, r1
 8007ca8:	4a04      	ldr	r2, [pc, #16]	; (8007cbc <ssd1306_DrawPixel+0xa4>)
 8007caa:	54d1      	strb	r1, [r2, r3]
 8007cac:	e000      	b.n	8007cb0 <ssd1306_DrawPixel+0x98>
        return;
 8007cae:	bf00      	nop
    }
}
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	200003a4 	.word	0x200003a4

08007cc0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8007cc0:	b590      	push	{r4, r7, lr}
 8007cc2:	b089      	sub	sp, #36	; 0x24
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4638      	mov	r0, r7
 8007cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007cce:	4623      	mov	r3, r4
 8007cd0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8007cd2:	7bfb      	ldrb	r3, [r7, #15]
 8007cd4:	2b1f      	cmp	r3, #31
 8007cd6:	d902      	bls.n	8007cde <ssd1306_WriteChar+0x1e>
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b7e      	cmp	r3, #126	; 0x7e
 8007cdc:	d901      	bls.n	8007ce2 <ssd1306_WriteChar+0x22>
        return 0;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e079      	b.n	8007dd6 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8007ce2:	4b3f      	ldr	r3, [pc, #252]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007ce4:	881b      	ldrh	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	783b      	ldrb	r3, [r7, #0]
 8007cea:	4413      	add	r3, r2
 8007cec:	2b80      	cmp	r3, #128	; 0x80
 8007cee:	dc06      	bgt.n	8007cfe <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8007cf0:	4b3b      	ldr	r3, [pc, #236]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007cf2:	885b      	ldrh	r3, [r3, #2]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	787b      	ldrb	r3, [r7, #1]
 8007cf8:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	dd01      	ble.n	8007d02 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e069      	b.n	8007dd6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8007d02:	2300      	movs	r3, #0
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	e04e      	b.n	8007da6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
 8007d0c:	3b20      	subs	r3, #32
 8007d0e:	7879      	ldrb	r1, [r7, #1]
 8007d10:	fb01 f303 	mul.w	r3, r1, r3
 8007d14:	4619      	mov	r1, r3
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	440b      	add	r3, r1
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	881b      	ldrh	r3, [r3, #0]
 8007d20:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8007d22:	2300      	movs	r3, #0
 8007d24:	61bb      	str	r3, [r7, #24]
 8007d26:	e036      	b.n	8007d96 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8007d28:	697a      	ldr	r2, [r7, #20]
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d013      	beq.n	8007d60 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8007d38:	4b29      	ldr	r3, [pc, #164]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007d3a:	881b      	ldrh	r3, [r3, #0]
 8007d3c:	b2da      	uxtb	r2, r3
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	4413      	add	r3, r2
 8007d44:	b2d8      	uxtb	r0, r3
 8007d46:	4b26      	ldr	r3, [pc, #152]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007d48:	885b      	ldrh	r3, [r3, #2]
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	b2db      	uxtb	r3, r3
 8007d50:	4413      	add	r3, r2
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d58:	4619      	mov	r1, r3
 8007d5a:	f7ff ff5d 	bl	8007c18 <ssd1306_DrawPixel>
 8007d5e:	e017      	b.n	8007d90 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8007d60:	4b1f      	ldr	r3, [pc, #124]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	4413      	add	r3, r2
 8007d6c:	b2d8      	uxtb	r0, r3
 8007d6e:	4b1c      	ldr	r3, [pc, #112]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	b2da      	uxtb	r2, r3
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	4413      	add	r3, r2
 8007d7a:	b2d9      	uxtb	r1, r3
 8007d7c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	bf0c      	ite	eq
 8007d84:	2301      	moveq	r3, #1
 8007d86:	2300      	movne	r3, #0
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f7ff ff44 	bl	8007c18 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	3301      	adds	r3, #1
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	783b      	ldrb	r3, [r7, #0]
 8007d98:	461a      	mov	r2, r3
 8007d9a:	69bb      	ldr	r3, [r7, #24]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d3c3      	bcc.n	8007d28 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8007da0:	69fb      	ldr	r3, [r7, #28]
 8007da2:	3301      	adds	r3, #1
 8007da4:	61fb      	str	r3, [r7, #28]
 8007da6:	787b      	ldrb	r3, [r7, #1]
 8007da8:	461a      	mov	r2, r3
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d3ab      	bcc.n	8007d08 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8007db0:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007db2:	881a      	ldrh	r2, [r3, #0]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d006      	beq.n	8007dc8 <ssd1306_WriteChar+0x108>
 8007dba:	68b9      	ldr	r1, [r7, #8]
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	3b20      	subs	r3, #32
 8007dc0:	440b      	add	r3, r1
 8007dc2:	781b      	ldrb	r3, [r3, #0]
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	e001      	b.n	8007dcc <ssd1306_WriteChar+0x10c>
 8007dc8:	783b      	ldrb	r3, [r7, #0]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	b29a      	uxth	r2, r3
 8007dd0:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <ssd1306_WriteChar+0x120>)
 8007dd2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3724      	adds	r7, #36	; 0x24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd90      	pop	{r4, r7, pc}
 8007dde:	bf00      	nop
 8007de0:	200007a4 	.word	0x200007a4

08007de4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af02      	add	r7, sp, #8
 8007dea:	60f8      	str	r0, [r7, #12]
 8007dec:	4638      	mov	r0, r7
 8007dee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8007df2:	e013      	b.n	8007e1c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	7818      	ldrb	r0, [r3, #0]
 8007df8:	7e3b      	ldrb	r3, [r7, #24]
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e00:	f7ff ff5e 	bl	8007cc0 <ssd1306_WriteChar>
 8007e04:	4603      	mov	r3, r0
 8007e06:	461a      	mov	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	e008      	b.n	8007e28 <ssd1306_WriteString+0x44>
        }
        str++;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e7      	bne.n	8007df4 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	781b      	ldrb	r3, [r3, #0]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}

08007e30 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8007e30:	b480      	push	{r7}
 8007e32:	b083      	sub	sp, #12
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	4603      	mov	r3, r0
 8007e38:	460a      	mov	r2, r1
 8007e3a:	71fb      	strb	r3, [r7, #7]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <ssd1306_SetCursor+0x2c>)
 8007e46:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8007e48:	79bb      	ldrb	r3, [r7, #6]
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	4b03      	ldr	r3, [pc, #12]	; (8007e5c <ssd1306_SetCursor+0x2c>)
 8007e4e:	805a      	strh	r2, [r3, #2]
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr
 8007e5c:	200007a4 	.word	0x200007a4

08007e60 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007e60:	b590      	push	{r4, r7, lr}
 8007e62:	b089      	sub	sp, #36	; 0x24
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	4604      	mov	r4, r0
 8007e68:	4608      	mov	r0, r1
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	461a      	mov	r2, r3
 8007e6e:	4623      	mov	r3, r4
 8007e70:	71fb      	strb	r3, [r7, #7]
 8007e72:	4603      	mov	r3, r0
 8007e74:	71bb      	strb	r3, [r7, #6]
 8007e76:	460b      	mov	r3, r1
 8007e78:	717b      	strb	r3, [r7, #5]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8007e7e:	797a      	ldrb	r2, [r7, #5]
 8007e80:	79fb      	ldrb	r3, [r7, #7]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	bfb8      	it	lt
 8007e88:	425b      	neglt	r3, r3
 8007e8a:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8007e8c:	793a      	ldrb	r2, [r7, #4]
 8007e8e:	79bb      	ldrb	r3, [r7, #6]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	bfb8      	it	lt
 8007e96:	425b      	neglt	r3, r3
 8007e98:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8007e9a:	79fa      	ldrb	r2, [r7, #7]
 8007e9c:	797b      	ldrb	r3, [r7, #5]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d201      	bcs.n	8007ea6 <ssd1306_Line+0x46>
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e001      	b.n	8007eaa <ssd1306_Line+0x4a>
 8007ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eaa:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8007eac:	79ba      	ldrb	r2, [r7, #6]
 8007eae:	793b      	ldrb	r3, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d201      	bcs.n	8007eb8 <ssd1306_Line+0x58>
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e001      	b.n	8007ebc <ssd1306_Line+0x5c>
 8007eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebc:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8007ec6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007eca:	7939      	ldrb	r1, [r7, #4]
 8007ecc:	797b      	ldrb	r3, [r7, #5]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f7ff fea2 	bl	8007c18 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8007ed4:	e024      	b.n	8007f20 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8007ed6:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007eda:	79b9      	ldrb	r1, [r7, #6]
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f7ff fe9a 	bl	8007c18 <ssd1306_DrawPixel>
        error2 = error * 2;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	005b      	lsls	r3, r3, #1
 8007ee8:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	425b      	negs	r3, r3
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	dd08      	ble.n	8007f06 <ssd1306_Line+0xa6>
            error -= deltaY;
 8007ef4:	69fa      	ldr	r2, [r7, #28]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	b2da      	uxtb	r2, r3
 8007f00:	79fb      	ldrb	r3, [r7, #7]
 8007f02:	4413      	add	r3, r2
 8007f04:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	69bb      	ldr	r3, [r7, #24]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	da08      	bge.n	8007f20 <ssd1306_Line+0xc0>
            error += deltaX;
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	4413      	add	r3, r2
 8007f14:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	79bb      	ldrb	r3, [r7, #6]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8007f20:	79fa      	ldrb	r2, [r7, #7]
 8007f22:	797b      	ldrb	r3, [r7, #5]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d1d6      	bne.n	8007ed6 <ssd1306_Line+0x76>
 8007f28:	79ba      	ldrb	r2, [r7, #6]
 8007f2a:	793b      	ldrb	r3, [r7, #4]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1d2      	bne.n	8007ed6 <ssd1306_Line+0x76>
        }
    }
    return;
 8007f30:	bf00      	nop
}
 8007f32:	3724      	adds	r7, #36	; 0x24
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007f38:	b590      	push	{r4, r7, lr}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af02      	add	r7, sp, #8
 8007f3e:	4604      	mov	r4, r0
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	461a      	mov	r2, r3
 8007f46:	4623      	mov	r3, r4
 8007f48:	71fb      	strb	r3, [r7, #7]
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	71bb      	strb	r3, [r7, #6]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	717b      	strb	r3, [r7, #5]
 8007f52:	4613      	mov	r3, r2
 8007f54:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8007f56:	79bc      	ldrb	r4, [r7, #6]
 8007f58:	797a      	ldrb	r2, [r7, #5]
 8007f5a:	79b9      	ldrb	r1, [r7, #6]
 8007f5c:	79f8      	ldrb	r0, [r7, #7]
 8007f5e:	7e3b      	ldrb	r3, [r7, #24]
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4623      	mov	r3, r4
 8007f64:	f7ff ff7c 	bl	8007e60 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8007f68:	793c      	ldrb	r4, [r7, #4]
 8007f6a:	797a      	ldrb	r2, [r7, #5]
 8007f6c:	79b9      	ldrb	r1, [r7, #6]
 8007f6e:	7978      	ldrb	r0, [r7, #5]
 8007f70:	7e3b      	ldrb	r3, [r7, #24]
 8007f72:	9300      	str	r3, [sp, #0]
 8007f74:	4623      	mov	r3, r4
 8007f76:	f7ff ff73 	bl	8007e60 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8007f7a:	793c      	ldrb	r4, [r7, #4]
 8007f7c:	79fa      	ldrb	r2, [r7, #7]
 8007f7e:	7939      	ldrb	r1, [r7, #4]
 8007f80:	7978      	ldrb	r0, [r7, #5]
 8007f82:	7e3b      	ldrb	r3, [r7, #24]
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4623      	mov	r3, r4
 8007f88:	f7ff ff6a 	bl	8007e60 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8007f8c:	79bc      	ldrb	r4, [r7, #6]
 8007f8e:	79fa      	ldrb	r2, [r7, #7]
 8007f90:	7939      	ldrb	r1, [r7, #4]
 8007f92:	79f8      	ldrb	r0, [r7, #7]
 8007f94:	7e3b      	ldrb	r3, [r7, #24]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	4623      	mov	r3, r4
 8007f9a:	f7ff ff61 	bl	8007e60 <ssd1306_Line>

    return;
 8007f9e:	bf00      	nop
}
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd90      	pop	{r4, r7, pc}

08007fa6 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8007fa6:	b590      	push	{r4, r7, lr}
 8007fa8:	b085      	sub	sp, #20
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	4604      	mov	r4, r0
 8007fae:	4608      	mov	r0, r1
 8007fb0:	4611      	mov	r1, r2
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	4623      	mov	r3, r4
 8007fb6:	71fb      	strb	r3, [r7, #7]
 8007fb8:	4603      	mov	r3, r0
 8007fba:	71bb      	strb	r3, [r7, #6]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	717b      	strb	r3, [r7, #5]
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8007fc4:	79fa      	ldrb	r2, [r7, #7]
 8007fc6:	797b      	ldrb	r3, [r7, #5]
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	bf28      	it	cs
 8007fcc:	4613      	movcs	r3, r2
 8007fce:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8007fd0:	797a      	ldrb	r2, [r7, #5]
 8007fd2:	79fb      	ldrb	r3, [r7, #7]
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	bf38      	it	cc
 8007fd8:	4613      	movcc	r3, r2
 8007fda:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8007fdc:	79ba      	ldrb	r2, [r7, #6]
 8007fde:	793b      	ldrb	r3, [r7, #4]
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	bf28      	it	cs
 8007fe4:	4613      	movcs	r3, r2
 8007fe6:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8007fe8:	793a      	ldrb	r2, [r7, #4]
 8007fea:	79bb      	ldrb	r3, [r7, #6]
 8007fec:	4293      	cmp	r3, r2
 8007fee:	bf38      	it	cc
 8007ff0:	4613      	movcc	r3, r2
 8007ff2:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8007ff4:	7afb      	ldrb	r3, [r7, #11]
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	e017      	b.n	800802a <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8007ffa:	7b7b      	ldrb	r3, [r7, #13]
 8007ffc:	73bb      	strb	r3, [r7, #14]
 8007ffe:	e009      	b.n	8008014 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8008000:	f897 2020 	ldrb.w	r2, [r7, #32]
 8008004:	7bf9      	ldrb	r1, [r7, #15]
 8008006:	7bbb      	ldrb	r3, [r7, #14]
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fe05 	bl	8007c18 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 800800e:	7bbb      	ldrb	r3, [r7, #14]
 8008010:	3301      	adds	r3, #1
 8008012:	73bb      	strb	r3, [r7, #14]
 8008014:	7bba      	ldrb	r2, [r7, #14]
 8008016:	7b3b      	ldrb	r3, [r7, #12]
 8008018:	429a      	cmp	r2, r3
 800801a:	d803      	bhi.n	8008024 <ssd1306_FillRectangle+0x7e>
 800801c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008020:	2b00      	cmp	r3, #0
 8008022:	daed      	bge.n	8008000 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8008024:	7bfb      	ldrb	r3, [r7, #15]
 8008026:	3301      	adds	r3, #1
 8008028:	73fb      	strb	r3, [r7, #15]
 800802a:	7bfa      	ldrb	r2, [r7, #15]
 800802c:	7abb      	ldrb	r3, [r7, #10]
 800802e:	429a      	cmp	r2, r3
 8008030:	d803      	bhi.n	800803a <ssd1306_FillRectangle+0x94>
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	2b3f      	cmp	r3, #63	; 0x3f
 8008036:	d9e0      	bls.n	8007ffa <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8008038:	bf00      	nop
 800803a:	bf00      	nop
}
 800803c:	3714      	adds	r7, #20
 800803e:	46bd      	mov	sp, r7
 8008040:	bd90      	pop	{r4, r7, pc}

08008042 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8008042:	b580      	push	{r7, lr}
 8008044:	b084      	sub	sp, #16
 8008046:	af00      	add	r7, sp, #0
 8008048:	4603      	mov	r3, r0
 800804a:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800804c:	2381      	movs	r3, #129	; 0x81
 800804e:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	4618      	mov	r0, r3
 8008054:	f7ff fd04 	bl	8007a60 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8008058:	79fb      	ldrb	r3, [r7, #7]
 800805a:	4618      	mov	r0, r3
 800805c:	f7ff fd00 	bl	8007a60 <ssd1306_WriteCommand>
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	4603      	mov	r3, r0
 8008070:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8008072:	79fb      	ldrb	r3, [r7, #7]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d005      	beq.n	8008084 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8008078:	23af      	movs	r3, #175	; 0xaf
 800807a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800807c:	4b08      	ldr	r3, [pc, #32]	; (80080a0 <ssd1306_SetDisplayOn+0x38>)
 800807e:	2201      	movs	r2, #1
 8008080:	715a      	strb	r2, [r3, #5]
 8008082:	e004      	b.n	800808e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8008084:	23ae      	movs	r3, #174	; 0xae
 8008086:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8008088:	4b05      	ldr	r3, [pc, #20]	; (80080a0 <ssd1306_SetDisplayOn+0x38>)
 800808a:	2200      	movs	r2, #0
 800808c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	4618      	mov	r0, r3
 8008092:	f7ff fce5 	bl	8007a60 <ssd1306_WriteCommand>
}
 8008096:	bf00      	nop
 8008098:	3710      	adds	r7, #16
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	bf00      	nop
 80080a0:	200007a4 	.word	0x200007a4

080080a4 <__NVIC_SetPriority>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	4603      	mov	r3, r0
 80080ac:	6039      	str	r1, [r7, #0]
 80080ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	db0a      	blt.n	80080ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	490c      	ldr	r1, [pc, #48]	; (80080f0 <__NVIC_SetPriority+0x4c>)
 80080be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c2:	0112      	lsls	r2, r2, #4
 80080c4:	b2d2      	uxtb	r2, r2
 80080c6:	440b      	add	r3, r1
 80080c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80080cc:	e00a      	b.n	80080e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	4908      	ldr	r1, [pc, #32]	; (80080f4 <__NVIC_SetPriority+0x50>)
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	f003 030f 	and.w	r3, r3, #15
 80080da:	3b04      	subs	r3, #4
 80080dc:	0112      	lsls	r2, r2, #4
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	440b      	add	r3, r1
 80080e2:	761a      	strb	r2, [r3, #24]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	e000e100 	.word	0xe000e100
 80080f4:	e000ed00 	.word	0xe000ed00

080080f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80080f8:	b580      	push	{r7, lr}
 80080fa:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80080fc:	4b05      	ldr	r3, [pc, #20]	; (8008114 <SysTick_Handler+0x1c>)
 80080fe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008100:	f002 f99c 	bl	800a43c <xTaskGetSchedulerState>
 8008104:	4603      	mov	r3, r0
 8008106:	2b01      	cmp	r3, #1
 8008108:	d001      	beq.n	800810e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800810a:	f003 fa85 	bl	800b618 <xPortSysTickHandler>
  }
}
 800810e:	bf00      	nop
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	e000e010 	.word	0xe000e010

08008118 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800811c:	2100      	movs	r1, #0
 800811e:	f06f 0004 	mvn.w	r0, #4
 8008122:	f7ff ffbf 	bl	80080a4 <__NVIC_SetPriority>
#endif
}
 8008126:	bf00      	nop
 8008128:	bd80      	pop	{r7, pc}
	...

0800812c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008132:	f3ef 8305 	mrs	r3, IPSR
 8008136:	603b      	str	r3, [r7, #0]
  return(result);
 8008138:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800813a:	2b00      	cmp	r3, #0
 800813c:	d003      	beq.n	8008146 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800813e:	f06f 0305 	mvn.w	r3, #5
 8008142:	607b      	str	r3, [r7, #4]
 8008144:	e00c      	b.n	8008160 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008146:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <osKernelInitialize+0x44>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d105      	bne.n	800815a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <osKernelInitialize+0x44>)
 8008150:	2201      	movs	r2, #1
 8008152:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008154:	2300      	movs	r3, #0
 8008156:	607b      	str	r3, [r7, #4]
 8008158:	e002      	b.n	8008160 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800815a:	f04f 33ff 	mov.w	r3, #4294967295
 800815e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008160:	687b      	ldr	r3, [r7, #4]
}
 8008162:	4618      	mov	r0, r3
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	200007ac 	.word	0x200007ac

08008174 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800817a:	f3ef 8305 	mrs	r3, IPSR
 800817e:	603b      	str	r3, [r7, #0]
  return(result);
 8008180:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008182:	2b00      	cmp	r3, #0
 8008184:	d003      	beq.n	800818e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008186:	f06f 0305 	mvn.w	r3, #5
 800818a:	607b      	str	r3, [r7, #4]
 800818c:	e010      	b.n	80081b0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800818e:	4b0b      	ldr	r3, [pc, #44]	; (80081bc <osKernelStart+0x48>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d109      	bne.n	80081aa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008196:	f7ff ffbf 	bl	8008118 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800819a:	4b08      	ldr	r3, [pc, #32]	; (80081bc <osKernelStart+0x48>)
 800819c:	2202      	movs	r2, #2
 800819e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80081a0:	f001 fce0 	bl	8009b64 <vTaskStartScheduler>
      stat = osOK;
 80081a4:	2300      	movs	r3, #0
 80081a6:	607b      	str	r3, [r7, #4]
 80081a8:	e002      	b.n	80081b0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80081aa:	f04f 33ff 	mov.w	r3, #4294967295
 80081ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081b0:	687b      	ldr	r3, [r7, #4]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	200007ac 	.word	0x200007ac

080081c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b08e      	sub	sp, #56	; 0x38
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80081cc:	2300      	movs	r3, #0
 80081ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081d0:	f3ef 8305 	mrs	r3, IPSR
 80081d4:	617b      	str	r3, [r7, #20]
  return(result);
 80081d6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d17e      	bne.n	80082da <osThreadNew+0x11a>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d07b      	beq.n	80082da <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80081e2:	2380      	movs	r3, #128	; 0x80
 80081e4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80081e6:	2318      	movs	r3, #24
 80081e8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80081ee:	f04f 33ff 	mov.w	r3, #4294967295
 80081f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d045      	beq.n	8008286 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d002      	beq.n	8008208 <osThreadNew+0x48>
        name = attr->name;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	699b      	ldr	r3, [r3, #24]
 8008214:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d008      	beq.n	800822e <osThreadNew+0x6e>
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	2b38      	cmp	r3, #56	; 0x38
 8008220:	d805      	bhi.n	800822e <osThreadNew+0x6e>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d001      	beq.n	8008232 <osThreadNew+0x72>
        return (NULL);
 800822e:	2300      	movs	r3, #0
 8008230:	e054      	b.n	80082dc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	089b      	lsrs	r3, r3, #2
 8008240:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00e      	beq.n	8008268 <osThreadNew+0xa8>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	2ba7      	cmp	r3, #167	; 0xa7
 8008250:	d90a      	bls.n	8008268 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008256:	2b00      	cmp	r3, #0
 8008258:	d006      	beq.n	8008268 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <osThreadNew+0xa8>
        mem = 1;
 8008262:	2301      	movs	r3, #1
 8008264:	61bb      	str	r3, [r7, #24]
 8008266:	e010      	b.n	800828a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d10c      	bne.n	800828a <osThreadNew+0xca>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d108      	bne.n	800828a <osThreadNew+0xca>
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	691b      	ldr	r3, [r3, #16]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <osThreadNew+0xca>
          mem = 0;
 8008280:	2300      	movs	r3, #0
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	e001      	b.n	800828a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008286:	2300      	movs	r3, #0
 8008288:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800828a:	69bb      	ldr	r3, [r7, #24]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d110      	bne.n	80082b2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008294:	687a      	ldr	r2, [r7, #4]
 8008296:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008298:	9202      	str	r2, [sp, #8]
 800829a:	9301      	str	r3, [sp, #4]
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	9300      	str	r3, [sp, #0]
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	6a3a      	ldr	r2, [r7, #32]
 80082a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f001 fa70 	bl	800978c <xTaskCreateStatic>
 80082ac:	4603      	mov	r3, r0
 80082ae:	613b      	str	r3, [r7, #16]
 80082b0:	e013      	b.n	80082da <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d110      	bne.n	80082da <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	f107 0310 	add.w	r3, r7, #16
 80082c0:	9301      	str	r3, [sp, #4]
 80082c2:	69fb      	ldr	r3, [r7, #28]
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f001 fabb 	bl	8009846 <xTaskCreate>
 80082d0:	4603      	mov	r3, r0
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d001      	beq.n	80082da <osThreadNew+0x11a>
            hTask = NULL;
 80082d6:	2300      	movs	r3, #0
 80082d8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80082da:	693b      	ldr	r3, [r7, #16]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3728      	adds	r7, #40	; 0x28
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b088      	sub	sp, #32
 80082e8:	af02      	add	r7, sp, #8
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d002      	beq.n	80082fe <osThreadFlagsSet+0x1a>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	da03      	bge.n	8008306 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 80082fe:	f06f 0303 	mvn.w	r3, #3
 8008302:	60fb      	str	r3, [r7, #12]
 8008304:	e035      	b.n	8008372 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8008306:	f04f 33ff 	mov.w	r3, #4294967295
 800830a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800830c:	f3ef 8305 	mrs	r3, IPSR
 8008310:	613b      	str	r3, [r7, #16]
  return(result);
 8008312:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8008314:	2b00      	cmp	r3, #0
 8008316:	d01f      	beq.n	8008358 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800831c:	f107 0308 	add.w	r3, r7, #8
 8008320:	9300      	str	r3, [sp, #0]
 8008322:	2300      	movs	r3, #0
 8008324:	2201      	movs	r2, #1
 8008326:	6839      	ldr	r1, [r7, #0]
 8008328:	6978      	ldr	r0, [r7, #20]
 800832a:	f002 fb2f 	bl	800a98c <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800832e:	f107 030c 	add.w	r3, r7, #12
 8008332:	2200      	movs	r2, #0
 8008334:	9200      	str	r2, [sp, #0]
 8008336:	2200      	movs	r2, #0
 8008338:	2100      	movs	r1, #0
 800833a:	6978      	ldr	r0, [r7, #20]
 800833c:	f002 fb26 	bl	800a98c <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d015      	beq.n	8008372 <osThreadFlagsSet+0x8e>
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <osThreadFlagsSet+0x98>)
 8008348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800834c:	601a      	str	r2, [r3, #0]
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	e00c      	b.n	8008372 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8008358:	2300      	movs	r3, #0
 800835a:	2201      	movs	r2, #1
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	6978      	ldr	r0, [r7, #20]
 8008360:	f002 fa56 	bl	800a810 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8008364:	f107 030c 	add.w	r3, r7, #12
 8008368:	2200      	movs	r2, #0
 800836a:	2100      	movs	r1, #0
 800836c:	6978      	ldr	r0, [r7, #20]
 800836e:	f002 fa4f 	bl	800a810 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8008372:	68fb      	ldr	r3, [r7, #12]
}
 8008374:	4618      	mov	r0, r3
 8008376:	3718      	adds	r7, #24
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	e000ed04 	.word	0xe000ed04

08008380 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b08c      	sub	sp, #48	; 0x30
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800838c:	f3ef 8305 	mrs	r3, IPSR
 8008390:	617b      	str	r3, [r7, #20]
  return(result);
 8008392:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8008394:	2b00      	cmp	r3, #0
 8008396:	d003      	beq.n	80083a0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8008398:	f06f 0305 	mvn.w	r3, #5
 800839c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839e:	e06b      	b.n	8008478 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	da03      	bge.n	80083ae <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 80083a6:	f06f 0303 	mvn.w	r3, #3
 80083aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ac:	e064      	b.n	8008478 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f003 0302 	and.w	r3, r3, #2
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d002      	beq.n	80083be <osThreadFlagsWait+0x3e>
      clear = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80083bc:	e001      	b.n	80083c2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 80083c2:	2300      	movs	r3, #0
 80083c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 80083ca:	f001 fce7 	bl	8009d9c <xTaskGetTickCount>
 80083ce:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 80083d0:	f107 0210 	add.w	r2, r7, #16
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083d8:	2000      	movs	r0, #0
 80083da:	f002 f9b9 	bl	800a750 <xTaskNotifyWait>
 80083de:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d137      	bne.n	8008456 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 80083e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4013      	ands	r3, r2
 80083ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083f2:	4313      	orrs	r3, r2
 80083f4:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00c      	beq.n	800841a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008404:	4013      	ands	r3, r2
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	429a      	cmp	r2, r3
 800840a:	d032      	beq.n	8008472 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10f      	bne.n	8008432 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8008412:	f06f 0302 	mvn.w	r3, #2
 8008416:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008418:	e02e      	b.n	8008478 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841e:	4013      	ands	r3, r2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d128      	bne.n	8008476 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d103      	bne.n	8008432 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 800842a:	f06f 0302 	mvn.w	r3, #2
 800842e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8008430:	e022      	b.n	8008478 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8008432:	f001 fcb3 	bl	8009d9c <xTaskGetTickCount>
 8008436:	4602      	mov	r2, r0
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	1ad3      	subs	r3, r2, r3
 800843c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008442:	429a      	cmp	r2, r3
 8008444:	d902      	bls.n	800844c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
 800844a:	e00e      	b.n	800846a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 800844c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800844e:	69bb      	ldr	r3, [r7, #24]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
 8008454:	e009      	b.n	800846a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d103      	bne.n	8008464 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 800845c:	f06f 0302 	mvn.w	r3, #2
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008462:	e002      	b.n	800846a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8008464:	f06f 0301 	mvn.w	r3, #1
 8008468:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d1af      	bne.n	80083d0 <osThreadFlagsWait+0x50>
 8008470:	e002      	b.n	8008478 <osThreadFlagsWait+0xf8>
            break;
 8008472:	bf00      	nop
 8008474:	e000      	b.n	8008478 <osThreadFlagsWait+0xf8>
            break;
 8008476:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8008478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800847a:	4618      	mov	r0, r3
 800847c:	3730      	adds	r7, #48	; 0x30
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008482:	b580      	push	{r7, lr}
 8008484:	b084      	sub	sp, #16
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800848a:	f3ef 8305 	mrs	r3, IPSR
 800848e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008490:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008492:	2b00      	cmp	r3, #0
 8008494:	d003      	beq.n	800849e <osDelay+0x1c>
    stat = osErrorISR;
 8008496:	f06f 0305 	mvn.w	r3, #5
 800849a:	60fb      	str	r3, [r7, #12]
 800849c:	e007      	b.n	80084ae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800849e:	2300      	movs	r3, #0
 80084a0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d002      	beq.n	80084ae <osDelay+0x2c>
      vTaskDelay(ticks);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fb27 	bl	8009afc <vTaskDelay>
    }
  }

  return (stat);
 80084ae:	68fb      	ldr	r3, [r7, #12]
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b088      	sub	sp, #32
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80084c0:	2300      	movs	r3, #0
 80084c2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084c4:	f3ef 8305 	mrs	r3, IPSR
 80084c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80084ca:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d174      	bne.n	80085ba <osMutexNew+0x102>
    if (attr != NULL) {
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d003      	beq.n	80084de <osMutexNew+0x26>
      type = attr->attr_bits;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	61bb      	str	r3, [r7, #24]
 80084dc:	e001      	b.n	80084e2 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f003 0301 	and.w	r3, r3, #1
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <osMutexNew+0x3a>
      rmtx = 1U;
 80084ec:	2301      	movs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
 80084f0:	e001      	b.n	80084f6 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80084f2:	2300      	movs	r3, #0
 80084f4:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d15c      	bne.n	80085ba <osMutexNew+0x102>
      mem = -1;
 8008500:	f04f 33ff 	mov.w	r3, #4294967295
 8008504:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d015      	beq.n	8008538 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d006      	beq.n	8008522 <osMutexNew+0x6a>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	2b4f      	cmp	r3, #79	; 0x4f
 800851a:	d902      	bls.n	8008522 <osMutexNew+0x6a>
          mem = 1;
 800851c:	2301      	movs	r3, #1
 800851e:	613b      	str	r3, [r7, #16]
 8008520:	e00c      	b.n	800853c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	689b      	ldr	r3, [r3, #8]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d108      	bne.n	800853c <osMutexNew+0x84>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d104      	bne.n	800853c <osMutexNew+0x84>
            mem = 0;
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	e001      	b.n	800853c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008538:	2300      	movs	r3, #0
 800853a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b01      	cmp	r3, #1
 8008540:	d112      	bne.n	8008568 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d007      	beq.n	8008558 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	4619      	mov	r1, r3
 800854e:	2004      	movs	r0, #4
 8008550:	f000 fb8b 	bl	8008c6a <xQueueCreateMutexStatic>
 8008554:	61f8      	str	r0, [r7, #28]
 8008556:	e016      	b.n	8008586 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	4619      	mov	r1, r3
 800855e:	2001      	movs	r0, #1
 8008560:	f000 fb83 	bl	8008c6a <xQueueCreateMutexStatic>
 8008564:	61f8      	str	r0, [r7, #28]
 8008566:	e00e      	b.n	8008586 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d10b      	bne.n	8008586 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d004      	beq.n	800857e <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008574:	2004      	movs	r0, #4
 8008576:	f000 fb60 	bl	8008c3a <xQueueCreateMutex>
 800857a:	61f8      	str	r0, [r7, #28]
 800857c:	e003      	b.n	8008586 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800857e:	2001      	movs	r0, #1
 8008580:	f000 fb5b 	bl	8008c3a <xQueueCreateMutex>
 8008584:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008586:	69fb      	ldr	r3, [r7, #28]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00c      	beq.n	80085a6 <osMutexNew+0xee>
        if (attr != NULL) {
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d003      	beq.n	800859a <osMutexNew+0xe2>
          name = attr->name;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	60fb      	str	r3, [r7, #12]
 8008598:	e001      	b.n	800859e <osMutexNew+0xe6>
        } else {
          name = NULL;
 800859a:	2300      	movs	r3, #0
 800859c:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800859e:	68f9      	ldr	r1, [r7, #12]
 80085a0:	69f8      	ldr	r0, [r7, #28]
 80085a2:	f001 f895 	bl	80096d0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d006      	beq.n	80085ba <osMutexNew+0x102>
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d003      	beq.n	80085ba <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f043 0301 	orr.w	r3, r3, #1
 80085b8:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80085ba:	69fb      	ldr	r3, [r7, #28]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3720      	adds	r7, #32
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b086      	sub	sp, #24
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f003 0301 	and.w	r3, r3, #1
 80085dc:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80085de:	2300      	movs	r3, #0
 80085e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085e2:	f3ef 8305 	mrs	r3, IPSR
 80085e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80085e8:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80085ee:	f06f 0305 	mvn.w	r3, #5
 80085f2:	617b      	str	r3, [r7, #20]
 80085f4:	e02c      	b.n	8008650 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d103      	bne.n	8008604 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80085fc:	f06f 0303 	mvn.w	r3, #3
 8008600:	617b      	str	r3, [r7, #20]
 8008602:	e025      	b.n	8008650 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d011      	beq.n	800862e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6938      	ldr	r0, [r7, #16]
 800860e:	f000 fb7b 	bl	8008d08 <xQueueTakeMutexRecursive>
 8008612:	4603      	mov	r3, r0
 8008614:	2b01      	cmp	r3, #1
 8008616:	d01b      	beq.n	8008650 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800861e:	f06f 0301 	mvn.w	r3, #1
 8008622:	617b      	str	r3, [r7, #20]
 8008624:	e014      	b.n	8008650 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008626:	f06f 0302 	mvn.w	r3, #2
 800862a:	617b      	str	r3, [r7, #20]
 800862c:	e010      	b.n	8008650 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6938      	ldr	r0, [r7, #16]
 8008632:	f000 fe19 	bl	8009268 <xQueueSemaphoreTake>
 8008636:	4603      	mov	r3, r0
 8008638:	2b01      	cmp	r3, #1
 800863a:	d009      	beq.n	8008650 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008642:	f06f 0301 	mvn.w	r3, #1
 8008646:	617b      	str	r3, [r7, #20]
 8008648:	e002      	b.n	8008650 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800864a:	f06f 0302 	mvn.w	r3, #2
 800864e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008650:	697b      	ldr	r3, [r7, #20]
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800865a:	b580      	push	{r7, lr}
 800865c:	b086      	sub	sp, #24
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f023 0301 	bic.w	r3, r3, #1
 8008668:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008676:	f3ef 8305 	mrs	r3, IPSR
 800867a:	60bb      	str	r3, [r7, #8]
  return(result);
 800867c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <osMutexRelease+0x30>
    stat = osErrorISR;
 8008682:	f06f 0305 	mvn.w	r3, #5
 8008686:	617b      	str	r3, [r7, #20]
 8008688:	e01f      	b.n	80086ca <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d103      	bne.n	8008698 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008690:	f06f 0303 	mvn.w	r3, #3
 8008694:	617b      	str	r3, [r7, #20]
 8008696:	e018      	b.n	80086ca <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800869e:	6938      	ldr	r0, [r7, #16]
 80086a0:	f000 fafe 	bl	8008ca0 <xQueueGiveMutexRecursive>
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d00f      	beq.n	80086ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80086aa:	f06f 0302 	mvn.w	r3, #2
 80086ae:	617b      	str	r3, [r7, #20]
 80086b0:	e00b      	b.n	80086ca <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80086b2:	2300      	movs	r3, #0
 80086b4:	2200      	movs	r2, #0
 80086b6:	2100      	movs	r1, #0
 80086b8:	6938      	ldr	r0, [r7, #16]
 80086ba:	f000 fb5b 	bl	8008d74 <xQueueGenericSend>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d002      	beq.n	80086ca <osMutexRelease+0x70>
        stat = osErrorResource;
 80086c4:	f06f 0302 	mvn.w	r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80086ca:	697b      	ldr	r3, [r7, #20]
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3718      	adds	r7, #24
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b08a      	sub	sp, #40	; 0x28
 80086d8:	af02      	add	r7, sp, #8
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086e4:	f3ef 8305 	mrs	r3, IPSR
 80086e8:	613b      	str	r3, [r7, #16]
  return(result);
 80086ea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d15f      	bne.n	80087b0 <osMessageQueueNew+0xdc>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d05c      	beq.n	80087b0 <osMessageQueueNew+0xdc>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d059      	beq.n	80087b0 <osMessageQueueNew+0xdc>
    mem = -1;
 80086fc:	f04f 33ff 	mov.w	r3, #4294967295
 8008700:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d029      	beq.n	800875c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d012      	beq.n	8008736 <osMessageQueueNew+0x62>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	2b4f      	cmp	r3, #79	; 0x4f
 8008716:	d90e      	bls.n	8008736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68b9      	ldr	r1, [r7, #8]
 8008728:	fb01 f303 	mul.w	r3, r1, r3
 800872c:	429a      	cmp	r2, r3
 800872e:	d302      	bcc.n	8008736 <osMessageQueueNew+0x62>
        mem = 1;
 8008730:	2301      	movs	r3, #1
 8008732:	61bb      	str	r3, [r7, #24]
 8008734:	e014      	b.n	8008760 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d110      	bne.n	8008760 <osMessageQueueNew+0x8c>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	68db      	ldr	r3, [r3, #12]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d10c      	bne.n	8008760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	d108      	bne.n	8008760 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	695b      	ldr	r3, [r3, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d104      	bne.n	8008760 <osMessageQueueNew+0x8c>
          mem = 0;
 8008756:	2300      	movs	r3, #0
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	e001      	b.n	8008760 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800875c:	2300      	movs	r3, #0
 800875e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d10b      	bne.n	800877e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	691a      	ldr	r2, [r3, #16]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	2100      	movs	r1, #0
 8008770:	9100      	str	r1, [sp, #0]
 8008772:	68b9      	ldr	r1, [r7, #8]
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f971 	bl	8008a5c <xQueueGenericCreateStatic>
 800877a:	61f8      	str	r0, [r7, #28]
 800877c:	e008      	b.n	8008790 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d105      	bne.n	8008790 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008784:	2200      	movs	r2, #0
 8008786:	68b9      	ldr	r1, [r7, #8]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	f000 f9df 	bl	8008b4c <xQueueGenericCreate>
 800878e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d003      	beq.n	80087a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	617b      	str	r3, [r7, #20]
 80087a2:	e001      	b.n	80087a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80087a4:	2300      	movs	r3, #0
 80087a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80087a8:	6979      	ldr	r1, [r7, #20]
 80087aa:	69f8      	ldr	r0, [r7, #28]
 80087ac:	f000 ff90 	bl	80096d0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80087b0:	69fb      	ldr	r3, [r7, #28]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3720      	adds	r7, #32
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
	...

080087bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4a07      	ldr	r2, [pc, #28]	; (80087e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80087cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4a06      	ldr	r2, [pc, #24]	; (80087ec <vApplicationGetIdleTaskMemory+0x30>)
 80087d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2280      	movs	r2, #128	; 0x80
 80087d8:	601a      	str	r2, [r3, #0]
}
 80087da:	bf00      	nop
 80087dc:	3714      	adds	r7, #20
 80087de:	46bd      	mov	sp, r7
 80087e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e4:	4770      	bx	lr
 80087e6:	bf00      	nop
 80087e8:	200007b0 	.word	0x200007b0
 80087ec:	20000858 	.word	0x20000858

080087f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	60f8      	str	r0, [r7, #12]
 80087f8:	60b9      	str	r1, [r7, #8]
 80087fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4a07      	ldr	r2, [pc, #28]	; (800881c <vApplicationGetTimerTaskMemory+0x2c>)
 8008800:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4a06      	ldr	r2, [pc, #24]	; (8008820 <vApplicationGetTimerTaskMemory+0x30>)
 8008806:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800880e:	601a      	str	r2, [r3, #0]
}
 8008810:	bf00      	nop
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	20000a58 	.word	0x20000a58
 8008820:	20000b00 	.word	0x20000b00

08008824 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f103 0208 	add.w	r2, r3, #8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f04f 32ff 	mov.w	r2, #4294967295
 800883c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f103 0208 	add.w	r2, r3, #8
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f103 0208 	add.w	r2, r3, #8
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008858:	bf00      	nop
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008862:	4770      	bx	lr

08008864 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008872:	bf00      	nop
 8008874:	370c      	adds	r7, #12
 8008876:	46bd      	mov	sp, r7
 8008878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887c:	4770      	bx	lr

0800887e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800887e:	b480      	push	{r7}
 8008880:	b085      	sub	sp, #20
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
 8008886:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	689b      	ldr	r3, [r3, #8]
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	1c5a      	adds	r2, r3, #1
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]
}
 80088ba:	bf00      	nop
 80088bc:	3714      	adds	r7, #20
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80088c6:	b480      	push	{r7}
 80088c8:	b085      	sub	sp, #20
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d103      	bne.n	80088e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	691b      	ldr	r3, [r3, #16]
 80088e2:	60fb      	str	r3, [r7, #12]
 80088e4:	e00c      	b.n	8008900 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3308      	adds	r3, #8
 80088ea:	60fb      	str	r3, [r7, #12]
 80088ec:	e002      	b.n	80088f4 <vListInsert+0x2e>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	60fb      	str	r3, [r7, #12]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d2f6      	bcs.n	80088ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	685a      	ldr	r2, [r3, #4]
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	683a      	ldr	r2, [r7, #0]
 800890e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	683a      	ldr	r2, [r7, #0]
 800891a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	687a      	ldr	r2, [r7, #4]
 8008920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	1c5a      	adds	r2, r3, #1
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	601a      	str	r2, [r3, #0]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	685b      	ldr	r3, [r3, #4]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	6892      	ldr	r2, [r2, #8]
 800894e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	6852      	ldr	r2, [r2, #4]
 8008958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d103      	bne.n	800896c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	1e5a      	subs	r2, r3, #1
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
}
 8008980:	4618      	mov	r0, r3
 8008982:	3714      	adds	r7, #20
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d10a      	bne.n	80089b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80089b2:	bf00      	nop
 80089b4:	e7fe      	b.n	80089b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80089b6:	f002 fd9d 	bl	800b4f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681a      	ldr	r2, [r3, #0]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089c6:	fb01 f303 	mul.w	r3, r1, r3
 80089ca:	441a      	add	r2, r3
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089e6:	3b01      	subs	r3, #1
 80089e8:	68f9      	ldr	r1, [r7, #12]
 80089ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80089ec:	fb01 f303 	mul.w	r3, r1, r3
 80089f0:	441a      	add	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	22ff      	movs	r2, #255	; 0xff
 80089fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	22ff      	movs	r2, #255	; 0xff
 8008a02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d114      	bne.n	8008a36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d01a      	beq.n	8008a4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	3310      	adds	r3, #16
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f001 fb3d 	bl	800a098 <xTaskRemoveFromEventList>
 8008a1e:	4603      	mov	r3, r0
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d012      	beq.n	8008a4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008a24:	4b0c      	ldr	r3, [pc, #48]	; (8008a58 <xQueueGenericReset+0xcc>)
 8008a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a2a:	601a      	str	r2, [r3, #0]
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	e009      	b.n	8008a4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3310      	adds	r3, #16
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7ff fef2 	bl	8008824 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	3324      	adds	r3, #36	; 0x24
 8008a44:	4618      	mov	r0, r3
 8008a46:	f7ff feed 	bl	8008824 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008a4a:	f002 fd83 	bl	800b554 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008a4e:	2301      	movs	r3, #1
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	3710      	adds	r7, #16
 8008a54:	46bd      	mov	sp, r7
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	e000ed04 	.word	0xe000ed04

08008a5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08e      	sub	sp, #56	; 0x38
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d10a      	bne.n	8008aa2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a90:	f383 8811 	msr	BASEPRI, r3
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008a9e:	bf00      	nop
 8008aa0:	e7fe      	b.n	8008aa0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <xQueueGenericCreateStatic+0x52>
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <xQueueGenericCreateStatic+0x56>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <xQueueGenericCreateStatic+0x58>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10a      	bne.n	8008ace <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	f383 8811 	msr	BASEPRI, r3
 8008ac0:	f3bf 8f6f 	isb	sy
 8008ac4:	f3bf 8f4f 	dsb	sy
 8008ac8:	623b      	str	r3, [r7, #32]
}
 8008aca:	bf00      	nop
 8008acc:	e7fe      	b.n	8008acc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d102      	bne.n	8008ada <xQueueGenericCreateStatic+0x7e>
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d101      	bne.n	8008ade <xQueueGenericCreateStatic+0x82>
 8008ada:	2301      	movs	r3, #1
 8008adc:	e000      	b.n	8008ae0 <xQueueGenericCreateStatic+0x84>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d10a      	bne.n	8008afa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae8:	f383 8811 	msr	BASEPRI, r3
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	f3bf 8f4f 	dsb	sy
 8008af4:	61fb      	str	r3, [r7, #28]
}
 8008af6:	bf00      	nop
 8008af8:	e7fe      	b.n	8008af8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008afa:	2350      	movs	r3, #80	; 0x50
 8008afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b50      	cmp	r3, #80	; 0x50
 8008b02:	d00a      	beq.n	8008b1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b08:	f383 8811 	msr	BASEPRI, r3
 8008b0c:	f3bf 8f6f 	isb	sy
 8008b10:	f3bf 8f4f 	dsb	sy
 8008b14:	61bb      	str	r3, [r7, #24]
}
 8008b16:	bf00      	nop
 8008b18:	e7fe      	b.n	8008b18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008b1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00d      	beq.n	8008b42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b28:	2201      	movs	r2, #1
 8008b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008b2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	4613      	mov	r3, r2
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 f83f 	bl	8008bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3730      	adds	r7, #48	; 0x30
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b08a      	sub	sp, #40	; 0x28
 8008b50:	af02      	add	r7, sp, #8
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4613      	mov	r3, r2
 8008b58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8008b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b64:	f383 8811 	msr	BASEPRI, r3
 8008b68:	f3bf 8f6f 	isb	sy
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	613b      	str	r3, [r7, #16]
}
 8008b72:	bf00      	nop
 8008b74:	e7fe      	b.n	8008b74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	fb02 f303 	mul.w	r3, r2, r3
 8008b7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	3350      	adds	r3, #80	; 0x50
 8008b84:	4618      	mov	r0, r3
 8008b86:	f002 fdd7 	bl	800b738 <pvPortMalloc>
 8008b8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d011      	beq.n	8008bb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	3350      	adds	r3, #80	; 0x50
 8008b9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008ba4:	79fa      	ldrb	r2, [r7, #7]
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	4613      	mov	r3, r2
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	68b9      	ldr	r1, [r7, #8]
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 f805 	bl	8008bc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008bb6:	69bb      	ldr	r3, [r7, #24]
	}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3720      	adds	r7, #32
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
 8008bcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008bce:	68bb      	ldr	r3, [r7, #8]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d103      	bne.n	8008bdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	69ba      	ldr	r2, [r7, #24]
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	e002      	b.n	8008be2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	687a      	ldr	r2, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008be2:	69bb      	ldr	r3, [r7, #24]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008be8:	69bb      	ldr	r3, [r7, #24]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008bee:	2101      	movs	r1, #1
 8008bf0:	69b8      	ldr	r0, [r7, #24]
 8008bf2:	f7ff fecb 	bl	800898c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008bf6:	69bb      	ldr	r3, [r7, #24]
 8008bf8:	78fa      	ldrb	r2, [r7, #3]
 8008bfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008bfe:	bf00      	nop
 8008c00:	3710      	adds	r7, #16
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008c06:	b580      	push	{r7, lr}
 8008c08:	b082      	sub	sp, #8
 8008c0a:	af00      	add	r7, sp, #0
 8008c0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00e      	beq.n	8008c32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2200      	movs	r2, #0
 8008c18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2200      	movs	r2, #0
 8008c24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8008c26:	2300      	movs	r3, #0
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 f8a1 	bl	8008d74 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008c32:	bf00      	nop
 8008c34:	3708      	adds	r7, #8
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}

08008c3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8008c3a:	b580      	push	{r7, lr}
 8008c3c:	b086      	sub	sp, #24
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	4603      	mov	r3, r0
 8008c42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c44:	2301      	movs	r3, #1
 8008c46:	617b      	str	r3, [r7, #20]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	6978      	ldr	r0, [r7, #20]
 8008c54:	f7ff ff7a 	bl	8008b4c <xQueueGenericCreate>
 8008c58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff ffd3 	bl	8008c06 <prvInitialiseMutex>

		return xNewQueue;
 8008c60:	68fb      	ldr	r3, [r7, #12]
	}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b088      	sub	sp, #32
 8008c6e:	af02      	add	r7, sp, #8
 8008c70:	4603      	mov	r3, r0
 8008c72:	6039      	str	r1, [r7, #0]
 8008c74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008c76:	2301      	movs	r3, #1
 8008c78:	617b      	str	r3, [r7, #20]
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	9300      	str	r3, [sp, #0]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2200      	movs	r2, #0
 8008c86:	6939      	ldr	r1, [r7, #16]
 8008c88:	6978      	ldr	r0, [r7, #20]
 8008c8a:	f7ff fee7 	bl	8008a5c <xQueueGenericCreateStatic>
 8008c8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff ffb8 	bl	8008c06 <prvInitialiseMutex>

		return xNewQueue;
 8008c96:	68fb      	ldr	r3, [r7, #12]
	}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3718      	adds	r7, #24
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}

08008ca0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008ca0:	b590      	push	{r4, r7, lr}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d10a      	bne.n	8008cc8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8008cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb6:	f383 8811 	msr	BASEPRI, r3
 8008cba:	f3bf 8f6f 	isb	sy
 8008cbe:	f3bf 8f4f 	dsb	sy
 8008cc2:	60fb      	str	r3, [r7, #12]
}
 8008cc4:	bf00      	nop
 8008cc6:	e7fe      	b.n	8008cc6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	689c      	ldr	r4, [r3, #8]
 8008ccc:	f001 fba6 	bl	800a41c <xTaskGetCurrentTaskHandle>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	429c      	cmp	r4, r3
 8008cd4:	d111      	bne.n	8008cfa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	1e5a      	subs	r2, r3, #1
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d105      	bne.n	8008cf4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008ce8:	2300      	movs	r3, #0
 8008cea:	2200      	movs	r2, #0
 8008cec:	2100      	movs	r1, #0
 8008cee:	6938      	ldr	r0, [r7, #16]
 8008cf0:	f000 f840 	bl	8008d74 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	617b      	str	r3, [r7, #20]
 8008cf8:	e001      	b.n	8008cfe <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008cfe:	697b      	ldr	r3, [r7, #20]
	}
 8008d00:	4618      	mov	r0, r3
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}

08008d08 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008d08:	b590      	push	{r4, r7, lr}
 8008d0a:	b087      	sub	sp, #28
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
 8008d10:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10a      	bne.n	8008d32 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8008d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d20:	f383 8811 	msr	BASEPRI, r3
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	f3bf 8f4f 	dsb	sy
 8008d2c:	60fb      	str	r3, [r7, #12]
}
 8008d2e:	bf00      	nop
 8008d30:	e7fe      	b.n	8008d30 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	689c      	ldr	r4, [r3, #8]
 8008d36:	f001 fb71 	bl	800a41c <xTaskGetCurrentTaskHandle>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d107      	bne.n	8008d50 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e00c      	b.n	8008d6a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6938      	ldr	r0, [r7, #16]
 8008d54:	f000 fa88 	bl	8009268 <xQueueSemaphoreTake>
 8008d58:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d004      	beq.n	8008d6a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	1c5a      	adds	r2, r3, #1
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008d6a:	697b      	ldr	r3, [r7, #20]
	}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd90      	pop	{r4, r7, pc}

08008d74 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08e      	sub	sp, #56	; 0x38
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d82:	2300      	movs	r3, #0
 8008d84:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xQueueGenericSend+0x32>
	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d103      	bne.n	8008db4 <xQueueGenericSend+0x40>
 8008dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <xQueueGenericSend+0x44>
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <xQueueGenericSend+0x46>
 8008db8:	2300      	movs	r3, #0
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d10a      	bne.n	8008dd4 <xQueueGenericSend+0x60>
	__asm volatile
 8008dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc2:	f383 8811 	msr	BASEPRI, r3
 8008dc6:	f3bf 8f6f 	isb	sy
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008dd0:	bf00      	nop
 8008dd2:	e7fe      	b.n	8008dd2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b02      	cmp	r3, #2
 8008dd8:	d103      	bne.n	8008de2 <xQueueGenericSend+0x6e>
 8008dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d101      	bne.n	8008de6 <xQueueGenericSend+0x72>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <xQueueGenericSend+0x74>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueGenericSend+0x8e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	623b      	str	r3, [r7, #32]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e02:	f001 fb1b 	bl	800a43c <xTaskGetSchedulerState>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d102      	bne.n	8008e12 <xQueueGenericSend+0x9e>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <xQueueGenericSend+0xa2>
 8008e12:	2301      	movs	r3, #1
 8008e14:	e000      	b.n	8008e18 <xQueueGenericSend+0xa4>
 8008e16:	2300      	movs	r3, #0
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d10a      	bne.n	8008e32 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	61fb      	str	r3, [r7, #28]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e32:	f002 fb5f 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d302      	bcc.n	8008e48 <xQueueGenericSend+0xd4>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d129      	bne.n	8008e9c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e48:	683a      	ldr	r2, [r7, #0]
 8008e4a:	68b9      	ldr	r1, [r7, #8]
 8008e4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e4e:	f000 fb2f 	bl	80094b0 <prvCopyDataToQueue>
 8008e52:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d010      	beq.n	8008e7e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	3324      	adds	r3, #36	; 0x24
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 f919 	bl	800a098 <xTaskRemoveFromEventList>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d013      	beq.n	8008e94 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b3f      	ldr	r3, [pc, #252]	; (8008f6c <xQueueGenericSend+0x1f8>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e00a      	b.n	8008e94 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e84:	4b39      	ldr	r3, [pc, #228]	; (8008f6c <xQueueGenericSend+0x1f8>)
 8008e86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e8a:	601a      	str	r2, [r3, #0]
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e94:	f002 fb5e 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e063      	b.n	8008f64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d103      	bne.n	8008eaa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ea2:	f002 fb57 	bl	800b554 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e05c      	b.n	8008f64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d106      	bne.n	8008ebe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008eb0:	f107 0314 	add.w	r3, r7, #20
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f953 	bl	800a160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008eba:	2301      	movs	r3, #1
 8008ebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008ebe:	f002 fb49 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ec2:	f000 febf 	bl	8009c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ec6:	f002 fb15 	bl	800b4f4 <vPortEnterCritical>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ed0:	b25b      	sxtb	r3, r3
 8008ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ed6:	d103      	bne.n	8008ee0 <xQueueGenericSend+0x16c>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	2200      	movs	r2, #0
 8008edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ee6:	b25b      	sxtb	r3, r3
 8008ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eec:	d103      	bne.n	8008ef6 <xQueueGenericSend+0x182>
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ef6:	f002 fb2d 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008efa:	1d3a      	adds	r2, r7, #4
 8008efc:	f107 0314 	add.w	r3, r7, #20
 8008f00:	4611      	mov	r1, r2
 8008f02:	4618      	mov	r0, r3
 8008f04:	f001 f942 	bl	800a18c <xTaskCheckForTimeOut>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d124      	bne.n	8008f58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f10:	f000 fbc6 	bl	80096a0 <prvIsQueueFull>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d018      	beq.n	8008f4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	3310      	adds	r3, #16
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4611      	mov	r1, r2
 8008f22:	4618      	mov	r0, r3
 8008f24:	f001 f868 	bl	8009ff8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f2a:	f000 fb51 	bl	80095d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f2e:	f000 fe97 	bl	8009c60 <xTaskResumeAll>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	f47f af7c 	bne.w	8008e32 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f3a:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <xQueueGenericSend+0x1f8>)
 8008f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f40:	601a      	str	r2, [r3, #0]
 8008f42:	f3bf 8f4f 	dsb	sy
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	e772      	b.n	8008e32 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f4e:	f000 fb3f 	bl	80095d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f52:	f000 fe85 	bl	8009c60 <xTaskResumeAll>
 8008f56:	e76c      	b.n	8008e32 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f5a:	f000 fb39 	bl	80095d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f5e:	f000 fe7f 	bl	8009c60 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3738      	adds	r7, #56	; 0x38
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	e000ed04 	.word	0xe000ed04

08008f70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b090      	sub	sp, #64	; 0x40
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d103      	bne.n	8008fac <xQueueGenericSendFromISR+0x3c>
 8008fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <xQueueGenericSendFromISR+0x40>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <xQueueGenericSendFromISR+0x42>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d10a      	bne.n	8008fcc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fba:	f383 8811 	msr	BASEPRI, r3
 8008fbe:	f3bf 8f6f 	isb	sy
 8008fc2:	f3bf 8f4f 	dsb	sy
 8008fc6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fc8:	bf00      	nop
 8008fca:	e7fe      	b.n	8008fca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d103      	bne.n	8008fda <xQueueGenericSendFromISR+0x6a>
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d101      	bne.n	8008fde <xQueueGenericSendFromISR+0x6e>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e000      	b.n	8008fe0 <xQueueGenericSendFromISR+0x70>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d10a      	bne.n	8008ffa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe8:	f383 8811 	msr	BASEPRI, r3
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f3bf 8f4f 	dsb	sy
 8008ff4:	623b      	str	r3, [r7, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	e7fe      	b.n	8008ff8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ffa:	f002 fb5d 	bl	800b6b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008ffe:	f3ef 8211 	mrs	r2, BASEPRI
 8009002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009006:	f383 8811 	msr	BASEPRI, r3
 800900a:	f3bf 8f6f 	isb	sy
 800900e:	f3bf 8f4f 	dsb	sy
 8009012:	61fa      	str	r2, [r7, #28]
 8009014:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009016:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009018:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800901a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800901e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009022:	429a      	cmp	r2, r3
 8009024:	d302      	bcc.n	800902c <xQueueGenericSendFromISR+0xbc>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b02      	cmp	r3, #2
 800902a:	d12f      	bne.n	800908c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800902c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800903c:	683a      	ldr	r2, [r7, #0]
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009042:	f000 fa35 	bl	80094b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009046:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800904a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800904e:	d112      	bne.n	8009076 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d016      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	3324      	adds	r3, #36	; 0x24
 800905c:	4618      	mov	r0, r3
 800905e:	f001 f81b 	bl	800a098 <xTaskRemoveFromEventList>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d00e      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	601a      	str	r2, [r3, #0]
 8009074:	e007      	b.n	8009086 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009076:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800907a:	3301      	adds	r3, #1
 800907c:	b2db      	uxtb	r3, r3
 800907e:	b25a      	sxtb	r2, r3
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009086:	2301      	movs	r3, #1
 8009088:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800908a:	e001      	b.n	8009090 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800908c:	2300      	movs	r3, #0
 800908e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009092:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800909a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800909c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3740      	adds	r7, #64	; 0x40
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b08c      	sub	sp, #48	; 0x30
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80090b4:	2300      	movs	r3, #0
 80090b6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <xQueueReceive+0x30>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	623b      	str	r3, [r7, #32]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d103      	bne.n	80090e6 <xQueueReceive+0x3e>
 80090de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d101      	bne.n	80090ea <xQueueReceive+0x42>
 80090e6:	2301      	movs	r3, #1
 80090e8:	e000      	b.n	80090ec <xQueueReceive+0x44>
 80090ea:	2300      	movs	r3, #0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d10a      	bne.n	8009106 <xQueueReceive+0x5e>
	__asm volatile
 80090f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f4:	f383 8811 	msr	BASEPRI, r3
 80090f8:	f3bf 8f6f 	isb	sy
 80090fc:	f3bf 8f4f 	dsb	sy
 8009100:	61fb      	str	r3, [r7, #28]
}
 8009102:	bf00      	nop
 8009104:	e7fe      	b.n	8009104 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009106:	f001 f999 	bl	800a43c <xTaskGetSchedulerState>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d102      	bne.n	8009116 <xQueueReceive+0x6e>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	d101      	bne.n	800911a <xQueueReceive+0x72>
 8009116:	2301      	movs	r3, #1
 8009118:	e000      	b.n	800911c <xQueueReceive+0x74>
 800911a:	2300      	movs	r3, #0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10a      	bne.n	8009136 <xQueueReceive+0x8e>
	__asm volatile
 8009120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009124:	f383 8811 	msr	BASEPRI, r3
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	f3bf 8f4f 	dsb	sy
 8009130:	61bb      	str	r3, [r7, #24]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009136:	f002 f9dd 	bl	800b4f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800913e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01f      	beq.n	8009186 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800914a:	f000 fa1b 	bl	8009584 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800914e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009150:	1e5a      	subs	r2, r3, #1
 8009152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009154:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	691b      	ldr	r3, [r3, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d00f      	beq.n	800917e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	3310      	adds	r3, #16
 8009162:	4618      	mov	r0, r3
 8009164:	f000 ff98 	bl	800a098 <xTaskRemoveFromEventList>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d007      	beq.n	800917e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800916e:	4b3d      	ldr	r3, [pc, #244]	; (8009264 <xQueueReceive+0x1bc>)
 8009170:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009174:	601a      	str	r2, [r3, #0]
 8009176:	f3bf 8f4f 	dsb	sy
 800917a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800917e:	f002 f9e9 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 8009182:	2301      	movs	r3, #1
 8009184:	e069      	b.n	800925a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d103      	bne.n	8009194 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800918c:	f002 f9e2 	bl	800b554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009190:	2300      	movs	r3, #0
 8009192:	e062      	b.n	800925a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d106      	bne.n	80091a8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800919a:	f107 0310 	add.w	r3, r7, #16
 800919e:	4618      	mov	r0, r3
 80091a0:	f000 ffde 	bl	800a160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091a8:	f002 f9d4 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091ac:	f000 fd4a 	bl	8009c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091b0:	f002 f9a0 	bl	800b4f4 <vPortEnterCritical>
 80091b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ba:	b25b      	sxtb	r3, r3
 80091bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091c0:	d103      	bne.n	80091ca <xQueueReceive+0x122>
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	2200      	movs	r2, #0
 80091c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091d0:	b25b      	sxtb	r3, r3
 80091d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d6:	d103      	bne.n	80091e0 <xQueueReceive+0x138>
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091e0:	f002 f9b8 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091e4:	1d3a      	adds	r2, r7, #4
 80091e6:	f107 0310 	add.w	r3, r7, #16
 80091ea:	4611      	mov	r1, r2
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 ffcd 	bl	800a18c <xTaskCheckForTimeOut>
 80091f2:	4603      	mov	r3, r0
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d123      	bne.n	8009240 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80091fa:	f000 fa3b 	bl	8009674 <prvIsQueueEmpty>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d017      	beq.n	8009234 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009206:	3324      	adds	r3, #36	; 0x24
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	4611      	mov	r1, r2
 800920c:	4618      	mov	r0, r3
 800920e:	f000 fef3 	bl	8009ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009212:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009214:	f000 f9dc 	bl	80095d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009218:	f000 fd22 	bl	8009c60 <xTaskResumeAll>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d189      	bne.n	8009136 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009222:	4b10      	ldr	r3, [pc, #64]	; (8009264 <xQueueReceive+0x1bc>)
 8009224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009228:	601a      	str	r2, [r3, #0]
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	f3bf 8f6f 	isb	sy
 8009232:	e780      	b.n	8009136 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009234:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009236:	f000 f9cb 	bl	80095d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800923a:	f000 fd11 	bl	8009c60 <xTaskResumeAll>
 800923e:	e77a      	b.n	8009136 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009240:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009242:	f000 f9c5 	bl	80095d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009246:	f000 fd0b 	bl	8009c60 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800924a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924c:	f000 fa12 	bl	8009674 <prvIsQueueEmpty>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	f43f af6f 	beq.w	8009136 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009258:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800925a:	4618      	mov	r0, r3
 800925c:	3730      	adds	r7, #48	; 0x30
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}
 8009262:	bf00      	nop
 8009264:	e000ed04 	.word	0xe000ed04

08009268 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b08e      	sub	sp, #56	; 0x38
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009272:	2300      	movs	r3, #0
 8009274:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800927a:	2300      	movs	r3, #0
 800927c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	2b00      	cmp	r3, #0
 8009282:	d10a      	bne.n	800929a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009288:	f383 8811 	msr	BASEPRI, r3
 800928c:	f3bf 8f6f 	isb	sy
 8009290:	f3bf 8f4f 	dsb	sy
 8009294:	623b      	str	r3, [r7, #32]
}
 8009296:	bf00      	nop
 8009298:	e7fe      	b.n	8009298 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800929a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800929c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00a      	beq.n	80092b8 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80092a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	61fb      	str	r3, [r7, #28]
}
 80092b4:	bf00      	nop
 80092b6:	e7fe      	b.n	80092b6 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092b8:	f001 f8c0 	bl	800a43c <xTaskGetSchedulerState>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d102      	bne.n	80092c8 <xQueueSemaphoreTake+0x60>
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d101      	bne.n	80092cc <xQueueSemaphoreTake+0x64>
 80092c8:	2301      	movs	r3, #1
 80092ca:	e000      	b.n	80092ce <xQueueSemaphoreTake+0x66>
 80092cc:	2300      	movs	r3, #0
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	61bb      	str	r3, [r7, #24]
}
 80092e4:	bf00      	nop
 80092e6:	e7fe      	b.n	80092e6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092e8:	f002 f904 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d024      	beq.n	8009342 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	1e5a      	subs	r2, r3, #1
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009308:	f001 fa0e 	bl	800a728 <pvTaskIncrementMutexHeldCount>
 800930c:	4602      	mov	r2, r0
 800930e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009310:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00f      	beq.n	800933a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800931a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931c:	3310      	adds	r3, #16
 800931e:	4618      	mov	r0, r3
 8009320:	f000 feba 	bl	800a098 <xTaskRemoveFromEventList>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d007      	beq.n	800933a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800932a:	4b54      	ldr	r3, [pc, #336]	; (800947c <xQueueSemaphoreTake+0x214>)
 800932c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800933a:	f002 f90b 	bl	800b554 <vPortExitCritical>
				return pdPASS;
 800933e:	2301      	movs	r3, #1
 8009340:	e097      	b.n	8009472 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d111      	bne.n	800936c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00a      	beq.n	8009364 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800934e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009352:	f383 8811 	msr	BASEPRI, r3
 8009356:	f3bf 8f6f 	isb	sy
 800935a:	f3bf 8f4f 	dsb	sy
 800935e:	617b      	str	r3, [r7, #20]
}
 8009360:	bf00      	nop
 8009362:	e7fe      	b.n	8009362 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009364:	f002 f8f6 	bl	800b554 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009368:	2300      	movs	r3, #0
 800936a:	e082      	b.n	8009472 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800936c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800936e:	2b00      	cmp	r3, #0
 8009370:	d106      	bne.n	8009380 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009372:	f107 030c 	add.w	r3, r7, #12
 8009376:	4618      	mov	r0, r3
 8009378:	f000 fef2 	bl	800a160 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800937c:	2301      	movs	r3, #1
 800937e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009380:	f002 f8e8 	bl	800b554 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009384:	f000 fc5e 	bl	8009c44 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009388:	f002 f8b4 	bl	800b4f4 <vPortEnterCritical>
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009392:	b25b      	sxtb	r3, r3
 8009394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009398:	d103      	bne.n	80093a2 <xQueueSemaphoreTake+0x13a>
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800939c:	2200      	movs	r2, #0
 800939e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093a8:	b25b      	sxtb	r3, r3
 80093aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ae:	d103      	bne.n	80093b8 <xQueueSemaphoreTake+0x150>
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	2200      	movs	r2, #0
 80093b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093b8:	f002 f8cc 	bl	800b554 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093bc:	463a      	mov	r2, r7
 80093be:	f107 030c 	add.w	r3, r7, #12
 80093c2:	4611      	mov	r1, r2
 80093c4:	4618      	mov	r0, r3
 80093c6:	f000 fee1 	bl	800a18c <xTaskCheckForTimeOut>
 80093ca:	4603      	mov	r3, r0
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d132      	bne.n	8009436 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093d2:	f000 f94f 	bl	8009674 <prvIsQueueEmpty>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d026      	beq.n	800942a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d109      	bne.n	80093f8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80093e4:	f002 f886 	bl	800b4f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f001 f843 	bl	800a478 <xTaskPriorityInherit>
 80093f2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80093f4:	f002 f8ae 	bl	800b554 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fa:	3324      	adds	r3, #36	; 0x24
 80093fc:	683a      	ldr	r2, [r7, #0]
 80093fe:	4611      	mov	r1, r2
 8009400:	4618      	mov	r0, r3
 8009402:	f000 fdf9 	bl	8009ff8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009408:	f000 f8e2 	bl	80095d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800940c:	f000 fc28 	bl	8009c60 <xTaskResumeAll>
 8009410:	4603      	mov	r3, r0
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f af68 	bne.w	80092e8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009418:	4b18      	ldr	r3, [pc, #96]	; (800947c <xQueueSemaphoreTake+0x214>)
 800941a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	f3bf 8f4f 	dsb	sy
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	e75e      	b.n	80092e8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800942a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800942c:	f000 f8d0 	bl	80095d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009430:	f000 fc16 	bl	8009c60 <xTaskResumeAll>
 8009434:	e758      	b.n	80092e8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009436:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009438:	f000 f8ca 	bl	80095d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800943c:	f000 fc10 	bl	8009c60 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009440:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009442:	f000 f917 	bl	8009674 <prvIsQueueEmpty>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	f43f af4d 	beq.w	80092e8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	2b00      	cmp	r3, #0
 8009452:	d00d      	beq.n	8009470 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009454:	f002 f84e 	bl	800b4f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800945a:	f000 f811 	bl	8009480 <prvGetDisinheritPriorityAfterTimeout>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009466:	4618      	mov	r0, r3
 8009468:	f001 f8dc 	bl	800a624 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800946c:	f002 f872 	bl	800b554 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009470:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009472:	4618      	mov	r0, r3
 8009474:	3738      	adds	r7, #56	; 0x38
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	2b00      	cmp	r3, #0
 800948e:	d006      	beq.n	800949e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800949a:	60fb      	str	r3, [r7, #12]
 800949c:	e001      	b.n	80094a2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800949e:	2300      	movs	r3, #0
 80094a0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80094a2:	68fb      	ldr	r3, [r7, #12]
	}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3714      	adds	r7, #20
 80094a8:	46bd      	mov	sp, r7
 80094aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ae:	4770      	bx	lr

080094b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b086      	sub	sp, #24
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094bc:	2300      	movs	r3, #0
 80094be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d10d      	bne.n	80094ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d14d      	bne.n	8009572 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	4618      	mov	r0, r3
 80094dc:	f001 f834 	bl	800a548 <xTaskPriorityDisinherit>
 80094e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	e043      	b.n	8009572 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d119      	bne.n	8009524 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6858      	ldr	r0, [r3, #4]
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f8:	461a      	mov	r2, r3
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	f002 fbb0 	bl	800bc60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009508:	441a      	add	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	685a      	ldr	r2, [r3, #4]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	429a      	cmp	r2, r3
 8009518:	d32b      	bcc.n	8009572 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	e026      	b.n	8009572 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68d8      	ldr	r0, [r3, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	461a      	mov	r2, r3
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	f002 fb96 	bl	800bc60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	68da      	ldr	r2, [r3, #12]
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	425b      	negs	r3, r3
 800953e:	441a      	add	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68da      	ldr	r2, [r3, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d207      	bcs.n	8009560 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	689a      	ldr	r2, [r3, #8]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009558:	425b      	negs	r3, r3
 800955a:	441a      	add	r2, r3
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b02      	cmp	r3, #2
 8009564:	d105      	bne.n	8009572 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	3b01      	subs	r3, #1
 8009570:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	1c5a      	adds	r2, r3, #1
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800957a:	697b      	ldr	r3, [r7, #20]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3718      	adds	r7, #24
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009592:	2b00      	cmp	r3, #0
 8009594:	d018      	beq.n	80095c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	68da      	ldr	r2, [r3, #12]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800959e:	441a      	add	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	68da      	ldr	r2, [r3, #12]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d303      	bcc.n	80095b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68d9      	ldr	r1, [r3, #12]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	461a      	mov	r2, r3
 80095c2:	6838      	ldr	r0, [r7, #0]
 80095c4:	f002 fb4c 	bl	800bc60 <memcpy>
	}
}
 80095c8:	bf00      	nop
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095d8:	f001 ff8c 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095e4:	e011      	b.n	800960a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d012      	beq.n	8009614 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	3324      	adds	r3, #36	; 0x24
 80095f2:	4618      	mov	r0, r3
 80095f4:	f000 fd50 	bl	800a098 <xTaskRemoveFromEventList>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095fe:	f000 fe27 	bl	800a250 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	3b01      	subs	r3, #1
 8009606:	b2db      	uxtb	r3, r3
 8009608:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800960a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800960e:	2b00      	cmp	r3, #0
 8009610:	dce9      	bgt.n	80095e6 <prvUnlockQueue+0x16>
 8009612:	e000      	b.n	8009616 <prvUnlockQueue+0x46>
					break;
 8009614:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	22ff      	movs	r2, #255	; 0xff
 800961a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800961e:	f001 ff99 	bl	800b554 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009622:	f001 ff67 	bl	800b4f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800962c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800962e:	e011      	b.n	8009654 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d012      	beq.n	800965e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3310      	adds	r3, #16
 800963c:	4618      	mov	r0, r3
 800963e:	f000 fd2b 	bl	800a098 <xTaskRemoveFromEventList>
 8009642:	4603      	mov	r3, r0
 8009644:	2b00      	cmp	r3, #0
 8009646:	d001      	beq.n	800964c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009648:	f000 fe02 	bl	800a250 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800964c:	7bbb      	ldrb	r3, [r7, #14]
 800964e:	3b01      	subs	r3, #1
 8009650:	b2db      	uxtb	r3, r3
 8009652:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009654:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009658:	2b00      	cmp	r3, #0
 800965a:	dce9      	bgt.n	8009630 <prvUnlockQueue+0x60>
 800965c:	e000      	b.n	8009660 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800965e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	22ff      	movs	r2, #255	; 0xff
 8009664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009668:	f001 ff74 	bl	800b554 <vPortExitCritical>
}
 800966c:	bf00      	nop
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800967c:	f001 ff3a 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	2b00      	cmp	r3, #0
 8009686:	d102      	bne.n	800968e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009688:	2301      	movs	r3, #1
 800968a:	60fb      	str	r3, [r7, #12]
 800968c:	e001      	b.n	8009692 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800968e:	2300      	movs	r3, #0
 8009690:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009692:	f001 ff5f 	bl	800b554 <vPortExitCritical>

	return xReturn;
 8009696:	68fb      	ldr	r3, [r7, #12]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096a8:	f001 ff24 	bl	800b4f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d102      	bne.n	80096be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096b8:	2301      	movs	r3, #1
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	e001      	b.n	80096c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096be:	2300      	movs	r3, #0
 80096c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096c2:	f001 ff47 	bl	800b554 <vPortExitCritical>

	return xReturn;
 80096c6:	68fb      	ldr	r3, [r7, #12]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3710      	adds	r7, #16
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096da:	2300      	movs	r3, #0
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	e014      	b.n	800970a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096e0:	4a0f      	ldr	r2, [pc, #60]	; (8009720 <vQueueAddToRegistry+0x50>)
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d10b      	bne.n	8009704 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096ec:	490c      	ldr	r1, [pc, #48]	; (8009720 <vQueueAddToRegistry+0x50>)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	683a      	ldr	r2, [r7, #0]
 80096f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096f6:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <vQueueAddToRegistry+0x50>)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	00db      	lsls	r3, r3, #3
 80096fc:	4413      	add	r3, r2
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009702:	e006      	b.n	8009712 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	3301      	adds	r3, #1
 8009708:	60fb      	str	r3, [r7, #12]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b07      	cmp	r3, #7
 800970e:	d9e7      	bls.n	80096e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009710:	bf00      	nop
 8009712:	bf00      	nop
 8009714:	3714      	adds	r7, #20
 8009716:	46bd      	mov	sp, r7
 8009718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	20000f00 	.word	0x20000f00

08009724 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009724:	b580      	push	{r7, lr}
 8009726:	b086      	sub	sp, #24
 8009728:	af00      	add	r7, sp, #0
 800972a:	60f8      	str	r0, [r7, #12]
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009734:	f001 fede 	bl	800b4f4 <vPortEnterCritical>
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800973e:	b25b      	sxtb	r3, r3
 8009740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009744:	d103      	bne.n	800974e <vQueueWaitForMessageRestricted+0x2a>
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009754:	b25b      	sxtb	r3, r3
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d103      	bne.n	8009764 <vQueueWaitForMessageRestricted+0x40>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	2200      	movs	r2, #0
 8009760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009764:	f001 fef6 	bl	800b554 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	2b00      	cmp	r3, #0
 800976e:	d106      	bne.n	800977e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	3324      	adds	r3, #36	; 0x24
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	68b9      	ldr	r1, [r7, #8]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 fc61 	bl	800a040 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800977e:	6978      	ldr	r0, [r7, #20]
 8009780:	f7ff ff26 	bl	80095d0 <prvUnlockQueue>
	}
 8009784:	bf00      	nop
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08e      	sub	sp, #56	; 0x38
 8009790:	af04      	add	r7, sp, #16
 8009792:	60f8      	str	r0, [r7, #12]
 8009794:	60b9      	str	r1, [r7, #8]
 8009796:	607a      	str	r2, [r7, #4]
 8009798:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800979a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10a      	bne.n	80097b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	f383 8811 	msr	BASEPRI, r3
 80097a8:	f3bf 8f6f 	isb	sy
 80097ac:	f3bf 8f4f 	dsb	sy
 80097b0:	623b      	str	r3, [r7, #32]
}
 80097b2:	bf00      	nop
 80097b4:	e7fe      	b.n	80097b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	61fb      	str	r3, [r7, #28]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097d2:	23a8      	movs	r3, #168	; 0xa8
 80097d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	2ba8      	cmp	r3, #168	; 0xa8
 80097da:	d00a      	beq.n	80097f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	61bb      	str	r3, [r7, #24]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d01e      	beq.n	8009838 <xTaskCreateStatic+0xac>
 80097fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d01b      	beq.n	8009838 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009806:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009808:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980c:	2202      	movs	r2, #2
 800980e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009812:	2300      	movs	r3, #0
 8009814:	9303      	str	r3, [sp, #12]
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	9302      	str	r3, [sp, #8]
 800981a:	f107 0314 	add.w	r3, r7, #20
 800981e:	9301      	str	r3, [sp, #4]
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	9300      	str	r3, [sp, #0]
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	68b9      	ldr	r1, [r7, #8]
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 f850 	bl	80098d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009832:	f000 f8f3 	bl	8009a1c <prvAddNewTaskToReadyList>
 8009836:	e001      	b.n	800983c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800983c:	697b      	ldr	r3, [r7, #20]
	}
 800983e:	4618      	mov	r0, r3
 8009840:	3728      	adds	r7, #40	; 0x28
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009846:	b580      	push	{r7, lr}
 8009848:	b08c      	sub	sp, #48	; 0x30
 800984a:	af04      	add	r7, sp, #16
 800984c:	60f8      	str	r0, [r7, #12]
 800984e:	60b9      	str	r1, [r7, #8]
 8009850:	603b      	str	r3, [r7, #0]
 8009852:	4613      	mov	r3, r2
 8009854:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009856:	88fb      	ldrh	r3, [r7, #6]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	4618      	mov	r0, r3
 800985c:	f001 ff6c 	bl	800b738 <pvPortMalloc>
 8009860:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009862:	697b      	ldr	r3, [r7, #20]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d00e      	beq.n	8009886 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009868:	20a8      	movs	r0, #168	; 0xa8
 800986a:	f001 ff65 	bl	800b738 <pvPortMalloc>
 800986e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d003      	beq.n	800987e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	697a      	ldr	r2, [r7, #20]
 800987a:	631a      	str	r2, [r3, #48]	; 0x30
 800987c:	e005      	b.n	800988a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800987e:	6978      	ldr	r0, [r7, #20]
 8009880:	f002 f826 	bl	800b8d0 <vPortFree>
 8009884:	e001      	b.n	800988a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009886:	2300      	movs	r3, #0
 8009888:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d017      	beq.n	80098c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2200      	movs	r2, #0
 8009894:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009898:	88fa      	ldrh	r2, [r7, #6]
 800989a:	2300      	movs	r3, #0
 800989c:	9303      	str	r3, [sp, #12]
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	9302      	str	r3, [sp, #8]
 80098a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a4:	9301      	str	r3, [sp, #4]
 80098a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a8:	9300      	str	r3, [sp, #0]
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	68b9      	ldr	r1, [r7, #8]
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f80e 	bl	80098d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098b4:	69f8      	ldr	r0, [r7, #28]
 80098b6:	f000 f8b1 	bl	8009a1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098ba:	2301      	movs	r3, #1
 80098bc:	61bb      	str	r3, [r7, #24]
 80098be:	e002      	b.n	80098c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098c0:	f04f 33ff 	mov.w	r3, #4294967295
 80098c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098c6:	69bb      	ldr	r3, [r7, #24]
	}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
 80098dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	461a      	mov	r2, r3
 80098e8:	21a5      	movs	r1, #165	; 0xa5
 80098ea:	f002 f92f 	bl	800bb4c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098f8:	3b01      	subs	r3, #1
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	4413      	add	r3, r2
 80098fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009900:	69bb      	ldr	r3, [r7, #24]
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	2b00      	cmp	r3, #0
 8009910:	d00a      	beq.n	8009928 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009916:	f383 8811 	msr	BASEPRI, r3
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	f3bf 8f4f 	dsb	sy
 8009922:	617b      	str	r3, [r7, #20]
}
 8009924:	bf00      	nop
 8009926:	e7fe      	b.n	8009926 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d01f      	beq.n	800996e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800992e:	2300      	movs	r3, #0
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	e012      	b.n	800995a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	69fb      	ldr	r3, [r7, #28]
 8009938:	4413      	add	r3, r2
 800993a:	7819      	ldrb	r1, [r3, #0]
 800993c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800993e:	69fb      	ldr	r3, [r7, #28]
 8009940:	4413      	add	r3, r2
 8009942:	3334      	adds	r3, #52	; 0x34
 8009944:	460a      	mov	r2, r1
 8009946:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009948:	68ba      	ldr	r2, [r7, #8]
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4413      	add	r3, r2
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d006      	beq.n	8009962 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009954:	69fb      	ldr	r3, [r7, #28]
 8009956:	3301      	adds	r3, #1
 8009958:	61fb      	str	r3, [r7, #28]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	2b0f      	cmp	r3, #15
 800995e:	d9e9      	bls.n	8009934 <prvInitialiseNewTask+0x64>
 8009960:	e000      	b.n	8009964 <prvInitialiseNewTask+0x94>
			{
				break;
 8009962:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800996c:	e003      	b.n	8009976 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	2200      	movs	r2, #0
 8009972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009978:	2b37      	cmp	r3, #55	; 0x37
 800997a:	d901      	bls.n	8009980 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800997c:	2337      	movs	r3, #55	; 0x37
 800997e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009984:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800998a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	2200      	movs	r2, #0
 8009990:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	3304      	adds	r3, #4
 8009996:	4618      	mov	r0, r3
 8009998:	f7fe ff64 	bl	8008864 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	3318      	adds	r3, #24
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe ff5f 	bl	8008864 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	2200      	movs	r2, #0
 80099c0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c6:	2200      	movs	r2, #0
 80099c8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ce:	3354      	adds	r3, #84	; 0x54
 80099d0:	224c      	movs	r2, #76	; 0x4c
 80099d2:	2100      	movs	r1, #0
 80099d4:	4618      	mov	r0, r3
 80099d6:	f002 f8b9 	bl	800bb4c <memset>
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	4a0c      	ldr	r2, [pc, #48]	; (8009a10 <prvInitialiseNewTask+0x140>)
 80099de:	659a      	str	r2, [r3, #88]	; 0x58
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	4a0c      	ldr	r2, [pc, #48]	; (8009a14 <prvInitialiseNewTask+0x144>)
 80099e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	4a0b      	ldr	r2, [pc, #44]	; (8009a18 <prvInitialiseNewTask+0x148>)
 80099ea:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099ec:	683a      	ldr	r2, [r7, #0]
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	69b8      	ldr	r0, [r7, #24]
 80099f2:	f001 fc51 	bl	800b298 <pxPortInitialiseStack>
 80099f6:	4602      	mov	r2, r0
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d002      	beq.n	8009a08 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a06:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a08:	bf00      	nop
 8009a0a:	3720      	adds	r7, #32
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	20005594 	.word	0x20005594
 8009a14:	200055fc 	.word	0x200055fc
 8009a18:	20005664 	.word	0x20005664

08009a1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a24:	f001 fd66 	bl	800b4f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a28:	4b2d      	ldr	r3, [pc, #180]	; (8009ae0 <prvAddNewTaskToReadyList+0xc4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	4a2c      	ldr	r2, [pc, #176]	; (8009ae0 <prvAddNewTaskToReadyList+0xc4>)
 8009a30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a32:	4b2c      	ldr	r3, [pc, #176]	; (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d109      	bne.n	8009a4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a3a:	4a2a      	ldr	r2, [pc, #168]	; (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a40:	4b27      	ldr	r3, [pc, #156]	; (8009ae0 <prvAddNewTaskToReadyList+0xc4>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d110      	bne.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a48:	f000 fc26 	bl	800a298 <prvInitialiseTaskLists>
 8009a4c:	e00d      	b.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a4e:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <prvAddNewTaskToReadyList+0xcc>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d109      	bne.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a56:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d802      	bhi.n	8009a6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a6a:	4b20      	ldr	r3, [pc, #128]	; (8009aec <prvAddNewTaskToReadyList+0xd0>)
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3301      	adds	r3, #1
 8009a70:	4a1e      	ldr	r2, [pc, #120]	; (8009aec <prvAddNewTaskToReadyList+0xd0>)
 8009a72:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a74:	4b1d      	ldr	r3, [pc, #116]	; (8009aec <prvAddNewTaskToReadyList+0xd0>)
 8009a76:	681a      	ldr	r2, [r3, #0]
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a80:	4b1b      	ldr	r3, [pc, #108]	; (8009af0 <prvAddNewTaskToReadyList+0xd4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d903      	bls.n	8009a90 <prvAddNewTaskToReadyList+0x74>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8c:	4a18      	ldr	r2, [pc, #96]	; (8009af0 <prvAddNewTaskToReadyList+0xd4>)
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a94:	4613      	mov	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4a15      	ldr	r2, [pc, #84]	; (8009af4 <prvAddNewTaskToReadyList+0xd8>)
 8009a9e:	441a      	add	r2, r3
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	3304      	adds	r3, #4
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	f7fe fee9 	bl	800887e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009aac:	f001 fd52 	bl	800b554 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ab0:	4b0d      	ldr	r3, [pc, #52]	; (8009ae8 <prvAddNewTaskToReadyList+0xcc>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00e      	beq.n	8009ad6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ab8:	4b0a      	ldr	r3, [pc, #40]	; (8009ae4 <prvAddNewTaskToReadyList+0xc8>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d207      	bcs.n	8009ad6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ac6:	4b0c      	ldr	r3, [pc, #48]	; (8009af8 <prvAddNewTaskToReadyList+0xdc>)
 8009ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009acc:	601a      	str	r2, [r3, #0]
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3708      	adds	r7, #8
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20001414 	.word	0x20001414
 8009ae4:	20000f40 	.word	0x20000f40
 8009ae8:	20001420 	.word	0x20001420
 8009aec:	20001430 	.word	0x20001430
 8009af0:	2000141c 	.word	0x2000141c
 8009af4:	20000f44 	.word	0x20000f44
 8009af8:	e000ed04 	.word	0xe000ed04

08009afc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d017      	beq.n	8009b3e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b0e:	4b13      	ldr	r3, [pc, #76]	; (8009b5c <vTaskDelay+0x60>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <vTaskDelay+0x30>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	e7fe      	b.n	8009b2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b2c:	f000 f88a 	bl	8009c44 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b30:	2100      	movs	r1, #0
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f001 f80e 	bl	800ab54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b38:	f000 f892 	bl	8009c60 <xTaskResumeAll>
 8009b3c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d107      	bne.n	8009b54 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <vTaskDelay+0x64>)
 8009b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b4a:	601a      	str	r2, [r3, #0]
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b54:	bf00      	nop
 8009b56:	3710      	adds	r7, #16
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}
 8009b5c:	2000143c 	.word	0x2000143c
 8009b60:	e000ed04 	.word	0xe000ed04

08009b64 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b08a      	sub	sp, #40	; 0x28
 8009b68:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b72:	463a      	mov	r2, r7
 8009b74:	1d39      	adds	r1, r7, #4
 8009b76:	f107 0308 	add.w	r3, r7, #8
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe fe1e 	bl	80087bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	68ba      	ldr	r2, [r7, #8]
 8009b86:	9202      	str	r2, [sp, #8]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	9300      	str	r3, [sp, #0]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	460a      	mov	r2, r1
 8009b92:	4924      	ldr	r1, [pc, #144]	; (8009c24 <vTaskStartScheduler+0xc0>)
 8009b94:	4824      	ldr	r0, [pc, #144]	; (8009c28 <vTaskStartScheduler+0xc4>)
 8009b96:	f7ff fdf9 	bl	800978c <xTaskCreateStatic>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	4a23      	ldr	r2, [pc, #140]	; (8009c2c <vTaskStartScheduler+0xc8>)
 8009b9e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009ba0:	4b22      	ldr	r3, [pc, #136]	; (8009c2c <vTaskStartScheduler+0xc8>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d002      	beq.n	8009bae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	617b      	str	r3, [r7, #20]
 8009bac:	e001      	b.n	8009bb2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	2b01      	cmp	r3, #1
 8009bb6:	d102      	bne.n	8009bbe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bb8:	f001 f820 	bl	800abfc <xTimerCreateTimerTask>
 8009bbc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d11b      	bne.n	8009bfc <vTaskStartScheduler+0x98>
	__asm volatile
 8009bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	613b      	str	r3, [r7, #16]
}
 8009bd6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bd8:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <vTaskStartScheduler+0xcc>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	3354      	adds	r3, #84	; 0x54
 8009bde:	4a15      	ldr	r2, [pc, #84]	; (8009c34 <vTaskStartScheduler+0xd0>)
 8009be0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009be2:	4b15      	ldr	r3, [pc, #84]	; (8009c38 <vTaskStartScheduler+0xd4>)
 8009be4:	f04f 32ff 	mov.w	r2, #4294967295
 8009be8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bea:	4b14      	ldr	r3, [pc, #80]	; (8009c3c <vTaskStartScheduler+0xd8>)
 8009bec:	2201      	movs	r2, #1
 8009bee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bf0:	4b13      	ldr	r3, [pc, #76]	; (8009c40 <vTaskStartScheduler+0xdc>)
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bf6:	f001 fbdb 	bl	800b3b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bfa:	e00e      	b.n	8009c1a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c02:	d10a      	bne.n	8009c1a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60fb      	str	r3, [r7, #12]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <vTaskStartScheduler+0xb4>
}
 8009c1a:	bf00      	nop
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	0800c640 	.word	0x0800c640
 8009c28:	0800a269 	.word	0x0800a269
 8009c2c:	20001438 	.word	0x20001438
 8009c30:	20000f40 	.word	0x20000f40
 8009c34:	2000007c 	.word	0x2000007c
 8009c38:	20001434 	.word	0x20001434
 8009c3c:	20001420 	.word	0x20001420
 8009c40:	20001418 	.word	0x20001418

08009c44 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c44:	b480      	push	{r7}
 8009c46:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c48:	4b04      	ldr	r3, [pc, #16]	; (8009c5c <vTaskSuspendAll+0x18>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	3301      	adds	r3, #1
 8009c4e:	4a03      	ldr	r2, [pc, #12]	; (8009c5c <vTaskSuspendAll+0x18>)
 8009c50:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c52:	bf00      	nop
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	2000143c 	.word	0x2000143c

08009c60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c66:	2300      	movs	r3, #0
 8009c68:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c6e:	4b42      	ldr	r3, [pc, #264]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10a      	bne.n	8009c8c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7a:	f383 8811 	msr	BASEPRI, r3
 8009c7e:	f3bf 8f6f 	isb	sy
 8009c82:	f3bf 8f4f 	dsb	sy
 8009c86:	603b      	str	r3, [r7, #0]
}
 8009c88:	bf00      	nop
 8009c8a:	e7fe      	b.n	8009c8a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c8c:	f001 fc32 	bl	800b4f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c90:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	4a38      	ldr	r2, [pc, #224]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c98:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c9a:	4b37      	ldr	r3, [pc, #220]	; (8009d78 <xTaskResumeAll+0x118>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d162      	bne.n	8009d68 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009ca2:	4b36      	ldr	r3, [pc, #216]	; (8009d7c <xTaskResumeAll+0x11c>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d05e      	beq.n	8009d68 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009caa:	e02f      	b.n	8009d0c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009cac:	4b34      	ldr	r3, [pc, #208]	; (8009d80 <xTaskResumeAll+0x120>)
 8009cae:	68db      	ldr	r3, [r3, #12]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	3318      	adds	r3, #24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f7fe fe3d 	bl	8008938 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	3304      	adds	r3, #4
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f7fe fe38 	bl	8008938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ccc:	4b2d      	ldr	r3, [pc, #180]	; (8009d84 <xTaskResumeAll+0x124>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d903      	bls.n	8009cdc <xTaskResumeAll+0x7c>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cd8:	4a2a      	ldr	r2, [pc, #168]	; (8009d84 <xTaskResumeAll+0x124>)
 8009cda:	6013      	str	r3, [r2, #0]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	4a27      	ldr	r2, [pc, #156]	; (8009d88 <xTaskResumeAll+0x128>)
 8009cea:	441a      	add	r2, r3
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4610      	mov	r0, r2
 8009cf4:	f7fe fdc3 	bl	800887e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfc:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <xTaskResumeAll+0x12c>)
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d02:	429a      	cmp	r2, r3
 8009d04:	d302      	bcc.n	8009d0c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d06:	4b22      	ldr	r3, [pc, #136]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d08:	2201      	movs	r2, #1
 8009d0a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d0c:	4b1c      	ldr	r3, [pc, #112]	; (8009d80 <xTaskResumeAll+0x120>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d1cb      	bne.n	8009cac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d1a:	f000 fb5f 	bl	800a3dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d1e:	4b1d      	ldr	r3, [pc, #116]	; (8009d94 <xTaskResumeAll+0x134>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d010      	beq.n	8009d4c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d2a:	f000 f847 	bl	8009dbc <xTaskIncrementTick>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d002      	beq.n	8009d3a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d34:	4b16      	ldr	r3, [pc, #88]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d36:	2201      	movs	r2, #1
 8009d38:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1f1      	bne.n	8009d2a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d46:	4b13      	ldr	r3, [pc, #76]	; (8009d94 <xTaskResumeAll+0x134>)
 8009d48:	2200      	movs	r2, #0
 8009d4a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d4c:	4b10      	ldr	r3, [pc, #64]	; (8009d90 <xTaskResumeAll+0x130>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d009      	beq.n	8009d68 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d54:	2301      	movs	r3, #1
 8009d56:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d58:	4b0f      	ldr	r3, [pc, #60]	; (8009d98 <xTaskResumeAll+0x138>)
 8009d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d5e:	601a      	str	r2, [r3, #0]
 8009d60:	f3bf 8f4f 	dsb	sy
 8009d64:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d68:	f001 fbf4 	bl	800b554 <vPortExitCritical>

	return xAlreadyYielded;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	2000143c 	.word	0x2000143c
 8009d7c:	20001414 	.word	0x20001414
 8009d80:	200013d4 	.word	0x200013d4
 8009d84:	2000141c 	.word	0x2000141c
 8009d88:	20000f44 	.word	0x20000f44
 8009d8c:	20000f40 	.word	0x20000f40
 8009d90:	20001428 	.word	0x20001428
 8009d94:	20001424 	.word	0x20001424
 8009d98:	e000ed04 	.word	0xe000ed04

08009d9c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009da2:	4b05      	ldr	r3, [pc, #20]	; (8009db8 <xTaskGetTickCount+0x1c>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009da8:	687b      	ldr	r3, [r7, #4]
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20001418 	.word	0x20001418

08009dbc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc6:	4b4f      	ldr	r3, [pc, #316]	; (8009f04 <xTaskIncrementTick+0x148>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f040 808f 	bne.w	8009eee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009dd0:	4b4d      	ldr	r3, [pc, #308]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009dd8:	4a4b      	ldr	r2, [pc, #300]	; (8009f08 <xTaskIncrementTick+0x14c>)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d120      	bne.n	8009e26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009de4:	4b49      	ldr	r3, [pc, #292]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d00a      	beq.n	8009e04 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	603b      	str	r3, [r7, #0]
}
 8009e00:	bf00      	nop
 8009e02:	e7fe      	b.n	8009e02 <xTaskIncrementTick+0x46>
 8009e04:	4b41      	ldr	r3, [pc, #260]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]
 8009e0a:	4b41      	ldr	r3, [pc, #260]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	4a3f      	ldr	r2, [pc, #252]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e10:	6013      	str	r3, [r2, #0]
 8009e12:	4a3f      	ldr	r2, [pc, #252]	; (8009f10 <xTaskIncrementTick+0x154>)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	6013      	str	r3, [r2, #0]
 8009e18:	4b3e      	ldr	r3, [pc, #248]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	4a3d      	ldr	r2, [pc, #244]	; (8009f14 <xTaskIncrementTick+0x158>)
 8009e20:	6013      	str	r3, [r2, #0]
 8009e22:	f000 fadb 	bl	800a3dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e26:	4b3c      	ldr	r3, [pc, #240]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	693a      	ldr	r2, [r7, #16]
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d349      	bcc.n	8009ec4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e30:	4b36      	ldr	r3, [pc, #216]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d104      	bne.n	8009e44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e3a:	4b37      	ldr	r3, [pc, #220]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e40:	601a      	str	r2, [r3, #0]
					break;
 8009e42:	e03f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e44:	4b31      	ldr	r3, [pc, #196]	; (8009f0c <xTaskIncrementTick+0x150>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	68db      	ldr	r3, [r3, #12]
 8009e4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e54:	693a      	ldr	r2, [r7, #16]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d203      	bcs.n	8009e64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e5c:	4a2e      	ldr	r2, [pc, #184]	; (8009f18 <xTaskIncrementTick+0x15c>)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e62:	e02f      	b.n	8009ec4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	3304      	adds	r3, #4
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f7fe fd65 	bl	8008938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	3318      	adds	r3, #24
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7fe fd5c 	bl	8008938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e84:	4b25      	ldr	r3, [pc, #148]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d903      	bls.n	8009e94 <xTaskIncrementTick+0xd8>
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	4a22      	ldr	r2, [pc, #136]	; (8009f1c <xTaskIncrementTick+0x160>)
 8009e92:	6013      	str	r3, [r2, #0]
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e98:	4613      	mov	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ea2:	441a      	add	r2, r3
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	3304      	adds	r3, #4
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	4610      	mov	r0, r2
 8009eac:	f7fe fce7 	bl	800887e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb4:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d3b8      	bcc.n	8009e30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ec2:	e7b5      	b.n	8009e30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ec4:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <xTaskIncrementTick+0x168>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eca:	4915      	ldr	r1, [pc, #84]	; (8009f20 <xTaskIncrementTick+0x164>)
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b01      	cmp	r3, #1
 8009eda:	d901      	bls.n	8009ee0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009edc:	2301      	movs	r3, #1
 8009ede:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ee0:	4b11      	ldr	r3, [pc, #68]	; (8009f28 <xTaskIncrementTick+0x16c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d007      	beq.n	8009ef8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e004      	b.n	8009ef8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009eee:	4b0f      	ldr	r3, [pc, #60]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	4a0d      	ldr	r2, [pc, #52]	; (8009f2c <xTaskIncrementTick+0x170>)
 8009ef6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ef8:	697b      	ldr	r3, [r7, #20]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	2000143c 	.word	0x2000143c
 8009f08:	20001418 	.word	0x20001418
 8009f0c:	200013cc 	.word	0x200013cc
 8009f10:	200013d0 	.word	0x200013d0
 8009f14:	2000142c 	.word	0x2000142c
 8009f18:	20001434 	.word	0x20001434
 8009f1c:	2000141c 	.word	0x2000141c
 8009f20:	20000f44 	.word	0x20000f44
 8009f24:	20000f40 	.word	0x20000f40
 8009f28:	20001428 	.word	0x20001428
 8009f2c:	20001424 	.word	0x20001424

08009f30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f30:	b480      	push	{r7}
 8009f32:	b085      	sub	sp, #20
 8009f34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f36:	4b2a      	ldr	r3, [pc, #168]	; (8009fe0 <vTaskSwitchContext+0xb0>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f3e:	4b29      	ldr	r3, [pc, #164]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f40:	2201      	movs	r2, #1
 8009f42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f44:	e046      	b.n	8009fd4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f46:	4b27      	ldr	r3, [pc, #156]	; (8009fe4 <vTaskSwitchContext+0xb4>)
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f4c:	4b26      	ldr	r3, [pc, #152]	; (8009fe8 <vTaskSwitchContext+0xb8>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	60fb      	str	r3, [r7, #12]
 8009f52:	e010      	b.n	8009f76 <vTaskSwitchContext+0x46>
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	607b      	str	r3, [r7, #4]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vTaskSwitchContext+0x3e>
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
 8009f76:	491d      	ldr	r1, [pc, #116]	; (8009fec <vTaskSwitchContext+0xbc>)
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	4613      	mov	r3, r2
 8009f7c:	009b      	lsls	r3, r3, #2
 8009f7e:	4413      	add	r3, r2
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	440b      	add	r3, r1
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0e4      	beq.n	8009f54 <vTaskSwitchContext+0x24>
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4a15      	ldr	r2, [pc, #84]	; (8009fec <vTaskSwitchContext+0xbc>)
 8009f96:	4413      	add	r3, r2
 8009f98:	60bb      	str	r3, [r7, #8]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	685a      	ldr	r2, [r3, #4]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	605a      	str	r2, [r3, #4]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	685a      	ldr	r2, [r3, #4]
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3308      	adds	r3, #8
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d104      	bne.n	8009fba <vTaskSwitchContext+0x8a>
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	605a      	str	r2, [r3, #4]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	4a0b      	ldr	r2, [pc, #44]	; (8009ff0 <vTaskSwitchContext+0xc0>)
 8009fc2:	6013      	str	r3, [r2, #0]
 8009fc4:	4a08      	ldr	r2, [pc, #32]	; (8009fe8 <vTaskSwitchContext+0xb8>)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fca:	4b09      	ldr	r3, [pc, #36]	; (8009ff0 <vTaskSwitchContext+0xc0>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	3354      	adds	r3, #84	; 0x54
 8009fd0:	4a08      	ldr	r2, [pc, #32]	; (8009ff4 <vTaskSwitchContext+0xc4>)
 8009fd2:	6013      	str	r3, [r2, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	3714      	adds	r7, #20
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fde:	4770      	bx	lr
 8009fe0:	2000143c 	.word	0x2000143c
 8009fe4:	20001428 	.word	0x20001428
 8009fe8:	2000141c 	.word	0x2000141c
 8009fec:	20000f44 	.word	0x20000f44
 8009ff0:	20000f40 	.word	0x20000f40
 8009ff4:	2000007c 	.word	0x2000007c

08009ff8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b084      	sub	sp, #16
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10a      	bne.n	800a01e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a00c:	f383 8811 	msr	BASEPRI, r3
 800a010:	f3bf 8f6f 	isb	sy
 800a014:	f3bf 8f4f 	dsb	sy
 800a018:	60fb      	str	r3, [r7, #12]
}
 800a01a:	bf00      	nop
 800a01c:	e7fe      	b.n	800a01c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a01e:	4b07      	ldr	r3, [pc, #28]	; (800a03c <vTaskPlaceOnEventList+0x44>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3318      	adds	r3, #24
 800a024:	4619      	mov	r1, r3
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f7fe fc4d 	bl	80088c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a02c:	2101      	movs	r1, #1
 800a02e:	6838      	ldr	r0, [r7, #0]
 800a030:	f000 fd90 	bl	800ab54 <prvAddCurrentTaskToDelayedList>
}
 800a034:	bf00      	nop
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000f40 	.word	0x20000f40

0800a040 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a040:	b580      	push	{r7, lr}
 800a042:	b086      	sub	sp, #24
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d10a      	bne.n	800a068 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a056:	f383 8811 	msr	BASEPRI, r3
 800a05a:	f3bf 8f6f 	isb	sy
 800a05e:	f3bf 8f4f 	dsb	sy
 800a062:	617b      	str	r3, [r7, #20]
}
 800a064:	bf00      	nop
 800a066:	e7fe      	b.n	800a066 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a068:	4b0a      	ldr	r3, [pc, #40]	; (800a094 <vTaskPlaceOnEventListRestricted+0x54>)
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	3318      	adds	r3, #24
 800a06e:	4619      	mov	r1, r3
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7fe fc04 	bl	800887e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d002      	beq.n	800a082 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a07c:	f04f 33ff 	mov.w	r3, #4294967295
 800a080:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a082:	6879      	ldr	r1, [r7, #4]
 800a084:	68b8      	ldr	r0, [r7, #8]
 800a086:	f000 fd65 	bl	800ab54 <prvAddCurrentTaskToDelayedList>
	}
 800a08a:	bf00      	nop
 800a08c:	3718      	adds	r7, #24
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	20000f40 	.word	0x20000f40

0800a098 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	68db      	ldr	r3, [r3, #12]
 800a0a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10a      	bne.n	800a0c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	f383 8811 	msr	BASEPRI, r3
 800a0b6:	f3bf 8f6f 	isb	sy
 800a0ba:	f3bf 8f4f 	dsb	sy
 800a0be:	60fb      	str	r3, [r7, #12]
}
 800a0c0:	bf00      	nop
 800a0c2:	e7fe      	b.n	800a0c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	3318      	adds	r3, #24
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fe fc35 	bl	8008938 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ce:	4b1e      	ldr	r3, [pc, #120]	; (800a148 <xTaskRemoveFromEventList+0xb0>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d11d      	bne.n	800a112 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0d6:	693b      	ldr	r3, [r7, #16]
 800a0d8:	3304      	adds	r3, #4
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7fe fc2c 	bl	8008938 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0e4:	4b19      	ldr	r3, [pc, #100]	; (800a14c <xTaskRemoveFromEventList+0xb4>)
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	d903      	bls.n	800a0f4 <xTaskRemoveFromEventList+0x5c>
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0f0:	4a16      	ldr	r2, [pc, #88]	; (800a14c <xTaskRemoveFromEventList+0xb4>)
 800a0f2:	6013      	str	r3, [r2, #0]
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	009b      	lsls	r3, r3, #2
 800a100:	4a13      	ldr	r2, [pc, #76]	; (800a150 <xTaskRemoveFromEventList+0xb8>)
 800a102:	441a      	add	r2, r3
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	3304      	adds	r3, #4
 800a108:	4619      	mov	r1, r3
 800a10a:	4610      	mov	r0, r2
 800a10c:	f7fe fbb7 	bl	800887e <vListInsertEnd>
 800a110:	e005      	b.n	800a11e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	3318      	adds	r3, #24
 800a116:	4619      	mov	r1, r3
 800a118:	480e      	ldr	r0, [pc, #56]	; (800a154 <xTaskRemoveFromEventList+0xbc>)
 800a11a:	f7fe fbb0 	bl	800887e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a122:	4b0d      	ldr	r3, [pc, #52]	; (800a158 <xTaskRemoveFromEventList+0xc0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a128:	429a      	cmp	r2, r3
 800a12a:	d905      	bls.n	800a138 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a12c:	2301      	movs	r3, #1
 800a12e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a130:	4b0a      	ldr	r3, [pc, #40]	; (800a15c <xTaskRemoveFromEventList+0xc4>)
 800a132:	2201      	movs	r2, #1
 800a134:	601a      	str	r2, [r3, #0]
 800a136:	e001      	b.n	800a13c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a13c:	697b      	ldr	r3, [r7, #20]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	2000143c 	.word	0x2000143c
 800a14c:	2000141c 	.word	0x2000141c
 800a150:	20000f44 	.word	0x20000f44
 800a154:	200013d4 	.word	0x200013d4
 800a158:	20000f40 	.word	0x20000f40
 800a15c:	20001428 	.word	0x20001428

0800a160 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a168:	4b06      	ldr	r3, [pc, #24]	; (800a184 <vTaskInternalSetTimeOutState+0x24>)
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a170:	4b05      	ldr	r3, [pc, #20]	; (800a188 <vTaskInternalSetTimeOutState+0x28>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	605a      	str	r2, [r3, #4]
}
 800a178:	bf00      	nop
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	2000142c 	.word	0x2000142c
 800a188:	20001418 	.word	0x20001418

0800a18c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b088      	sub	sp, #32
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10a      	bne.n	800a1b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	613b      	str	r3, [r7, #16]
}
 800a1ae:	bf00      	nop
 800a1b0:	e7fe      	b.n	800a1b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10a      	bne.n	800a1ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1bc:	f383 8811 	msr	BASEPRI, r3
 800a1c0:	f3bf 8f6f 	isb	sy
 800a1c4:	f3bf 8f4f 	dsb	sy
 800a1c8:	60fb      	str	r3, [r7, #12]
}
 800a1ca:	bf00      	nop
 800a1cc:	e7fe      	b.n	800a1cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1ce:	f001 f991 	bl	800b4f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1d2:	4b1d      	ldr	r3, [pc, #116]	; (800a248 <xTaskCheckForTimeOut+0xbc>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	69ba      	ldr	r2, [r7, #24]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d102      	bne.n	800a1f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e023      	b.n	800a23a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681a      	ldr	r2, [r3, #0]
 800a1f6:	4b15      	ldr	r3, [pc, #84]	; (800a24c <xTaskCheckForTimeOut+0xc0>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	d007      	beq.n	800a20e <xTaskCheckForTimeOut+0x82>
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	69ba      	ldr	r2, [r7, #24]
 800a204:	429a      	cmp	r2, r3
 800a206:	d302      	bcc.n	800a20e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	61fb      	str	r3, [r7, #28]
 800a20c:	e015      	b.n	800a23a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	697a      	ldr	r2, [r7, #20]
 800a214:	429a      	cmp	r2, r3
 800a216:	d20b      	bcs.n	800a230 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	1ad2      	subs	r2, r2, r3
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f7ff ff9b 	bl	800a160 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a22a:	2300      	movs	r3, #0
 800a22c:	61fb      	str	r3, [r7, #28]
 800a22e:	e004      	b.n	800a23a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a236:	2301      	movs	r3, #1
 800a238:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a23a:	f001 f98b 	bl	800b554 <vPortExitCritical>

	return xReturn;
 800a23e:	69fb      	ldr	r3, [r7, #28]
}
 800a240:	4618      	mov	r0, r3
 800a242:	3720      	adds	r7, #32
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}
 800a248:	20001418 	.word	0x20001418
 800a24c:	2000142c 	.word	0x2000142c

0800a250 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a254:	4b03      	ldr	r3, [pc, #12]	; (800a264 <vTaskMissedYield+0x14>)
 800a256:	2201      	movs	r2, #1
 800a258:	601a      	str	r2, [r3, #0]
}
 800a25a:	bf00      	nop
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	20001428 	.word	0x20001428

0800a268 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b082      	sub	sp, #8
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a270:	f000 f852 	bl	800a318 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a274:	4b06      	ldr	r3, [pc, #24]	; (800a290 <prvIdleTask+0x28>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d9f9      	bls.n	800a270 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a27c:	4b05      	ldr	r3, [pc, #20]	; (800a294 <prvIdleTask+0x2c>)
 800a27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a282:	601a      	str	r2, [r3, #0]
 800a284:	f3bf 8f4f 	dsb	sy
 800a288:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a28c:	e7f0      	b.n	800a270 <prvIdleTask+0x8>
 800a28e:	bf00      	nop
 800a290:	20000f44 	.word	0x20000f44
 800a294:	e000ed04 	.word	0xe000ed04

0800a298 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a29e:	2300      	movs	r3, #0
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e00c      	b.n	800a2be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	4613      	mov	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	4413      	add	r3, r2
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4a12      	ldr	r2, [pc, #72]	; (800a2f8 <prvInitialiseTaskLists+0x60>)
 800a2b0:	4413      	add	r3, r2
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fab6 	bl	8008824 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	607b      	str	r3, [r7, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	2b37      	cmp	r3, #55	; 0x37
 800a2c2:	d9ef      	bls.n	800a2a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2c4:	480d      	ldr	r0, [pc, #52]	; (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2c6:	f7fe faad 	bl	8008824 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ca:	480d      	ldr	r0, [pc, #52]	; (800a300 <prvInitialiseTaskLists+0x68>)
 800a2cc:	f7fe faaa 	bl	8008824 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2d0:	480c      	ldr	r0, [pc, #48]	; (800a304 <prvInitialiseTaskLists+0x6c>)
 800a2d2:	f7fe faa7 	bl	8008824 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2d6:	480c      	ldr	r0, [pc, #48]	; (800a308 <prvInitialiseTaskLists+0x70>)
 800a2d8:	f7fe faa4 	bl	8008824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2dc:	480b      	ldr	r0, [pc, #44]	; (800a30c <prvInitialiseTaskLists+0x74>)
 800a2de:	f7fe faa1 	bl	8008824 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2e2:	4b0b      	ldr	r3, [pc, #44]	; (800a310 <prvInitialiseTaskLists+0x78>)
 800a2e4:	4a05      	ldr	r2, [pc, #20]	; (800a2fc <prvInitialiseTaskLists+0x64>)
 800a2e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <prvInitialiseTaskLists+0x7c>)
 800a2ea:	4a05      	ldr	r2, [pc, #20]	; (800a300 <prvInitialiseTaskLists+0x68>)
 800a2ec:	601a      	str	r2, [r3, #0]
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	20000f44 	.word	0x20000f44
 800a2fc:	200013a4 	.word	0x200013a4
 800a300:	200013b8 	.word	0x200013b8
 800a304:	200013d4 	.word	0x200013d4
 800a308:	200013e8 	.word	0x200013e8
 800a30c:	20001400 	.word	0x20001400
 800a310:	200013cc 	.word	0x200013cc
 800a314:	200013d0 	.word	0x200013d0

0800a318 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b082      	sub	sp, #8
 800a31c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a31e:	e019      	b.n	800a354 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a320:	f001 f8e8 	bl	800b4f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a324:	4b10      	ldr	r3, [pc, #64]	; (800a368 <prvCheckTasksWaitingTermination+0x50>)
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	3304      	adds	r3, #4
 800a330:	4618      	mov	r0, r3
 800a332:	f7fe fb01 	bl	8008938 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a336:	4b0d      	ldr	r3, [pc, #52]	; (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3b01      	subs	r3, #1
 800a33c:	4a0b      	ldr	r2, [pc, #44]	; (800a36c <prvCheckTasksWaitingTermination+0x54>)
 800a33e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a340:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	3b01      	subs	r3, #1
 800a346:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a348:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a34a:	f001 f903 	bl	800b554 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f810 	bl	800a374 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a354:	4b06      	ldr	r3, [pc, #24]	; (800a370 <prvCheckTasksWaitingTermination+0x58>)
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d1e1      	bne.n	800a320 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a35c:	bf00      	nop
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200013e8 	.word	0x200013e8
 800a36c:	20001414 	.word	0x20001414
 800a370:	200013fc 	.word	0x200013fc

0800a374 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3354      	adds	r3, #84	; 0x54
 800a380:	4618      	mov	r0, r3
 800a382:	f001 fbeb 	bl	800bb5c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d108      	bne.n	800a3a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a394:	4618      	mov	r0, r3
 800a396:	f001 fa9b 	bl	800b8d0 <vPortFree>
				vPortFree( pxTCB );
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 fa98 	bl	800b8d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3a0:	e018      	b.n	800a3d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d103      	bne.n	800a3b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 fa8f 	bl	800b8d0 <vPortFree>
	}
 800a3b2:	e00f      	b.n	800a3d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800a3ba:	2b02      	cmp	r3, #2
 800a3bc:	d00a      	beq.n	800a3d4 <prvDeleteTCB+0x60>
	__asm volatile
 800a3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c2:	f383 8811 	msr	BASEPRI, r3
 800a3c6:	f3bf 8f6f 	isb	sy
 800a3ca:	f3bf 8f4f 	dsb	sy
 800a3ce:	60fb      	str	r3, [r7, #12]
}
 800a3d0:	bf00      	nop
 800a3d2:	e7fe      	b.n	800a3d2 <prvDeleteTCB+0x5e>
	}
 800a3d4:	bf00      	nop
 800a3d6:	3710      	adds	r7, #16
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	bd80      	pop	{r7, pc}

0800a3dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3e2:	4b0c      	ldr	r3, [pc, #48]	; (800a414 <prvResetNextTaskUnblockTime+0x38>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d104      	bne.n	800a3f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3f4:	e008      	b.n	800a408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f6:	4b07      	ldr	r3, [pc, #28]	; (800a414 <prvResetNextTaskUnblockTime+0x38>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	4a04      	ldr	r2, [pc, #16]	; (800a418 <prvResetNextTaskUnblockTime+0x3c>)
 800a406:	6013      	str	r3, [r2, #0]
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr
 800a414:	200013cc 	.word	0x200013cc
 800a418:	20001434 	.word	0x20001434

0800a41c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a422:	4b05      	ldr	r3, [pc, #20]	; (800a438 <xTaskGetCurrentTaskHandle+0x1c>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a428:	687b      	ldr	r3, [r7, #4]
	}
 800a42a:	4618      	mov	r0, r3
 800a42c:	370c      	adds	r7, #12
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20000f40 	.word	0x20000f40

0800a43c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <xTaskGetSchedulerState+0x34>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a44a:	2301      	movs	r3, #1
 800a44c:	607b      	str	r3, [r7, #4]
 800a44e:	e008      	b.n	800a462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a450:	4b08      	ldr	r3, [pc, #32]	; (800a474 <xTaskGetSchedulerState+0x38>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a458:	2302      	movs	r3, #2
 800a45a:	607b      	str	r3, [r7, #4]
 800a45c:	e001      	b.n	800a462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a462:	687b      	ldr	r3, [r7, #4]
	}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	20001420 	.word	0x20001420
 800a474:	2000143c 	.word	0x2000143c

0800a478 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b084      	sub	sp, #16
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a484:	2300      	movs	r3, #0
 800a486:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d051      	beq.n	800a532 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a492:	4b2a      	ldr	r3, [pc, #168]	; (800a53c <xTaskPriorityInherit+0xc4>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a498:	429a      	cmp	r2, r3
 800a49a:	d241      	bcs.n	800a520 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	db06      	blt.n	800a4b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4a4:	4b25      	ldr	r3, [pc, #148]	; (800a53c <xTaskPriorityInherit+0xc4>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	6959      	ldr	r1, [r3, #20]
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4a1f      	ldr	r2, [pc, #124]	; (800a540 <xTaskPriorityInherit+0xc8>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d122      	bne.n	800a510 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	f7fe fa32 	bl	8008938 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a4d4:	4b19      	ldr	r3, [pc, #100]	; (800a53c <xTaskPriorityInherit+0xc4>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e2:	4b18      	ldr	r3, [pc, #96]	; (800a544 <xTaskPriorityInherit+0xcc>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d903      	bls.n	800a4f2 <xTaskPriorityInherit+0x7a>
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4ee:	4a15      	ldr	r2, [pc, #84]	; (800a544 <xTaskPriorityInherit+0xcc>)
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4f6:	4613      	mov	r3, r2
 800a4f8:	009b      	lsls	r3, r3, #2
 800a4fa:	4413      	add	r3, r2
 800a4fc:	009b      	lsls	r3, r3, #2
 800a4fe:	4a10      	ldr	r2, [pc, #64]	; (800a540 <xTaskPriorityInherit+0xc8>)
 800a500:	441a      	add	r2, r3
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	3304      	adds	r3, #4
 800a506:	4619      	mov	r1, r3
 800a508:	4610      	mov	r0, r2
 800a50a:	f7fe f9b8 	bl	800887e <vListInsertEnd>
 800a50e:	e004      	b.n	800a51a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a510:	4b0a      	ldr	r3, [pc, #40]	; (800a53c <xTaskPriorityInherit+0xc4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a51a:	2301      	movs	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
 800a51e:	e008      	b.n	800a532 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a524:	4b05      	ldr	r3, [pc, #20]	; (800a53c <xTaskPriorityInherit+0xc4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d201      	bcs.n	800a532 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a52e:	2301      	movs	r3, #1
 800a530:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a532:	68fb      	ldr	r3, [r7, #12]
	}
 800a534:	4618      	mov	r0, r3
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	20000f40 	.word	0x20000f40
 800a540:	20000f44 	.word	0x20000f44
 800a544:	2000141c 	.word	0x2000141c

0800a548 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d056      	beq.n	800a60c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a55e:	4b2e      	ldr	r3, [pc, #184]	; (800a618 <xTaskPriorityDisinherit+0xd0>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	d00a      	beq.n	800a57e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a56c:	f383 8811 	msr	BASEPRI, r3
 800a570:	f3bf 8f6f 	isb	sy
 800a574:	f3bf 8f4f 	dsb	sy
 800a578:	60fb      	str	r3, [r7, #12]
}
 800a57a:	bf00      	nop
 800a57c:	e7fe      	b.n	800a57c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10a      	bne.n	800a59c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a58a:	f383 8811 	msr	BASEPRI, r3
 800a58e:	f3bf 8f6f 	isb	sy
 800a592:	f3bf 8f4f 	dsb	sy
 800a596:	60bb      	str	r3, [r7, #8]
}
 800a598:	bf00      	nop
 800a59a:	e7fe      	b.n	800a59a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a0:	1e5a      	subs	r2, r3, #1
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d02c      	beq.n	800a60c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d128      	bne.n	800a60c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	3304      	adds	r3, #4
 800a5be:	4618      	mov	r0, r3
 800a5c0:	f7fe f9ba 	bl	8008938 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5d0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5d8:	693b      	ldr	r3, [r7, #16]
 800a5da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <xTaskPriorityDisinherit+0xd4>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d903      	bls.n	800a5ec <xTaskPriorityDisinherit+0xa4>
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5e8:	4a0c      	ldr	r2, [pc, #48]	; (800a61c <xTaskPriorityDisinherit+0xd4>)
 800a5ea:	6013      	str	r3, [r2, #0]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	4413      	add	r3, r2
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4a09      	ldr	r2, [pc, #36]	; (800a620 <xTaskPriorityDisinherit+0xd8>)
 800a5fa:	441a      	add	r2, r3
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	3304      	adds	r3, #4
 800a600:	4619      	mov	r1, r3
 800a602:	4610      	mov	r0, r2
 800a604:	f7fe f93b 	bl	800887e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a608:	2301      	movs	r3, #1
 800a60a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a60c:	697b      	ldr	r3, [r7, #20]
	}
 800a60e:	4618      	mov	r0, r3
 800a610:	3718      	adds	r7, #24
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	20000f40 	.word	0x20000f40
 800a61c:	2000141c 	.word	0x2000141c
 800a620:	20000f44 	.word	0x20000f44

0800a624 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a624:	b580      	push	{r7, lr}
 800a626:	b088      	sub	sp, #32
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a632:	2301      	movs	r3, #1
 800a634:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d06a      	beq.n	800a712 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a640:	2b00      	cmp	r3, #0
 800a642:	d10a      	bne.n	800a65a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800a644:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a648:	f383 8811 	msr	BASEPRI, r3
 800a64c:	f3bf 8f6f 	isb	sy
 800a650:	f3bf 8f4f 	dsb	sy
 800a654:	60fb      	str	r3, [r7, #12]
}
 800a656:	bf00      	nop
 800a658:	e7fe      	b.n	800a658 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d902      	bls.n	800a66a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	61fb      	str	r3, [r7, #28]
 800a668:	e002      	b.n	800a670 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a66e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a670:	69bb      	ldr	r3, [r7, #24]
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	69fa      	ldr	r2, [r7, #28]
 800a676:	429a      	cmp	r2, r3
 800a678:	d04b      	beq.n	800a712 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a67e:	697a      	ldr	r2, [r7, #20]
 800a680:	429a      	cmp	r2, r3
 800a682:	d146      	bne.n	800a712 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a684:	4b25      	ldr	r3, [pc, #148]	; (800a71c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	69ba      	ldr	r2, [r7, #24]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d10a      	bne.n	800a6a4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800a68e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a692:	f383 8811 	msr	BASEPRI, r3
 800a696:	f3bf 8f6f 	isb	sy
 800a69a:	f3bf 8f4f 	dsb	sy
 800a69e:	60bb      	str	r3, [r7, #8]
}
 800a6a0:	bf00      	nop
 800a6a2:	e7fe      	b.n	800a6a2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a6a4:	69bb      	ldr	r3, [r7, #24]
 800a6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	69fa      	ldr	r2, [r7, #28]
 800a6ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	db04      	blt.n	800a6c2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6b8:	69fb      	ldr	r3, [r7, #28]
 800a6ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	6959      	ldr	r1, [r3, #20]
 800a6c6:	693a      	ldr	r2, [r7, #16]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	4413      	add	r3, r2
 800a6ce:	009b      	lsls	r3, r3, #2
 800a6d0:	4a13      	ldr	r2, [pc, #76]	; (800a720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a6d2:	4413      	add	r3, r2
 800a6d4:	4299      	cmp	r1, r3
 800a6d6:	d11c      	bne.n	800a712 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6d8:	69bb      	ldr	r3, [r7, #24]
 800a6da:	3304      	adds	r3, #4
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe f92b 	bl	8008938 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e6:	4b0f      	ldr	r3, [pc, #60]	; (800a724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d903      	bls.n	800a6f6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f2:	4a0c      	ldr	r2, [pc, #48]	; (800a724 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a6f4:	6013      	str	r3, [r2, #0]
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fa:	4613      	mov	r3, r2
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	4413      	add	r3, r2
 800a700:	009b      	lsls	r3, r3, #2
 800a702:	4a07      	ldr	r2, [pc, #28]	; (800a720 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a704:	441a      	add	r2, r3
 800a706:	69bb      	ldr	r3, [r7, #24]
 800a708:	3304      	adds	r3, #4
 800a70a:	4619      	mov	r1, r3
 800a70c:	4610      	mov	r0, r2
 800a70e:	f7fe f8b6 	bl	800887e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a712:	bf00      	nop
 800a714:	3720      	adds	r7, #32
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000f40 	.word	0x20000f40
 800a720:	20000f44 	.word	0x20000f44
 800a724:	2000141c 	.word	0x2000141c

0800a728 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a728:	b480      	push	{r7}
 800a72a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a72c:	4b07      	ldr	r3, [pc, #28]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d004      	beq.n	800a73e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a734:	4b05      	ldr	r3, [pc, #20]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a73a:	3201      	adds	r2, #1
 800a73c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800a73e:	4b03      	ldr	r3, [pc, #12]	; (800a74c <pvTaskIncrementMutexHeldCount+0x24>)
 800a740:	681b      	ldr	r3, [r3, #0]
	}
 800a742:	4618      	mov	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr
 800a74c:	20000f40 	.word	0x20000f40

0800a750 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800a75e:	f000 fec9 	bl	800b4f4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a762:	4b29      	ldr	r3, [pc, #164]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b02      	cmp	r3, #2
 800a76e:	d01c      	beq.n	800a7aa <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800a770:	4b25      	ldr	r3, [pc, #148]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800a778:	68fa      	ldr	r2, [r7, #12]
 800a77a:	43d2      	mvns	r2, r2
 800a77c:	400a      	ands	r2, r1
 800a77e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800a782:	4b21      	ldr	r3, [pc, #132]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d00b      	beq.n	800a7aa <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a792:	2101      	movs	r1, #1
 800a794:	6838      	ldr	r0, [r7, #0]
 800a796:	f000 f9dd 	bl	800ab54 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800a79a:	4b1c      	ldr	r3, [pc, #112]	; (800a80c <xTaskNotifyWait+0xbc>)
 800a79c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7a0:	601a      	str	r2, [r3, #0]
 800a7a2:	f3bf 8f4f 	dsb	sy
 800a7a6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a7aa:	f000 fed3 	bl	800b554 <vPortExitCritical>

		taskENTER_CRITICAL();
 800a7ae:	f000 fea1 	bl	800b4f4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d005      	beq.n	800a7c4 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800a7b8:	4b13      	ldr	r3, [pc, #76]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800a7c4:	4b10      	ldr	r3, [pc, #64]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d002      	beq.n	800a7d8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]
 800a7d6:	e00a      	b.n	800a7ee <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	43d2      	mvns	r2, r2
 800a7e4:	400a      	ands	r2, r1
 800a7e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a7ee:	4b06      	ldr	r3, [pc, #24]	; (800a808 <xTaskNotifyWait+0xb8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 800a7f8:	f000 feac 	bl	800b554 <vPortExitCritical>

		return xReturn;
 800a7fc:	697b      	ldr	r3, [r7, #20]
	}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}
 800a806:	bf00      	nop
 800a808:	20000f40 	.word	0x20000f40
 800a80c:	e000ed04 	.word	0xe000ed04

0800a810 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af00      	add	r7, sp, #0
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800a820:	2301      	movs	r3, #1
 800a822:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d10a      	bne.n	800a840 <xTaskGenericNotify+0x30>
	__asm volatile
 800a82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82e:	f383 8811 	msr	BASEPRI, r3
 800a832:	f3bf 8f6f 	isb	sy
 800a836:	f3bf 8f4f 	dsb	sy
 800a83a:	61bb      	str	r3, [r7, #24]
}
 800a83c:	bf00      	nop
 800a83e:	e7fe      	b.n	800a83e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800a844:	f000 fe56 	bl	800b4f4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d004      	beq.n	800a858 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a84e:	6a3b      	ldr	r3, [r7, #32]
 800a850:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a858:	6a3b      	ldr	r3, [r7, #32]
 800a85a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a85e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a860:	6a3b      	ldr	r3, [r7, #32]
 800a862:	2202      	movs	r2, #2
 800a864:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800a868:	79fb      	ldrb	r3, [r7, #7]
 800a86a:	2b04      	cmp	r3, #4
 800a86c:	d82d      	bhi.n	800a8ca <xTaskGenericNotify+0xba>
 800a86e:	a201      	add	r2, pc, #4	; (adr r2, 800a874 <xTaskGenericNotify+0x64>)
 800a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a874:	0800a8ed 	.word	0x0800a8ed
 800a878:	0800a889 	.word	0x0800a889
 800a87c:	0800a89b 	.word	0x0800a89b
 800a880:	0800a8ab 	.word	0x0800a8ab
 800a884:	0800a8b5 	.word	0x0800a8b5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800a888:	6a3b      	ldr	r3, [r7, #32]
 800a88a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	431a      	orrs	r2, r3
 800a892:	6a3b      	ldr	r3, [r7, #32]
 800a894:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a898:	e02b      	b.n	800a8f2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800a89a:	6a3b      	ldr	r3, [r7, #32]
 800a89c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8a0:	1c5a      	adds	r2, r3, #1
 800a8a2:	6a3b      	ldr	r3, [r7, #32]
 800a8a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a8a8:	e023      	b.n	800a8f2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	68ba      	ldr	r2, [r7, #8]
 800a8ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800a8b2:	e01e      	b.n	800a8f2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a8b4:	7ffb      	ldrb	r3, [r7, #31]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d004      	beq.n	800a8c4 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800a8ba:	6a3b      	ldr	r3, [r7, #32]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800a8c2:	e016      	b.n	800a8f2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800a8c8:	e013      	b.n	800a8f2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800a8ca:	6a3b      	ldr	r3, [r7, #32]
 800a8cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d00c      	beq.n	800a8f0 <xTaskGenericNotify+0xe0>
	__asm volatile
 800a8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8da:	f383 8811 	msr	BASEPRI, r3
 800a8de:	f3bf 8f6f 	isb	sy
 800a8e2:	f3bf 8f4f 	dsb	sy
 800a8e6:	617b      	str	r3, [r7, #20]
}
 800a8e8:	bf00      	nop
 800a8ea:	e7fe      	b.n	800a8ea <xTaskGenericNotify+0xda>
					break;
 800a8ec:	bf00      	nop
 800a8ee:	e000      	b.n	800a8f2 <xTaskGenericNotify+0xe2>

					break;
 800a8f0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a8f2:	7ffb      	ldrb	r3, [r7, #31]
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d13a      	bne.n	800a96e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8f8:	6a3b      	ldr	r3, [r7, #32]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fe f81b 	bl	8008938 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800a902:	6a3b      	ldr	r3, [r7, #32]
 800a904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a906:	4b1d      	ldr	r3, [pc, #116]	; (800a97c <xTaskGenericNotify+0x16c>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d903      	bls.n	800a916 <xTaskGenericNotify+0x106>
 800a90e:	6a3b      	ldr	r3, [r7, #32]
 800a910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a912:	4a1a      	ldr	r2, [pc, #104]	; (800a97c <xTaskGenericNotify+0x16c>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	6a3b      	ldr	r3, [r7, #32]
 800a918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4a17      	ldr	r2, [pc, #92]	; (800a980 <xTaskGenericNotify+0x170>)
 800a924:	441a      	add	r2, r3
 800a926:	6a3b      	ldr	r3, [r7, #32]
 800a928:	3304      	adds	r3, #4
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7fd ffa6 	bl	800887e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <xTaskGenericNotify+0x140>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	613b      	str	r3, [r7, #16]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a954:	4b0b      	ldr	r3, [pc, #44]	; (800a984 <xTaskGenericNotify+0x174>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d907      	bls.n	800a96e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800a95e:	4b0a      	ldr	r3, [pc, #40]	; (800a988 <xTaskGenericNotify+0x178>)
 800a960:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a964:	601a      	str	r2, [r3, #0]
 800a966:	f3bf 8f4f 	dsb	sy
 800a96a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800a96e:	f000 fdf1 	bl	800b554 <vPortExitCritical>

		return xReturn;
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a974:	4618      	mov	r0, r3
 800a976:	3728      	adds	r7, #40	; 0x28
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}
 800a97c:	2000141c 	.word	0x2000141c
 800a980:	20000f44 	.word	0x20000f44
 800a984:	20000f40 	.word	0x20000f40
 800a988:	e000ed04 	.word	0xe000ed04

0800a98c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	603b      	str	r3, [r7, #0]
 800a998:	4613      	mov	r3, r2
 800a99a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800a99c:	2301      	movs	r3, #1
 800a99e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a9bc:	f000 fe7c 	bl	800b6b8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800a9c4:	f3ef 8211 	mrs	r2, BASEPRI
 800a9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9cc:	f383 8811 	msr	BASEPRI, r3
 800a9d0:	f3bf 8f6f 	isb	sy
 800a9d4:	f3bf 8f4f 	dsb	sy
 800a9d8:	623a      	str	r2, [r7, #32]
 800a9da:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800a9dc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a9de:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d004      	beq.n	800a9f0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800a9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800a9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800a9f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9fc:	2202      	movs	r2, #2
 800a9fe:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	2b04      	cmp	r3, #4
 800aa06:	d82f      	bhi.n	800aa68 <xTaskGenericNotifyFromISR+0xdc>
 800aa08:	a201      	add	r2, pc, #4	; (adr r2, 800aa10 <xTaskGenericNotifyFromISR+0x84>)
 800aa0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0e:	bf00      	nop
 800aa10:	0800aa8b 	.word	0x0800aa8b
 800aa14:	0800aa25 	.word	0x0800aa25
 800aa18:	0800aa37 	.word	0x0800aa37
 800aa1c:	0800aa47 	.word	0x0800aa47
 800aa20:	0800aa51 	.word	0x0800aa51
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800aa24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa26:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	431a      	orrs	r2, r3
 800aa2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa30:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800aa34:	e02c      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa3c:	1c5a      	adds	r2, r3, #1
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa40:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800aa44:	e024      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa48:	68ba      	ldr	r2, [r7, #8]
 800aa4a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800aa4e:	e01f      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800aa50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d004      	beq.n	800aa62 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800aa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa5a:	68ba      	ldr	r2, [r7, #8]
 800aa5c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800aa60:	e016      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800aa62:	2300      	movs	r3, #0
 800aa64:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800aa66:	e013      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800aa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800aa6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa72:	d00c      	beq.n	800aa8e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	61bb      	str	r3, [r7, #24]
}
 800aa86:	bf00      	nop
 800aa88:	e7fe      	b.n	800aa88 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800aa8a:	bf00      	nop
 800aa8c:	e000      	b.n	800aa90 <xTaskGenericNotifyFromISR+0x104>
					break;
 800aa8e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aa90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aa94:	2b01      	cmp	r3, #1
 800aa96:	d146      	bne.n	800ab26 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d00a      	beq.n	800aab6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800aaa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaa4:	f383 8811 	msr	BASEPRI, r3
 800aaa8:	f3bf 8f6f 	isb	sy
 800aaac:	f3bf 8f4f 	dsb	sy
 800aab0:	617b      	str	r3, [r7, #20]
}
 800aab2:	bf00      	nop
 800aab4:	e7fe      	b.n	800aab4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aab6:	4b21      	ldr	r3, [pc, #132]	; (800ab3c <xTaskGenericNotifyFromISR+0x1b0>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d11d      	bne.n	800aafa <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aabe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fd ff38 	bl	8008938 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aacc:	4b1c      	ldr	r3, [pc, #112]	; (800ab40 <xTaskGenericNotifyFromISR+0x1b4>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d903      	bls.n	800aadc <xTaskGenericNotifyFromISR+0x150>
 800aad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a19      	ldr	r2, [pc, #100]	; (800ab40 <xTaskGenericNotifyFromISR+0x1b4>)
 800aada:	6013      	str	r3, [r2, #0]
 800aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	4a16      	ldr	r2, [pc, #88]	; (800ab44 <xTaskGenericNotifyFromISR+0x1b8>)
 800aaea:	441a      	add	r2, r3
 800aaec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7fd fec3 	bl	800887e <vListInsertEnd>
 800aaf8:	e005      	b.n	800ab06 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800aafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aafc:	3318      	adds	r3, #24
 800aafe:	4619      	mov	r1, r3
 800ab00:	4811      	ldr	r0, [pc, #68]	; (800ab48 <xTaskGenericNotifyFromISR+0x1bc>)
 800ab02:	f7fd febc 	bl	800887e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ab06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab0a:	4b10      	ldr	r3, [pc, #64]	; (800ab4c <xTaskGenericNotifyFromISR+0x1c0>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d908      	bls.n	800ab26 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800ab14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800ab1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800ab20:	4b0b      	ldr	r3, [pc, #44]	; (800ab50 <xTaskGenericNotifyFromISR+0x1c4>)
 800ab22:	2201      	movs	r2, #1
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	f383 8811 	msr	BASEPRI, r3
}
 800ab30:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800ab32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3738      	adds	r7, #56	; 0x38
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}
 800ab3c:	2000143c 	.word	0x2000143c
 800ab40:	2000141c 	.word	0x2000141c
 800ab44:	20000f44 	.word	0x20000f44
 800ab48:	200013d4 	.word	0x200013d4
 800ab4c:	20000f40 	.word	0x20000f40
 800ab50:	20001428 	.word	0x20001428

0800ab54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ab5e:	4b21      	ldr	r3, [pc, #132]	; (800abe4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab64:	4b20      	ldr	r3, [pc, #128]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fd fee4 	bl	8008938 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab76:	d10a      	bne.n	800ab8e <prvAddCurrentTaskToDelayedList+0x3a>
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d007      	beq.n	800ab8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ab7e:	4b1a      	ldr	r3, [pc, #104]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3304      	adds	r3, #4
 800ab84:	4619      	mov	r1, r3
 800ab86:	4819      	ldr	r0, [pc, #100]	; (800abec <prvAddCurrentTaskToDelayedList+0x98>)
 800ab88:	f7fd fe79 	bl	800887e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ab8c:	e026      	b.n	800abdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4413      	add	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ab96:	4b14      	ldr	r3, [pc, #80]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68ba      	ldr	r2, [r7, #8]
 800ab9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d209      	bcs.n	800abba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800aba6:	4b12      	ldr	r3, [pc, #72]	; (800abf0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800aba8:	681a      	ldr	r2, [r3, #0]
 800abaa:	4b0f      	ldr	r3, [pc, #60]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x94>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3304      	adds	r3, #4
 800abb0:	4619      	mov	r1, r3
 800abb2:	4610      	mov	r0, r2
 800abb4:	f7fd fe87 	bl	80088c6 <vListInsert>
}
 800abb8:	e010      	b.n	800abdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800abba:	4b0e      	ldr	r3, [pc, #56]	; (800abf4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	4b0a      	ldr	r3, [pc, #40]	; (800abe8 <prvAddCurrentTaskToDelayedList+0x94>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7fd fe7d 	bl	80088c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800abcc:	4b0a      	ldr	r3, [pc, #40]	; (800abf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	68ba      	ldr	r2, [r7, #8]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d202      	bcs.n	800abdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800abd6:	4a08      	ldr	r2, [pc, #32]	; (800abf8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	6013      	str	r3, [r2, #0]
}
 800abdc:	bf00      	nop
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}
 800abe4:	20001418 	.word	0x20001418
 800abe8:	20000f40 	.word	0x20000f40
 800abec:	20001400 	.word	0x20001400
 800abf0:	200013d0 	.word	0x200013d0
 800abf4:	200013cc 	.word	0x200013cc
 800abf8:	20001434 	.word	0x20001434

0800abfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b08a      	sub	sp, #40	; 0x28
 800ac00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ac06:	f000 fb07 	bl	800b218 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ac0a:	4b1c      	ldr	r3, [pc, #112]	; (800ac7c <xTimerCreateTimerTask+0x80>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d021      	beq.n	800ac56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ac1a:	1d3a      	adds	r2, r7, #4
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	f107 030c 	add.w	r3, r7, #12
 800ac24:	4618      	mov	r0, r3
 800ac26:	f7fd fde3 	bl	80087f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ac2a:	6879      	ldr	r1, [r7, #4]
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	68fa      	ldr	r2, [r7, #12]
 800ac30:	9202      	str	r2, [sp, #8]
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	2302      	movs	r3, #2
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	2300      	movs	r3, #0
 800ac3a:	460a      	mov	r2, r1
 800ac3c:	4910      	ldr	r1, [pc, #64]	; (800ac80 <xTimerCreateTimerTask+0x84>)
 800ac3e:	4811      	ldr	r0, [pc, #68]	; (800ac84 <xTimerCreateTimerTask+0x88>)
 800ac40:	f7fe fda4 	bl	800978c <xTaskCreateStatic>
 800ac44:	4603      	mov	r3, r0
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <xTimerCreateTimerTask+0x8c>)
 800ac48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ac4a:	4b0f      	ldr	r3, [pc, #60]	; (800ac88 <xTimerCreateTimerTask+0x8c>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ac52:	2301      	movs	r3, #1
 800ac54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ac56:	697b      	ldr	r3, [r7, #20]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10a      	bne.n	800ac72 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ac5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac60:	f383 8811 	msr	BASEPRI, r3
 800ac64:	f3bf 8f6f 	isb	sy
 800ac68:	f3bf 8f4f 	dsb	sy
 800ac6c:	613b      	str	r3, [r7, #16]
}
 800ac6e:	bf00      	nop
 800ac70:	e7fe      	b.n	800ac70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ac72:	697b      	ldr	r3, [r7, #20]
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}
 800ac7c:	20001470 	.word	0x20001470
 800ac80:	0800c648 	.word	0x0800c648
 800ac84:	0800adc1 	.word	0x0800adc1
 800ac88:	20001474 	.word	0x20001474

0800ac8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08a      	sub	sp, #40	; 0x28
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d10a      	bne.n	800acba <xTimerGenericCommand+0x2e>
	__asm volatile
 800aca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca8:	f383 8811 	msr	BASEPRI, r3
 800acac:	f3bf 8f6f 	isb	sy
 800acb0:	f3bf 8f4f 	dsb	sy
 800acb4:	623b      	str	r3, [r7, #32]
}
 800acb6:	bf00      	nop
 800acb8:	e7fe      	b.n	800acb8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800acba:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <xTimerGenericCommand+0x98>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d02a      	beq.n	800ad18 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b05      	cmp	r3, #5
 800acd2:	dc18      	bgt.n	800ad06 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800acd4:	f7ff fbb2 	bl	800a43c <xTaskGetSchedulerState>
 800acd8:	4603      	mov	r3, r0
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d109      	bne.n	800acf2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800acde:	4b11      	ldr	r3, [pc, #68]	; (800ad24 <xTimerGenericCommand+0x98>)
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	f107 0110 	add.w	r1, r7, #16
 800ace6:	2300      	movs	r3, #0
 800ace8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800acea:	f7fe f843 	bl	8008d74 <xQueueGenericSend>
 800acee:	6278      	str	r0, [r7, #36]	; 0x24
 800acf0:	e012      	b.n	800ad18 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800acf2:	4b0c      	ldr	r3, [pc, #48]	; (800ad24 <xTimerGenericCommand+0x98>)
 800acf4:	6818      	ldr	r0, [r3, #0]
 800acf6:	f107 0110 	add.w	r1, r7, #16
 800acfa:	2300      	movs	r3, #0
 800acfc:	2200      	movs	r2, #0
 800acfe:	f7fe f839 	bl	8008d74 <xQueueGenericSend>
 800ad02:	6278      	str	r0, [r7, #36]	; 0x24
 800ad04:	e008      	b.n	800ad18 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ad06:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <xTimerGenericCommand+0x98>)
 800ad08:	6818      	ldr	r0, [r3, #0]
 800ad0a:	f107 0110 	add.w	r1, r7, #16
 800ad0e:	2300      	movs	r3, #0
 800ad10:	683a      	ldr	r2, [r7, #0]
 800ad12:	f7fe f92d 	bl	8008f70 <xQueueGenericSendFromISR>
 800ad16:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ad18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3728      	adds	r7, #40	; 0x28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20001470 	.word	0x20001470

0800ad28 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b088      	sub	sp, #32
 800ad2c:	af02      	add	r7, sp, #8
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad32:	4b22      	ldr	r3, [pc, #136]	; (800adbc <prvProcessExpiredTimer+0x94>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	3304      	adds	r3, #4
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7fd fdf9 	bl	8008938 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d022      	beq.n	800ad9a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	699a      	ldr	r2, [r3, #24]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	18d1      	adds	r1, r2, r3
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	6978      	ldr	r0, [r7, #20]
 800ad62:	f000 f8d1 	bl	800af08 <prvInsertTimerInActiveList>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d01f      	beq.n	800adac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	9300      	str	r3, [sp, #0]
 800ad70:	2300      	movs	r3, #0
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	2100      	movs	r1, #0
 800ad76:	6978      	ldr	r0, [r7, #20]
 800ad78:	f7ff ff88 	bl	800ac8c <xTimerGenericCommand>
 800ad7c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d113      	bne.n	800adac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ad84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad88:	f383 8811 	msr	BASEPRI, r3
 800ad8c:	f3bf 8f6f 	isb	sy
 800ad90:	f3bf 8f4f 	dsb	sy
 800ad94:	60fb      	str	r3, [r7, #12]
}
 800ad96:	bf00      	nop
 800ad98:	e7fe      	b.n	800ad98 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ada0:	f023 0301 	bic.w	r3, r3, #1
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	697b      	ldr	r3, [r7, #20]
 800ada8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	6a1b      	ldr	r3, [r3, #32]
 800adb0:	6978      	ldr	r0, [r7, #20]
 800adb2:	4798      	blx	r3
}
 800adb4:	bf00      	nop
 800adb6:	3718      	adds	r7, #24
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20001468 	.word	0x20001468

0800adc0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800adc8:	f107 0308 	add.w	r3, r7, #8
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f857 	bl	800ae80 <prvGetNextExpireTime>
 800add2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4619      	mov	r1, r3
 800add8:	68f8      	ldr	r0, [r7, #12]
 800adda:	f000 f803 	bl	800ade4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800adde:	f000 f8d5 	bl	800af8c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ade2:	e7f1      	b.n	800adc8 <prvTimerTask+0x8>

0800ade4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b084      	sub	sp, #16
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800adee:	f7fe ff29 	bl	8009c44 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800adf2:	f107 0308 	add.w	r3, r7, #8
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 f866 	bl	800aec8 <prvSampleTimeNow>
 800adfc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d130      	bne.n	800ae66 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d10a      	bne.n	800ae20 <prvProcessTimerOrBlockTask+0x3c>
 800ae0a:	687a      	ldr	r2, [r7, #4]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d806      	bhi.n	800ae20 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ae12:	f7fe ff25 	bl	8009c60 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f7ff ff85 	bl	800ad28 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ae1e:	e024      	b.n	800ae6a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d008      	beq.n	800ae38 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ae26:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <prvProcessTimerOrBlockTask+0x90>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d101      	bne.n	800ae34 <prvProcessTimerOrBlockTask+0x50>
 800ae30:	2301      	movs	r3, #1
 800ae32:	e000      	b.n	800ae36 <prvProcessTimerOrBlockTask+0x52>
 800ae34:	2300      	movs	r3, #0
 800ae36:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ae38:	4b0f      	ldr	r3, [pc, #60]	; (800ae78 <prvProcessTimerOrBlockTask+0x94>)
 800ae3a:	6818      	ldr	r0, [r3, #0]
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	1ad3      	subs	r3, r2, r3
 800ae42:	683a      	ldr	r2, [r7, #0]
 800ae44:	4619      	mov	r1, r3
 800ae46:	f7fe fc6d 	bl	8009724 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ae4a:	f7fe ff09 	bl	8009c60 <xTaskResumeAll>
 800ae4e:	4603      	mov	r3, r0
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d10a      	bne.n	800ae6a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ae54:	4b09      	ldr	r3, [pc, #36]	; (800ae7c <prvProcessTimerOrBlockTask+0x98>)
 800ae56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	f3bf 8f4f 	dsb	sy
 800ae60:	f3bf 8f6f 	isb	sy
}
 800ae64:	e001      	b.n	800ae6a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ae66:	f7fe fefb 	bl	8009c60 <xTaskResumeAll>
}
 800ae6a:	bf00      	nop
 800ae6c:	3710      	adds	r7, #16
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	2000146c 	.word	0x2000146c
 800ae78:	20001470 	.word	0x20001470
 800ae7c:	e000ed04 	.word	0xe000ed04

0800ae80 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ae88:	4b0e      	ldr	r3, [pc, #56]	; (800aec4 <prvGetNextExpireTime+0x44>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d101      	bne.n	800ae96 <prvGetNextExpireTime+0x16>
 800ae92:	2201      	movs	r2, #1
 800ae94:	e000      	b.n	800ae98 <prvGetNextExpireTime+0x18>
 800ae96:	2200      	movs	r2, #0
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aea4:	4b07      	ldr	r3, [pc, #28]	; (800aec4 <prvGetNextExpireTime+0x44>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	60fb      	str	r3, [r7, #12]
 800aeae:	e001      	b.n	800aeb4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	3714      	adds	r7, #20
 800aeba:	46bd      	mov	sp, r7
 800aebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec0:	4770      	bx	lr
 800aec2:	bf00      	nop
 800aec4:	20001468 	.word	0x20001468

0800aec8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800aed0:	f7fe ff64 	bl	8009d9c <xTaskGetTickCount>
 800aed4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800aed6:	4b0b      	ldr	r3, [pc, #44]	; (800af04 <prvSampleTimeNow+0x3c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	68fa      	ldr	r2, [r7, #12]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d205      	bcs.n	800aeec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800aee0:	f000 f936 	bl	800b150 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	601a      	str	r2, [r3, #0]
 800aeea:	e002      	b.n	800aef2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800aef2:	4a04      	ldr	r2, [pc, #16]	; (800af04 <prvSampleTimeNow+0x3c>)
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800aef8:	68fb      	ldr	r3, [r7, #12]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3710      	adds	r7, #16
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	20001478 	.word	0x20001478

0800af08 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	60f8      	str	r0, [r7, #12]
 800af10:	60b9      	str	r1, [r7, #8]
 800af12:	607a      	str	r2, [r7, #4]
 800af14:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800af16:	2300      	movs	r3, #0
 800af18:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d812      	bhi.n	800af54 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800af2e:	687a      	ldr	r2, [r7, #4]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	1ad2      	subs	r2, r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d302      	bcc.n	800af42 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800af3c:	2301      	movs	r3, #1
 800af3e:	617b      	str	r3, [r7, #20]
 800af40:	e01b      	b.n	800af7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800af42:	4b10      	ldr	r3, [pc, #64]	; (800af84 <prvInsertTimerInActiveList+0x7c>)
 800af44:	681a      	ldr	r2, [r3, #0]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	3304      	adds	r3, #4
 800af4a:	4619      	mov	r1, r3
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7fd fcba 	bl	80088c6 <vListInsert>
 800af52:	e012      	b.n	800af7a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800af54:	687a      	ldr	r2, [r7, #4]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d206      	bcs.n	800af6a <prvInsertTimerInActiveList+0x62>
 800af5c:	68ba      	ldr	r2, [r7, #8]
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	429a      	cmp	r2, r3
 800af62:	d302      	bcc.n	800af6a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800af64:	2301      	movs	r3, #1
 800af66:	617b      	str	r3, [r7, #20]
 800af68:	e007      	b.n	800af7a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800af6a:	4b07      	ldr	r3, [pc, #28]	; (800af88 <prvInsertTimerInActiveList+0x80>)
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3304      	adds	r3, #4
 800af72:	4619      	mov	r1, r3
 800af74:	4610      	mov	r0, r2
 800af76:	f7fd fca6 	bl	80088c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800af7a:	697b      	ldr	r3, [r7, #20]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3718      	adds	r7, #24
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}
 800af84:	2000146c 	.word	0x2000146c
 800af88:	20001468 	.word	0x20001468

0800af8c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b08e      	sub	sp, #56	; 0x38
 800af90:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af92:	e0ca      	b.n	800b12a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2b00      	cmp	r3, #0
 800af98:	da18      	bge.n	800afcc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800af9a:	1d3b      	adds	r3, r7, #4
 800af9c:	3304      	adds	r3, #4
 800af9e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800afa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10a      	bne.n	800afbc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800afa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	61fb      	str	r3, [r7, #28]
}
 800afb8:	bf00      	nop
 800afba:	e7fe      	b.n	800afba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800afbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc2:	6850      	ldr	r0, [r2, #4]
 800afc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afc6:	6892      	ldr	r2, [r2, #8]
 800afc8:	4611      	mov	r1, r2
 800afca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	f2c0 80ab 	blt.w	800b12a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800afd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afda:	695b      	ldr	r3, [r3, #20]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d004      	beq.n	800afea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	3304      	adds	r3, #4
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7fd fca7 	bl	8008938 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800afea:	463b      	mov	r3, r7
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff ff6b 	bl	800aec8 <prvSampleTimeNow>
 800aff2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b09      	cmp	r3, #9
 800aff8:	f200 8096 	bhi.w	800b128 <prvProcessReceivedCommands+0x19c>
 800affc:	a201      	add	r2, pc, #4	; (adr r2, 800b004 <prvProcessReceivedCommands+0x78>)
 800affe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b002:	bf00      	nop
 800b004:	0800b02d 	.word	0x0800b02d
 800b008:	0800b02d 	.word	0x0800b02d
 800b00c:	0800b02d 	.word	0x0800b02d
 800b010:	0800b0a1 	.word	0x0800b0a1
 800b014:	0800b0b5 	.word	0x0800b0b5
 800b018:	0800b0ff 	.word	0x0800b0ff
 800b01c:	0800b02d 	.word	0x0800b02d
 800b020:	0800b02d 	.word	0x0800b02d
 800b024:	0800b0a1 	.word	0x0800b0a1
 800b028:	0800b0b5 	.word	0x0800b0b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b02c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b032:	f043 0301 	orr.w	r3, r3, #1
 800b036:	b2da      	uxtb	r2, r3
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b042:	699b      	ldr	r3, [r3, #24]
 800b044:	18d1      	adds	r1, r2, r3
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b04a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b04c:	f7ff ff5c 	bl	800af08 <prvInsertTimerInActiveList>
 800b050:	4603      	mov	r3, r0
 800b052:	2b00      	cmp	r3, #0
 800b054:	d069      	beq.n	800b12a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	6a1b      	ldr	r3, [r3, #32]
 800b05a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b05c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b05e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b064:	f003 0304 	and.w	r3, r3, #4
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d05e      	beq.n	800b12a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b06c:	68ba      	ldr	r2, [r7, #8]
 800b06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b070:	699b      	ldr	r3, [r3, #24]
 800b072:	441a      	add	r2, r3
 800b074:	2300      	movs	r3, #0
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	2300      	movs	r3, #0
 800b07a:	2100      	movs	r1, #0
 800b07c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b07e:	f7ff fe05 	bl	800ac8c <xTimerGenericCommand>
 800b082:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b084:	6a3b      	ldr	r3, [r7, #32]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d14f      	bne.n	800b12a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08e:	f383 8811 	msr	BASEPRI, r3
 800b092:	f3bf 8f6f 	isb	sy
 800b096:	f3bf 8f4f 	dsb	sy
 800b09a:	61bb      	str	r3, [r7, #24]
}
 800b09c:	bf00      	nop
 800b09e:	e7fe      	b.n	800b09e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b0a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0a6:	f023 0301 	bic.w	r3, r3, #1
 800b0aa:	b2da      	uxtb	r2, r3
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b0b2:	e03a      	b.n	800b12a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b0ba:	f043 0301 	orr.w	r3, r3, #1
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b0c6:	68ba      	ldr	r2, [r7, #8]
 800b0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d10a      	bne.n	800b0ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	617b      	str	r3, [r7, #20]
}
 800b0e6:	bf00      	nop
 800b0e8:	e7fe      	b.n	800b0e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f0:	18d1      	adds	r1, r2, r3
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f8:	f7ff ff06 	bl	800af08 <prvInsertTimerInActiveList>
					break;
 800b0fc:	e015      	b.n	800b12a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b100:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d103      	bne.n	800b114 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b10c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b10e:	f000 fbdf 	bl	800b8d0 <vPortFree>
 800b112:	e00a      	b.n	800b12a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b11a:	f023 0301 	bic.w	r3, r3, #1
 800b11e:	b2da      	uxtb	r2, r3
 800b120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b126:	e000      	b.n	800b12a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800b128:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b12a:	4b08      	ldr	r3, [pc, #32]	; (800b14c <prvProcessReceivedCommands+0x1c0>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	1d39      	adds	r1, r7, #4
 800b130:	2200      	movs	r2, #0
 800b132:	4618      	mov	r0, r3
 800b134:	f7fd ffb8 	bl	80090a8 <xQueueReceive>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	f47f af2a 	bne.w	800af94 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b140:	bf00      	nop
 800b142:	bf00      	nop
 800b144:	3730      	adds	r7, #48	; 0x30
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	20001470 	.word	0x20001470

0800b150 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b088      	sub	sp, #32
 800b154:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b156:	e048      	b.n	800b1ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b158:	4b2d      	ldr	r3, [pc, #180]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b162:	4b2b      	ldr	r3, [pc, #172]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	68db      	ldr	r3, [r3, #12]
 800b168:	68db      	ldr	r3, [r3, #12]
 800b16a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	3304      	adds	r3, #4
 800b170:	4618      	mov	r0, r3
 800b172:	f7fd fbe1 	bl	8008938 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b184:	f003 0304 	and.w	r3, r3, #4
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d02e      	beq.n	800b1ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	699b      	ldr	r3, [r3, #24]
 800b190:	693a      	ldr	r2, [r7, #16]
 800b192:	4413      	add	r3, r2
 800b194:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d90e      	bls.n	800b1bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	68ba      	ldr	r2, [r7, #8]
 800b1a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b1aa:	4b19      	ldr	r3, [pc, #100]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4619      	mov	r1, r3
 800b1b4:	4610      	mov	r0, r2
 800b1b6:	f7fd fb86 	bl	80088c6 <vListInsert>
 800b1ba:	e016      	b.n	800b1ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b1bc:	2300      	movs	r3, #0
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	693a      	ldr	r2, [r7, #16]
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7ff fd60 	bl	800ac8c <xTimerGenericCommand>
 800b1cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10a      	bne.n	800b1ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b1d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d8:	f383 8811 	msr	BASEPRI, r3
 800b1dc:	f3bf 8f6f 	isb	sy
 800b1e0:	f3bf 8f4f 	dsb	sy
 800b1e4:	603b      	str	r3, [r7, #0]
}
 800b1e6:	bf00      	nop
 800b1e8:	e7fe      	b.n	800b1e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1b1      	bne.n	800b158 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <prvSwitchTimerLists+0xc4>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4a04      	ldr	r2, [pc, #16]	; (800b210 <prvSwitchTimerLists+0xc0>)
 800b200:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b202:	4a04      	ldr	r2, [pc, #16]	; (800b214 <prvSwitchTimerLists+0xc4>)
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	6013      	str	r3, [r2, #0]
}
 800b208:	bf00      	nop
 800b20a:	3718      	adds	r7, #24
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}
 800b210:	20001468 	.word	0x20001468
 800b214:	2000146c 	.word	0x2000146c

0800b218 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b082      	sub	sp, #8
 800b21c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b21e:	f000 f969 	bl	800b4f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b222:	4b15      	ldr	r3, [pc, #84]	; (800b278 <prvCheckForValidListAndQueue+0x60>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d120      	bne.n	800b26c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b22a:	4814      	ldr	r0, [pc, #80]	; (800b27c <prvCheckForValidListAndQueue+0x64>)
 800b22c:	f7fd fafa 	bl	8008824 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b230:	4813      	ldr	r0, [pc, #76]	; (800b280 <prvCheckForValidListAndQueue+0x68>)
 800b232:	f7fd faf7 	bl	8008824 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b236:	4b13      	ldr	r3, [pc, #76]	; (800b284 <prvCheckForValidListAndQueue+0x6c>)
 800b238:	4a10      	ldr	r2, [pc, #64]	; (800b27c <prvCheckForValidListAndQueue+0x64>)
 800b23a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b23c:	4b12      	ldr	r3, [pc, #72]	; (800b288 <prvCheckForValidListAndQueue+0x70>)
 800b23e:	4a10      	ldr	r2, [pc, #64]	; (800b280 <prvCheckForValidListAndQueue+0x68>)
 800b240:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b242:	2300      	movs	r3, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	4b11      	ldr	r3, [pc, #68]	; (800b28c <prvCheckForValidListAndQueue+0x74>)
 800b248:	4a11      	ldr	r2, [pc, #68]	; (800b290 <prvCheckForValidListAndQueue+0x78>)
 800b24a:	2110      	movs	r1, #16
 800b24c:	200a      	movs	r0, #10
 800b24e:	f7fd fc05 	bl	8008a5c <xQueueGenericCreateStatic>
 800b252:	4603      	mov	r3, r0
 800b254:	4a08      	ldr	r2, [pc, #32]	; (800b278 <prvCheckForValidListAndQueue+0x60>)
 800b256:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b258:	4b07      	ldr	r3, [pc, #28]	; (800b278 <prvCheckForValidListAndQueue+0x60>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d005      	beq.n	800b26c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b260:	4b05      	ldr	r3, [pc, #20]	; (800b278 <prvCheckForValidListAndQueue+0x60>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	490b      	ldr	r1, [pc, #44]	; (800b294 <prvCheckForValidListAndQueue+0x7c>)
 800b266:	4618      	mov	r0, r3
 800b268:	f7fe fa32 	bl	80096d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b26c:	f000 f972 	bl	800b554 <vPortExitCritical>
}
 800b270:	bf00      	nop
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20001470 	.word	0x20001470
 800b27c:	20001440 	.word	0x20001440
 800b280:	20001454 	.word	0x20001454
 800b284:	20001468 	.word	0x20001468
 800b288:	2000146c 	.word	0x2000146c
 800b28c:	2000151c 	.word	0x2000151c
 800b290:	2000147c 	.word	0x2000147c
 800b294:	0800c650 	.word	0x0800c650

0800b298 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b298:	b480      	push	{r7}
 800b29a:	b085      	sub	sp, #20
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	3b04      	subs	r3, #4
 800b2a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b2b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3b04      	subs	r3, #4
 800b2b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 0201 	bic.w	r2, r3, #1
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	3b04      	subs	r3, #4
 800b2c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b2c8:	4a0c      	ldr	r2, [pc, #48]	; (800b2fc <pxPortInitialiseStack+0x64>)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3b14      	subs	r3, #20
 800b2d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	3b04      	subs	r3, #4
 800b2de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f06f 0202 	mvn.w	r2, #2
 800b2e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	3b20      	subs	r3, #32
 800b2ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3714      	adds	r7, #20
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	0800b301 	.word	0x0800b301

0800b300 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b300:	b480      	push	{r7}
 800b302:	b085      	sub	sp, #20
 800b304:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b306:	2300      	movs	r3, #0
 800b308:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b30a:	4b12      	ldr	r3, [pc, #72]	; (800b354 <prvTaskExitError+0x54>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b312:	d00a      	beq.n	800b32a <prvTaskExitError+0x2a>
	__asm volatile
 800b314:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b318:	f383 8811 	msr	BASEPRI, r3
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	f3bf 8f4f 	dsb	sy
 800b324:	60fb      	str	r3, [r7, #12]
}
 800b326:	bf00      	nop
 800b328:	e7fe      	b.n	800b328 <prvTaskExitError+0x28>
	__asm volatile
 800b32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b32e:	f383 8811 	msr	BASEPRI, r3
 800b332:	f3bf 8f6f 	isb	sy
 800b336:	f3bf 8f4f 	dsb	sy
 800b33a:	60bb      	str	r3, [r7, #8]
}
 800b33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b33e:	bf00      	nop
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0fc      	beq.n	800b340 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b346:	bf00      	nop
 800b348:	bf00      	nop
 800b34a:	3714      	adds	r7, #20
 800b34c:	46bd      	mov	sp, r7
 800b34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b352:	4770      	bx	lr
 800b354:	2000002c 	.word	0x2000002c
	...

0800b360 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b360:	4b07      	ldr	r3, [pc, #28]	; (800b380 <pxCurrentTCBConst2>)
 800b362:	6819      	ldr	r1, [r3, #0]
 800b364:	6808      	ldr	r0, [r1, #0]
 800b366:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b36a:	f380 8809 	msr	PSP, r0
 800b36e:	f3bf 8f6f 	isb	sy
 800b372:	f04f 0000 	mov.w	r0, #0
 800b376:	f380 8811 	msr	BASEPRI, r0
 800b37a:	4770      	bx	lr
 800b37c:	f3af 8000 	nop.w

0800b380 <pxCurrentTCBConst2>:
 800b380:	20000f40 	.word	0x20000f40
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b384:	bf00      	nop
 800b386:	bf00      	nop

0800b388 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b388:	4808      	ldr	r0, [pc, #32]	; (800b3ac <prvPortStartFirstTask+0x24>)
 800b38a:	6800      	ldr	r0, [r0, #0]
 800b38c:	6800      	ldr	r0, [r0, #0]
 800b38e:	f380 8808 	msr	MSP, r0
 800b392:	f04f 0000 	mov.w	r0, #0
 800b396:	f380 8814 	msr	CONTROL, r0
 800b39a:	b662      	cpsie	i
 800b39c:	b661      	cpsie	f
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	df00      	svc	0
 800b3a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b3aa:	bf00      	nop
 800b3ac:	e000ed08 	.word	0xe000ed08

0800b3b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b3b6:	4b46      	ldr	r3, [pc, #280]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	4a46      	ldr	r2, [pc, #280]	; (800b4d4 <xPortStartScheduler+0x124>)
 800b3bc:	4293      	cmp	r3, r2
 800b3be:	d10a      	bne.n	800b3d6 <xPortStartScheduler+0x26>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	613b      	str	r3, [r7, #16]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b3d6:	4b3e      	ldr	r3, [pc, #248]	; (800b4d0 <xPortStartScheduler+0x120>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a3f      	ldr	r2, [pc, #252]	; (800b4d8 <xPortStartScheduler+0x128>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d10a      	bne.n	800b3f6 <xPortStartScheduler+0x46>
	__asm volatile
 800b3e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e4:	f383 8811 	msr	BASEPRI, r3
 800b3e8:	f3bf 8f6f 	isb	sy
 800b3ec:	f3bf 8f4f 	dsb	sy
 800b3f0:	60fb      	str	r3, [r7, #12]
}
 800b3f2:	bf00      	nop
 800b3f4:	e7fe      	b.n	800b3f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b3f6:	4b39      	ldr	r3, [pc, #228]	; (800b4dc <xPortStartScheduler+0x12c>)
 800b3f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	781b      	ldrb	r3, [r3, #0]
 800b3fe:	b2db      	uxtb	r3, r3
 800b400:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	22ff      	movs	r2, #255	; 0xff
 800b406:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b410:	78fb      	ldrb	r3, [r7, #3]
 800b412:	b2db      	uxtb	r3, r3
 800b414:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4b31      	ldr	r3, [pc, #196]	; (800b4e0 <xPortStartScheduler+0x130>)
 800b41c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b41e:	4b31      	ldr	r3, [pc, #196]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b420:	2207      	movs	r2, #7
 800b422:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b424:	e009      	b.n	800b43a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b426:	4b2f      	ldr	r3, [pc, #188]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	3b01      	subs	r3, #1
 800b42c:	4a2d      	ldr	r2, [pc, #180]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b42e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b430:	78fb      	ldrb	r3, [r7, #3]
 800b432:	b2db      	uxtb	r3, r3
 800b434:	005b      	lsls	r3, r3, #1
 800b436:	b2db      	uxtb	r3, r3
 800b438:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	b2db      	uxtb	r3, r3
 800b43e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b442:	2b80      	cmp	r3, #128	; 0x80
 800b444:	d0ef      	beq.n	800b426 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b446:	4b27      	ldr	r3, [pc, #156]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f1c3 0307 	rsb	r3, r3, #7
 800b44e:	2b04      	cmp	r3, #4
 800b450:	d00a      	beq.n	800b468 <xPortStartScheduler+0xb8>
	__asm volatile
 800b452:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b456:	f383 8811 	msr	BASEPRI, r3
 800b45a:	f3bf 8f6f 	isb	sy
 800b45e:	f3bf 8f4f 	dsb	sy
 800b462:	60bb      	str	r3, [r7, #8]
}
 800b464:	bf00      	nop
 800b466:	e7fe      	b.n	800b466 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b468:	4b1e      	ldr	r3, [pc, #120]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	021b      	lsls	r3, r3, #8
 800b46e:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b470:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b47a:	4a1a      	ldr	r2, [pc, #104]	; (800b4e4 <xPortStartScheduler+0x134>)
 800b47c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	b2da      	uxtb	r2, r3
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b486:	4b18      	ldr	r3, [pc, #96]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a17      	ldr	r2, [pc, #92]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b48c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b490:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b492:	4b15      	ldr	r3, [pc, #84]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a14      	ldr	r2, [pc, #80]	; (800b4e8 <xPortStartScheduler+0x138>)
 800b498:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b49c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b49e:	f000 f8dd 	bl	800b65c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b4a2:	4b12      	ldr	r3, [pc, #72]	; (800b4ec <xPortStartScheduler+0x13c>)
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b4a8:	f000 f8fc 	bl	800b6a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b4ac:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4a0f      	ldr	r2, [pc, #60]	; (800b4f0 <xPortStartScheduler+0x140>)
 800b4b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b4b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b4b8:	f7ff ff66 	bl	800b388 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b4bc:	f7fe fd38 	bl	8009f30 <vTaskSwitchContext>
	prvTaskExitError();
 800b4c0:	f7ff ff1e 	bl	800b300 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3718      	adds	r7, #24
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	e000ed00 	.word	0xe000ed00
 800b4d4:	410fc271 	.word	0x410fc271
 800b4d8:	410fc270 	.word	0x410fc270
 800b4dc:	e000e400 	.word	0xe000e400
 800b4e0:	2000156c 	.word	0x2000156c
 800b4e4:	20001570 	.word	0x20001570
 800b4e8:	e000ed20 	.word	0xe000ed20
 800b4ec:	2000002c 	.word	0x2000002c
 800b4f0:	e000ef34 	.word	0xe000ef34

0800b4f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
	__asm volatile
 800b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4fe:	f383 8811 	msr	BASEPRI, r3
 800b502:	f3bf 8f6f 	isb	sy
 800b506:	f3bf 8f4f 	dsb	sy
 800b50a:	607b      	str	r3, [r7, #4]
}
 800b50c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b50e:	4b0f      	ldr	r3, [pc, #60]	; (800b54c <vPortEnterCritical+0x58>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	3301      	adds	r3, #1
 800b514:	4a0d      	ldr	r2, [pc, #52]	; (800b54c <vPortEnterCritical+0x58>)
 800b516:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b518:	4b0c      	ldr	r3, [pc, #48]	; (800b54c <vPortEnterCritical+0x58>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d10f      	bne.n	800b540 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b520:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <vPortEnterCritical+0x5c>)
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	b2db      	uxtb	r3, r3
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00a      	beq.n	800b540 <vPortEnterCritical+0x4c>
	__asm volatile
 800b52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52e:	f383 8811 	msr	BASEPRI, r3
 800b532:	f3bf 8f6f 	isb	sy
 800b536:	f3bf 8f4f 	dsb	sy
 800b53a:	603b      	str	r3, [r7, #0]
}
 800b53c:	bf00      	nop
 800b53e:	e7fe      	b.n	800b53e <vPortEnterCritical+0x4a>
	}
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	2000002c 	.word	0x2000002c
 800b550:	e000ed04 	.word	0xe000ed04

0800b554 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b55a:	4b12      	ldr	r3, [pc, #72]	; (800b5a4 <vPortExitCritical+0x50>)
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d10a      	bne.n	800b578 <vPortExitCritical+0x24>
	__asm volatile
 800b562:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b566:	f383 8811 	msr	BASEPRI, r3
 800b56a:	f3bf 8f6f 	isb	sy
 800b56e:	f3bf 8f4f 	dsb	sy
 800b572:	607b      	str	r3, [r7, #4]
}
 800b574:	bf00      	nop
 800b576:	e7fe      	b.n	800b576 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b578:	4b0a      	ldr	r3, [pc, #40]	; (800b5a4 <vPortExitCritical+0x50>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4a09      	ldr	r2, [pc, #36]	; (800b5a4 <vPortExitCritical+0x50>)
 800b580:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b582:	4b08      	ldr	r3, [pc, #32]	; (800b5a4 <vPortExitCritical+0x50>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d105      	bne.n	800b596 <vPortExitCritical+0x42>
 800b58a:	2300      	movs	r3, #0
 800b58c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	f383 8811 	msr	BASEPRI, r3
}
 800b594:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b596:	bf00      	nop
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	2000002c 	.word	0x2000002c
	...

0800b5b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b5b0:	f3ef 8009 	mrs	r0, PSP
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	4b15      	ldr	r3, [pc, #84]	; (800b610 <pxCurrentTCBConst>)
 800b5ba:	681a      	ldr	r2, [r3, #0]
 800b5bc:	f01e 0f10 	tst.w	lr, #16
 800b5c0:	bf08      	it	eq
 800b5c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b5c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ca:	6010      	str	r0, [r2, #0]
 800b5cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b5d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b5d4:	f380 8811 	msr	BASEPRI, r0
 800b5d8:	f3bf 8f4f 	dsb	sy
 800b5dc:	f3bf 8f6f 	isb	sy
 800b5e0:	f7fe fca6 	bl	8009f30 <vTaskSwitchContext>
 800b5e4:	f04f 0000 	mov.w	r0, #0
 800b5e8:	f380 8811 	msr	BASEPRI, r0
 800b5ec:	bc09      	pop	{r0, r3}
 800b5ee:	6819      	ldr	r1, [r3, #0]
 800b5f0:	6808      	ldr	r0, [r1, #0]
 800b5f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5f6:	f01e 0f10 	tst.w	lr, #16
 800b5fa:	bf08      	it	eq
 800b5fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b600:	f380 8809 	msr	PSP, r0
 800b604:	f3bf 8f6f 	isb	sy
 800b608:	4770      	bx	lr
 800b60a:	bf00      	nop
 800b60c:	f3af 8000 	nop.w

0800b610 <pxCurrentTCBConst>:
 800b610:	20000f40 	.word	0x20000f40
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop

0800b618 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
	__asm volatile
 800b61e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	607b      	str	r3, [r7, #4]
}
 800b630:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b632:	f7fe fbc3 	bl	8009dbc <xTaskIncrementTick>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b63c:	4b06      	ldr	r3, [pc, #24]	; (800b658 <xPortSysTickHandler+0x40>)
 800b63e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b642:	601a      	str	r2, [r3, #0]
 800b644:	2300      	movs	r3, #0
 800b646:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	f383 8811 	msr	BASEPRI, r3
}
 800b64e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b650:	bf00      	nop
 800b652:	3708      	adds	r7, #8
 800b654:	46bd      	mov	sp, r7
 800b656:	bd80      	pop	{r7, pc}
 800b658:	e000ed04 	.word	0xe000ed04

0800b65c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b65c:	b480      	push	{r7}
 800b65e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b660:	4b0b      	ldr	r3, [pc, #44]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b666:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <vPortSetupTimerInterrupt+0x38>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b66c:	4b0a      	ldr	r3, [pc, #40]	; (800b698 <vPortSetupTimerInterrupt+0x3c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a0a      	ldr	r2, [pc, #40]	; (800b69c <vPortSetupTimerInterrupt+0x40>)
 800b672:	fba2 2303 	umull	r2, r3, r2, r3
 800b676:	099b      	lsrs	r3, r3, #6
 800b678:	4a09      	ldr	r2, [pc, #36]	; (800b6a0 <vPortSetupTimerInterrupt+0x44>)
 800b67a:	3b01      	subs	r3, #1
 800b67c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b67e:	4b04      	ldr	r3, [pc, #16]	; (800b690 <vPortSetupTimerInterrupt+0x34>)
 800b680:	2207      	movs	r2, #7
 800b682:	601a      	str	r2, [r3, #0]
}
 800b684:	bf00      	nop
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	e000e010 	.word	0xe000e010
 800b694:	e000e018 	.word	0xe000e018
 800b698:	20000020 	.word	0x20000020
 800b69c:	10624dd3 	.word	0x10624dd3
 800b6a0:	e000e014 	.word	0xe000e014

0800b6a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b6a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b6b4 <vPortEnableVFP+0x10>
 800b6a8:	6801      	ldr	r1, [r0, #0]
 800b6aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b6ae:	6001      	str	r1, [r0, #0]
 800b6b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b6b2:	bf00      	nop
 800b6b4:	e000ed88 	.word	0xe000ed88

0800b6b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b6be:	f3ef 8305 	mrs	r3, IPSR
 800b6c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	2b0f      	cmp	r3, #15
 800b6c8:	d914      	bls.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b6ca:	4a17      	ldr	r2, [pc, #92]	; (800b728 <vPortValidateInterruptPriority+0x70>)
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b6d4:	4b15      	ldr	r3, [pc, #84]	; (800b72c <vPortValidateInterruptPriority+0x74>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	7afa      	ldrb	r2, [r7, #11]
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d20a      	bcs.n	800b6f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	607b      	str	r3, [r7, #4]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b6f4:	4b0e      	ldr	r3, [pc, #56]	; (800b730 <vPortValidateInterruptPriority+0x78>)
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b6fc:	4b0d      	ldr	r3, [pc, #52]	; (800b734 <vPortValidateInterruptPriority+0x7c>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	429a      	cmp	r2, r3
 800b702:	d90a      	bls.n	800b71a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b708:	f383 8811 	msr	BASEPRI, r3
 800b70c:	f3bf 8f6f 	isb	sy
 800b710:	f3bf 8f4f 	dsb	sy
 800b714:	603b      	str	r3, [r7, #0]
}
 800b716:	bf00      	nop
 800b718:	e7fe      	b.n	800b718 <vPortValidateInterruptPriority+0x60>
	}
 800b71a:	bf00      	nop
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	e000e3f0 	.word	0xe000e3f0
 800b72c:	2000156c 	.word	0x2000156c
 800b730:	e000ed0c 	.word	0xe000ed0c
 800b734:	20001570 	.word	0x20001570

0800b738 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b744:	f7fe fa7e 	bl	8009c44 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b748:	4b5b      	ldr	r3, [pc, #364]	; (800b8b8 <pvPortMalloc+0x180>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b750:	f000 f920 	bl	800b994 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b754:	4b59      	ldr	r3, [pc, #356]	; (800b8bc <pvPortMalloc+0x184>)
 800b756:	681a      	ldr	r2, [r3, #0]
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	4013      	ands	r3, r2
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	f040 8093 	bne.w	800b888 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01d      	beq.n	800b7a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b768:	2208      	movs	r2, #8
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	4413      	add	r3, r2
 800b76e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f003 0307 	and.w	r3, r3, #7
 800b776:	2b00      	cmp	r3, #0
 800b778:	d014      	beq.n	800b7a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f023 0307 	bic.w	r3, r3, #7
 800b780:	3308      	adds	r3, #8
 800b782:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f003 0307 	and.w	r3, r3, #7
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d00a      	beq.n	800b7a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	617b      	str	r3, [r7, #20]
}
 800b7a0:	bf00      	nop
 800b7a2:	e7fe      	b.n	800b7a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d06e      	beq.n	800b888 <pvPortMalloc+0x150>
 800b7aa:	4b45      	ldr	r3, [pc, #276]	; (800b8c0 <pvPortMalloc+0x188>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d869      	bhi.n	800b888 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b7b4:	4b43      	ldr	r3, [pc, #268]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b7b8:	4b42      	ldr	r3, [pc, #264]	; (800b8c4 <pvPortMalloc+0x18c>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7be:	e004      	b.n	800b7ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	685b      	ldr	r3, [r3, #4]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d903      	bls.n	800b7dc <pvPortMalloc+0xa4>
 800b7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d1f1      	bne.n	800b7c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b7dc:	4b36      	ldr	r3, [pc, #216]	; (800b8b8 <pvPortMalloc+0x180>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d050      	beq.n	800b888 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b7e6:	6a3b      	ldr	r3, [r7, #32]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	4413      	add	r3, r2
 800b7ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	6a3b      	ldr	r3, [r7, #32]
 800b7f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	685a      	ldr	r2, [r3, #4]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	2308      	movs	r3, #8
 800b802:	005b      	lsls	r3, r3, #1
 800b804:	429a      	cmp	r2, r3
 800b806:	d91f      	bls.n	800b848 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b810:	69bb      	ldr	r3, [r7, #24]
 800b812:	f003 0307 	and.w	r3, r3, #7
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00a      	beq.n	800b830 <pvPortMalloc+0xf8>
	__asm volatile
 800b81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b81e:	f383 8811 	msr	BASEPRI, r3
 800b822:	f3bf 8f6f 	isb	sy
 800b826:	f3bf 8f4f 	dsb	sy
 800b82a:	613b      	str	r3, [r7, #16]
}
 800b82c:	bf00      	nop
 800b82e:	e7fe      	b.n	800b82e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	685a      	ldr	r2, [r3, #4]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	1ad2      	subs	r2, r2, r3
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b842:	69b8      	ldr	r0, [r7, #24]
 800b844:	f000 f908 	bl	800ba58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b848:	4b1d      	ldr	r3, [pc, #116]	; (800b8c0 <pvPortMalloc+0x188>)
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	1ad3      	subs	r3, r2, r3
 800b852:	4a1b      	ldr	r2, [pc, #108]	; (800b8c0 <pvPortMalloc+0x188>)
 800b854:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b856:	4b1a      	ldr	r3, [pc, #104]	; (800b8c0 <pvPortMalloc+0x188>)
 800b858:	681a      	ldr	r2, [r3, #0]
 800b85a:	4b1b      	ldr	r3, [pc, #108]	; (800b8c8 <pvPortMalloc+0x190>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	429a      	cmp	r2, r3
 800b860:	d203      	bcs.n	800b86a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b862:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <pvPortMalloc+0x188>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a18      	ldr	r2, [pc, #96]	; (800b8c8 <pvPortMalloc+0x190>)
 800b868:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b86c:	685a      	ldr	r2, [r3, #4]
 800b86e:	4b13      	ldr	r3, [pc, #76]	; (800b8bc <pvPortMalloc+0x184>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	431a      	orrs	r2, r3
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b87e:	4b13      	ldr	r3, [pc, #76]	; (800b8cc <pvPortMalloc+0x194>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	3301      	adds	r3, #1
 800b884:	4a11      	ldr	r2, [pc, #68]	; (800b8cc <pvPortMalloc+0x194>)
 800b886:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b888:	f7fe f9ea 	bl	8009c60 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b88c:	69fb      	ldr	r3, [r7, #28]
 800b88e:	f003 0307 	and.w	r3, r3, #7
 800b892:	2b00      	cmp	r3, #0
 800b894:	d00a      	beq.n	800b8ac <pvPortMalloc+0x174>
	__asm volatile
 800b896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b89a:	f383 8811 	msr	BASEPRI, r3
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f3bf 8f4f 	dsb	sy
 800b8a6:	60fb      	str	r3, [r7, #12]
}
 800b8a8:	bf00      	nop
 800b8aa:	e7fe      	b.n	800b8aa <pvPortMalloc+0x172>
	return pvReturn;
 800b8ac:	69fb      	ldr	r3, [r7, #28]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3728      	adds	r7, #40	; 0x28
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	2000557c 	.word	0x2000557c
 800b8bc:	20005590 	.word	0x20005590
 800b8c0:	20005580 	.word	0x20005580
 800b8c4:	20005574 	.word	0x20005574
 800b8c8:	20005584 	.word	0x20005584
 800b8cc:	20005588 	.word	0x20005588

0800b8d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d04d      	beq.n	800b97e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b8e2:	2308      	movs	r3, #8
 800b8e4:	425b      	negs	r3, r3
 800b8e6:	697a      	ldr	r2, [r7, #20]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	4b24      	ldr	r3, [pc, #144]	; (800b988 <vPortFree+0xb8>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4013      	ands	r3, r2
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d10a      	bne.n	800b914 <vPortFree+0x44>
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	60fb      	str	r3, [r7, #12]
}
 800b910:	bf00      	nop
 800b912:	e7fe      	b.n	800b912 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00a      	beq.n	800b932 <vPortFree+0x62>
	__asm volatile
 800b91c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b920:	f383 8811 	msr	BASEPRI, r3
 800b924:	f3bf 8f6f 	isb	sy
 800b928:	f3bf 8f4f 	dsb	sy
 800b92c:	60bb      	str	r3, [r7, #8]
}
 800b92e:	bf00      	nop
 800b930:	e7fe      	b.n	800b930 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	685a      	ldr	r2, [r3, #4]
 800b936:	4b14      	ldr	r3, [pc, #80]	; (800b988 <vPortFree+0xb8>)
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01e      	beq.n	800b97e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d11a      	bne.n	800b97e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b948:	693b      	ldr	r3, [r7, #16]
 800b94a:	685a      	ldr	r2, [r3, #4]
 800b94c:	4b0e      	ldr	r3, [pc, #56]	; (800b988 <vPortFree+0xb8>)
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	43db      	mvns	r3, r3
 800b952:	401a      	ands	r2, r3
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b958:	f7fe f974 	bl	8009c44 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	685a      	ldr	r2, [r3, #4]
 800b960:	4b0a      	ldr	r3, [pc, #40]	; (800b98c <vPortFree+0xbc>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4413      	add	r3, r2
 800b966:	4a09      	ldr	r2, [pc, #36]	; (800b98c <vPortFree+0xbc>)
 800b968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b96a:	6938      	ldr	r0, [r7, #16]
 800b96c:	f000 f874 	bl	800ba58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <vPortFree+0xc0>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a06      	ldr	r2, [pc, #24]	; (800b990 <vPortFree+0xc0>)
 800b978:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b97a:	f7fe f971 	bl	8009c60 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b97e:	bf00      	nop
 800b980:	3718      	adds	r7, #24
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
 800b986:	bf00      	nop
 800b988:	20005590 	.word	0x20005590
 800b98c:	20005580 	.word	0x20005580
 800b990:	2000558c 	.word	0x2000558c

0800b994 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b085      	sub	sp, #20
 800b998:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b99a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b99e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b9a0:	4b27      	ldr	r3, [pc, #156]	; (800ba40 <prvHeapInit+0xac>)
 800b9a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0307 	and.w	r3, r3, #7
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d00c      	beq.n	800b9c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	3307      	adds	r3, #7
 800b9b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f023 0307 	bic.w	r3, r3, #7
 800b9ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b9bc:	68ba      	ldr	r2, [r7, #8]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	4a1f      	ldr	r2, [pc, #124]	; (800ba40 <prvHeapInit+0xac>)
 800b9c4:	4413      	add	r3, r2
 800b9c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b9cc:	4a1d      	ldr	r2, [pc, #116]	; (800ba44 <prvHeapInit+0xb0>)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b9d2:	4b1c      	ldr	r3, [pc, #112]	; (800ba44 <prvHeapInit+0xb0>)
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	68ba      	ldr	r2, [r7, #8]
 800b9dc:	4413      	add	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b9e0:	2208      	movs	r2, #8
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	1a9b      	subs	r3, r3, r2
 800b9e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f023 0307 	bic.w	r3, r3, #7
 800b9ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	4a15      	ldr	r2, [pc, #84]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b9f6:	4b14      	ldr	r3, [pc, #80]	; (800ba48 <prvHeapInit+0xb4>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <prvHeapInit+0xb4>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	2200      	movs	r2, #0
 800ba04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	1ad2      	subs	r2, r2, r3
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ba14:	4b0c      	ldr	r3, [pc, #48]	; (800ba48 <prvHeapInit+0xb4>)
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	683b      	ldr	r3, [r7, #0]
 800ba1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <prvHeapInit+0xb8>)
 800ba22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	685b      	ldr	r3, [r3, #4]
 800ba28:	4a09      	ldr	r2, [pc, #36]	; (800ba50 <prvHeapInit+0xbc>)
 800ba2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ba2c:	4b09      	ldr	r3, [pc, #36]	; (800ba54 <prvHeapInit+0xc0>)
 800ba2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ba32:	601a      	str	r2, [r3, #0]
}
 800ba34:	bf00      	nop
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr
 800ba40:	20001574 	.word	0x20001574
 800ba44:	20005574 	.word	0x20005574
 800ba48:	2000557c 	.word	0x2000557c
 800ba4c:	20005584 	.word	0x20005584
 800ba50:	20005580 	.word	0x20005580
 800ba54:	20005590 	.word	0x20005590

0800ba58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ba60:	4b28      	ldr	r3, [pc, #160]	; (800bb04 <prvInsertBlockIntoFreeList+0xac>)
 800ba62:	60fb      	str	r3, [r7, #12]
 800ba64:	e002      	b.n	800ba6c <prvInsertBlockIntoFreeList+0x14>
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d8f7      	bhi.n	800ba66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	4413      	add	r3, r2
 800ba82:	687a      	ldr	r2, [r7, #4]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d108      	bne.n	800ba9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	685a      	ldr	r2, [r3, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	441a      	add	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	68ba      	ldr	r2, [r7, #8]
 800baa4:	441a      	add	r2, r3
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	429a      	cmp	r2, r3
 800baac:	d118      	bne.n	800bae0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	4b15      	ldr	r3, [pc, #84]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d00d      	beq.n	800bad6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	685a      	ldr	r2, [r3, #4]
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	441a      	add	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	e008      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <prvInsertBlockIntoFreeList+0xb0>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	e003      	b.n	800bae8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d002      	beq.n	800baf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800baf6:	bf00      	nop
 800baf8:	3714      	adds	r7, #20
 800bafa:	46bd      	mov	sp, r7
 800bafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb00:	4770      	bx	lr
 800bb02:	bf00      	nop
 800bb04:	20005574 	.word	0x20005574
 800bb08:	2000557c 	.word	0x2000557c

0800bb0c <siprintf>:
 800bb0c:	b40e      	push	{r1, r2, r3}
 800bb0e:	b500      	push	{lr}
 800bb10:	b09c      	sub	sp, #112	; 0x70
 800bb12:	ab1d      	add	r3, sp, #116	; 0x74
 800bb14:	9002      	str	r0, [sp, #8]
 800bb16:	9006      	str	r0, [sp, #24]
 800bb18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bb1c:	4809      	ldr	r0, [pc, #36]	; (800bb44 <siprintf+0x38>)
 800bb1e:	9107      	str	r1, [sp, #28]
 800bb20:	9104      	str	r1, [sp, #16]
 800bb22:	4909      	ldr	r1, [pc, #36]	; (800bb48 <siprintf+0x3c>)
 800bb24:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb28:	9105      	str	r1, [sp, #20]
 800bb2a:	6800      	ldr	r0, [r0, #0]
 800bb2c:	9301      	str	r3, [sp, #4]
 800bb2e:	a902      	add	r1, sp, #8
 800bb30:	f000 f9f6 	bl	800bf20 <_svfiprintf_r>
 800bb34:	9b02      	ldr	r3, [sp, #8]
 800bb36:	2200      	movs	r2, #0
 800bb38:	701a      	strb	r2, [r3, #0]
 800bb3a:	b01c      	add	sp, #112	; 0x70
 800bb3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb40:	b003      	add	sp, #12
 800bb42:	4770      	bx	lr
 800bb44:	2000007c 	.word	0x2000007c
 800bb48:	ffff0208 	.word	0xffff0208

0800bb4c <memset>:
 800bb4c:	4402      	add	r2, r0
 800bb4e:	4603      	mov	r3, r0
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d100      	bne.n	800bb56 <memset+0xa>
 800bb54:	4770      	bx	lr
 800bb56:	f803 1b01 	strb.w	r1, [r3], #1
 800bb5a:	e7f9      	b.n	800bb50 <memset+0x4>

0800bb5c <_reclaim_reent>:
 800bb5c:	4b29      	ldr	r3, [pc, #164]	; (800bc04 <_reclaim_reent+0xa8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4283      	cmp	r3, r0
 800bb62:	b570      	push	{r4, r5, r6, lr}
 800bb64:	4604      	mov	r4, r0
 800bb66:	d04b      	beq.n	800bc00 <_reclaim_reent+0xa4>
 800bb68:	69c3      	ldr	r3, [r0, #28]
 800bb6a:	b143      	cbz	r3, 800bb7e <_reclaim_reent+0x22>
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d144      	bne.n	800bbfc <_reclaim_reent+0xa0>
 800bb72:	69e3      	ldr	r3, [r4, #28]
 800bb74:	6819      	ldr	r1, [r3, #0]
 800bb76:	b111      	cbz	r1, 800bb7e <_reclaim_reent+0x22>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f87f 	bl	800bc7c <_free_r>
 800bb7e:	6961      	ldr	r1, [r4, #20]
 800bb80:	b111      	cbz	r1, 800bb88 <_reclaim_reent+0x2c>
 800bb82:	4620      	mov	r0, r4
 800bb84:	f000 f87a 	bl	800bc7c <_free_r>
 800bb88:	69e1      	ldr	r1, [r4, #28]
 800bb8a:	b111      	cbz	r1, 800bb92 <_reclaim_reent+0x36>
 800bb8c:	4620      	mov	r0, r4
 800bb8e:	f000 f875 	bl	800bc7c <_free_r>
 800bb92:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb94:	b111      	cbz	r1, 800bb9c <_reclaim_reent+0x40>
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 f870 	bl	800bc7c <_free_r>
 800bb9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bb9e:	b111      	cbz	r1, 800bba6 <_reclaim_reent+0x4a>
 800bba0:	4620      	mov	r0, r4
 800bba2:	f000 f86b 	bl	800bc7c <_free_r>
 800bba6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bba8:	b111      	cbz	r1, 800bbb0 <_reclaim_reent+0x54>
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f000 f866 	bl	800bc7c <_free_r>
 800bbb0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bbb2:	b111      	cbz	r1, 800bbba <_reclaim_reent+0x5e>
 800bbb4:	4620      	mov	r0, r4
 800bbb6:	f000 f861 	bl	800bc7c <_free_r>
 800bbba:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800bbbc:	b111      	cbz	r1, 800bbc4 <_reclaim_reent+0x68>
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 f85c 	bl	800bc7c <_free_r>
 800bbc4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800bbc6:	b111      	cbz	r1, 800bbce <_reclaim_reent+0x72>
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 f857 	bl	800bc7c <_free_r>
 800bbce:	6a23      	ldr	r3, [r4, #32]
 800bbd0:	b1b3      	cbz	r3, 800bc00 <_reclaim_reent+0xa4>
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bbd8:	4718      	bx	r3
 800bbda:	5949      	ldr	r1, [r1, r5]
 800bbdc:	b941      	cbnz	r1, 800bbf0 <_reclaim_reent+0x94>
 800bbde:	3504      	adds	r5, #4
 800bbe0:	69e3      	ldr	r3, [r4, #28]
 800bbe2:	2d80      	cmp	r5, #128	; 0x80
 800bbe4:	68d9      	ldr	r1, [r3, #12]
 800bbe6:	d1f8      	bne.n	800bbda <_reclaim_reent+0x7e>
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 f847 	bl	800bc7c <_free_r>
 800bbee:	e7c0      	b.n	800bb72 <_reclaim_reent+0x16>
 800bbf0:	680e      	ldr	r6, [r1, #0]
 800bbf2:	4620      	mov	r0, r4
 800bbf4:	f000 f842 	bl	800bc7c <_free_r>
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	e7ef      	b.n	800bbdc <_reclaim_reent+0x80>
 800bbfc:	2500      	movs	r5, #0
 800bbfe:	e7ef      	b.n	800bbe0 <_reclaim_reent+0x84>
 800bc00:	bd70      	pop	{r4, r5, r6, pc}
 800bc02:	bf00      	nop
 800bc04:	2000007c 	.word	0x2000007c

0800bc08 <__errno>:
 800bc08:	4b01      	ldr	r3, [pc, #4]	; (800bc10 <__errno+0x8>)
 800bc0a:	6818      	ldr	r0, [r3, #0]
 800bc0c:	4770      	bx	lr
 800bc0e:	bf00      	nop
 800bc10:	2000007c 	.word	0x2000007c

0800bc14 <__libc_init_array>:
 800bc14:	b570      	push	{r4, r5, r6, lr}
 800bc16:	4d0d      	ldr	r5, [pc, #52]	; (800bc4c <__libc_init_array+0x38>)
 800bc18:	4c0d      	ldr	r4, [pc, #52]	; (800bc50 <__libc_init_array+0x3c>)
 800bc1a:	1b64      	subs	r4, r4, r5
 800bc1c:	10a4      	asrs	r4, r4, #2
 800bc1e:	2600      	movs	r6, #0
 800bc20:	42a6      	cmp	r6, r4
 800bc22:	d109      	bne.n	800bc38 <__libc_init_array+0x24>
 800bc24:	4d0b      	ldr	r5, [pc, #44]	; (800bc54 <__libc_init_array+0x40>)
 800bc26:	4c0c      	ldr	r4, [pc, #48]	; (800bc58 <__libc_init_array+0x44>)
 800bc28:	f000 fc6a 	bl	800c500 <_init>
 800bc2c:	1b64      	subs	r4, r4, r5
 800bc2e:	10a4      	asrs	r4, r4, #2
 800bc30:	2600      	movs	r6, #0
 800bc32:	42a6      	cmp	r6, r4
 800bc34:	d105      	bne.n	800bc42 <__libc_init_array+0x2e>
 800bc36:	bd70      	pop	{r4, r5, r6, pc}
 800bc38:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc3c:	4798      	blx	r3
 800bc3e:	3601      	adds	r6, #1
 800bc40:	e7ee      	b.n	800bc20 <__libc_init_array+0xc>
 800bc42:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc46:	4798      	blx	r3
 800bc48:	3601      	adds	r6, #1
 800bc4a:	e7f2      	b.n	800bc32 <__libc_init_array+0x1e>
 800bc4c:	0800e2f0 	.word	0x0800e2f0
 800bc50:	0800e2f0 	.word	0x0800e2f0
 800bc54:	0800e2f0 	.word	0x0800e2f0
 800bc58:	0800e2f4 	.word	0x0800e2f4

0800bc5c <__retarget_lock_acquire_recursive>:
 800bc5c:	4770      	bx	lr

0800bc5e <__retarget_lock_release_recursive>:
 800bc5e:	4770      	bx	lr

0800bc60 <memcpy>:
 800bc60:	440a      	add	r2, r1
 800bc62:	4291      	cmp	r1, r2
 800bc64:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc68:	d100      	bne.n	800bc6c <memcpy+0xc>
 800bc6a:	4770      	bx	lr
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc72:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc76:	4291      	cmp	r1, r2
 800bc78:	d1f9      	bne.n	800bc6e <memcpy+0xe>
 800bc7a:	bd10      	pop	{r4, pc}

0800bc7c <_free_r>:
 800bc7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bc7e:	2900      	cmp	r1, #0
 800bc80:	d044      	beq.n	800bd0c <_free_r+0x90>
 800bc82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc86:	9001      	str	r0, [sp, #4]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	f1a1 0404 	sub.w	r4, r1, #4
 800bc8e:	bfb8      	it	lt
 800bc90:	18e4      	addlt	r4, r4, r3
 800bc92:	f000 f8df 	bl	800be54 <__malloc_lock>
 800bc96:	4a1e      	ldr	r2, [pc, #120]	; (800bd10 <_free_r+0x94>)
 800bc98:	9801      	ldr	r0, [sp, #4]
 800bc9a:	6813      	ldr	r3, [r2, #0]
 800bc9c:	b933      	cbnz	r3, 800bcac <_free_r+0x30>
 800bc9e:	6063      	str	r3, [r4, #4]
 800bca0:	6014      	str	r4, [r2, #0]
 800bca2:	b003      	add	sp, #12
 800bca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bca8:	f000 b8da 	b.w	800be60 <__malloc_unlock>
 800bcac:	42a3      	cmp	r3, r4
 800bcae:	d908      	bls.n	800bcc2 <_free_r+0x46>
 800bcb0:	6825      	ldr	r5, [r4, #0]
 800bcb2:	1961      	adds	r1, r4, r5
 800bcb4:	428b      	cmp	r3, r1
 800bcb6:	bf01      	itttt	eq
 800bcb8:	6819      	ldreq	r1, [r3, #0]
 800bcba:	685b      	ldreq	r3, [r3, #4]
 800bcbc:	1949      	addeq	r1, r1, r5
 800bcbe:	6021      	streq	r1, [r4, #0]
 800bcc0:	e7ed      	b.n	800bc9e <_free_r+0x22>
 800bcc2:	461a      	mov	r2, r3
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	b10b      	cbz	r3, 800bccc <_free_r+0x50>
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d9fa      	bls.n	800bcc2 <_free_r+0x46>
 800bccc:	6811      	ldr	r1, [r2, #0]
 800bcce:	1855      	adds	r5, r2, r1
 800bcd0:	42a5      	cmp	r5, r4
 800bcd2:	d10b      	bne.n	800bcec <_free_r+0x70>
 800bcd4:	6824      	ldr	r4, [r4, #0]
 800bcd6:	4421      	add	r1, r4
 800bcd8:	1854      	adds	r4, r2, r1
 800bcda:	42a3      	cmp	r3, r4
 800bcdc:	6011      	str	r1, [r2, #0]
 800bcde:	d1e0      	bne.n	800bca2 <_free_r+0x26>
 800bce0:	681c      	ldr	r4, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	6053      	str	r3, [r2, #4]
 800bce6:	440c      	add	r4, r1
 800bce8:	6014      	str	r4, [r2, #0]
 800bcea:	e7da      	b.n	800bca2 <_free_r+0x26>
 800bcec:	d902      	bls.n	800bcf4 <_free_r+0x78>
 800bcee:	230c      	movs	r3, #12
 800bcf0:	6003      	str	r3, [r0, #0]
 800bcf2:	e7d6      	b.n	800bca2 <_free_r+0x26>
 800bcf4:	6825      	ldr	r5, [r4, #0]
 800bcf6:	1961      	adds	r1, r4, r5
 800bcf8:	428b      	cmp	r3, r1
 800bcfa:	bf04      	itt	eq
 800bcfc:	6819      	ldreq	r1, [r3, #0]
 800bcfe:	685b      	ldreq	r3, [r3, #4]
 800bd00:	6063      	str	r3, [r4, #4]
 800bd02:	bf04      	itt	eq
 800bd04:	1949      	addeq	r1, r1, r5
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	6054      	str	r4, [r2, #4]
 800bd0a:	e7ca      	b.n	800bca2 <_free_r+0x26>
 800bd0c:	b003      	add	sp, #12
 800bd0e:	bd30      	pop	{r4, r5, pc}
 800bd10:	200056d4 	.word	0x200056d4

0800bd14 <sbrk_aligned>:
 800bd14:	b570      	push	{r4, r5, r6, lr}
 800bd16:	4e0e      	ldr	r6, [pc, #56]	; (800bd50 <sbrk_aligned+0x3c>)
 800bd18:	460c      	mov	r4, r1
 800bd1a:	6831      	ldr	r1, [r6, #0]
 800bd1c:	4605      	mov	r5, r0
 800bd1e:	b911      	cbnz	r1, 800bd26 <sbrk_aligned+0x12>
 800bd20:	f000 fba6 	bl	800c470 <_sbrk_r>
 800bd24:	6030      	str	r0, [r6, #0]
 800bd26:	4621      	mov	r1, r4
 800bd28:	4628      	mov	r0, r5
 800bd2a:	f000 fba1 	bl	800c470 <_sbrk_r>
 800bd2e:	1c43      	adds	r3, r0, #1
 800bd30:	d00a      	beq.n	800bd48 <sbrk_aligned+0x34>
 800bd32:	1cc4      	adds	r4, r0, #3
 800bd34:	f024 0403 	bic.w	r4, r4, #3
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d007      	beq.n	800bd4c <sbrk_aligned+0x38>
 800bd3c:	1a21      	subs	r1, r4, r0
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f000 fb96 	bl	800c470 <_sbrk_r>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d101      	bne.n	800bd4c <sbrk_aligned+0x38>
 800bd48:	f04f 34ff 	mov.w	r4, #4294967295
 800bd4c:	4620      	mov	r0, r4
 800bd4e:	bd70      	pop	{r4, r5, r6, pc}
 800bd50:	200056d8 	.word	0x200056d8

0800bd54 <_malloc_r>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	1ccd      	adds	r5, r1, #3
 800bd5a:	f025 0503 	bic.w	r5, r5, #3
 800bd5e:	3508      	adds	r5, #8
 800bd60:	2d0c      	cmp	r5, #12
 800bd62:	bf38      	it	cc
 800bd64:	250c      	movcc	r5, #12
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	4607      	mov	r7, r0
 800bd6a:	db01      	blt.n	800bd70 <_malloc_r+0x1c>
 800bd6c:	42a9      	cmp	r1, r5
 800bd6e:	d905      	bls.n	800bd7c <_malloc_r+0x28>
 800bd70:	230c      	movs	r3, #12
 800bd72:	603b      	str	r3, [r7, #0]
 800bd74:	2600      	movs	r6, #0
 800bd76:	4630      	mov	r0, r6
 800bd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be50 <_malloc_r+0xfc>
 800bd80:	f000 f868 	bl	800be54 <__malloc_lock>
 800bd84:	f8d8 3000 	ldr.w	r3, [r8]
 800bd88:	461c      	mov	r4, r3
 800bd8a:	bb5c      	cbnz	r4, 800bde4 <_malloc_r+0x90>
 800bd8c:	4629      	mov	r1, r5
 800bd8e:	4638      	mov	r0, r7
 800bd90:	f7ff ffc0 	bl	800bd14 <sbrk_aligned>
 800bd94:	1c43      	adds	r3, r0, #1
 800bd96:	4604      	mov	r4, r0
 800bd98:	d155      	bne.n	800be46 <_malloc_r+0xf2>
 800bd9a:	f8d8 4000 	ldr.w	r4, [r8]
 800bd9e:	4626      	mov	r6, r4
 800bda0:	2e00      	cmp	r6, #0
 800bda2:	d145      	bne.n	800be30 <_malloc_r+0xdc>
 800bda4:	2c00      	cmp	r4, #0
 800bda6:	d048      	beq.n	800be3a <_malloc_r+0xe6>
 800bda8:	6823      	ldr	r3, [r4, #0]
 800bdaa:	4631      	mov	r1, r6
 800bdac:	4638      	mov	r0, r7
 800bdae:	eb04 0903 	add.w	r9, r4, r3
 800bdb2:	f000 fb5d 	bl	800c470 <_sbrk_r>
 800bdb6:	4581      	cmp	r9, r0
 800bdb8:	d13f      	bne.n	800be3a <_malloc_r+0xe6>
 800bdba:	6821      	ldr	r1, [r4, #0]
 800bdbc:	1a6d      	subs	r5, r5, r1
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7ff ffa7 	bl	800bd14 <sbrk_aligned>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d037      	beq.n	800be3a <_malloc_r+0xe6>
 800bdca:	6823      	ldr	r3, [r4, #0]
 800bdcc:	442b      	add	r3, r5
 800bdce:	6023      	str	r3, [r4, #0]
 800bdd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d038      	beq.n	800be4a <_malloc_r+0xf6>
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	42a2      	cmp	r2, r4
 800bddc:	d12b      	bne.n	800be36 <_malloc_r+0xe2>
 800bdde:	2200      	movs	r2, #0
 800bde0:	605a      	str	r2, [r3, #4]
 800bde2:	e00f      	b.n	800be04 <_malloc_r+0xb0>
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	1b52      	subs	r2, r2, r5
 800bde8:	d41f      	bmi.n	800be2a <_malloc_r+0xd6>
 800bdea:	2a0b      	cmp	r2, #11
 800bdec:	d917      	bls.n	800be1e <_malloc_r+0xca>
 800bdee:	1961      	adds	r1, r4, r5
 800bdf0:	42a3      	cmp	r3, r4
 800bdf2:	6025      	str	r5, [r4, #0]
 800bdf4:	bf18      	it	ne
 800bdf6:	6059      	strne	r1, [r3, #4]
 800bdf8:	6863      	ldr	r3, [r4, #4]
 800bdfa:	bf08      	it	eq
 800bdfc:	f8c8 1000 	streq.w	r1, [r8]
 800be00:	5162      	str	r2, [r4, r5]
 800be02:	604b      	str	r3, [r1, #4]
 800be04:	4638      	mov	r0, r7
 800be06:	f104 060b 	add.w	r6, r4, #11
 800be0a:	f000 f829 	bl	800be60 <__malloc_unlock>
 800be0e:	f026 0607 	bic.w	r6, r6, #7
 800be12:	1d23      	adds	r3, r4, #4
 800be14:	1af2      	subs	r2, r6, r3
 800be16:	d0ae      	beq.n	800bd76 <_malloc_r+0x22>
 800be18:	1b9b      	subs	r3, r3, r6
 800be1a:	50a3      	str	r3, [r4, r2]
 800be1c:	e7ab      	b.n	800bd76 <_malloc_r+0x22>
 800be1e:	42a3      	cmp	r3, r4
 800be20:	6862      	ldr	r2, [r4, #4]
 800be22:	d1dd      	bne.n	800bde0 <_malloc_r+0x8c>
 800be24:	f8c8 2000 	str.w	r2, [r8]
 800be28:	e7ec      	b.n	800be04 <_malloc_r+0xb0>
 800be2a:	4623      	mov	r3, r4
 800be2c:	6864      	ldr	r4, [r4, #4]
 800be2e:	e7ac      	b.n	800bd8a <_malloc_r+0x36>
 800be30:	4634      	mov	r4, r6
 800be32:	6876      	ldr	r6, [r6, #4]
 800be34:	e7b4      	b.n	800bda0 <_malloc_r+0x4c>
 800be36:	4613      	mov	r3, r2
 800be38:	e7cc      	b.n	800bdd4 <_malloc_r+0x80>
 800be3a:	230c      	movs	r3, #12
 800be3c:	603b      	str	r3, [r7, #0]
 800be3e:	4638      	mov	r0, r7
 800be40:	f000 f80e 	bl	800be60 <__malloc_unlock>
 800be44:	e797      	b.n	800bd76 <_malloc_r+0x22>
 800be46:	6025      	str	r5, [r4, #0]
 800be48:	e7dc      	b.n	800be04 <_malloc_r+0xb0>
 800be4a:	605b      	str	r3, [r3, #4]
 800be4c:	deff      	udf	#255	; 0xff
 800be4e:	bf00      	nop
 800be50:	200056d4 	.word	0x200056d4

0800be54 <__malloc_lock>:
 800be54:	4801      	ldr	r0, [pc, #4]	; (800be5c <__malloc_lock+0x8>)
 800be56:	f7ff bf01 	b.w	800bc5c <__retarget_lock_acquire_recursive>
 800be5a:	bf00      	nop
 800be5c:	200056d0 	.word	0x200056d0

0800be60 <__malloc_unlock>:
 800be60:	4801      	ldr	r0, [pc, #4]	; (800be68 <__malloc_unlock+0x8>)
 800be62:	f7ff befc 	b.w	800bc5e <__retarget_lock_release_recursive>
 800be66:	bf00      	nop
 800be68:	200056d0 	.word	0x200056d0

0800be6c <__ssputs_r>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	688e      	ldr	r6, [r1, #8]
 800be72:	461f      	mov	r7, r3
 800be74:	42be      	cmp	r6, r7
 800be76:	680b      	ldr	r3, [r1, #0]
 800be78:	4682      	mov	sl, r0
 800be7a:	460c      	mov	r4, r1
 800be7c:	4690      	mov	r8, r2
 800be7e:	d82c      	bhi.n	800beda <__ssputs_r+0x6e>
 800be80:	898a      	ldrh	r2, [r1, #12]
 800be82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be86:	d026      	beq.n	800bed6 <__ssputs_r+0x6a>
 800be88:	6965      	ldr	r5, [r4, #20]
 800be8a:	6909      	ldr	r1, [r1, #16]
 800be8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be90:	eba3 0901 	sub.w	r9, r3, r1
 800be94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be98:	1c7b      	adds	r3, r7, #1
 800be9a:	444b      	add	r3, r9
 800be9c:	106d      	asrs	r5, r5, #1
 800be9e:	429d      	cmp	r5, r3
 800bea0:	bf38      	it	cc
 800bea2:	461d      	movcc	r5, r3
 800bea4:	0553      	lsls	r3, r2, #21
 800bea6:	d527      	bpl.n	800bef8 <__ssputs_r+0x8c>
 800bea8:	4629      	mov	r1, r5
 800beaa:	f7ff ff53 	bl	800bd54 <_malloc_r>
 800beae:	4606      	mov	r6, r0
 800beb0:	b360      	cbz	r0, 800bf0c <__ssputs_r+0xa0>
 800beb2:	6921      	ldr	r1, [r4, #16]
 800beb4:	464a      	mov	r2, r9
 800beb6:	f7ff fed3 	bl	800bc60 <memcpy>
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bec4:	81a3      	strh	r3, [r4, #12]
 800bec6:	6126      	str	r6, [r4, #16]
 800bec8:	6165      	str	r5, [r4, #20]
 800beca:	444e      	add	r6, r9
 800becc:	eba5 0509 	sub.w	r5, r5, r9
 800bed0:	6026      	str	r6, [r4, #0]
 800bed2:	60a5      	str	r5, [r4, #8]
 800bed4:	463e      	mov	r6, r7
 800bed6:	42be      	cmp	r6, r7
 800bed8:	d900      	bls.n	800bedc <__ssputs_r+0x70>
 800beda:	463e      	mov	r6, r7
 800bedc:	6820      	ldr	r0, [r4, #0]
 800bede:	4632      	mov	r2, r6
 800bee0:	4641      	mov	r1, r8
 800bee2:	f000 faab 	bl	800c43c <memmove>
 800bee6:	68a3      	ldr	r3, [r4, #8]
 800bee8:	1b9b      	subs	r3, r3, r6
 800beea:	60a3      	str	r3, [r4, #8]
 800beec:	6823      	ldr	r3, [r4, #0]
 800beee:	4433      	add	r3, r6
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	2000      	movs	r0, #0
 800bef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bef8:	462a      	mov	r2, r5
 800befa:	f000 fac9 	bl	800c490 <_realloc_r>
 800befe:	4606      	mov	r6, r0
 800bf00:	2800      	cmp	r0, #0
 800bf02:	d1e0      	bne.n	800bec6 <__ssputs_r+0x5a>
 800bf04:	6921      	ldr	r1, [r4, #16]
 800bf06:	4650      	mov	r0, sl
 800bf08:	f7ff feb8 	bl	800bc7c <_free_r>
 800bf0c:	230c      	movs	r3, #12
 800bf0e:	f8ca 3000 	str.w	r3, [sl]
 800bf12:	89a3      	ldrh	r3, [r4, #12]
 800bf14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf18:	81a3      	strh	r3, [r4, #12]
 800bf1a:	f04f 30ff 	mov.w	r0, #4294967295
 800bf1e:	e7e9      	b.n	800bef4 <__ssputs_r+0x88>

0800bf20 <_svfiprintf_r>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	4698      	mov	r8, r3
 800bf26:	898b      	ldrh	r3, [r1, #12]
 800bf28:	061b      	lsls	r3, r3, #24
 800bf2a:	b09d      	sub	sp, #116	; 0x74
 800bf2c:	4607      	mov	r7, r0
 800bf2e:	460d      	mov	r5, r1
 800bf30:	4614      	mov	r4, r2
 800bf32:	d50e      	bpl.n	800bf52 <_svfiprintf_r+0x32>
 800bf34:	690b      	ldr	r3, [r1, #16]
 800bf36:	b963      	cbnz	r3, 800bf52 <_svfiprintf_r+0x32>
 800bf38:	2140      	movs	r1, #64	; 0x40
 800bf3a:	f7ff ff0b 	bl	800bd54 <_malloc_r>
 800bf3e:	6028      	str	r0, [r5, #0]
 800bf40:	6128      	str	r0, [r5, #16]
 800bf42:	b920      	cbnz	r0, 800bf4e <_svfiprintf_r+0x2e>
 800bf44:	230c      	movs	r3, #12
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295
 800bf4c:	e0d0      	b.n	800c0f0 <_svfiprintf_r+0x1d0>
 800bf4e:	2340      	movs	r3, #64	; 0x40
 800bf50:	616b      	str	r3, [r5, #20]
 800bf52:	2300      	movs	r3, #0
 800bf54:	9309      	str	r3, [sp, #36]	; 0x24
 800bf56:	2320      	movs	r3, #32
 800bf58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bf5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf60:	2330      	movs	r3, #48	; 0x30
 800bf62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c108 <_svfiprintf_r+0x1e8>
 800bf66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf6a:	f04f 0901 	mov.w	r9, #1
 800bf6e:	4623      	mov	r3, r4
 800bf70:	469a      	mov	sl, r3
 800bf72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf76:	b10a      	cbz	r2, 800bf7c <_svfiprintf_r+0x5c>
 800bf78:	2a25      	cmp	r2, #37	; 0x25
 800bf7a:	d1f9      	bne.n	800bf70 <_svfiprintf_r+0x50>
 800bf7c:	ebba 0b04 	subs.w	fp, sl, r4
 800bf80:	d00b      	beq.n	800bf9a <_svfiprintf_r+0x7a>
 800bf82:	465b      	mov	r3, fp
 800bf84:	4622      	mov	r2, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	4638      	mov	r0, r7
 800bf8a:	f7ff ff6f 	bl	800be6c <__ssputs_r>
 800bf8e:	3001      	adds	r0, #1
 800bf90:	f000 80a9 	beq.w	800c0e6 <_svfiprintf_r+0x1c6>
 800bf94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf96:	445a      	add	r2, fp
 800bf98:	9209      	str	r2, [sp, #36]	; 0x24
 800bf9a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	f000 80a1 	beq.w	800c0e6 <_svfiprintf_r+0x1c6>
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bfae:	f10a 0a01 	add.w	sl, sl, #1
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	9307      	str	r3, [sp, #28]
 800bfb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bfba:	931a      	str	r3, [sp, #104]	; 0x68
 800bfbc:	4654      	mov	r4, sl
 800bfbe:	2205      	movs	r2, #5
 800bfc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfc4:	4850      	ldr	r0, [pc, #320]	; (800c108 <_svfiprintf_r+0x1e8>)
 800bfc6:	f7f4 f92b 	bl	8000220 <memchr>
 800bfca:	9a04      	ldr	r2, [sp, #16]
 800bfcc:	b9d8      	cbnz	r0, 800c006 <_svfiprintf_r+0xe6>
 800bfce:	06d0      	lsls	r0, r2, #27
 800bfd0:	bf44      	itt	mi
 800bfd2:	2320      	movmi	r3, #32
 800bfd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfd8:	0711      	lsls	r1, r2, #28
 800bfda:	bf44      	itt	mi
 800bfdc:	232b      	movmi	r3, #43	; 0x2b
 800bfde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bfe2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe6:	2b2a      	cmp	r3, #42	; 0x2a
 800bfe8:	d015      	beq.n	800c016 <_svfiprintf_r+0xf6>
 800bfea:	9a07      	ldr	r2, [sp, #28]
 800bfec:	4654      	mov	r4, sl
 800bfee:	2000      	movs	r0, #0
 800bff0:	f04f 0c0a 	mov.w	ip, #10
 800bff4:	4621      	mov	r1, r4
 800bff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bffa:	3b30      	subs	r3, #48	; 0x30
 800bffc:	2b09      	cmp	r3, #9
 800bffe:	d94d      	bls.n	800c09c <_svfiprintf_r+0x17c>
 800c000:	b1b0      	cbz	r0, 800c030 <_svfiprintf_r+0x110>
 800c002:	9207      	str	r2, [sp, #28]
 800c004:	e014      	b.n	800c030 <_svfiprintf_r+0x110>
 800c006:	eba0 0308 	sub.w	r3, r0, r8
 800c00a:	fa09 f303 	lsl.w	r3, r9, r3
 800c00e:	4313      	orrs	r3, r2
 800c010:	9304      	str	r3, [sp, #16]
 800c012:	46a2      	mov	sl, r4
 800c014:	e7d2      	b.n	800bfbc <_svfiprintf_r+0x9c>
 800c016:	9b03      	ldr	r3, [sp, #12]
 800c018:	1d19      	adds	r1, r3, #4
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	9103      	str	r1, [sp, #12]
 800c01e:	2b00      	cmp	r3, #0
 800c020:	bfbb      	ittet	lt
 800c022:	425b      	neglt	r3, r3
 800c024:	f042 0202 	orrlt.w	r2, r2, #2
 800c028:	9307      	strge	r3, [sp, #28]
 800c02a:	9307      	strlt	r3, [sp, #28]
 800c02c:	bfb8      	it	lt
 800c02e:	9204      	strlt	r2, [sp, #16]
 800c030:	7823      	ldrb	r3, [r4, #0]
 800c032:	2b2e      	cmp	r3, #46	; 0x2e
 800c034:	d10c      	bne.n	800c050 <_svfiprintf_r+0x130>
 800c036:	7863      	ldrb	r3, [r4, #1]
 800c038:	2b2a      	cmp	r3, #42	; 0x2a
 800c03a:	d134      	bne.n	800c0a6 <_svfiprintf_r+0x186>
 800c03c:	9b03      	ldr	r3, [sp, #12]
 800c03e:	1d1a      	adds	r2, r3, #4
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	9203      	str	r2, [sp, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	bfb8      	it	lt
 800c048:	f04f 33ff 	movlt.w	r3, #4294967295
 800c04c:	3402      	adds	r4, #2
 800c04e:	9305      	str	r3, [sp, #20]
 800c050:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c118 <_svfiprintf_r+0x1f8>
 800c054:	7821      	ldrb	r1, [r4, #0]
 800c056:	2203      	movs	r2, #3
 800c058:	4650      	mov	r0, sl
 800c05a:	f7f4 f8e1 	bl	8000220 <memchr>
 800c05e:	b138      	cbz	r0, 800c070 <_svfiprintf_r+0x150>
 800c060:	9b04      	ldr	r3, [sp, #16]
 800c062:	eba0 000a 	sub.w	r0, r0, sl
 800c066:	2240      	movs	r2, #64	; 0x40
 800c068:	4082      	lsls	r2, r0
 800c06a:	4313      	orrs	r3, r2
 800c06c:	3401      	adds	r4, #1
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c074:	4825      	ldr	r0, [pc, #148]	; (800c10c <_svfiprintf_r+0x1ec>)
 800c076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c07a:	2206      	movs	r2, #6
 800c07c:	f7f4 f8d0 	bl	8000220 <memchr>
 800c080:	2800      	cmp	r0, #0
 800c082:	d038      	beq.n	800c0f6 <_svfiprintf_r+0x1d6>
 800c084:	4b22      	ldr	r3, [pc, #136]	; (800c110 <_svfiprintf_r+0x1f0>)
 800c086:	bb1b      	cbnz	r3, 800c0d0 <_svfiprintf_r+0x1b0>
 800c088:	9b03      	ldr	r3, [sp, #12]
 800c08a:	3307      	adds	r3, #7
 800c08c:	f023 0307 	bic.w	r3, r3, #7
 800c090:	3308      	adds	r3, #8
 800c092:	9303      	str	r3, [sp, #12]
 800c094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c096:	4433      	add	r3, r6
 800c098:	9309      	str	r3, [sp, #36]	; 0x24
 800c09a:	e768      	b.n	800bf6e <_svfiprintf_r+0x4e>
 800c09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	e7a6      	b.n	800bff4 <_svfiprintf_r+0xd4>
 800c0a6:	2300      	movs	r3, #0
 800c0a8:	3401      	adds	r4, #1
 800c0aa:	9305      	str	r3, [sp, #20]
 800c0ac:	4619      	mov	r1, r3
 800c0ae:	f04f 0c0a 	mov.w	ip, #10
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c0b8:	3a30      	subs	r2, #48	; 0x30
 800c0ba:	2a09      	cmp	r2, #9
 800c0bc:	d903      	bls.n	800c0c6 <_svfiprintf_r+0x1a6>
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0c6      	beq.n	800c050 <_svfiprintf_r+0x130>
 800c0c2:	9105      	str	r1, [sp, #20]
 800c0c4:	e7c4      	b.n	800c050 <_svfiprintf_r+0x130>
 800c0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	e7f0      	b.n	800c0b2 <_svfiprintf_r+0x192>
 800c0d0:	ab03      	add	r3, sp, #12
 800c0d2:	9300      	str	r3, [sp, #0]
 800c0d4:	462a      	mov	r2, r5
 800c0d6:	4b0f      	ldr	r3, [pc, #60]	; (800c114 <_svfiprintf_r+0x1f4>)
 800c0d8:	a904      	add	r1, sp, #16
 800c0da:	4638      	mov	r0, r7
 800c0dc:	f3af 8000 	nop.w
 800c0e0:	1c42      	adds	r2, r0, #1
 800c0e2:	4606      	mov	r6, r0
 800c0e4:	d1d6      	bne.n	800c094 <_svfiprintf_r+0x174>
 800c0e6:	89ab      	ldrh	r3, [r5, #12]
 800c0e8:	065b      	lsls	r3, r3, #25
 800c0ea:	f53f af2d 	bmi.w	800bf48 <_svfiprintf_r+0x28>
 800c0ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c0f0:	b01d      	add	sp, #116	; 0x74
 800c0f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0f6:	ab03      	add	r3, sp, #12
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	462a      	mov	r2, r5
 800c0fc:	4b05      	ldr	r3, [pc, #20]	; (800c114 <_svfiprintf_r+0x1f4>)
 800c0fe:	a904      	add	r1, sp, #16
 800c100:	4638      	mov	r0, r7
 800c102:	f000 f879 	bl	800c1f8 <_printf_i>
 800c106:	e7eb      	b.n	800c0e0 <_svfiprintf_r+0x1c0>
 800c108:	0800e2b4 	.word	0x0800e2b4
 800c10c:	0800e2be 	.word	0x0800e2be
 800c110:	00000000 	.word	0x00000000
 800c114:	0800be6d 	.word	0x0800be6d
 800c118:	0800e2ba 	.word	0x0800e2ba

0800c11c <_printf_common>:
 800c11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c120:	4616      	mov	r6, r2
 800c122:	4699      	mov	r9, r3
 800c124:	688a      	ldr	r2, [r1, #8]
 800c126:	690b      	ldr	r3, [r1, #16]
 800c128:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c12c:	4293      	cmp	r3, r2
 800c12e:	bfb8      	it	lt
 800c130:	4613      	movlt	r3, r2
 800c132:	6033      	str	r3, [r6, #0]
 800c134:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c138:	4607      	mov	r7, r0
 800c13a:	460c      	mov	r4, r1
 800c13c:	b10a      	cbz	r2, 800c142 <_printf_common+0x26>
 800c13e:	3301      	adds	r3, #1
 800c140:	6033      	str	r3, [r6, #0]
 800c142:	6823      	ldr	r3, [r4, #0]
 800c144:	0699      	lsls	r1, r3, #26
 800c146:	bf42      	ittt	mi
 800c148:	6833      	ldrmi	r3, [r6, #0]
 800c14a:	3302      	addmi	r3, #2
 800c14c:	6033      	strmi	r3, [r6, #0]
 800c14e:	6825      	ldr	r5, [r4, #0]
 800c150:	f015 0506 	ands.w	r5, r5, #6
 800c154:	d106      	bne.n	800c164 <_printf_common+0x48>
 800c156:	f104 0a19 	add.w	sl, r4, #25
 800c15a:	68e3      	ldr	r3, [r4, #12]
 800c15c:	6832      	ldr	r2, [r6, #0]
 800c15e:	1a9b      	subs	r3, r3, r2
 800c160:	42ab      	cmp	r3, r5
 800c162:	dc26      	bgt.n	800c1b2 <_printf_common+0x96>
 800c164:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c168:	1e13      	subs	r3, r2, #0
 800c16a:	6822      	ldr	r2, [r4, #0]
 800c16c:	bf18      	it	ne
 800c16e:	2301      	movne	r3, #1
 800c170:	0692      	lsls	r2, r2, #26
 800c172:	d42b      	bmi.n	800c1cc <_printf_common+0xb0>
 800c174:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c178:	4649      	mov	r1, r9
 800c17a:	4638      	mov	r0, r7
 800c17c:	47c0      	blx	r8
 800c17e:	3001      	adds	r0, #1
 800c180:	d01e      	beq.n	800c1c0 <_printf_common+0xa4>
 800c182:	6823      	ldr	r3, [r4, #0]
 800c184:	6922      	ldr	r2, [r4, #16]
 800c186:	f003 0306 	and.w	r3, r3, #6
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	bf02      	ittt	eq
 800c18e:	68e5      	ldreq	r5, [r4, #12]
 800c190:	6833      	ldreq	r3, [r6, #0]
 800c192:	1aed      	subeq	r5, r5, r3
 800c194:	68a3      	ldr	r3, [r4, #8]
 800c196:	bf0c      	ite	eq
 800c198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c19c:	2500      	movne	r5, #0
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	bfc4      	itt	gt
 800c1a2:	1a9b      	subgt	r3, r3, r2
 800c1a4:	18ed      	addgt	r5, r5, r3
 800c1a6:	2600      	movs	r6, #0
 800c1a8:	341a      	adds	r4, #26
 800c1aa:	42b5      	cmp	r5, r6
 800c1ac:	d11a      	bne.n	800c1e4 <_printf_common+0xc8>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	e008      	b.n	800c1c4 <_printf_common+0xa8>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	4652      	mov	r2, sl
 800c1b6:	4649      	mov	r1, r9
 800c1b8:	4638      	mov	r0, r7
 800c1ba:	47c0      	blx	r8
 800c1bc:	3001      	adds	r0, #1
 800c1be:	d103      	bne.n	800c1c8 <_printf_common+0xac>
 800c1c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1c8:	3501      	adds	r5, #1
 800c1ca:	e7c6      	b.n	800c15a <_printf_common+0x3e>
 800c1cc:	18e1      	adds	r1, r4, r3
 800c1ce:	1c5a      	adds	r2, r3, #1
 800c1d0:	2030      	movs	r0, #48	; 0x30
 800c1d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c1d6:	4422      	add	r2, r4
 800c1d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1e0:	3302      	adds	r3, #2
 800c1e2:	e7c7      	b.n	800c174 <_printf_common+0x58>
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	4622      	mov	r2, r4
 800c1e8:	4649      	mov	r1, r9
 800c1ea:	4638      	mov	r0, r7
 800c1ec:	47c0      	blx	r8
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	d0e6      	beq.n	800c1c0 <_printf_common+0xa4>
 800c1f2:	3601      	adds	r6, #1
 800c1f4:	e7d9      	b.n	800c1aa <_printf_common+0x8e>
	...

0800c1f8 <_printf_i>:
 800c1f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1fc:	7e0f      	ldrb	r7, [r1, #24]
 800c1fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c200:	2f78      	cmp	r7, #120	; 0x78
 800c202:	4691      	mov	r9, r2
 800c204:	4680      	mov	r8, r0
 800c206:	460c      	mov	r4, r1
 800c208:	469a      	mov	sl, r3
 800c20a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c20e:	d807      	bhi.n	800c220 <_printf_i+0x28>
 800c210:	2f62      	cmp	r7, #98	; 0x62
 800c212:	d80a      	bhi.n	800c22a <_printf_i+0x32>
 800c214:	2f00      	cmp	r7, #0
 800c216:	f000 80d4 	beq.w	800c3c2 <_printf_i+0x1ca>
 800c21a:	2f58      	cmp	r7, #88	; 0x58
 800c21c:	f000 80c0 	beq.w	800c3a0 <_printf_i+0x1a8>
 800c220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c224:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c228:	e03a      	b.n	800c2a0 <_printf_i+0xa8>
 800c22a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c22e:	2b15      	cmp	r3, #21
 800c230:	d8f6      	bhi.n	800c220 <_printf_i+0x28>
 800c232:	a101      	add	r1, pc, #4	; (adr r1, 800c238 <_printf_i+0x40>)
 800c234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c238:	0800c291 	.word	0x0800c291
 800c23c:	0800c2a5 	.word	0x0800c2a5
 800c240:	0800c221 	.word	0x0800c221
 800c244:	0800c221 	.word	0x0800c221
 800c248:	0800c221 	.word	0x0800c221
 800c24c:	0800c221 	.word	0x0800c221
 800c250:	0800c2a5 	.word	0x0800c2a5
 800c254:	0800c221 	.word	0x0800c221
 800c258:	0800c221 	.word	0x0800c221
 800c25c:	0800c221 	.word	0x0800c221
 800c260:	0800c221 	.word	0x0800c221
 800c264:	0800c3a9 	.word	0x0800c3a9
 800c268:	0800c2d1 	.word	0x0800c2d1
 800c26c:	0800c363 	.word	0x0800c363
 800c270:	0800c221 	.word	0x0800c221
 800c274:	0800c221 	.word	0x0800c221
 800c278:	0800c3cb 	.word	0x0800c3cb
 800c27c:	0800c221 	.word	0x0800c221
 800c280:	0800c2d1 	.word	0x0800c2d1
 800c284:	0800c221 	.word	0x0800c221
 800c288:	0800c221 	.word	0x0800c221
 800c28c:	0800c36b 	.word	0x0800c36b
 800c290:	682b      	ldr	r3, [r5, #0]
 800c292:	1d1a      	adds	r2, r3, #4
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	602a      	str	r2, [r5, #0]
 800c298:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c29c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e09f      	b.n	800c3e4 <_printf_i+0x1ec>
 800c2a4:	6820      	ldr	r0, [r4, #0]
 800c2a6:	682b      	ldr	r3, [r5, #0]
 800c2a8:	0607      	lsls	r7, r0, #24
 800c2aa:	f103 0104 	add.w	r1, r3, #4
 800c2ae:	6029      	str	r1, [r5, #0]
 800c2b0:	d501      	bpl.n	800c2b6 <_printf_i+0xbe>
 800c2b2:	681e      	ldr	r6, [r3, #0]
 800c2b4:	e003      	b.n	800c2be <_printf_i+0xc6>
 800c2b6:	0646      	lsls	r6, r0, #25
 800c2b8:	d5fb      	bpl.n	800c2b2 <_printf_i+0xba>
 800c2ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c2be:	2e00      	cmp	r6, #0
 800c2c0:	da03      	bge.n	800c2ca <_printf_i+0xd2>
 800c2c2:	232d      	movs	r3, #45	; 0x2d
 800c2c4:	4276      	negs	r6, r6
 800c2c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c2ca:	485a      	ldr	r0, [pc, #360]	; (800c434 <_printf_i+0x23c>)
 800c2cc:	230a      	movs	r3, #10
 800c2ce:	e012      	b.n	800c2f6 <_printf_i+0xfe>
 800c2d0:	682b      	ldr	r3, [r5, #0]
 800c2d2:	6820      	ldr	r0, [r4, #0]
 800c2d4:	1d19      	adds	r1, r3, #4
 800c2d6:	6029      	str	r1, [r5, #0]
 800c2d8:	0605      	lsls	r5, r0, #24
 800c2da:	d501      	bpl.n	800c2e0 <_printf_i+0xe8>
 800c2dc:	681e      	ldr	r6, [r3, #0]
 800c2de:	e002      	b.n	800c2e6 <_printf_i+0xee>
 800c2e0:	0641      	lsls	r1, r0, #25
 800c2e2:	d5fb      	bpl.n	800c2dc <_printf_i+0xe4>
 800c2e4:	881e      	ldrh	r6, [r3, #0]
 800c2e6:	4853      	ldr	r0, [pc, #332]	; (800c434 <_printf_i+0x23c>)
 800c2e8:	2f6f      	cmp	r7, #111	; 0x6f
 800c2ea:	bf0c      	ite	eq
 800c2ec:	2308      	moveq	r3, #8
 800c2ee:	230a      	movne	r3, #10
 800c2f0:	2100      	movs	r1, #0
 800c2f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2f6:	6865      	ldr	r5, [r4, #4]
 800c2f8:	60a5      	str	r5, [r4, #8]
 800c2fa:	2d00      	cmp	r5, #0
 800c2fc:	bfa2      	ittt	ge
 800c2fe:	6821      	ldrge	r1, [r4, #0]
 800c300:	f021 0104 	bicge.w	r1, r1, #4
 800c304:	6021      	strge	r1, [r4, #0]
 800c306:	b90e      	cbnz	r6, 800c30c <_printf_i+0x114>
 800c308:	2d00      	cmp	r5, #0
 800c30a:	d04b      	beq.n	800c3a4 <_printf_i+0x1ac>
 800c30c:	4615      	mov	r5, r2
 800c30e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c312:	fb03 6711 	mls	r7, r3, r1, r6
 800c316:	5dc7      	ldrb	r7, [r0, r7]
 800c318:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c31c:	4637      	mov	r7, r6
 800c31e:	42bb      	cmp	r3, r7
 800c320:	460e      	mov	r6, r1
 800c322:	d9f4      	bls.n	800c30e <_printf_i+0x116>
 800c324:	2b08      	cmp	r3, #8
 800c326:	d10b      	bne.n	800c340 <_printf_i+0x148>
 800c328:	6823      	ldr	r3, [r4, #0]
 800c32a:	07de      	lsls	r6, r3, #31
 800c32c:	d508      	bpl.n	800c340 <_printf_i+0x148>
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	6861      	ldr	r1, [r4, #4]
 800c332:	4299      	cmp	r1, r3
 800c334:	bfde      	ittt	le
 800c336:	2330      	movle	r3, #48	; 0x30
 800c338:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c33c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c340:	1b52      	subs	r2, r2, r5
 800c342:	6122      	str	r2, [r4, #16]
 800c344:	f8cd a000 	str.w	sl, [sp]
 800c348:	464b      	mov	r3, r9
 800c34a:	aa03      	add	r2, sp, #12
 800c34c:	4621      	mov	r1, r4
 800c34e:	4640      	mov	r0, r8
 800c350:	f7ff fee4 	bl	800c11c <_printf_common>
 800c354:	3001      	adds	r0, #1
 800c356:	d14a      	bne.n	800c3ee <_printf_i+0x1f6>
 800c358:	f04f 30ff 	mov.w	r0, #4294967295
 800c35c:	b004      	add	sp, #16
 800c35e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	f043 0320 	orr.w	r3, r3, #32
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	4833      	ldr	r0, [pc, #204]	; (800c438 <_printf_i+0x240>)
 800c36c:	2778      	movs	r7, #120	; 0x78
 800c36e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	6829      	ldr	r1, [r5, #0]
 800c376:	061f      	lsls	r7, r3, #24
 800c378:	f851 6b04 	ldr.w	r6, [r1], #4
 800c37c:	d402      	bmi.n	800c384 <_printf_i+0x18c>
 800c37e:	065f      	lsls	r7, r3, #25
 800c380:	bf48      	it	mi
 800c382:	b2b6      	uxthmi	r6, r6
 800c384:	07df      	lsls	r7, r3, #31
 800c386:	bf48      	it	mi
 800c388:	f043 0320 	orrmi.w	r3, r3, #32
 800c38c:	6029      	str	r1, [r5, #0]
 800c38e:	bf48      	it	mi
 800c390:	6023      	strmi	r3, [r4, #0]
 800c392:	b91e      	cbnz	r6, 800c39c <_printf_i+0x1a4>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	f023 0320 	bic.w	r3, r3, #32
 800c39a:	6023      	str	r3, [r4, #0]
 800c39c:	2310      	movs	r3, #16
 800c39e:	e7a7      	b.n	800c2f0 <_printf_i+0xf8>
 800c3a0:	4824      	ldr	r0, [pc, #144]	; (800c434 <_printf_i+0x23c>)
 800c3a2:	e7e4      	b.n	800c36e <_printf_i+0x176>
 800c3a4:	4615      	mov	r5, r2
 800c3a6:	e7bd      	b.n	800c324 <_printf_i+0x12c>
 800c3a8:	682b      	ldr	r3, [r5, #0]
 800c3aa:	6826      	ldr	r6, [r4, #0]
 800c3ac:	6961      	ldr	r1, [r4, #20]
 800c3ae:	1d18      	adds	r0, r3, #4
 800c3b0:	6028      	str	r0, [r5, #0]
 800c3b2:	0635      	lsls	r5, r6, #24
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	d501      	bpl.n	800c3bc <_printf_i+0x1c4>
 800c3b8:	6019      	str	r1, [r3, #0]
 800c3ba:	e002      	b.n	800c3c2 <_printf_i+0x1ca>
 800c3bc:	0670      	lsls	r0, r6, #25
 800c3be:	d5fb      	bpl.n	800c3b8 <_printf_i+0x1c0>
 800c3c0:	8019      	strh	r1, [r3, #0]
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	6123      	str	r3, [r4, #16]
 800c3c6:	4615      	mov	r5, r2
 800c3c8:	e7bc      	b.n	800c344 <_printf_i+0x14c>
 800c3ca:	682b      	ldr	r3, [r5, #0]
 800c3cc:	1d1a      	adds	r2, r3, #4
 800c3ce:	602a      	str	r2, [r5, #0]
 800c3d0:	681d      	ldr	r5, [r3, #0]
 800c3d2:	6862      	ldr	r2, [r4, #4]
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	4628      	mov	r0, r5
 800c3d8:	f7f3 ff22 	bl	8000220 <memchr>
 800c3dc:	b108      	cbz	r0, 800c3e2 <_printf_i+0x1ea>
 800c3de:	1b40      	subs	r0, r0, r5
 800c3e0:	6060      	str	r0, [r4, #4]
 800c3e2:	6863      	ldr	r3, [r4, #4]
 800c3e4:	6123      	str	r3, [r4, #16]
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3ec:	e7aa      	b.n	800c344 <_printf_i+0x14c>
 800c3ee:	6923      	ldr	r3, [r4, #16]
 800c3f0:	462a      	mov	r2, r5
 800c3f2:	4649      	mov	r1, r9
 800c3f4:	4640      	mov	r0, r8
 800c3f6:	47d0      	blx	sl
 800c3f8:	3001      	adds	r0, #1
 800c3fa:	d0ad      	beq.n	800c358 <_printf_i+0x160>
 800c3fc:	6823      	ldr	r3, [r4, #0]
 800c3fe:	079b      	lsls	r3, r3, #30
 800c400:	d413      	bmi.n	800c42a <_printf_i+0x232>
 800c402:	68e0      	ldr	r0, [r4, #12]
 800c404:	9b03      	ldr	r3, [sp, #12]
 800c406:	4298      	cmp	r0, r3
 800c408:	bfb8      	it	lt
 800c40a:	4618      	movlt	r0, r3
 800c40c:	e7a6      	b.n	800c35c <_printf_i+0x164>
 800c40e:	2301      	movs	r3, #1
 800c410:	4632      	mov	r2, r6
 800c412:	4649      	mov	r1, r9
 800c414:	4640      	mov	r0, r8
 800c416:	47d0      	blx	sl
 800c418:	3001      	adds	r0, #1
 800c41a:	d09d      	beq.n	800c358 <_printf_i+0x160>
 800c41c:	3501      	adds	r5, #1
 800c41e:	68e3      	ldr	r3, [r4, #12]
 800c420:	9903      	ldr	r1, [sp, #12]
 800c422:	1a5b      	subs	r3, r3, r1
 800c424:	42ab      	cmp	r3, r5
 800c426:	dcf2      	bgt.n	800c40e <_printf_i+0x216>
 800c428:	e7eb      	b.n	800c402 <_printf_i+0x20a>
 800c42a:	2500      	movs	r5, #0
 800c42c:	f104 0619 	add.w	r6, r4, #25
 800c430:	e7f5      	b.n	800c41e <_printf_i+0x226>
 800c432:	bf00      	nop
 800c434:	0800e2c5 	.word	0x0800e2c5
 800c438:	0800e2d6 	.word	0x0800e2d6

0800c43c <memmove>:
 800c43c:	4288      	cmp	r0, r1
 800c43e:	b510      	push	{r4, lr}
 800c440:	eb01 0402 	add.w	r4, r1, r2
 800c444:	d902      	bls.n	800c44c <memmove+0x10>
 800c446:	4284      	cmp	r4, r0
 800c448:	4623      	mov	r3, r4
 800c44a:	d807      	bhi.n	800c45c <memmove+0x20>
 800c44c:	1e43      	subs	r3, r0, #1
 800c44e:	42a1      	cmp	r1, r4
 800c450:	d008      	beq.n	800c464 <memmove+0x28>
 800c452:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c45a:	e7f8      	b.n	800c44e <memmove+0x12>
 800c45c:	4402      	add	r2, r0
 800c45e:	4601      	mov	r1, r0
 800c460:	428a      	cmp	r2, r1
 800c462:	d100      	bne.n	800c466 <memmove+0x2a>
 800c464:	bd10      	pop	{r4, pc}
 800c466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c46a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c46e:	e7f7      	b.n	800c460 <memmove+0x24>

0800c470 <_sbrk_r>:
 800c470:	b538      	push	{r3, r4, r5, lr}
 800c472:	4d06      	ldr	r5, [pc, #24]	; (800c48c <_sbrk_r+0x1c>)
 800c474:	2300      	movs	r3, #0
 800c476:	4604      	mov	r4, r0
 800c478:	4608      	mov	r0, r1
 800c47a:	602b      	str	r3, [r5, #0]
 800c47c:	f7f5 fd9e 	bl	8001fbc <_sbrk>
 800c480:	1c43      	adds	r3, r0, #1
 800c482:	d102      	bne.n	800c48a <_sbrk_r+0x1a>
 800c484:	682b      	ldr	r3, [r5, #0]
 800c486:	b103      	cbz	r3, 800c48a <_sbrk_r+0x1a>
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	bd38      	pop	{r3, r4, r5, pc}
 800c48c:	200056cc 	.word	0x200056cc

0800c490 <_realloc_r>:
 800c490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c494:	4680      	mov	r8, r0
 800c496:	4614      	mov	r4, r2
 800c498:	460e      	mov	r6, r1
 800c49a:	b921      	cbnz	r1, 800c4a6 <_realloc_r+0x16>
 800c49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	f7ff bc57 	b.w	800bd54 <_malloc_r>
 800c4a6:	b92a      	cbnz	r2, 800c4b4 <_realloc_r+0x24>
 800c4a8:	f7ff fbe8 	bl	800bc7c <_free_r>
 800c4ac:	4625      	mov	r5, r4
 800c4ae:	4628      	mov	r0, r5
 800c4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c4b4:	f000 f81b 	bl	800c4ee <_malloc_usable_size_r>
 800c4b8:	4284      	cmp	r4, r0
 800c4ba:	4607      	mov	r7, r0
 800c4bc:	d802      	bhi.n	800c4c4 <_realloc_r+0x34>
 800c4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c4c2:	d812      	bhi.n	800c4ea <_realloc_r+0x5a>
 800c4c4:	4621      	mov	r1, r4
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	f7ff fc44 	bl	800bd54 <_malloc_r>
 800c4cc:	4605      	mov	r5, r0
 800c4ce:	2800      	cmp	r0, #0
 800c4d0:	d0ed      	beq.n	800c4ae <_realloc_r+0x1e>
 800c4d2:	42bc      	cmp	r4, r7
 800c4d4:	4622      	mov	r2, r4
 800c4d6:	4631      	mov	r1, r6
 800c4d8:	bf28      	it	cs
 800c4da:	463a      	movcs	r2, r7
 800c4dc:	f7ff fbc0 	bl	800bc60 <memcpy>
 800c4e0:	4631      	mov	r1, r6
 800c4e2:	4640      	mov	r0, r8
 800c4e4:	f7ff fbca 	bl	800bc7c <_free_r>
 800c4e8:	e7e1      	b.n	800c4ae <_realloc_r+0x1e>
 800c4ea:	4635      	mov	r5, r6
 800c4ec:	e7df      	b.n	800c4ae <_realloc_r+0x1e>

0800c4ee <_malloc_usable_size_r>:
 800c4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4f2:	1f18      	subs	r0, r3, #4
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	bfbc      	itt	lt
 800c4f8:	580b      	ldrlt	r3, [r1, r0]
 800c4fa:	18c0      	addlt	r0, r0, r3
 800c4fc:	4770      	bx	lr
	...

0800c500 <_init>:
 800c500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c502:	bf00      	nop
 800c504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c506:	bc08      	pop	{r3}
 800c508:	469e      	mov	lr, r3
 800c50a:	4770      	bx	lr

0800c50c <_fini>:
 800c50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c50e:	bf00      	nop
 800c510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c512:	bc08      	pop	{r3}
 800c514:	469e      	mov	lr, r3
 800c516:	4770      	bx	lr
